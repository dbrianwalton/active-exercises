<?xml version='1.0' encoding='utf-8'?>
<!-- Chapters are enclosed with <chapter> tags. Use xml:id to -->
<!-- uniquely identify the chapter.  The @xmlns:xi attribute  -->
<!-- is needed if you use xi:include in this file             -->
<chapter xml:id="ch_markup" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Fill-in-the-Blank Markup</title>
    <section xml:id="section-markup-exercise">
        <title>Fill-in-the-Blank Exercise Markup</title>
        <p>
            Currently, fill-in-the-blank questions in PreTeXt are only implemented as exercises.
            To define a fill-in-the-blank exercise, you will first define a standard PreTeXt <tag>exercise</tag> element with a an optional <tag>title</tag> and required <tag>statement</tag>.
            In the <tag>statement</tag> of your exercise, you will add <tag>fillin</tag> elements.
            Because these exercises are implemented as Runestone components, the <tag>exercise</tag> also requires a <c>@label</c> attribute.
        </p>
        <p>
            Each <tag>fillin</tag> is required to have an attribute <c>@answer</c> that contains a correct answer to the question or <c>@ansobj</c> that gives the name of an object containing an answer. 
            The <tag>fillin</tag> is also required to have a <c>@mode</c> that characterizes the mode by which the submitted answer will be parsed.
            Current possible modes are <c>string</c>, <c>number</c>, and <c>math</c>.
            If the evaluation of the answer is complex, the <tag>fillin</tag> should also have a <c>@name</c> attribute, which is required to follow standard programming variable name format.
            Additionally, a <tag>fillin</tag> has an optional <c>@width</c> attribute that controls the size of the blank in static representations.
        </p>
        <p>
            An interactive fill-in-the-blank exercise requires an <tag>evaluation</tag> element that is a sibling to the corresponding <tag>statement</tag> element.
            Each <tag>fillin</tag> defined in the <tag>statement</tag> will have a corresponding <tag>evaluate</tag> element within the <tag>evaluation</tag>.
            If the <tag>fillin</tag> has a <c>@name</c>, the corresponding <tag>evaluate</tag> should have a matching <c>@name</c> attribute.
            Each <tag>evaluate</tag> will contain a sequence of <tag>test</tag> elements that contain a rule for the test and a feedback message, as explained later.
        </p>
        <p>
            In order to make the exercise dynamic, where elements of the statement and answers are based on randomization, it is also required to include a <tag>setup</tag> element.
            The <tag>setup</tag> element can also be used to initialize any additional Javascript associated with the exercise for more advanced settings.
        </p>
        <p>
            The overall structure for a fill-in-the-blank exercise is illustrated in <xref ref="listing-xml-fitb-overview"/>.
            Additional details will be explained in the following sections.
        </p>
        <listing xml:id="listing-xml-fitb-overview">
        <program>
            <input><![CDATA[ 
            <exercise xml:id='my-id' label='fillin-label'>
            <title/>
            <statement>
                <p>Write your question.</p>
                <p>I say question, you say <fillin mode='string' name='blankName' answer='answer'/>!
            </statement>
            <solution> <!-- currently only used in static representation  -->
            </solution>
            <setup/> <!-- optional setup to make this dynamic -->
            <evaluation> <!-- rules for evaluation and feedback -->
                <evaluate name='blankName'>
                ...
                </evaluate>
            </evaluation>
            </exercise>
            ]]>
            </input>
        </program>
        <caption>Overall XML structure of a fill-in-the-blank exercise.</caption>
        </listing>
    </section>
    <section xml:id="section-simple-evaluation">
    <title>Basic Structure of Evaluation</title>
    <p>
        Before we get to dynamic, randomized versions of exercises, we will first look at the evaluation of answers for simple answers involving text or numbers.
        Each <tag>fillin</tag> can be associated with an arbitrary sequence of <tag>test</tag> elements with associated <tag>evaluate</tag> containing a comparison rule and associated feedback.
        One <tag>test</tag> needs to be identified as testing for correctness, identified with <c>@correct='yes'</c>.
        All other tests are performed in sequence only if the test for correctness fails, allowing feedback specific to various possible mistakes.
        The first of these tests to succeed will be the one that provides its feedback in response to the reader's submission.
    </p>
    <listing xml:id="listing-xml-evaluate-overview">
        <program>
            <input><![CDATA[ 
            <evaluate name='blankName'>
                <test correct='yes'>
                    <comparison/>
                    <feedback>Correct!</feedback>
                </test>
                <test>
                    <comparison/>
                    <feedback>Custom feedback A</feedback>
                </test>
                <test>
                    <comparison/>
                    <feedback>Custom feedback B</feedback>
                </test>
                ...
            </evaluate>
            ]]>
            </input>
        </program>
        <caption>Structure of each <tag>evaluate</tag> element within the <tag>evaluation</tag> block. The <tag>comparison</tag> is replaced by one of the possible comparison elements.</caption>
    </listing>
    <p>
        There are three basic comparisons available<mdash/>number comparison, string comparison with regular expressions, and arbitrary Javascript boolean expressions.
    </p>
    <paragraphs>
        <title>Number Comparison</title>
        <p>
            Number comparison with <tag>numcmp</tag> is used when the reader's submission is expected to be a number.
            The value being tested is provided in the <c>@value</c> attribute.
            If a dynamic object holds the value, this is replaced by a <c>@object</c> attribute containing the name of that object.
            Alternatively, the value provided by the <tag>fillin</tag> <c>@answer</c> attribute can by used by including <c>@use-answer="yes"</c>.
            It may be the case that a range of values are all considered acceptable answers.
            In this case, the range can be provided by specifying a <c>@tolerance</c> from the provided value or by directly specifying <c>@min</c> and <c>@max</c> values.
            Examples of possible <tag>test</tag> definitions are provided in <xref ref="listing-xml-test-numcmp-basic"/>.
        </p>
        <listing xml:id="listing-xml-test-numcmp-basic">
        <program>
            <input><![CDATA[
            <!-- Example A -->
            <test correct="yes">
                <numcmp use-answer="yes"/>
                <feedback>Correct.</feedback>
            </test>
            <!-- Example B -->
            <test>
                <numcmp use-answer="yes" tolerance="0.1"/>
                <feedback>Your answer is within 0.1 of the correct value.</feedback>
            </test>
            <!-- Example C -->
            <test>
                <numcmp value="42"/>
                <feedback>That is a reasonable guess, but no.</feedback>
            </test>
            <!-- Example D -->
            <test>
                <numcmp min="3" max="4"/>
                <feedback>You chose a value between 3 and 4.</feedback>
            </test>
            <!-- Example E -->
            <test>
                <numcmp value="3" tolerance="0.5"/>
                <feedback>You chose a value that rounds to 3.</feedback>
            </test>
            ]]>
            </input>
        </program>
        <caption>Examples of <tag>test</tag> using <tag>numcmp</tag>.</caption>
        </listing>
    </paragraphs>
    <paragraphs>
        <title>String (Text) Comparison</title>
        <p>
            String comparison with <tag>strcmp</tag> is used when the reader's submission is text that can be matched exactly or with a regular expression.
            The content of the element is the matching string or the regular expression that defines valid answers.
            By default, PreTeXt adds regular expression codes to surround the provided answer in order to strip off leading and trailing white space and requires your expression completely matches the remaining text.
            To disable this behavior, include <c>@strip="no"</c> as an attribute.
            If the comparison does not depend on the case of the characters, include <c>@case="insensitive"</c>.
            The corresponding <tag>fillin</tag> should have provided an example of a correct answer with <c>@answer</c>, but this should not be a regular expression.
            To match against that provided string, you may use <c>@use-answer="yes"</c>.
            Examples of possible <tag>test</tag> definitions are provided in <xref ref="listing-xml-test-strcmp-basic"/>.
        </p>
        <listing xml:id="listing-xml-test-strcmp-basic">
        <program>
            <input><![CDATA[
            <!-- Example A -->
            <test correct="yes">
                <strcmp use-answer="yes"/>
                <feedback>Correct.</feedback>
            </test>
            <!-- Example B -->
            <test>
                <strcmp use-answer="yes" case="insensitive"/>
                <feedback>Some of the characters used the wrong case.</feedback>
            </test>
            <!-- Example C -->
            <test>
                <strcmp>[0-9]+</strcmp>
                <feedback>You typed a word made out of digits.</feedback>
            </test>
            <!-- Example D -->
            <test>
                <strcmp use-answer="yes" strip="no"/>
                <feedback>Your answer includes the correct word but has extra text.</feedback>
            </test>
            <!-- Example E -->
            <test>
                <strcmp strip="no" case="insensitive">z.+z</strcmp>
                <feedback>Your answer includes text surrounded by z's.</feedback>
            </test>
            ]]>
            </input>
        </program>
        <caption>Examples of <tag>test</tag> using <tag>strcmp</tag>.</caption>
        </listing>
    </paragraphs>
    <paragraphs>
        <title>Javascript comparison expressions</title>
        <p>
            Additional flexibility is provided by allowing arbitrary user-defined Javascript comparisons using <tag>jscmp</tag>.
            The content of the <tag>jscmp</tag> element needs to be Javascript code that will evaluate to either a Boolean value of <c>true</c> or <c>false</c> or a string that contains the feedback for a true match.
            The function should always return false if there is not a match.
            In addition, because the code is being entered within XML, you will need to take care that special characters are escaped or the code block itself is escaped.
        </p>
        <p>
            The context in which the code is evaluated will be inside an anonymous function in which the scope includes various useful values.
            The user's submitted responses for every named <tag>fillin</tag> will be available in a local variable with that same corresponding name.
            The variable <c>ans</c> will contain the user response for the <tag>fillin</tag> corresponding to the <tag>evaluate</tag> that is being tested.
            There is also an array <c>ans_array</c> that contains the submitted responses in sequence.
            Beware that although the Javascript will be evaluated in the context of an anonymous function, Javascript is not sandboxed and you should avoid any calls that might affect content.
        </p>
        <listing xml:id="listing-xml-test-jscmp-basic">
        <program>
            <input><![CDATA[
            <!-- Example A -->
            <test>
                <jscmp><!-- test if number is in a list -->
                [2, 3, 5, 7, 11, 13, 17, 19].includes(Number(ans))
                </jscmp>
                <feedback>Your response is prime integer less than 20.</feedback>
            </test>
            <!-- Example B -->
            <test>
                <jscmp><!-- find why it fails to be in list --><![CDATA[
                function(){
                const val=Number(ans);
                if (val <= 0) { return "You need to give a positive integer." }
                if (val >= 20) { return "The integer must be less than 20." }
                for (let i=2; i<=3; i++) {
                    if (val % i == 0) { return `Your answer is composite; for example, it is divisible by ${i}.` }
                }
                return false;
                }()]]>]]&gt;<![CDATA[
                </jscmp>
            </test>
            <!-- Example C -->
            <test>
                <jscmp><!-- test if string is palindrome -->
                function(){
                const r1 = new RegExp("^\\w+$");
                var result=r1.test(ans);
                if (result) {
                    let revAns = ans.split("").reverse().join("");
                    result = (ans === revAns);
                }
                return result; 
                }() 
                </jscmp>
                <feedback>Your response is a palindrome.</feedback>
            </test>
            ]]>
            </input>
        </program>
        <caption>Examples of <tag>test</tag> using <tag>jscmp</tag>.</caption>
        </listing>
    </paragraphs>
    <exercises>
        <exercise label="ex-demo-numbers">
            <statement>
                <p>
                    I love <m>\pi</m>. What number am I thinking of, accurate to two decimal places?
                </p>
                <p><fillin width="5" answer="3.14"/></p>
            </statement>
            <evaluation>
                <evaluate>
                    <test correct="yes">
                        <numcmp use-answer="yes"/>
                    </test>
                    <!-- Example B -->
                    <test>
                        <numcmp use-answer="yes" tolerance="0.1"/>
                        <feedback>Your answer is within 0.1 of the value I wanted.</feedback>
                    </test>
                    <!-- Example C -->
                    <test>
                        <numcmp value="42"/>
                        <feedback>That is a reasonable guess, but no.</feedback>
                    </test>
                    <!-- Example D -->
                    <test>
                        <numcmp min="3" max="4"/>
                        <feedback>You chose a value between 3 and 4.</feedback>
                    </test>
                    <!-- Example E -->
                    <test>
                        <numcmp value="3" tolerance="0.5"/>
                        <feedback>You chose a value that rounds to 3.</feedback>
                    </test>
                </evaluate>
            </evaluation>
        </exercise>
        <exercise label="ex-demo-strings">
            <statement>
                <p>
                    The word I'm thinking about is "magic." 
                    What word am I thinking about?
                    <fillin width="5" answer="magic"/>
                </p>
                <p>
                    Try what happens if you mix the case, or type in a number, or include more than the word, or try "pizzazz."
                </p>
            </statement>
            <evaluation>
                <evaluate>
                    <!-- Example A -->
                    <test correct="yes">
                        <strcmp use-answer="yes"/>
                    </test>
                    <!-- Example B -->
                    <test>
                        <strcmp use-answer="yes" case="insensitive"/>
                        <feedback>Some of the characters used the wrong case.</feedback>
                    </test>
                    <!-- Example C -->
                    <test>
                        <strcmp>[0-9]+</strcmp>
                        <feedback>You typed a word made out of digits.</feedback>
                    </test>
                    <!-- Example D -->
                    <test>
                        <strcmp use-answer="yes" strip="no"/>
                        <feedback>Your answer includes the correct word but has extra text.</feedback>
                    </test>
                    <!-- Example E -->
                    <test>
                        <strcmp strip="no" case="insensitive">z.+z</strcmp>
                        <feedback>Your answer includes text surrounded by z's.</feedback>
                    </test>
                </evaluate>
            </evaluation>
        </exercise>
        <exercise label="ex-demo-jscmp-primes">
            <statement>
                <p>
                    What is an example of a prime number less than 20? <fillin width="5" answer="13"/>
                </p>
            </statement>
            <evaluation>
                <evaluate>
                    <test>
                        <jscmp><!-- test if number is in a list -->
                        [2, 3, 5, 7, 11, 13, 17, 19].includes(Number(ans))
                        </jscmp>
                        <feedback>Your response is prime integer less than 20.</feedback>
                    </test>
                    <test>
                        <jscmp><!-- find why it fails to be in list --><![CDATA[
                        function(){
                        const val=Number(ans);
                        if (val <= 0) { return "You need to give a positive integer." }
                        if (val >= 20) { return "The integer must be less than 20." }
                        for (let i=2; i<=3; i++) {
                            if (val % i == 0) { return `Your answer is composite; for example, it is divisible by ${i}.` }
                        }
                        return false;
                        }()]]>
                        </jscmp>
                    </test>
                </evaluate>
            </evaluation>
        </exercise>
        <exercise label="ex-demo-jscmp-palindrome">
            <statement>
                <p>
                    What is an example of a palindrome? <fillin width="5" answer="radar"/>
                </p>
            </statement>
            <evaluation>
                <evaluate>
                    <test correct="yes">
                        <jscmp><!-- test if string is palindrome -->
                        function(){
                            const r1 = new RegExp("^\\w+$");
                            var result=r1.test(ans);
                            if (result) {
                            let revAns = ans.split("").reverse().join("");
                            result = (ans === revAns);
                            }
                            return result; 
                        }() 
                        </jscmp>
                        <feedback>Your response is a palindrome.</feedback>
                    </test>
                    <test>
                        <strcmp strip="no">\w+\s\w+</strcmp>
                        <feedback>Your response needs to be a single word.</feedback>
                    </test>
                </evaluate>
            </evaluation>
        </exercise>
    </exercises>
    </section>
    
    <xi:include href="./sec-basic-setup.ptx" />
    <xi:include href="./sec-dynamic-math.ptx" />
</chapter>
