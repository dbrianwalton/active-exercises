<?xml version="1.0" encoding="UTF-8" ?>
<exercise xml:id="function-tangent-line">
    <title>Find the Tangent Line</title>
    <setup seed="1234">
        <environment>
            <random-seed>1234</random-seed>
        </environment>
        <!-- Create parabola coefficients -->
        <de-object name="a" context="number" mode="random">
            <options distribution="discrete" min="-4" max="5" by="1" nonzero="yes" />
        </de-object>
        <de-object name="b" context="number" mode="random">
            <options distribution="discrete" min="-10" max="10" />
        </de-object>
        <de-object name="c" context="number" mode="random">
            <options distribution="discrete" min="-10" max="10" nonzero="yes" />
        </de-object>
        <!-- Choose a point -->
        <de-object name="x0" context="number" mode="random">
            <options distribution="discrete" min="-3" max="3" />
        </de-object>
        <!-- Create the quadratic function -->
        <de-object name="fFunc" context="formula" mode="formula">{{a}}*x^2+{{b}}*x+{{c}}</de-object>
        <de-object name="fPrime" context="formula" mode="derivative">
            <formula><eval expr="fFunc"/></formula>
            <variable name="x"/>
        </de-object>
        <!-- Calculate values needed -->
        <de-object name="y0" context="number" mode="evaluate">
            <formula><eval expr="fFunc"/></formula>
            <variable name="x"><eval expr="x0"/></variable>
        </de-object>
        <de-object name="m" context="number" mode="evaluate">
            <formula><eval expr="fPrime"/></formula>
            <variable name="x"><eval expr="x0"/></variable>
        </de-object>
        <!-- Tangent Formula -->
        <de-object name="tangentFunc" context="formula" mode="formula">{{m}}*(x-{{x0}})+{{y0}}</de-object>
        <de-object name="errorTangent1" context="formula" mode="formula">{{fPrime}}*(x-{{x0}})+{{y0}}</de-object>
        <postRenderScript>
v.B = v.jsx_graph.create("point", [v.x0.value()+1, 0], { fixed:false });
v.angleTol = 5;  // Tolerance for angle
v.aspect = 10;
v.yTol = 0.1;     // Tolerance for y-value of point
v.jsx_graph.create("line", [v.A, v.jsx_graph.create("point", [v.x0.value()+1, v.y0.value()+v.aspect*Math.tan(Math.atan(v.m.value()/v.aspect)-v.angleTol*Math.PI/180)], {visible:false})], {strokeWidth:1, dash:2});
v.jsx_graph.create("line", [v.A, v.jsx_graph.create("point", [v.x0.value()+1, v.y0.value()+v.aspect*Math.tan(Math.atan(v.m.value()/v.aspect)+v.angleTol*Math.PI/180)], {visible:false})], {strokeWidth:1, dash:2});
v.jsx_graph.create("line", [v.A,v.B]);
v.B2 = v.jsx_graph2.create("point", [()=>v.B.X(), ()=>v.B.Y()]);
v.jsx_graph2.create("functiongraph", [(x) => v.fFunc.evaluate({'x':x}), v.x0.value()-1, v.x0.value()+1]);
v.jsx_graph2.create("line", [v.A2,v.B2]);
v.jsx_graph.addChild(v.jsx_graph2);
        </postRenderScript>
    </setup>
    <statement>
        <p>Given the graph of a function, <m>y=f(x)</m>, move the point labeled <m>B</m> to create an approximate tangent line at <m>x=<eval expr="x0"/></m> and use this to approximate the equation of the tangent line.</p>
        <p>The tangent line is approximated by <m>y=</m> <fillin context="formula" correct="tangentFunc" name="stuTangent" /></p>
        <dynamic-graph sub-id="graph" width="300px" height="300px" mode="jsxgraph">
            <board-settings>
                <xmin>-5</xmin>
                <xmax>5</xmax>
                <ymin>-50</ymin>
                <ymax>50</ymax>
            </board-settings>
            <contents>
                <graph-function>
                    <formula><eval expr="fFunc"/></formula>
                    <variable>
                        <name>x</name>
                        <min>-5</min>
                        <max>5</max>
                    </variable>
                    <style>
                        <color>red</color>
                        <stroke>dashed</stroke>
                        <stroke-width>2</stroke-width>
                    </style>
                </graph-function>
                <graph-point name="A">
                    <coord><eval expr="x0"/></coord>
                    <coord><eval expr="y0"/></coord>
                    <style>
                        <color>red</color>
                    </style>
                </graph-point>
            </contents>
        </dynamic-graph>
        <dynamic-graph sub-id="graph2" width="150px" height="150px" mode="jsxgraph">
            <board-settings>
                <xmin>v.x0.value()-.5</xmin>
                <xmax>v.x0.value()+.5</xmax>
                <ymin>v.y0.value()-5</ymin>
                <ymax>v.y0.value()+5</ymax>
            </board-settings>
            <contents>
                <graph-point name="A2">
                    <coord><eval expr="x0"/></coord>
                    <coord><eval expr="y0"/></coord>
                    <style>
                        <color>red</color>
                    </style>
                </graph-point>
            </contents>
        </dynamic-graph>
    </statement>
    <evaluation>
        <evaluate submit="stuTangent">
        <test correct="yes">
            <raw-js>
( function(){
    let retValue=0, stuSlope = stuTangent.derivative('x');
    if (stuSlope.isConstant) {
        stuSlope = stuSlope.evaluate({'x':x0.value()});
        if ( Math.abs(y0.value() - stuTangent.evaluate({'x':x0.value()})) &lt; yTol &amp;&amp; Math.abs(Math.atan(m.value()/aspect) - Math.atan(stuSlope/aspect)) &lt; (angleTol/180)*Math.PI ) {
            retValue = 1;
        }
    }
    return retValue;
})()
            </raw-js>
            <feedback>Great! That is a close approximation to the tangent line.</feedback>
        </test>
        <test>
            <raw-js>( !stuTangent.derivative('x').isConstant() )</raw-js>
            <feedback>Your formula \\([%= stuTangent.toTeX() %]\\) is not linear.</feedback>
        </test>
        <test>
            <raw-js>function(){ return Math.abs(y0.value() - stuTangent.evaluate({'x':x0.value()})) &gt; yTol;}()</raw-js>
            <feedback>The y-value of your line at the point of interest is too far away from the graph to be considered on the graph.</feedback>
        </test>
        <test>
            <raw-js>function(){ return Math.abs(Math.atan(m.value()/aspect) - Math.atan(stuTangent.derivative('x').evaluate({'x':x0.value()})/aspect)) &gt; (angleTol/180)*Math.PI; }() </raw-js>
            <feedback>The angle of the line determined by its slope is not close enough to the tangent line.</feedback>
        </test>
        <test>
            <eval expr="fPrime"/>
            <feedback>The derivative itself is not the same as the tangent line.</feedback>
        </test>
        </evaluate>
    </evaluation>
    <solution>
        <p>
        Starting with the function <m>f(x) = <eval expr="fFunc"/></m>, we first calculate the derivative <m>f'(x) = <eval expr="fPrime"/></m>. We evaluate <m>f(<eval expr="x0"/>) = <eval expr="y0"/></m> and <m>f'(<eval expr="x0"/>) = <eval expr="m"/></m> to find the <m>y</m>-value at the point and the slope of the tangent line. Then, using the point-slope equation of a line we get the equation of the tangent line as <m>y=<eval expr="tangentFunc"/></m>.
        </p>
    </solution>
</exercise>