<exercise xml:id="ex-decompose-function" label="ex-decompose-function">
  <title>Decompose the Function</title>
  <statement>
    <p>
      Consider the function <me>h(x)=<eval obj="composition"/></me>.
      Find two nontrivial functions <m>f(x)</m> and <m>g(x)</m> so that <m>h(x) = f(g(x))</m>.
    </p>
    <p>
      <m>f(x) = </m> <fillin width="15" ansobj="outerFormula" name="fGiven"/> 
      and <m>g(x)=</m> <fillin width="15" ansobj="innerFormula" name="gGiven"/>
    </p>
  </statement>
  <solution>
    <p>
      Noticing that the expression <m><eval obj="innerFormula"/></m> appears inside parentheses with a power,
      it makes sense to think of that as the inner function, defining <m>g(x) = <eval obj="innerFormula"/></m>.
      The outer function describes what happens to that.
      If we imagined replacing the formula <m><eval obj="innerFormula"/></m> with a box and then call that box our variable <m>x</m>, we find the outer function is given by <m>f(x) = <eval obj="outerFormula"/></m>.
    </p>
    <p>
      This is not the only non-trivial composition. Can you find others?
    </p>
  </solution>
  <setup seed="4321">
    <de-object name="a" context="number">
      <de-random distribution="discrete" min="-4" max="5" by="1" nonzero="yes" />
    </de-object>
    <de-object name="n" context="number">
      <de-random distribution="discrete" min="2" max="5" />
    </de-object>
    <de-object name="b" context="number">
      <de-random distribution="discrete" min="-10" max="10" by="1" nonzero="yes" />
    </de-object>
    <de-object name="c" context="number">
      <de-random distribution="discrete" min="-4" max="5" by="1" nonzero="yes" />
    </de-object>
    <de-object name="d" context="number">
      <de-random distribution="discrete" min="-10" max="10" by="1" nonzero="yes" />
    </de-object>
    <de-object name="outerFormula" context="formula">
      <de-expression mode="formula">a*x^n+b</de-expression>
    </de-object>
    <de-object name="innerFormula" context="formula">
      <de-expression mode="formula">c*x+d</de-expression>
    </de-object>
    <de-object name="identityFunction" context="formula">
      <de-expression mode="formula">x</de-expression>
    </de-object>
    <de-object name="composition" context="formula">
      <de-expression mode="substitution">
        <formula><eval obj="outerFormula"/></formula>
        <variable name="x"><eval obj="innerFormula"/></variable>
      </de-expression>
    </de-object>
  </setup>
  <evaluation answers-coupled="yes">
    <evaluate name="fGiven">
      <test>
        <eval obj="identityFunction"/>
        <feedback><m>f(x)=x</m> is not allowed for nontrivial compositions.</feedback>
      </test>
      <test>
        <not>
            <mathcmp>
                <eval obj="composition"/>
                <de-expression context="formula" mode="substitution">
                    <formula><eval obj="fGiven"/></formula>
                    <variable name="x"><eval obj="gGiven"/></variable>
                </de-expression>
            </mathcmp>
        </not>
        <mathcmp>
          <eval obj="composition"/>
          <de-expression context="formula" mode="substitution">
            <formula><eval obj="gGiven"/></formula>
            <variable name="x"><eval obj="fGiven"/></variable>
          </de-expression>
        </mathcmp>
        <feedback>You have composed in the wrong order.</feedback>
      </test>
    </evaluate>
    <evaluate name="gGiven">
      <test>
        <eval obj="identityFunction"/>
        <feedback><m>g(x)=x</m> is not allowed for nontrivial compositions.</feedback>
      </test>
    </evaluate>
    <evaluate all="yes">
        <test correct="yes">
            <mathcmp>
                <eval obj="composition"/>
                <de-expression context="formula" mode="substitution">
                    <formula><eval obj="fGiven"/></formula>
                    <variable name="x"><eval obj="gGiven"/></variable>
                </de-expression>
            </mathcmp>
            <logic op="not">
                <mathcmp>
                    <eval obj="fGiven"/>
                    <eval obj="identityFunction"/>
                </mathcmp>
            </logic>
            <logic op="not">
                <mathcmp>
                    <eval obj="gGiven"/>
                    <eval obj="identityFunction"/>
                </mathcmp>
            </logic>
            <feedback>Excellent!</feedback>
        </test>
    </evaluate>
  </evaluation>
</exercise>