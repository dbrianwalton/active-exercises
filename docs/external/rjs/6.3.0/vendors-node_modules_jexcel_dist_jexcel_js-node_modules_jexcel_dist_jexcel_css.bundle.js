(self["webpackChunkWebComponents"] = self["webpackChunkWebComponents"] || []).push([["vendors-node_modules_jexcel_dist_jexcel_js-node_modules_jexcel_dist_jexcel_css"],{

/***/ 27010:
/*!********************************************!*\
  !*** ./node_modules/jexcel/dist/jexcel.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {


/**
 * jExcel v3.9.1
 *
 * Author: Paul Hodel <paul.hodel@gmail.com>
 * Website: https://bossanova.uk/jexcel/
 * Description: Create amazing web based spreadsheets.
 *
 * This software is distribute under MIT License
 */

 if (! jSuites && "function" === 'function') {
    var jSuites = __webpack_require__(/*! jsuites */ 45551);
    __webpack_require__(/*! jsuites/dist/jsuites.css */ 41892);
}

;(function (global, factory) {
     true ? module.exports = factory() :
    0;
}(this, (function () {

    'use strict';

// Jexcel core object

var jexcel = (function(el, options) {
    // Create jexcel object
    var obj = {};
    obj.options = {};

    if (! (el instanceof Element || el instanceof HTMLDocument)) {
        console.error('JEXCEL: el is not a valid DOM element');
        return false;
    }

    // Loading default configuration
    var defaults = {
        // External data
        url:null,
        // Data
        data:null,
        // Copy behavior
        copyCompatibility:false,
        // Rows and columns definitions
        rows:[],
        columns:[],
        // Deprected legacy options
        colHeaders:[],
        colWidths:[],
        colAlignments:[],
        nestedHeaders:null,
        // Column width that is used by default
        defaultColWidth:50,
        defaultColAlign:'center',
        // Spare rows and columns
        minSpareRows:0,
        minSpareCols:0,
        // Minimal table dimensions
        minDimensions:[0,0],
        // Allow Export
        allowExport:true,
        // @type {boolean} - Include the header titles on download
        includeHeadersOnDownload:false,
        // Allow column sorting
        columnSorting:true,
        // Allow column dragging
        columnDrag:false,
        // Allow column resizing
        columnResize:true,
        // Allow row resizing
        rowResize:false,
        // Allow row dragging
        rowDrag:true,
        // Allow table edition
        editable:true,
        // Allow new rows
        allowInsertRow:true,
        // Allow new rows
        allowManualInsertRow:true,
        // Allow new columns
        allowInsertColumn:true,
        // Allow new rows
        allowManualInsertColumn:true,
        // Allow row delete
        allowDeleteRow:true,
        // Allow deleting of all rows
        allowDeletingAllRows:false,
        // Allow column delete
        allowDeleteColumn:true,
        // Allow rename column
        allowRenameColumn:true,
        // Allow comments
        allowComments:false,
        // Global wrap
        wordWrap:false,
        // Image options
        imageOptions: null,
        // CSV source
        csv:null,
        // Filename
        csvFileName:'jexcel',
        // Consider first line as header
        csvHeaders:true,
        // Delimiters
        csvDelimiter:',',
        // Disable corner selection
        selectionCopy:true,
        // Merged cells
        mergeCells:{},
        // Create toolbar
        toolbar:null,
        // Allow search
        search:false,
        // Create pagination
        pagination:false,
        paginationOptions:null,
        // Full screen
        fullscreen:false,
        // Lazy loading
        lazyLoading:false,
        loadingSpin:false,
        // Table overflow
        tableOverflow:false,
        tableHeight:'300px',
        tableWidth:null,
        // Meta
        meta: null,
        // Style
        style:null,
        // Execute formulas
        parseFormulas:true,
        autoIncrement:true,
        autoCasting:true,
        // Event handles
        onundo:null,
        onredo:null,
        onload:null,
        onchange:null,
        onbeforechange:null,
        onafterchanges:null,
        onbeforeinsertrow: null,
        oninsertrow:null,
        onbeforeinsertcolumn: null,
        oninsertcolumn:null,
        onbeforedeleterow:null,
        ondeleterow:null,
        onbeforedeletecolumn:null,
        ondeletecolumn:null,
        onmoverow:null,
        onmovecolumn:null,
        onresizerow:null,
        onresizecolumn:null,
        onsort:null,
        onselection:null,
        onpaste:null,
        onbeforepaste:null,
        onmerge:null,
        onfocus:null,
        onblur:null,
        onchangeheader:null,
        oneditionstart:null,
        oneditionend:null,
        onchangestyle:null,
        onchangemeta:null,
        onchangepage:null,
        // Customize any cell behavior
        updateTable:null,
        // Detach the HTML table when calling updateTable
        detachForUpdates: false,
        // Texts
        text:{
            noRecordsFound: 'No records found',
            showingPage: 'Showing page {0} of {1} entries',
            show: 'Show ',
            search: 'Search',
            entries: ' entries',
            columnName: 'Column name',
            insertANewColumnBefore: 'Insert a new column before',
            insertANewColumnAfter: 'Insert a new column after',
            deleteSelectedColumns: 'Delete selected columns',
            renameThisColumn: 'Rename this column',
            orderAscending: 'Order ascending',
            orderDescending: 'Order descending',
            insertANewRowBefore: 'Insert a new row before',
            insertANewRowAfter: 'Insert a new row after',
            deleteSelectedRows: 'Delete selected rows',
            editComments: 'Edit comments',
            addComments: 'Add comments',
            comments: 'Comments',
            clearComments: 'Clear comments',
            copy: 'Copy...',
            paste: 'Paste...',
            saveAs: 'Save as...',
            about: 'About',
            areYouSureToDeleteTheSelectedRows: 'Are you sure to delete the selected rows?',
            areYouSureToDeleteTheSelectedColumns: 'Are you sure to delete the selected columns?',
            thisActionWillDestroyAnyExistingMergedCellsAreYouSure: 'This action will destroy any existing merged cells. Are you sure?',
            thisActionWillClearYourSearchResultsAreYouSure: 'This action will clear your search results. Are you sure?',
            thereIsAConflictWithAnotherMergedCell: 'There is a conflict with another merged cell',
            invalidMergeProperties: 'Invalid merged properties',
            cellAlreadyMerged: 'Cell already merged',
            noCellsSelected: 'No cells selected',
        },
        // About message
        about:"jExcel CE Spreadsheet\nVersion 3.9.1\nAuthor: Paul Hodel <paul.hodel@gmail.com>\nWebsite: https://bossanova.uk/jexcel/v3",
    };

    // Loading initial configuration from user
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            if (property === 'text') {
                obj.options[property] = defaults[property];
                for (var textKey in options[property]) {
                    if (options[property].hasOwnProperty(textKey)){
                        obj.options[property][textKey] = options[property][textKey];
                    }
                }
            } else {
                obj.options[property] = options[property];
            }
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Global elements
    obj.el = el;
    obj.corner = null;
    obj.contextMenu = null;
    obj.textarea = null;
    obj.ads = null;
    obj.content = null;
    obj.table = null;
    obj.thead = null;
    obj.tbody = null;
    obj.rows = [];
    obj.results = null;
    obj.searchInput = null;
    obj.toolbar = null;
    obj.pagination = null;
    obj.pageNumber = null;
    obj.headerContainer = null;
    obj.colgroupContainer = null;

    // Containers
    obj.headers = [];
    obj.records = [];
    obj.history = [];
    obj.formula = [];
    obj.colgroup = [];
    obj.selection = [];
    obj.highlighted  = [];
    obj.selectedCell = null;
    obj.selectedContainer = null;
    obj.style = [];
    obj.data = null;

    // Internal controllers
    obj.cursor = null;
    obj.historyIndex = -1;
    obj.ignoreEvents = false;
    obj.ignoreHistory = false;
    obj.edition = null;
    obj.hashString = null;
    obj.resizing = null;
    obj.dragging = null;

    // Lazy loading
    if (obj.options.lazyLoading == true && (obj.options.tableOverflow == false && obj.options.fullscreen == false)) {
        console.error('JEXCEL: The lazyloading only works when tableOverflow = yes or fullscreen = yes');
        obj.options.lazyLoading = false;
    }
    
    /**
     * Activate/Disable fullscreen 
     * use programmatically : table.fullscreen(); or table.fullscreen(true); or table.fullscreen(false);
     * @Param {boolean} activate
     */
    obj.fullscreen = function(activate) {
        // If activate not defined, get reverse options.fullscreen
        if (activate == null) {
            activate = ! obj.options.fullscreen;
        }

        // If change
        if (obj.options.fullscreen != activate) {
            obj.options.fullscreen = activate;

            // Test LazyLoading conflict
            if (activate == true) {
                el.classList.add('fullscreen');
            } else {
                el.classList.remove('fullscreen');
            }
        } 
    }

    /**
     * Prepare the jexcel table
     * 
     * @Param config
     */
    obj.prepareTable = function() {
        // Loading initial data from remote sources
        var results = [];

        // Number of columns
        var size = obj.options.columns.length;

        if (obj.options.data && typeof(obj.options.data[0]) !== 'undefined') {
            // Data keys
            var keys = Object.keys(obj.options.data[0]);

            if (keys.length > size) {
                size = keys.length;
            }
        }

        // Minimal dimensions
        if (obj.options.minDimensions[0] > size) {
            size = obj.options.minDimensions[0];
        }

        // Requests
        var multiple = [];

        // Preparations
        for (var i = 0; i < size; i++) {
            // Deprected options. You should use only columns
            if (! obj.options.colHeaders[i]) {
                obj.options.colHeaders[i] = '';
            }
            if (! obj.options.colWidths[i]) {
                obj.options.colWidths[i] = obj.options.defaultColWidth;
            }
            if (! obj.options.colAlignments[i]) {
                obj.options.colAlignments[i] = obj.options.defaultColAlign;
            }

            // Default column description
            if (! obj.options.columns[i]) {
                obj.options.columns[i] = { type:'text' };
            } else if (! obj.options.columns[i].type) {
                obj.options.columns[i].type = 'text';
            }
            if (! obj.options.columns[i].name) {
                obj.options.columns[i].name = keys && keys[i] ? keys[i] : i;
            }
            if (! obj.options.columns[i].source) {
                obj.options.columns[i].source = [];
            }
            if (! obj.options.columns[i].options) {
                obj.options.columns[i].options = [];
            }
            if (! obj.options.columns[i].editor) {
                obj.options.columns[i].editor = null;
            }
            if (! obj.options.columns[i].allowEmpty) {
                obj.options.columns[i].allowEmpty = false;
            }
            if (! obj.options.columns[i].title) {
                obj.options.columns[i].title = obj.options.colHeaders[i] ? obj.options.colHeaders[i] : '';
            }
            if (! obj.options.columns[i].width) {
                obj.options.columns[i].width = obj.options.colWidths[i] ? obj.options.colWidths[i] : obj.options.defaultColWidth;
            }
            if (! obj.options.columns[i].align) {
                obj.options.columns[i].align = obj.options.colAlignments[i] ? obj.options.colAlignments[i] : 'center';
            }

            // Pre-load initial source for json autocomplete
            if (obj.options.columns[i].type == 'autocomplete' || obj.options.columns[i].type == 'dropdown') {
                // if remote content
                if (obj.options.columns[i].url) {
                    multiple.push(jSuites.ajax({
                        url: obj.options.columns[i].url,
                        index: i,
                        method: 'GET',
                        dataType: 'json',
                        multiple: multiple,
                        success: function(data) {
                            var source = [];
                            for (var i = 0; i < data.length; i++) {
                                obj.options.columns[this.index].source.push(data[i]);
                            }
                        },
                        complete: function() {
                            obj.createTable();
                        }
                    }));
                }
            } else if (obj.options.columns[i].type == 'calendar') {
                // Default format for date columns
                if (! obj.options.columns[i].options.format) {
                    obj.options.columns[i].options.format = 'DD/MM/YYYY';
                }
            }
        }

        // On complete
        if (! multiple.length) {
            obj.createTable();
        }
    }

    obj.createTable = function() {
        // Elements
        obj.table = document.createElement('table');
        obj.thead = document.createElement('thead');
        obj.tbody = document.createElement('tbody');

        // Create headers controllers
        obj.headers = [];
        obj.colgroup = [];

        // Create table container
        obj.content = document.createElement('div');
        obj.content.classList.add('jexcel_content');

        // Create toolbar object
        obj.toolbar = document.createElement('div');
        obj.toolbar.classList.add('jexcel_toolbar');

        // Search
        var searchContainer = document.createElement('div');
        var searchText = document.createTextNode((obj.options.text.search) + ': ');
        obj.searchInput = document.createElement('input');
        obj.searchInput.classList.add('jexcel_search');
        searchContainer.appendChild(searchText);
        searchContainer.appendChild(obj.searchInput);
        obj.searchInput.onfocus = function() {
            obj.resetSelection();
        }

        // Pagination select option
        var paginationUpdateContainer = document.createElement('div');

        if (obj.options.pagination > 0 && obj.options.paginationOptions && obj.options.paginationOptions.length > 0) {
            obj.paginationDropdown = document.createElement('select');
            obj.paginationDropdown.classList.add('jexcel_pagination_dropdown');
            obj.paginationDropdown.onchange = function() {
                obj.options.pagination = parseInt(this.value);
                obj.page(0);
            }

            for (var i = 0; i < obj.options.paginationOptions.length; i++) {
                var temp = document.createElement('option');
                temp.value = obj.options.paginationOptions[i];
                temp.innerHTML = obj.options.paginationOptions[i];
                obj.paginationDropdown.appendChild(temp);
            }

            paginationUpdateContainer.appendChild(document.createTextNode(obj.options.text.show));
            paginationUpdateContainer.appendChild(obj.paginationDropdown);
            paginationUpdateContainer.appendChild(document.createTextNode(obj.options.text.entries));
        }

        // Filter and pagination container
        obj.filter = document.createElement('div');
        obj.filter.classList.add('jexcel_filter');
        obj.filter.appendChild(paginationUpdateContainer);
        obj.filter.appendChild(searchContainer);

        // Colsgroup
        obj.colgroupContainer = document.createElement('colgroup');
        var tempCol = document.createElement('col');
        tempCol.setAttribute('width', '50');
        obj.colgroupContainer.appendChild(tempCol);

        // Nested
        if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {
            // Flexible way to handle nestedheaders
            if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {
                for (var j = 0; j < obj.options.nestedHeaders.length; j++) {
                    obj.thead.appendChild(obj.createNestedHeader(obj.options.nestedHeaders[j]));
                }
            } else {
                obj.thead.appendChild(obj.createNestedHeader(obj.options.nestedHeaders));
            }
        }

        // Row
        obj.headerContainer = document.createElement('tr');
        var tempCol = document.createElement('td');
        tempCol.classList.add('jexcel_selectall');
        obj.headerContainer.appendChild(tempCol);

        for (var i = 0; i < obj.options.columns.length; i++) {
            // Create header
            obj.createCellHeader(i);
            // Append cell to the container
            obj.headerContainer.appendChild(obj.headers[i]);
            obj.colgroupContainer.appendChild(obj.colgroup[i]);
        }

        obj.thead.appendChild(obj.headerContainer);

        // Content table
        obj.table = document.createElement('table');
        obj.table.classList.add('jexcel');
        obj.table.setAttribute('cellpadding', '0');
        obj.table.setAttribute('cellspacing', '0');
        obj.table.setAttribute('unselectable', 'yes');
        obj.table.setAttribute('onselectstart', 'return false');
        obj.table.appendChild(obj.colgroupContainer);
        obj.table.appendChild(obj.thead);
        obj.table.appendChild(obj.tbody);

        // Spreadsheet corner
        obj.corner = document.createElement('div');
        obj.corner.className = 'jexcel_corner';
        obj.corner.setAttribute('unselectable', 'on');
        obj.corner.setAttribute('onselectstart', 'return false');

        if (obj.options.selectionCopy == false) {
            obj.corner.style.display = 'none';
        }

        // Textarea helper
        obj.textarea = document.createElement('textarea');
        obj.textarea.className = 'jexcel_textarea';
        obj.textarea.id = 'jexcel_textarea';
        obj.textarea.tabIndex = '-1';

        // Contextmenu container
        obj.contextMenu = document.createElement('div');
        obj.contextMenu.className = 'jexcel_contextmenu';

        // Create element
        jSuites.contextmenu(obj.contextMenu, {
            onclick:function() {
                obj.contextMenu.contextmenu.close(false);
            }
        });

        // Powered by jExcel
        var ads = document.createElement('a');
        ads.setAttribute('href', 'https://bossanova.uk/jexcel/');
        obj.ads = document.createElement('div');
        obj.ads.className = 'jexcel_about';
        if (typeof(sessionStorage) !== "undefined" && ! sessionStorage.getItem('jexcel')) {
            sessionStorage.setItem('jexcel', true);
            var img = document.createElement('img');
            img.src = '//bossanova.uk/jexcel/logo.png';
            ads.appendChild(img);
        }
        var span = document.createElement('span');
        span.innerHTML = 'Jexcel spreadsheet';
        ads.appendChild(span);
        obj.ads.appendChild(ads);

        // Create table container TODO: frozen columns
        var container = document.createElement('div');
        container.classList.add('jexcel_table');

        // Pagination
        obj.pagination = document.createElement('div');
        obj.pagination.classList.add('jexcel_pagination');
        var paginationInfo = document.createElement('div');
        var paginationPages = document.createElement('div');
        obj.pagination.appendChild(paginationInfo);
        obj.pagination.appendChild(paginationPages);

        // Hide pagination if not in use
        if (! obj.options.pagination) {
            obj.pagination.style.display = 'none';
        }

        // Append containers to the table
        if (obj.options.search == true) {
            el.appendChild(obj.filter);
        }

        // Elements
        obj.content.appendChild(obj.table);
        obj.content.appendChild(obj.corner);
        obj.content.appendChild(obj.textarea);

        el.appendChild(obj.toolbar);
        el.appendChild(obj.content);
        el.appendChild(obj.pagination);
        el.appendChild(obj.contextMenu);
        el.appendChild(obj.ads);
        el.classList.add('jexcel_container');

        // Create toolbar
        if (obj.options.toolbar && obj.options.toolbar.length) {
            obj.createToolbar();
        }

        // Fullscreen
        if (obj.options.fullscreen == true) {
            el.classList.add('fullscreen');
        } else {
            // Overflow
            if (obj.options.tableOverflow == true) {
                if (obj.options.tableHeight) {
                    obj.content.style['overflow-y'] = 'auto';
                    obj.content.style.maxHeight = obj.options.tableHeight;
                }
                if (obj.options.tableWidth) {
                    obj.content.style['overflow-x'] = 'auto';
                    obj.content.style.width = obj.options.tableWidth;
                }
            }
        }

        // With toolbars
        if (obj.options.tableOverflow != true && obj.options.toolbar) {
            el.classList.add('with-toolbar');
        }

        // Actions
        if (obj.options.columnDrag == true) {
            obj.thead.classList.add('draggable');
        }
        if (obj.options.columnResize == true) {
            obj.thead.classList.add('resizable');
        }
        if (obj.options.rowDrag == true) {
            obj.tbody.classList.add('draggable');
        }
        if (obj.options.rowResize == true) {
            obj.tbody.classList.add('resizable');
        }

        // Load data
        obj.setData();

        // Style
        if (obj.options.style) {
            obj.setStyle(obj.options.style, null, null, 1, 1);
        }
    }

    /**
     * Refresh the data
     * 
     * @return void
     */
    obj.refresh = function() {
        if (obj.options.url) {
            // Loading
            if (obj.options.loadingSpin == true) {
                jSuites.loading.show();
            }

            jSuites.ajax({
                url: obj.options.url,
                method: 'GET',
                dataType: 'json',
                success: function(result) {
                    // Data
                    obj.options.data = (result.data) ? result.data : result;
                    // Prepare table
                    obj.setData();
                    // Hide spin
                    if (obj.options.loadingSpin == true) {
                        jSuites.loading.hide();
                    }
                }
            });
        } else {
            obj.setData();
        }
    }

    /**
     * Set data
     * 
     * @param array data In case no data is sent, default is reloaded
     * @return void
     */
    obj.setData = function(data) {
        // Update data
        if (data) {
            if (typeof(data) == 'string') {
                data = JSON.parse(data);
            }

            obj.options.data = data;
        }

        // Data
        if (! obj.options.data) {
            obj.options.data = [];
        }

        // Prepare data
        if (obj.options.data) {
            var data = [];
            for (var j = 0; j < obj.options.data.length; j++) {
                var row = [];
                for (var i = 0; i < obj.options.columns.length; i++) {
                    row[i] = obj.options.data[j][obj.options.columns[i].name];
                }
                data.push(row);
            }

            obj.options.data = data;
        }

        // Adjust minimal dimensions
        var j = 0;
        var i = 0;
        var size_i = obj.options.columns.length;
        var size_j = obj.options.data.length;
        var min_i = obj.options.minDimensions[0];
        var min_j = obj.options.minDimensions[1];
        var max_i = min_i > size_i ? min_i : size_i;
        var max_j = min_j > size_j ? min_j : size_j;

        for (j = 0; j < max_j; j++) {
            for (i = 0; i < max_i; i++) {
                if (obj.options.data[j] == undefined) {
                    obj.options.data[j] = [];
                }

                if (obj.options.data[j][i] == undefined) {
                    obj.options.data[j][i] = '';
                }
            }
        }

        // Reset containers
        obj.rows = [];
        obj.results = null;
        obj.records = [];
        obj.history = [];

        // Reset internal controllers
        obj.historyIndex = -1;

        // Reset data
        obj.tbody.innerHTML = '';

        // Lazy loading
        if (obj.options.lazyLoading == true) {
            // Load only 100 records
            var startNumber = 0
            var finalNumber = obj.options.data.length < 100 ? obj.options.data.length : 100;

            if (obj.options.pagination) {
                obj.options.pagination = false;
                console.error('JEXCEL: Pagination will be disable due the lazyLoading');
            }
        } else if (obj.options.pagination) {
            // Pagination
            if (! obj.pageNumber) {
                obj.pageNumber = 0;
            }
            var quantityPerPage = obj.options.pagination;
            startNumber = (obj.options.pagination * obj.pageNumber);
            finalNumber = (obj.options.pagination * obj.pageNumber) + obj.options.pagination;

            if (obj.options.data.length < finalNumber) {
                finalNumber = obj.options.data.length;
            }
        } else {
            var startNumber = 0;
            var finalNumber = obj.options.data.length;
        }

        // Append nodes to the HTML
        for (j = 0; j < obj.options.data.length; j++) {
            // Create row
            var tr = obj.createRow(j, obj.options.data[j]);
            // Append line to the table
            if (j >= startNumber && j < finalNumber) {
                obj.tbody.appendChild(tr);
            }
        }

        if (obj.options.lazyLoading == true) {
            // Do not create pagination with lazyloading activated
        } else if (obj.options.pagination) {
            obj.updatePagination();
        }

        // Merge cells
        if (obj.options.mergeCells) {
            var keys = Object.keys(obj.options.mergeCells);
            for (var i = 0; i < keys.length; i++) {
                var num = obj.options.mergeCells[keys[i]];
                obj.setMerge(keys[i], num[0], num[1], 1);
            }
        }

        // Updata table with custom configurations if applicable
        obj.updateTable();

        // Onload
        if (! obj.ignoreEvents) {
            if (typeof(obj.options.onload) == 'function') {
                obj.options.onload(el, obj);
            }
        }
    }

    /**
     * Get the whole table data
     * 
     * @param bool get highlighted cells only
     * @return array data
     */
        obj.getData = function(highlighted, dataOnly) {
        // Control vars
        var dataset = [];
        var px = 0;
        var py = 0;

        // Data type
        var dataType = dataOnly == true || obj.options.copyCompatibility == false ? true : false;

        // Column and row length
        var x = obj.options.columns.length
        var y = obj.options.data.length

        // Go through the columns to get the data
        for (var j = 0; j < y; j++) {
            px = 0;
            for (var i = 0; i < x; i++) {
                // Cell selected or fullset
                if (! highlighted || obj.records[j][i].classList.contains('highlight')) {
                    // Get value
                    if (! dataset[py]) {
                        dataset[py] = [];
                    }
                    if (! dataType) {
                        dataset[py][px] = obj.records[j][i].innerHTML;
                    } else {
                        dataset[py][px] = obj.options.data[j][i];
                    }
                    px++;
                }
            }
            if (px > 0) {
                py++;
            }
       }

       return dataset;
    }

    /**
     * Get the whole table data
     * 
     * @param integer row number
     * @return string value
     */
    obj.getJson = function(highlighted) {
        // Control vars
        var data = [];

        // Column and row length
        var x = obj.options.columns.length
        var y = obj.options.data.length

        // Go through the columns to get the data
        for (var j = 0; j < y; j++) {
            var row = null;
            for (var i = 0; i < x; i++) {
                if (! highlighted || obj.records[j][i].classList.contains('highlight')) {
                    if (row == null) {
                        row = {};
                    }
                    row[obj.options.columns[i].name] = obj.options.data[j][i];
                }
            }

            if (row != null) {
                data.push(row);
            }
       }

       return data;
    }

    /**
     * Get a row data by rowNumber
     */
    obj.getRowData = function(rowNumber) {
        return obj.options.data[rowNumber];
    }

    /**
     * Set a row data by rowNumber
     */
    obj.setRowData = function(rowNumber, data) {
        for (var i = 0; i < obj.headers.length; i++) {
            // Update cell
            var columnName = jexcel.getColumnNameFromId([ i, rowNumber ]);
            // Set value
            if (data[i] != null) {
                obj.setValue(columnName, data[i]);
            }
        }
    }

    /**
     * Get a column data by columnNumber
     */
    obj.getColumnData = function(columnNumber) {
        var dataset = [];
        // Go through the rows to get the data
        for (var j = 0; j < obj.options.data.length; j++) {
            dataset.push(obj.options.data[j][columnNumber]);
        }
        return dataset;
    }

    /**
     * Set a column data by colNumber
     */
    obj.setColumnData = function(colNumber, data) {
        for (var j = 0; j < obj.rows.length; j++) {
            // Update cell
            var columnName = jexcel.getColumnNameFromId([ colNumber, j ]);
            // Set value
            if (data[j] != null) {
                obj.setValue(columnName, data[j]);
            }
        }
    }

    /**
     * Create row
     */
    obj.createRow = function(j, data) {
        // Create container
        if (! obj.records[j]) {
            obj.records[j] = [];
        }
        // Default data
        if (! data) {
            var data = obj.options.data[j];
        }
        // New line of data to be append in the table
        obj.rows[j] = document.createElement('tr');
        obj.rows[j].setAttribute('data-y', j);
        // Definitions
        if (obj.options.rows[j]) {
            if (obj.options.rows[j].height) {
                obj.rows[j].style.height = obj.options.rows[j].height;
            }
        }
        // Row number label
        var td = document.createElement('td');
        td.innerHTML = parseInt(j + 1);
        td.setAttribute('data-y', j);
        td.className = 'jexcel_row';
        obj.rows[j].appendChild(td);

        // Data columns
        for (i = 0; i < obj.options.columns.length; i++) {
            // New column of data to be append in the line
            obj.records[j][i] = obj.createCell(i, j, data[i]);
            // Add column to the row
            obj.rows[j].appendChild(obj.records[j][i]);
        }

        // Add row to the table body
        return obj.rows[j];
    }

    /**
     * Create cell
     */
    obj.createCell = function(i, j, value) {
        // Create cell and properties
        var td = document.createElement('td');
        td.setAttribute('data-x', i);
        td.setAttribute('data-y', j);
        // Hidden column
        if (obj.options.columns[i].type == 'hidden') {
            td.style.display = 'none';
            td.innerHTML = value;
        } else if (obj.options.columns[i].type == 'checkbox' || obj.options.columns[i].type == 'radio') {
            // Create input
            var element = document.createElement('input');
            element.type = obj.options.columns[i].type;
            element.name = 'c' + i;
            element.checked = (value == 1 || value == true || value == 'true') ? true : false;
            element.onclick = function() {
                obj.setValue(td, this.checked);
            }

            if (obj.options.columns[i].readOnly == true) {
                element.setAttribute('disabled', 'disabled');
            }

            // Append to the table
            td.appendChild(element);
            // Make sure the values are correct
            obj.options.data[j][i] = element.checked;
        } else if (obj.options.columns[i].type == 'calendar') {
            // Try formatted date
            var formatted = jSuites.calendar.extractDateFromString(value, obj.options.columns[i].options.format);
            // Create calendar cell
            td.innerHTML = jSuites.calendar.getDateString(formatted ? formatted : value, obj.options.columns[i].options.format);
        } else if (obj.options.columns[i].type == 'dropdown' || obj.options.columns[i].type == 'autocomplete') {
            // Create dropdown cell
            td.classList.add('jexcel_dropdown');
            td.innerHTML = obj.getDropDownValue(i, value);
        } else if (obj.options.columns[i].type == 'color') {
            if (obj.options.columns[i].render == 'square') {
                var color = document.createElement('div');
                color.className = 'color';
                color.style.backgroundColor = value;
                td.appendChild(color);
            } else {
                td.style.color = value;
                td.innerHTML = value;
            }
        } else if (obj.options.columns[i].type == 'image') {
            if (value && value.substr(0, 10) == 'data:image') {
                var img = document.createElement('img');
                img.src = value;
                td.appendChild(img);
            }
        } else {
            if ((''+value).substr(0,1) == '=' && obj.options.parseFormulas == true) {
                value = obj.executeFormula(value, i, j)
            }
            if (obj.options.columns[i].mask) {
                var decimal = obj.options.columns[i].decimal || '.';
                value = '' + jSuites.mask.run(value, obj.options.columns[i].mask, decimal);
            }

            td.innerHTML = value;
        }

        // Readonly
        if (obj.options.columns[i].readOnly == true) {
            td.className = 'readonly';
        }

        // Text align
        var colAlign = obj.options.columns[i].align ? obj.options.columns[i].align : 'center';
        td.style.textAlign = colAlign;

        // Wrap option
        if (obj.options.columns[i].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[i].wordWrap == true || td.innerHTML.length > 200)) {
            td.style.whiteSpace = 'pre-wrap';
        }

        // Overflow
        if (i > 0) {
            if (value || td.innerHTML) {
                obj.records[j][i-1].style.overflow = 'hidden';
            } else {
                if (i == obj.options.columns.length - 1) {
                    td.style.overflow = 'hidden';
                }
            }
        }

        return td;
    }

    obj.createCellHeader = function(colNumber) {
        // Create col global control
        var colWidth = obj.options.columns[colNumber].width ? obj.options.columns[colNumber].width : obj.options.defaultColWidth;
        var colAlign = obj.options.columns[colNumber].align ? obj.options.columns[colNumber].align : obj.options.defaultColAlign;

        // Create header cell
        obj.headers[colNumber] = document.createElement('td');
        obj.headers[colNumber].innerHTML = obj.options.columns[colNumber].title ? obj.options.columns[colNumber].title : jexcel.getColumnName(colNumber);
        obj.headers[colNumber].setAttribute('data-x', colNumber);
        obj.headers[colNumber].style.textAlign = colAlign;
        if (obj.options.columns[colNumber].title) {
            obj.headers[colNumber].setAttribute('title', obj.options.columns[colNumber].title);
        }

        // Width control
        obj.colgroup[colNumber] = document.createElement('col');
        obj.colgroup[colNumber].setAttribute('width', colWidth);

        // Hidden column
        if (obj.options.columns[colNumber].type == 'hidden') {
            obj.headers[colNumber].style.display = 'none';
            obj.colgroup[colNumber].style.display = 'none';
        }
    }

    obj.createNestedHeader = function(nestedInformation) {
        var tr = document.createElement('tr');
        tr.classList.add('jexcel_nested');
        var td = document.createElement('td');
        tr.appendChild(td);

        var headerIndex = 0;
        for (var i = 0; i < nestedInformation.length; i++) {
            // Default values
            if (! nestedInformation[i].colspan) {
                nestedInformation[i].colspan = 1;
            }
            if (! nestedInformation[i].align) {
                nestedInformation[i].align = 'center';
            }
            if (! nestedInformation[i].title) {
                nestedInformation[i].title = '';
            }

            // Number of columns
            var numberOfColumns = nestedInformation[i].colspan;

            // Classes container
            var column = [];
            // Header classes for this cell
            for (var x = 0; x < numberOfColumns; x++) {
                if (obj.options.columns[headerIndex] && obj.options.columns[headerIndex].type == 'hidden') {
                    numberOfColumns++;
                }
                column.push(headerIndex);
                headerIndex++;
            }

            // Created the nested cell
            var td = document.createElement('td');
            td.setAttribute('data-column', column.join(','));
            td.setAttribute('colspan', nestedInformation[i].colspan);
            td.setAttribute('align', nestedInformation[i].align);
            td.innerHTML = nestedInformation[i].title;
            tr.appendChild(td);
        }

        return tr;
    }

    /**
     * Create toolbar
     */
    obj.createToolbar = function(toolbar) {
        if (toolbar) {
            obj.options.toolbar = toolbar;
        } else {
            var toolbar = obj.options.toolbar;
        }

        for (var i = 0; i < toolbar.length; i++) {
            if (toolbar[i].type == 'i') {
                var toolbarItem = document.createElement('i');
                toolbarItem.classList.add('jexcel_toolbar_item');
                toolbarItem.classList.add('material-icons');
                toolbarItem.setAttribute('data-k', toolbar[i].k);
                toolbarItem.setAttribute('data-v', toolbar[i].v);
                // Tooltip
                if (toolbar[i].tooltip) {
                    toolbarItem.setAttribute('title', toolbar[i].tooltip);
                }
                // Handle click
                if (toolbar[i].onclick && typeof(toolbar[i].onclick)) {
                    toolbarItem.onclick = toolbar[i].onclick;
                } else {
                    toolbarItem.onclick = function() {
                        var k = this.getAttribute('data-k');
                        var v = this.getAttribute('data-v');
                        obj.setStyle(obj.highlighted, k, v);
                    }
                }
                // Append element
                toolbarItem.innerHTML = toolbar[i].content;
                obj.toolbar.appendChild(toolbarItem);
            } else if (toolbar[i].type == 'select') {
               var toolbarItem = document.createElement('select');
               toolbarItem.classList.add('jexcel_toolbar_item');
               toolbarItem.setAttribute('data-k', toolbar[i].k);
               // Tooltip
               if (toolbar[i].tooltip) {
                   toolbarItem.setAttribute('title', toolbar[i].tooltip);
               }
               // Handle onchange
               if (toolbar[i].onchange && typeof(toolbar[i].onchange)) {
                   toolbarItem.onchange = toolbar[i].onchange;
               } else {
                   toolbarItem.onchange = function() {
                       var k = this.getAttribute('data-k');
                       obj.setStyle(obj.highlighted, k, this.value);
                   }
               }
               // Add options to the dropdown
               for(var j = 0; j < toolbar[i].v.length; j++) {
                    var toolbarDropdownOption = document.createElement('option');
                    toolbarDropdownOption.value = toolbar[i].v[j];
                    toolbarDropdownOption.innerHTML = toolbar[i].v[j];
                    toolbarItem.appendChild(toolbarDropdownOption);
               }
               obj.toolbar.appendChild(toolbarItem);
            } else if (toolbar[i].type == 'color') {
                 var toolbarItem = document.createElement('i');
                 toolbarItem.classList.add('jexcel_toolbar_item');
                 toolbarItem.classList.add('material-icons');
                 toolbarItem.setAttribute('data-k', toolbar[i].k);
                 toolbarItem.setAttribute('data-v', '');
                 // Tooltip
                 if (toolbar[i].tooltip) {
                     toolbarItem.setAttribute('title', toolbar[i].tooltip);
                 }
                 obj.toolbar.appendChild(toolbarItem);
                 toolbarItem.onclick = function() {
                     this.color.open();
                 }
                 toolbarItem.innerHTML = toolbar[i].content;
                 jSuites.color(toolbarItem, {
                     onchange:function(o, v) {
                         var k = o.getAttribute('data-k');
                         obj.setStyle(obj.highlighted, k, v);
                     }
                 });
            }
        }
    }

    /**
     * Merge cells
     * @param cellName
     * @param colspan
     * @param rowspan
     * @param ignoreHistoryAndEvents
     */
    obj.setMerge = function(cellName, colspan, rowspan, ignoreHistoryAndEvents) {
        var test = false;

        if (! cellName) {
            if (! obj.highlighted.length) {
                alert(obj.options.text.noCellsSelected);
                return null;
            } else {
                var x1 = parseInt(obj.highlighted[0].getAttribute('data-x'));
                var y1 = parseInt(obj.highlighted[0].getAttribute('data-y'));
                var x2 = parseInt(obj.highlighted[obj.highlighted.length-1].getAttribute('data-x'));
                var y2 = parseInt(obj.highlighted[obj.highlighted.length-1].getAttribute('data-y'));
                var cellName = jexcel.getColumnNameFromId([ x1, y1 ]);
                var colspan = (x2 - x1) + 1;
                var rowspan = (y2 - y1) + 1;
            }
        }

        var cell = jexcel.getIdFromColumnName(cellName, true);

        if (obj.options.mergeCells[cellName]) {
            if (obj.records[cell[1]][cell[0]].getAttribute('data-merged')) {
                test = obj.options.text.cellAlreadyMerged;
            }
        } else if ((! colspan || colspan < 2) && (! rowspan || rowspan < 2)) {
            test = obj.options.text.invalidMergeProperties;
        } else {
            var cells = [];
            for (var j = cell[1]; j < cell[1] + rowspan; j++) {
                for (var i = cell[0]; i < cell[0] + colspan; i++) {
                    var columnName = jexcel.getColumnNameFromId([i, j]);
                    if (obj.records[j][i].getAttribute('data-merged')) {
                        test = obj.options.text.thereIsAConflictWithAnotherMergedCell;
                    }
                }
            }
        }

        if (test) {
            alert(test);
        } else {
            // Add property
            if (colspan > 1) {
                obj.records[cell[1]][cell[0]].setAttribute('colspan', colspan);
            } else {
                colspan = 1;
            }
            if (rowspan > 1) {
                obj.records[cell[1]][cell[0]].setAttribute('rowspan', rowspan);
            } else {
                rowspan = 1;
            }
            // Keep links to the existing nodes
            obj.options.mergeCells[cellName] = [ colspan, rowspan, [] ];
            // Mark cell as merged
            obj.records[cell[1]][cell[0]].setAttribute('data-merged', 'true');
            // Overflow
            obj.records[cell[1]][cell[0]].style.overflow = 'hidden';
            // History data
            var data = [];
            // Adjust the nodes
            for (var y = cell[1]; y < cell[1] + rowspan; y++) {
                for (var x = cell[0]; x < cell[0] + colspan; x++) {
                    if (! (cell[0] == x && cell[1] == y)) {
                        data.push(obj.options.data[y][x]);
                        obj.updateCell(x, y, '', true);
                        obj.options.mergeCells[cellName][2].push(obj.records[y][x]);
                        obj.records[y][x].style.display = 'none';
                        obj.records[y][x] = obj.records[cell[1]][cell[0]];
                    }
                }
            }
            // In the initialization is not necessary keep the history
            obj.updateSelection(obj.records[cell[1]][cell[0]]);

            if (! ignoreHistoryAndEvents) {
                obj.setHistory({
                    action:'setMerge',
                    column:cellName,
                    colspan:colspan,
                    rowspan:rowspan,
                    data:data,
                });

                if (typeof(obj.options.onmerge) == 'function') {
                    obj.options.onmerge(el, cellName, colspan, rowspan);
                }
            }
        }
    }

    /**
     * Merge cells
     * @param cellName
     * @param colspan
     * @param rowspan
     * @param ignoreHistoryAndEvents
     */
    obj.getMerge = function(cellName) {
        var data = {};
        if (cellName) {
            if (obj.options.mergeCells[cellName]) {
                data = [ obj.options.mergeCells[cellName][0], obj.options.mergeCells[cellName][1] ];
            } else {
                data = null;
            }
        } else {
            if (obj.options.mergeCells) {
                var mergedCells = obj.options.mergeCells;
                var keys = Object.keys(obj.options.mergeCells);
                for (var i = 0; i < keys.length; i++) {
                    data[keys[i]] = [ obj.options.mergeCells[keys[i]][0], obj.options.mergeCells[keys[i]][1] ];
                }
            }
        }

        return data;
    }

    /**
     * Remove merge by cellname
     * @param cellName
     */
    obj.removeMerge = function(cellName, data, keepOptions) {
        if (obj.options.mergeCells[cellName]) {
            var cell = jexcel.getIdFromColumnName(cellName, true);
            obj.records[cell[1]][cell[0]].removeAttribute('colspan');
            obj.records[cell[1]][cell[0]].removeAttribute('rowspan');
            obj.records[cell[1]][cell[0]].removeAttribute('data-merged');
            var info = obj.options.mergeCells[cellName];

            var index = 0;
            for (var j = 0; j < info[1]; j++) {
                for (var i = 0; i < info[0]; i++) {
                    if (j > 0 || i > 0) {
                        obj.records[cell[1]+j][cell[0]+i] = info[2][index];
                        obj.records[cell[1]+j][cell[0]+i].style.display = '';
                        // Recover data
                        if (data && data[index]) {
                            obj.updateCell(cell[0]+i, cell[1]+j, data[index]);
                        }
                        index++;
                    }
                }
            }

            // Update selection
            obj.updateSelection(obj.records[cell[1]][cell[0]], obj.records[cell[1]+j-1][cell[0]+i-1]);

            if (! keepOptions) {
                delete(obj.options.mergeCells[cellName]);
            }
        }
    }

    /**
     * Remove all merged cells
     */
    obj.destroyMerged = function(keepOptions) {
        // Remove any merged cells
        if (obj.options.mergeCells) {
            var mergedCells = obj.options.mergeCells;
            var keys = Object.keys(obj.options.mergeCells);
            for (var i = 0; i < keys.length; i++) {
                obj.removeMerge(keys[i], null, keepOptions);
            }
        }
    }

    /**
     * Is column merged
     */
    obj.isColMerged = function(x, insertBefore) {
        var cols = [];
        // Remove any merged cells
        if (obj.options.mergeCells) {
            var keys = Object.keys(obj.options.mergeCells);
            for (var i = 0; i < keys.length; i++) {
                var info = jexcel.getIdFromColumnName(keys[i], true);
                var colspan = obj.options.mergeCells[keys[i]][0];
                var x1 = info[0];
                var x2 = info[0] + (colspan > 1 ? colspan - 1 : 0);

                if (insertBefore == null) {
                    if ((x1 <= x && x2 >= x)) {
                        cols.push(keys[i]);
                    }
                } else {
                    if (insertBefore) {
                        if ((x1 < x && x2 >= x)) {
                            cols.push(keys[i]);
                        }
                    } else {
                        if ((x1 <= x && x2 > x)) {
                            cols.push(keys[i]);
                        }
                    }
                }
            }
        }

        return cols;
    }

    /**
     * Is rows merged
     */
    obj.isRowMerged = function(y, insertBefore) {
        var rows = [];
        // Remove any merged cells
        if (obj.options.mergeCells) {
            var keys = Object.keys(obj.options.mergeCells);
            for (var i = 0; i < keys.length; i++) {
                var info = jexcel.getIdFromColumnName(keys[i], true);
                var rowspan = obj.options.mergeCells[keys[i]][1];
                var y1 = info[1];
                var y2 = info[1] + (rowspan > 1 ? rowspan - 1 : 0);

                if (insertBefore == null) {
                    if ((y1 <= y && y2 >= y)) {
                        rows.push(keys[i]);
                    }
                } else {
                    if (insertBefore) {
                        if ((y1 < y && y2 >= y)) {
                            rows.push(keys[i]);
                        }
                    } else {
                        if ((y1 <= y && y2 > y)) {
                            rows.push(keys[i]);
                        }
                    }
                }
            }
        }

        return rows;
    }

    /**
     * Open the editor
     * 
     * @param object cell
     * @return void
     */
    obj.openEditor = function(cell, empty, e) {
        // Get cell position
        var y = cell.getAttribute('data-y');
        var x = cell.getAttribute('data-x');

        // On edition start
        if (! obj.ignoreEvents) {
            if (typeof(obj.options.oneditionstart) == 'function') {
                obj.options.oneditionstart(el, cell, x, y);
            }
        }

        // Overflow
        if (x > 0) {
            obj.records[y][x-1].style.overflow = 'hidden';
        }

        // Create editor
        var createEditor = function(type) {
            // Cell information
            var info = cell.getBoundingClientRect();

            // Create dropdown
            var editor = document.createElement(type);
            editor.style.width = (info.width) + 'px';
            editor.style.height = (info.height - 2) + 'px';
            editor.style.minHeight = (info.height - 2) + 'px';

            // Edit cell
            cell.classList.add('editor');
            cell.innerHTML = '';
            cell.appendChild(editor);

            return editor;
        }

        // Readonly
        if (cell.classList.contains('readonly') == true) {
            // Do nothing
        } else {
            // Holder
            obj.edition = [ obj.records[y][x], obj.records[y][x].innerHTML, x, y ];

            // If there is a custom editor for it
            if (obj.options.columns[x].editor) {
                // Custom editors
                obj.options.columns[x].editor.openEditor(cell, el, empty, e);
            } else {
                // Native functions
                if (obj.options.columns[x].type == 'hidden') {
                    // Do nothing
                } else if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {
                    // Get value
                    var value = cell.children[0].checked ? false : true;
                    // Toogle value
                    obj.setValue(cell, value);
                    // Do not keep edition open
                    obj.edition = null;
                } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {
                    // Get current value
                    var value = obj.options.data[y][x];

                    // Create dropdown
                    if (typeof(obj.options.columns[x].filter) == 'function') {
                        var source = obj.options.columns[x].filter(el, cell, x, y, obj.options.columns[x].source);
                    } else {
                        var source = obj.options.columns[x].source;
                    }

                    // Create editor
                    var editor = createEditor('div');
                    var options = {
                        data: source,
                        multiple: obj.options.columns[x].multiple ? true : false,
                        autocomplete: obj.options.columns[x].autocomplete || obj.options.columns[x].type == 'autocomplete' ? true : false,
                        opened:true,
                        value: obj.options.columns[x].multiple ? value.split(';') : value,
                        width:'100%',
                        height:editor.style.minHeight,
                        position: (obj.options.tableOverflow == true || obj.options.fullscreen == true) ? true : false,
                        onclose:function() {
                            obj.closeEditor(cell, true);
                        }
                    };
                    if (obj.options.columns[x].options && obj.options.columns[x].options.type) {
                        options.type = obj.options.columns[x].options.type;
                    }
                    jSuites.dropdown(editor, options);
                } else if (obj.options.columns[x].type == 'calendar' || obj.options.columns[x].type == 'color') {
                    // Value
                    var value = obj.options.data[y][x];
                    // Create editor
                    var editor = createEditor('input');
                    editor.value = value;

                    if (obj.options.tableOverflow == true || obj.options.fullscreen == true) {
                        obj.options.columns[x].options.position = true;
                    }
                    obj.options.columns[x].options.value = obj.options.data[y][x];
                    obj.options.columns[x].options.opened = true;
                    obj.options.columns[x].options.onclose = function(el, value) {
                        obj.closeEditor(cell, true);
                    }
                    // Current value
                    if (obj.options.columns[x].type == 'color') {
                        jSuites.color(editor, obj.options.columns[x].options);
                    } else {
                        var calendar = jSuites.calendar(editor, obj.options.columns[x].options);
                        calendar.setValue(value);
                    }
                    // Focus on editor
                    editor.focus();
                } else if (obj.options.columns[x].type == 'image') {
                    // Value
                    var img = cell.children[0];
                    // Create editor
                    var editor = createEditor('div');
                    editor.style.position = 'relative';
                    var div = document.createElement('div');
                    div.classList.add('jclose');
                    if (img && img.src) {
                        div.appendChild(img);
                    }
                    editor.appendChild(div);
                    jSuites.image(div, obj.options.imageOptions);
                    const rect = cell.getBoundingClientRect();
                    const rectContent = div.getBoundingClientRect();
                    if (window.innerHeight < rect.bottom + rectContent.height) {
                        div.style.top = (rect.top - (rectContent.height + 2)) + 'px';
                    } else {
                        div.style.top = (rect.top) + 'px';
                    }
                } else {
                    // Value
                    var value = empty == true ? '' : obj.options.data[y][x];

                    // Basic editor
                    if (obj.options.columns[x].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[x].wordWrap == true)) {
                        var editor = createEditor('textarea');
                    } else {
                        var editor = createEditor('input');
                        // Mask
                        if (obj.options.columns[x].mask) {
                            editor.setAttribute('data-mask', obj.options.columns[x].mask);
                        }
                    }

                    editor.value = value;
                    editor.onblur = function() {
                        obj.closeEditor(cell, true);
                    };
                    editor.focus();
                }
            }
        }
    }

    /**
     * Close the editor and save the information
     * 
     * @param object cell
     * @param boolean save
     * @return void
     */
    obj.closeEditor = function(cell, save) {
        var x = parseInt(cell.getAttribute('data-x'));
        var y = parseInt(cell.getAttribute('data-y'));

        // Get cell properties
        if (save == true) {
            // If custom editor
            if (obj.options.columns[x].editor) {
                // Custom editor
                var value = obj.options.columns[x].editor.closeEditor(cell, save);
            } else {
                // Native functions
                if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio' || obj.options.columns[x].type == 'hidden') {
                    // Do nothing
                } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {
                    var value = cell.children[0].dropdown.close(true);
                } else if (obj.options.columns[x].type == 'calendar') {
                    var value = cell.children[0].calendar.close(true);
                } else if (obj.options.columns[x].type == 'color') {
                    var value = cell.children[1].color.close(true);
                } else if (obj.options.columns[x].type == 'image') {
                    var img = cell.children[0].children[0].children[0];
                    var value = img && img.tagName == 'IMG' ? img.src : '';
                } else if (obj.options.columns[x].type == 'numeric') {
                    var value = cell.children[0].value;
                    if (value.substr(0,1) != '=') {
                        if (value == '') {
                            value = obj.options.columns[x].allowEmpty ? '' : 0;
                        }
                    }
                    cell.children[0].onblur = null;
                } else {
                    var value = cell.children[0].value;
                    cell.children[0].onblur = null;
                }
            }

            // Ignore changes if the value is the same
            if (obj.options.data[y][x] == value) {
                cell.innerHTML = obj.edition[1];
            } else {
                obj.setValue(cell, value);
            }
        } else {
            if (obj.options.columns[x].editor) {
                // Custom editor
                obj.options.columns[x].editor.closeEditor(cell, save);
            } else {
                if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {
                    cell.children[0].dropdown.close(true);
                } else if (obj.options.columns[x].type == 'calendar') {
                    cell.children[0].calendar.close(true);
                } else if (obj.options.columns[x].type == 'color') {
                    cell.children[1].color.close(true);
                } else {
                    cell.children[0].onblur = null;
                }
            }

            // Restore value
            cell.innerHTML = obj.edition && obj.edition[1] ? obj.edition[1] : '';
        }

        // On edition end
        if (! obj.ignoreEvents) {
            if (typeof(obj.options.oneditionend) == 'function') {
                obj.options.oneditionend(el, cell, x, y, value, save);
            }
        }

        // Remove editor class
        cell.classList.remove('editor');

        // Finish edition
        obj.edition = null;
    }

    /**
     * Get the cell object
     * 
     * @param object cell
     * @return string value
     */
    obj.getCell = function(cell) {
        // Convert in case name is excel liked ex. A10, BB92
        cell = jexcel.getIdFromColumnName(cell, true);
        var x = cell[0];
        var y = cell[1];

        return obj.records[y][x];
    }

    /**
     * Get the cell object from coords
     * 
     * @param object cell
     * @return string value
     */
    obj.getCellFromCoords = function(x, y) {
        return obj.records[y][x];
    }

    /**
     * Get label
     * 
     * @param object cell
     * @return string value
     */
    obj.getLabel = function(cell) {
        // Convert in case name is excel liked ex. A10, BB92
        cell = jexcel.getIdFromColumnName(cell, true);
        var x = cell[0];
        var y = cell[1];

        return obj.records[y][x].innerHTML;
    }

    /**
     * Get labelfrom coords
     * 
     * @param object cell
     * @return string value
     */
    obj.getLabelFromCoords = function(x, y) {
        return obj.records[y][x].innerHTML;
    }

    /**
     * Get the value from a cell
     * 
     * @param object cell
     * @return string value
     */
    obj.getValue = function(cell, processedValue) {
        if (typeof(cell) == 'object') {
            var x = cell.getAttribute('data-x');
            var y = cell.getAttribute('data-y');
        } else {
            cell = jexcel.getIdFromColumnName(cell, true);
            var x = cell[0];
            var y = cell[1];
        }

        var value = null;

        if (x != null && y != null) {
            if (obj.records[y] && obj.records[y][x] && (processedValue || obj.options.copyCompatibility == true)) {
                value = obj.records[y][x].innerHTML;
            } else {
                if (obj.options.data[y] && obj.options.data[y][x] != 'undefined') {
                    value = obj.options.data[y][x];
                }
            }
        }

        return value;
    }

    /**
     * Get the value from a coords
     * 
     * @param int x
     * @param int y
     * @return string value
     */
    obj.getValueFromCoords = function(x, y, processedValue) {
        var value = null;

        if (x != null && y != null) {
            if ((obj.records[y] && obj.records[y][x]) && processedValue || obj.options.copyCompatibility == true) {
                value = obj.records[y][x].innerHTML;
            } else {
                if (obj.options.data[y] && obj.options.data[y][x] != 'undefined') {
                    value = obj.options.data[y][x];
                }
            }
        }

        return value;
    }

    /**
     * Set a cell value
     * 
     * @param mixed cell destination cell
     * @param string value value
     * @return void
     */
    obj.setValue = function(cell, value, force) {
        var records = [];

        if (typeof(cell) == 'string') {
            var columnId = jexcel.getIdFromColumnName(cell, true);
            var x = columnId[0];
            var y = columnId[1];

            // Update cell
            records.push(obj.updateCell(x, y, value, force));

            // Update all formulas in the chain
            obj.updateFormulaChain(x, y, records);
        } else {
            var x = null;
            var y = null;
            if (cell && cell.getAttribute) {
                var x = cell.getAttribute('data-x');
                var y = cell.getAttribute('data-y');
            }

            // Update cell
            if (x != null && y != null) {
                records.push(obj.updateCell(x, y, value, force));

                // Update all formulas in the chain
                obj.updateFormulaChain(x, y, records);
            } else {
                var keys = Object.keys(cell);
                if (keys.length > 0) {
                    for (var i = 0; i < keys.length; i++) {
                        if (typeof(cell[i]) == 'string') {
                            var columnId = jexcel.getIdFromColumnName(cell[i], true);
                            var x = columnId[0];
                            var y = columnId[1];
                        } else {
                            var x = cell[i].getAttribute('data-x');
                            var y = cell[i].getAttribute('data-y');
                        }

                         // Update cell
                        if (x != null && y != null) {
                            records.push(obj.updateCell(x, y, value, force));

                            // Update all formulas in the chain
                            obj.updateFormulaChain(x, y, records);
                        }
                    }
                }
            }
        }

        // Update history
        obj.setHistory({
            action:'setValue',
            records:records,
            selection:obj.selectedCell,
        });

        // Update table with custom configurations if applicable
        obj.updateTable();

        // On after changes
        obj.onafterchanges(el, records);
    }

    /**
     * Set a cell value based on coordinates
     * 
     * @param int x destination cell
     * @param int y destination cell
     * @param string value
     * @return void
     */
    obj.setValueFromCoords = function(x, y, value, force) {
        var records = [];
        records.push(obj.updateCell(x, y, value, force));

        // Update all formulas in the chain
        obj.updateFormulaChain(x, y, records);

        // Update history
        obj.setHistory({
            action:'setValue',
            records:records,
            selection:obj.selectedCell,
        });

        // Update table with custom configurations if applicable
        obj.updateTable();

        // On after changes
        obj.onafterchanges(el, records);
    }

    /**
     * Toogle
     */
    obj.setCheckRadioValue = function() {
        var records = [];
        var keys = Object.keys(obj.highlighted);
        for (var i = 0; i < keys.length; i++) {
            var x = obj.highlighted[i].getAttribute('data-x');
            var y = obj.highlighted[i].getAttribute('data-y');

            if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {
                // Update cell
                records.push(obj.updateCell(x, y, ! obj.options.data[y][x]));
            }
        }

        if (records.length) {
            // Update history
            obj.setHistory({
                action:'setValue',
                records:records,
                selection:obj.selectedCell,
            });

            // On after changes
            obj.onafterchanges(el, records);
        }
    }

    /**
     * Update cell content
     * 
     * @param object cell
     * @return void
     */
    obj.updateCell = function(x, y, value, force) {
        // Changing value depending on the column type
        if (obj.records[y][x].classList.contains('readonly') == true && ! force) {
            // Do nothing
            var record = {
                x: x,
                y: y,
                col: x,
                row: y
            }
        } else {
            // On change
            if (! obj.ignoreEvents) {
                if (typeof(obj.options.onbeforechange) == 'function') {
                    // Overwrite a value
                    var val = obj.options.onbeforechange(el, obj.records[y][x], x, y, value);

                    // If you return something this will overwrite the value
                    if (val != undefined) {
                        value = val;
                    }
                }
            }

            // History format
            var record = {
                x: x,
                y: y,
                col: x,
                row: y,
                newValue: value,
                oldValue: obj.options.data[y][x],
            }

            if (obj.options.columns[x].editor) {
                // Update data and cell
                obj.options.data[y][x] = value;
                obj.options.columns[x].editor.setValue(obj.records[y][x], value, force);
            } else {
                // Native functions
                if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {
                    // Unchecked all options
                    if (obj.options.columns[x].type == 'radio') {
                        for (var j = 0; j < obj.options.data.length; j++) {
                            obj.options.data[j][x] = false;
                        }
                    }

                    // Update data and cell
                    obj.records[y][x].children[0].checked = (value == 1 || value == true || value == 'true' || value == 'TRUE') ? true : false;
                    obj.options.data[y][x] = obj.records[y][x].children[0].checked;
                } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {
                    // Update data and cell
                    obj.options.data[y][x] = value;
                    obj.records[y][x].innerHTML = obj.getDropDownValue(x, value);
                } else if (obj.options.columns[x].type == 'calendar') {
                    // Update calendar
                    var formatted = jSuites.calendar.extractDateFromString(value, obj.options.columns[x].options.format);
                    // Update data and cell
                    obj.options.data[y][x] = value;
                    obj.records[y][x].innerHTML = jSuites.calendar.getDateString(formatted ? formatted : value, obj.options.columns[x].options.format);
                } else if (obj.options.columns[x].type == 'color') {
                    // Update color
                    obj.options.data[y][x] = value;
                    // Render
                    if (obj.options.columns[x].render == 'square') {
                        var color = document.createElement('div');
                        color.className = 'color';
                        color.style.backgroundColor = value;
                        obj.records[y][x].innerHTML = '';
                        obj.records[y][x].appendChild(color);
                    } else {
                    obj.records[y][x].style.color = value;
                        obj.records[y][x].innerHTML = value;
                    }
                } else if (obj.options.columns[x].type == 'image') {
                    value = ''+value;
                    obj.options.data[y][x] = value;
                    obj.records[y][x].innerHTML = '';
                    if (value && value.substr(0, 10) == 'data:image') {
                        var img = document.createElement('img');
                        img.src = value;
                        obj.records[y][x].appendChild(img);
                    }
                } else {
                    // Update data and cell
                    obj.options.data[y][x] = value;
                    // Label
                    if (('' + value).substr(0,1) == '='  && obj.options.parseFormulas == true) {
                        value = obj.executeFormula(value, x, y);
                    }
                    if (obj.options.columns[x].mask) {
                        var decimal = obj.options.columns[x].decimal || '.';
                        value = '' + jSuites.mask.run(value, obj.options.columns[x].mask, decimal);
                    }
                    obj.records[y][x].innerHTML = value;

                    // Handle big text inside a cell
                    if (obj.options.columns[x].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[x].wordWrap == true || obj.records[y][x].innerHTML.length > 200)) {
                        obj.records[y][x].style.whiteSpace = 'pre-wrap';
                    } else {
                        obj.records[y][x].style.whiteSpace = '';
                    }
                }
            }

            // Overflow
            if (x > 0) {
                if (value) {
                    obj.records[y][x-1].style.overflow = 'hidden';
                } else {
                    obj.records[y][x-1].style.overflow = '';
                }
            }

            // On change
            if (! obj.ignoreEvents) {
                if (typeof(obj.options.onchange) == 'function') {
                    obj.options.onchange(el, (obj.records[y] && obj.records[y][x] ? obj.records[y][x] : null), x, y, value, record.oldValue);
                }
            }
        }

        return record;
    }

    /**
     * Helper function to copy data using the corner icon
     */
    obj.copyData = function(o, d) {
        // Get data from all selected cells
        var data = obj.getData(true, true);

        // Selected cells
        var h = obj.selectedContainer;

        // Cells
        var x1 = parseInt(o.getAttribute('data-x'));
        var y1 = parseInt(o.getAttribute('data-y'));
        var x2 = parseInt(d.getAttribute('data-x'));
        var y2 = parseInt(d.getAttribute('data-y'));

        // Records
        var records = [];
        var breakControl = false;

        if (h[0] == x1) {
            // Vertical copy
            if (y1 < h[1]) {
                var rowNumber = y1 - h[1];
            } else {
                var rowNumber = 1;
            }
            var colNumber = 0;
        } else {
            if (x1 < h[0]) {
                var colNumber = x1 - h[0];
            } else {
                var colNumber = 1;
            }
            var rowNumber = 0;
        }

        // Copy data procedure
        var posx = 0;
        var posy = 0;

        for (var j = y1; j <= y2; j++) {
            // Skip hidden rows
            if (obj.rows[j] && obj.rows[j].style.display == 'none') {
                continue;
            }

            // Controls
            if (data[posy] == undefined) {
                posy = 0;
            }
            posx = 0;

            // Data columns
            if (h[0] != x1) {
                if (x1 < h[0]) {
                    var colNumber = x1 - h[0];
                } else {
                    var colNumber = 1;
                }
            }
            // Data columns
            for (var i = x1; i <= x2; i++) {
                // Update non-readonly
                if (obj.records[j][i] && ! obj.records[j][i].classList.contains('readonly') && obj.records[j][i].style.display != 'none' && breakControl == false) {
                    // Stop if contains value
                    if (! obj.selection.length) {
                        if (obj.options.data[j][i] != '') {
                            breakControl = true;
                            continue;
                        }
                    }

                    // Column
                    if (data[posy] == undefined) {
                        posx = 0;
                    } else if (data[posy][posx] == undefined) {
                        posx = 0;
                    }

                    // Value
                    var value = data[posy][posx];

                        if (value && ! data[1] && obj.options.autoIncrement == true) {
                        if (obj.options.columns[i].type == 'text' || obj.options.columns[i].type == 'number') {
                            if ((''+value).substr(0,1) == '=') {
                                var tokens = value.match(/([A-Z]+[0-9]+)/g);

                                if (tokens) {
                                    var affectedTokens = [];
                                    for (var index = 0; index < tokens.length; index++) {
                                        var position = jexcel.getIdFromColumnName(tokens[index], 1);
                                        position[0] += colNumber;
                                        position[1] += rowNumber;
                                        if (position[1] < 0) {
                                            position[1] = 0;
                                        }
                                        var token = jexcel.getColumnNameFromId([position[0], position[1]]);

                                        if (token != tokens[index]) {
                                            affectedTokens[tokens[index]] = token;
                                        }
                                    }
                                    // Update formula
                                    if (affectedTokens) {
                                        value = obj.updateFormula(value, affectedTokens)
                                    }
                                }
                            } else {
                                if (value == Number(value)) {
                                    value = Number(value) + rowNumber;
                                }
                            }
                        } else if (obj.options.columns[i].type == 'calendar') {
                            var date = new Date(value);
                            date.setDate(date.getDate() + rowNumber);
                            value = date.getFullYear() + '-' + jexcel.doubleDigitFormat(parseInt(date.getMonth() + 1)) + '-' + jexcel.doubleDigitFormat(date.getDate()) + ' ' + '00:00:00';
                        }
                    }

                    records.push(obj.updateCell(i, j, value));

                    // Update all formulas in the chain
                    obj.updateFormulaChain(i, j, records);
                }
                posx++;
                if (h[0] != x1) {
                    colNumber++;
                }
            }
            posy++;
            rowNumber++;
        }

        // Update history
        obj.setHistory({
            action:'setValue',
            records:records,
            selection:obj.selectedCell,
        });

        // Update table with custom configuration if applicable
        obj.updateTable();

        // On after changes
        obj.onafterchanges(el, records);
    }

    /**
     * Refresh current selection
     */
    obj.refreshSelection = function() {
        if (obj.selectedCell) {
            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
        }
    }

    /**
     * Move coords to A1 in case ovelaps with an excluded cell
     */
    obj.conditionalSelectionUpdate = function(type, o, d) {
        if (type == 1) {
            if (obj.selectedCell && ((o >= obj.selectedCell[1] && o <= obj.selectedCell[3]) || (d >= obj.selectedCell[1] && d <= obj.selectedCell[3]))) {
                obj.resetSelection();
                return;
            }
        } else {
            if (obj.selectedCell && ((o >= obj.selectedCell[0] && o <= obj.selectedCell[2]) || (d >= obj.selectedCell[0] && d <= obj.selectedCell[2]))) {
                obj.resetSelection();
                return;
            }
        }
    }

    /**
     * Clear table selection
     */
    obj.resetSelection = function(blur) {
        // Remove style
        if (! obj.highlighted.length) {
            var previousStatus = 0;
        } else {
            var previousStatus = 1;

            for (var i = 0; i < obj.highlighted.length; i++) {
                obj.highlighted[i].classList.remove('highlight');
                obj.highlighted[i].classList.remove('highlight-left');
                obj.highlighted[i].classList.remove('highlight-right');
                obj.highlighted[i].classList.remove('highlight-top');
                obj.highlighted[i].classList.remove('highlight-bottom');
                obj.highlighted[i].classList.remove('highlight-selected');

                var px = parseInt(obj.highlighted[i].getAttribute('data-x'));
                var py = parseInt(obj.highlighted[i].getAttribute('data-y'));

                // Check for merged cells
                if (obj.highlighted[i].getAttribute('data-merged')) {
                    var colspan = parseInt(obj.highlighted[i].getAttribute('colspan'));
                    var rowspan = parseInt(obj.highlighted[i].getAttribute('rowspan'));
                    var ux = colspan > 0 ? px + (colspan - 1) : px;
                    var uy = rowspan > 0 ? py + (rowspan - 1): py;
                } else {
                    var ux = px;
                    var uy = py;
                }

                // Remove selected from headers
                for (var j = px; j <= ux; j++) {
                    if (obj.headers[j]) {
                        obj.headers[j].classList.remove('selected');
                    }
                }

                // Remove selected from rows
                for (var j = py; j <= uy; j++) {
                    if (obj.rows[j]) {
                        obj.rows[j].classList.remove('selected');
                    }
                }
            }
        }

        // Reset highlighed cells
        obj.highlighted = [];

        // Reset
        obj.selectedCell = null;

        // Hide corner
        obj.corner.style.top = '-2000px';
        obj.corner.style.left = '-2000px';

        if (obj.ignoreEvents != true && blur == true) {
            if (obj.options.onblur) {
                if (typeof(obj.options.onblur) == 'function') {
                    if (previousStatus == 1) {
                        obj.options.onblur(el);
                    }
                }
            }
        }

        return previousStatus;
    }

    /**
     * Update selection based on two cells
     */
    obj.updateSelection = function(el1, el2, origin) {
        var x1 = el1.getAttribute('data-x');
        var y1 = el1.getAttribute('data-y');
        if (el2) {
            var x2 = el2.getAttribute('data-x');
            var y2 = el2.getAttribute('data-y');
        } else {
            var x2 = x1;
            var y2 = y1;
        }

        obj.updateSelectionFromCoords(x1, y1, x2, y2, origin);
    }

    /**
     * Update selection from coords
     */
    obj.updateSelectionFromCoords = function(x1, y1, x2, y2, origin) {
        // Reset Selection
        var updated = null;
        var previousState = obj.resetSelection();

        // Same element
        if (x2 == null) {
            x2 = x1;
        }
        if (y2 == null) {
            y2 = y1;
        }

        // Selection must be within the existing data
        if (x1 >= obj.headers.length) {
            x1 = obj.headers.length - 1;
        }
        if (y1 >= obj.rows.length) {
            y1 = obj.rows.length - 1;
        }
        if (x2 >= obj.headers.length) {
            x2 = obj.headers.length - 1;
        }
        if (y2 >= obj.rows.length) {
            y2 = obj.rows.length - 1;
        }

        // Keep selected cell
        obj.selectedCell = [x1, y1, x2, y2];

        // Select cells
        if (x1 != null) {
            // Add selected cell
            if (obj.records[y1][x1]) {
                obj.records[y1][x1].classList.add('highlight-selected');
            }

            // Origin & Destination
            if (parseInt(x1) < parseInt(x2)) {
                var px = parseInt(x1);
                var ux = parseInt(x2);
            } else {
                var px = parseInt(x2);
                var ux = parseInt(x1);
            }

            if (parseInt(y1) < parseInt(y2)) {
                var py = parseInt(y1);
                var uy = parseInt(y2);
            } else {
                var py = parseInt(y2);
                var uy = parseInt(y1);
            }

            // Verify merged columns
            for (var i = px; i <= ux; i++) {
                for (var j = py; j <= uy; j++) {
                    if (obj.records[j][i] && obj.records[j][i].getAttribute('data-merged')) {
                        var x = parseInt(obj.records[j][i].getAttribute('data-x'));
                        var y = parseInt(obj.records[j][i].getAttribute('data-y'));
                        var colspan = parseInt(obj.records[j][i].getAttribute('colspan'));
                        var rowspan = parseInt(obj.records[j][i].getAttribute('rowspan'));

                        if (colspan > 1) {
                            if (x < px) {
                                px = x;
                            }
                            if (x + colspan > ux) {
                                ux = x + colspan - 1;
                            }
                        }

                        if (rowspan) {
                            if (y < py) {
                                py = y;

                            }
                            if (y + rowspan > uy) {
                                uy = y + rowspan - 1;
                            }
                        }
                    }
                }
            }

            // Limits
            var borderLeft = null;
            var borderRight = null;
            var borderTop = null;
            var borderBottom = null;

            // Vertical limits
            for (var j = py; j <= uy; j++) {
                if (obj.rows[j].style.display != 'none') {
                    if (borderTop == null) {
                        borderTop = j;
                    }
                    borderBottom = j;
                }
            }

            // Redefining styles
            for (var i = px; i <= ux; i++) {
                for (var j = py; j <= uy; j++) {
                    if (obj.rows[j].style.display != 'none' && obj.records[j][i].style.display != 'none') {
                        obj.records[j][i].classList.add('highlight');
                        obj.highlighted.push(obj.records[j][i]);
                    }
                }

                // Horizontal limits
                if (obj.options.columns[i].type != 'hidden') {
                    if (borderLeft == null) {
                        borderLeft = i;
                    }
                    borderRight = i;
                }
            }

            // Create borders
            if (! borderLeft) {
                borderLeft = 0;
            }
            if (! borderRight) {
                borderRight = 0;
            }
            for (var i = borderLeft; i <= borderRight; i++) {
                if (obj.options.columns[i].type != 'hidden') {
                    // Top border
                    if (obj.records[borderTop][i]) {
                        obj.records[borderTop][i].classList.add('highlight-top');
                    }
                    // Bottom border
                    if (obj.records[borderBottom][i]) {
                        obj.records[borderBottom][i].classList.add('highlight-bottom');
                    }
                    // Add selected from headers
                    obj.headers[i].classList.add('selected');
                }
            }

            for (var j = borderTop; j <= borderBottom; j++) {
                if (obj.rows[j].style.display != 'none') {
                    // Left border
                    obj.records[j][borderLeft].classList.add('highlight-left');
                    // Right border
                    obj.records[j][borderRight].classList.add('highlight-right');
                    // Add selected from rows
                    obj.rows[j].classList.add('selected');
                }
            }

            obj.selectedContainer = [ borderLeft, borderTop, borderRight, borderBottom ];
        }

        // Handle events
        if (obj.ignoreEvents != true) {
            if (obj.options.onfocus) {
                if (typeof(obj.options.onfocus) == 'function') {
                    if (previousState == 0) {
                        obj.options.onfocus(el);
                    }
                }
            }

            if (typeof(obj.options.onselection) == 'function') {
                obj.options.onselection(el, borderLeft, borderTop, borderRight, borderBottom, origin);
            }
        }

        // Find corner cell
        obj.updateCornerPosition();
    }

    /**
     * Remove copy selection
     * 
     * @return void
     */
    obj.removeCopySelection = function() {
        // Remove current selection
        for (var i = 0; i < obj.selection.length; i++) {
            obj.selection[i].classList.remove('selection');
            obj.selection[i].classList.remove('selection-left');
            obj.selection[i].classList.remove('selection-right');
            obj.selection[i].classList.remove('selection-top');
            obj.selection[i].classList.remove('selection-bottom');
        }

        obj.selection = [];
    }

    /**
     * Update copy selection
     * 
     * @param int x, y
     * @return void
     */
    obj.updateCopySelection = function(x3, y3) {
        // Remove selection
        obj.removeCopySelection();

        // Get elements first and last
        var x1 = obj.selectedContainer[0];
        var y1 = obj.selectedContainer[1];
        var x2 = obj.selectedContainer[2];
        var y2 = obj.selectedContainer[3];

        if (x3 != null && y3 != null) {
            if (x3 - x2 > 0) {
                var px = parseInt(x2) + 1;
                var ux = parseInt(x3);
            } else {
                var px = parseInt(x3);
                var ux = parseInt(x1) - 1;
            }

            if (y3 - y2 > 0) {
                var py = parseInt(y2) + 1;
                var uy = parseInt(y3);
            } else {
                var py = parseInt(y3);
                var uy = parseInt(y1) - 1;
            }

            if (ux - px < uy - py) {
                var px = parseInt(x1);
                var ux = parseInt(x2);
            } else {
                var py = parseInt(y1);
                var uy = parseInt(y2);
            }

            for (var j = py; j <= uy; j++) {
                for (var i = px; i <= ux; i++) {
                    if (obj.records[j][i] && obj.rows[j].style.display != 'none' && obj.records[j][i].style.display != 'none') {
                        obj.records[j][i].classList.add('selection');
                        obj.records[py][i].classList.add('selection-top');
                        obj.records[uy][i].classList.add('selection-bottom');
                        obj.records[j][px].classList.add('selection-left');
                        obj.records[j][ux].classList.add('selection-right');

                        // Persist selected elements
                        obj.selection.push(obj.records[j][i]);
                    }
                }
            }
        }
    }

    /**
     * Update corner position
     * 
     * @return void
     */
    obj.updateCornerPosition = function() {
        // If any selected cells
        if (! obj.highlighted.length) {
            obj.corner.style.top = '-2000px';
            obj.corner.style.left = '-2000px';
        } else {
            // Get last cell
            var last = obj.highlighted[obj.highlighted.length-1];

            const contentRect = obj.content.getBoundingClientRect();
            var x1 = contentRect.left;
            var y1 = contentRect.top;

            const lastRect = last.getBoundingClientRect();
            var x2 = lastRect.left;
            var y2 = lastRect.top;
            var w2 = lastRect.width;
            var h2 = lastRect.height;

            var x = (x2 - x1) + obj.content.scrollLeft + w2 - 4;
            var y = (y2 - y1) + obj.content.scrollTop + h2 - 4;

            // Place the corner in the correct place
            obj.corner.style.top = y + 'px';
            obj.corner.style.left = x + 'px';
        }
    }

    /**
     * Update scroll position based on the selection
     */
    obj.updateScroll = function(direction) {
        // jExcel Container information
        const contentRect = obj.content.getBoundingClientRect();
        var x1 = contentRect.left;
        var y1 = contentRect.top;
        var w1 = contentRect.width;
        var h1 = contentRect.height;

        // Direction Left or Up
        var reference = obj.records[obj.selectedCell[3]][obj.selectedCell[2]];

            // Reference
        const referenceRect = reference.getBoundingClientRect();
        var x2 = referenceRect.left;
        var y2 = referenceRect.top;
        var w2 = referenceRect.width;
        var h2 = referenceRect.height;

        // Direction
        if (direction == 0 || direction == 1) {
            var x = (x2 - x1) + obj.content.scrollLeft;
            var y = (y2 - y1) + obj.content.scrollTop - 2;
        } else {
            var x = (x2 - x1) + obj.content.scrollLeft + w2;
            var y = (y2 - y1) + obj.content.scrollTop + h2;
        }

        // Top position check
        if (y > (obj.content.scrollTop + 30) && y < (obj.content.scrollTop + h1)) {
            // In the viewport
        } else {
            // Out of viewport
            if (y < obj.content.scrollTop + 30) {
                obj.content.scrollTop = y - h2;
            } else {
                obj.content.scrollTop = y - (h1 - 2);
            }
        }

        // Left position check - TODO: change that to the bottom border of the element
        if (x > (obj.content.scrollLeft) && x < (obj.content.scrollLeft + w1)) {
            // In the viewport
        } else {
            // Out of viewport
            if (x < obj.content.scrollLeft + 30) {
                obj.content.scrollLeft = x;
                if (obj.content.scrollLeft < 50) {
                    obj.content.scrollLeft = 0;
                }
            } else {
                obj.content.scrollLeft = x - (w1 - 20);
            }
        }
    }

    /**
     * Get the column width
     * 
     * @param int column column number (first column is: 0)
     * @return int current width
     */
    obj.getWidth = function(column) {
        if (! column) {
            // Get all headers
            var data = [];
            for (var i = 0; i < obj.headers.length; i++) {
                data.push(obj.options.columns[i].width);
            }
        } else {
            // In case the column is an object
            if (typeof(column) == 'object') {
                column = $(column).getAttribute('data-x');
            }

            data = obj.colgroup[column].getAttribute('width')
        }

        return data;
    }

    /**
     * Set the column width
     * 
     * @param int column number (first column is: 0)
     * @param int new column width
     * @param int old column width
     */
    obj.setWidth = function (column, width, oldWidth) {
        if (width > 0) {
            // In case the column is an object
            if (typeof(column) == 'object') {
                column = column.getAttribute('data-x');
            }

            // Oldwidth
            if (! oldWidth) {
                oldWidth = obj.colgroup[column].getAttribute('width');
            }

            // Set width
            obj.colgroup[column].setAttribute('width', width);
            obj.options.columns[column].width = width;

            // Keeping history of changes
            obj.setHistory({
                action:'setWidth',
                column:column,
                oldValue:oldWidth,
                newValue:width,
            });

            // On resize column
            if (obj.ignoreEvents != true) {
                if (typeof(obj.options.onresizecolumn) == 'function') {
                    obj.options.onresizecolumn(el, column, width, oldWidth);
                }
            }

            // Update corner position
            obj.updateCornerPosition();
        }
    }

    /**
     * Set the row height
     * 
     * @param row - row number (first row is: 0)
     * @param height - new row height
     * @param oldHeight - old row height
     */
    obj.setHeight = function (row, height, oldHeight) {
        if (height > 0) {
            // In case the column is an object
            if (typeof(row) == 'object') {
                row = row.getAttribute('data-y');
            }

            // Oldwidth
            if (! oldHeight) {
                oldHeight = obj.rows[row].getAttribute('height');

                if (! oldHeight) {
                    var rect = obj.rows[row].getBoundingClientRect();
                    oldHeight = rect.height;
                }
            }

            // Integer
            height = parseInt(height);

            // Set width
            obj.rows[row].style.height = height + 'px';

            // Keep options updated
            if (! obj.options.rows[row]) {
                obj.options.rows[row] = {};
            }
            obj.options.rows[row].height = height;

            // Keeping history of changes
            obj.setHistory({
                action:'setHeight',
                row:row,
                oldValue:oldHeight,
                newValue:height,
            });

            // On resize column
            if (obj.ignoreEvents != true) {
                if (typeof(obj.options.onresizerow) == 'function') {
                    obj.options.onresizerow(el, row, height, oldHeight);
                }
            }

            // Update corner position
            obj.updateCornerPosition();
        }
    }

    /**
     * Get the row height
     * 
     * @param row - row number (first row is: 0)
     * @return height - current row height
     */
    obj.getHeight = function(row) {
        if (! row) {
            // Get height of all rows
            var data = [];
            for (var j = 0; j < obj.rows.length; j++) {
                var h = obj.rows[j].style.height;
                if (h) {
                    data[j] = h;
                }
            }
        } else {
            // In case the row is an object
            if (typeof(row) == 'object') {
                row = $(row).getAttribute('data-y');
            }

            var data = obj.rows[row].style.height;
        }

        return data;
    }

    /**
     * Get the column title
     * 
     * @param column - column number (first column is: 0)
     * @param title - new column title
     */
    obj.getHeader = function(column) {
        return obj.headers[column].innerText;
    }

    /**
     * Set the column title
     * 
     * @param column - column number (first column is: 0)
     * @param title - new column title
     */
    obj.setHeader = function(column, newValue) {
        if (obj.headers[column]) {
            var oldValue = obj.headers[column].innerText;

            if (! newValue) {
                newValue = prompt(obj.options.text.columnName, oldValue)
            }

            if (newValue) {
                obj.headers[column].innerHTML = newValue;
                // Keep the title property
                obj.headers[column].setAttribute('title', newValue);
            }

            obj.setHistory({
                action: 'setHeader',
                column: column,
                oldValue: oldValue,
                newValue: newValue
            });

            // On change
            if (! obj.ignoreEvents) {
                if (typeof(obj.options.onchangeheader) == 'function') {
                    obj.options.onchangeheader(el, column, oldValue, newValue);
                }
            }
        }
    }

    /**
     * Get the headers
     * 
     * @param asArray
     * @return mixed
     */
    obj.getHeaders = function (asArray) {
        var title = [];

        for (var i = 0; i < obj.headers.length; i++) {
            title.push(obj.getHeader(i));
        }

        return asArray ? title : title.join(obj.options.csvDelimiter);
    }

    /**
     * Get meta information from cell(s)
     * 
     * @return integer
     */
    obj.getMeta = function(cell, key) {
        if (! cell) {
            return obj.options.meta;
        } else {
            if (key) {
                return obj.options.meta[cell] && obj.options.meta[cell][key] ? obj.options.meta[cell][key] : null;
            } else {
                return obj.options.meta[cell] ? obj.options.meta[cell] : null;
            }
        }
    }

    /**
     * Set meta information to cell(s)
     * 
     * @return integer
     */
    obj.setMeta = function(o, k, v) {
        if (! obj.options.meta) {
            obj.options.meta = {}
        }

        if (k && v) {
            // Set data value
            if (! obj.options.meta[o]) {
                obj.options.meta[o] = {};
            }
            obj.options.meta[o][k] = v;
        } else {
            // Apply that for all cells
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (! obj.options.meta[keys[i]]) {
                    obj.options.meta[keys[i]] = {};
                }

                var prop = Object.keys(o[keys[i]]);
                for (var j = 0; j < prop.length; j++) {
                    obj.options.meta[keys[i]][prop[j]] = o[keys[i]][prop[j]];
                }
            }
        }

        if (obj.ignoreEvents != true) {
            if (typeof(obj.options.onchangemeta) == 'function') {
                obj.options.onchangemeta(el, o, k, v);
            }
        }
    }

    /**
     * Update meta information
     * 
     * @return integer
     */
    obj.updateMeta = function(affectedCells) {
        if (obj.options.meta) {
            var newMeta = {};
            var keys = Object.keys(obj.options.meta);
            for (var i = 0; i < keys.length; i++) {
                if (affectedCells[keys[i]]) {
                    newMeta[affectedCells[keys[i]]] = obj.options.meta[keys[i]];
                } else {
                    newMeta[keys[i]] = obj.options.meta[keys[i]];
                }
            }
            // Update meta information
            obj.options.meta = newMeta;
        }
    }

    /**
     * Get style information from cell(s)
     * 
     * @return integer
     */
    obj.getStyle = function(cell, key) {
        // Cell
        if (! cell) {
            // Control vars
            var data = {};

            // Column and row length
            var x = obj.options.data[0].length;
            var y = obj.options.data.length;

            // Go through the columns to get the data
            for (var j = 0; j < y; j++) {
                for (var i = 0; i < x; i++) {
                    // Value
                    var v = key ? obj.records[j][i].style[key] : obj.records[j][i].getAttribute('style');

                    // Any meta data for this column?
                    if (v) {
                        // Column name
                        var k = jexcel.getColumnNameFromId([i, j]);
                        // Value
                        data[k] = v;
                    }
                }
            }

           return data;
        } else {
            cell = jexcel.getIdFromColumnName(cell, true);

            return key ? obj.records[cell[1]][cell[0]].style[key] : obj.records[cell[1]][cell[0]].getAttribute('style');
        }
    },

    obj.resetStyle = function(o, ignoreHistoryAndEvents) {
        var keys = Object.keys(o);
        for (var i = 0; i < keys.length; i++) {
            // Position
            var cell = jexcel.getIdFromColumnName(keys[i], true);
            if (obj.records[cell[1]] && obj.records[cell[1]][cell[0]]) {
                obj.records[cell[1]][cell[0]].setAttribute('style', '');
            }
        }
        obj.setStyle(o, null, null, null, ignoreHistoryAndEvents);
    }

    /**
     * Set meta information to cell(s)
     * 
     * @return integer
     */
    obj.setStyle = function(o, k, v, force, ignoreHistoryAndEvents) {
        var newValue = {};
        var oldValue = {};

        // Apply style
        var applyStyle = function(cellId, key, value) {
            // Position
            var cell = jexcel.getIdFromColumnName(cellId, true);

            if (obj.records[cell[1]] && obj.records[cell[1]][cell[0]]) {
                // Current value
                var currentValue = obj.records[cell[1]][cell[0]].style[key];

                // Change layout
                if (currentValue == value && ! force) {
                    value = '';
                    obj.records[cell[1]][cell[0]].style[key] = '';
                } else {
                    obj.records[cell[1]][cell[0]].style[key] = value;
                }

                // History
                if (! oldValue[cellId]) {
                    oldValue[cellId] = [];
                }
                if (! newValue[cellId]) {
                    newValue[cellId] = [];
                }

                oldValue[cellId].push([key + ':' + currentValue]);
                newValue[cellId].push([key + ':' + value]);
            }
        }

        if (k && v) {
            // Get object from string
            if (typeof(o) == 'string') {
                applyStyle(o, k, v);
            } else {
                // Avoid duplications
                var oneApplication = [];
                // Apply that for all cells
                for (var i = 0; i < o.length; i++) {
                    var x = o[i].getAttribute('data-x');
                    var y = o[i].getAttribute('data-y');
                    var cellName = jexcel.getColumnNameFromId([x, y]);
                    // This happens when is a merged cell
                    if (! oneApplication[cellName]) {
                        applyStyle(cellName, k, v);
                        oneApplication[cellName] = true;
                    }
                }
            }
        } else {
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                var style = o[keys[i]];
                if (typeof(style) == 'string') {
                    style = style.split(';');
                }
                for (var j = 0; j < style.length; j++) {
                    if (typeof(style[j]) == 'string') {
                        style[j] = style[j].split(':');
                    }
                    // Apply value
                    if (style[j][0].trim()) {
                        applyStyle(keys[i], style[j][0].trim(), style[j][1]);
                    }
                }
            }
        }

        var keys = Object.keys(oldValue);
        for (var i = 0; i < keys.length; i++) {
            oldValue[keys[i]] = oldValue[keys[i]].join(';');
        }
        var keys = Object.keys(newValue);
        for (var i = 0; i < keys.length; i++) {
            newValue[keys[i]] = newValue[keys[i]].join(';');
        }

        if (! ignoreHistoryAndEvents) {
            // Keeping history of changes
            obj.setHistory({
                action: 'setStyle',
                oldValue: oldValue,
                newValue: newValue,
            });
        }

        if (obj.ignoreEvents != true) {
            if (typeof(obj.options.onchangestyle) == 'function') {
                obj.options.onchangestyle(el, o, k, v);
            }
        }
    }

    /**
     * Get cell comments, null cell for all
     */
    obj.getComments = function(cell, withAuthor) {
        if (cell) {
            if (typeof(cell) == 'string') {
              var cell = jexcel.getIdFromColumnName(cell, true);
            }

            if (withAuthor) {
                return [obj.records[cell[1]][cell[0]].getAttribute('title'), obj.records[cell[1]][cell[0]].getAttribute('author')];
            } else {
                return obj.records[cell[1]][cell[0]].getAttribute('title') || '';
            }
        } else {
            var data = {};
            for (var j = 0; j < obj.options.data.length; j++) {
                for (var i = 0; i < obj.options.columns.length; i++) {
                    var comments = obj.records[j][i].getAttribute('title');
                    if (comments) {
                        var cell = jexcel.getColumnNameFromId([i, j]);
                        data[cell] = comments;
                    }
                }
            }
            return data;
        }
    }

    /**
     * Set cell comments
     */
    obj.setComments = function(cellId, comments, author) {
        if (typeof(cellId) == 'string') {
            var cell = jexcel.getIdFromColumnName(cellId, true);
        } else {
            var cell = cellId;
        }

        // Keep old value
        var title = obj.records[cell[1]][cell[0]].getAttribute('title');
        var author = obj.records[cell[1]][cell[0]].getAttribute('data-author');
        var oldValue = [ title, author ];

        // Set new values
        obj.records[cell[1]][cell[0]].setAttribute('title', comments ? comments : '');
        obj.records[cell[1]][cell[0]].setAttribute('data-author', author ? author : '');

        // Remove class if there is no comment
        if (comments) {
            obj.records[cell[1]][cell[0]].classList.add('jexcel_comments');
        } else {
            obj.records[cell[1]][cell[0]].classList.remove('jexcel_comments');
        }

        // Save history
        obj.setHistory({
            action:'setComments',
            column: cellId,
            newValue: [ comments, author ],
            oldValue: oldValue,
        });
    }

    /**
     * Get table config information
     */
    obj.getConfig = function() {
        var options = obj.options;
        options.style = obj.getStyle();
        options.mergeCells = obj.getMerge();
        options.comments = obj.getComments();

        return options;
    }

    /**
     * Sort data and reload table
     */
    obj.orderBy = function(column, order) {
        if (column >= 0) {
            // Merged cells
            if (Object.keys(obj.options.mergeCells).length > 0) {
                if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                    return false;
                } else {
                    // Remove merged cells
                    obj.destroyMerged();
                }
            }

            // Direction
            if (order == null) {
                order = obj.headers[column].classList.contains('arrow-down') ? 1 : 0;
            } else {
                order = order ? 1 : 0;
            }

            // Filter
            Array.prototype.orderBy = function(p, o) {
                return this.slice(0).sort(function(a, b) {
                    var valueA = a[p] == '' ? '' : Number(a[p]) == a[p] ? Number(a[p]) : a[p].toLowerCase();
                    var valueB = b[p] == '' ? '' : Number(b[p]) == b[p] ? Number(b[p]) : b[p].toLowerCase();

                    if (! o) {
                        return (valueA == '' && valueB != '') ? 1 : (valueA != '' && valueB == '') ? -1 : (valueA > valueB) ? 1 : (valueA < valueB) ? -1 :  0;
                    } else {
                        return (valueA == '' && valueB != '') ? 1 : (valueA != '' && valueB == '') ? -1 : (valueA > valueB) ? -1 : (valueA < valueB) ? 1 :  0;
                    }
                });
            }

            // Test order
            var temp = [];
            if (obj.options.columns[column].type == 'calendar' ||
                obj.options.columns[column].type == 'checkbox' ||
                obj.options.columns[column].type == 'radio') {
                for (var j = 0; j < obj.options.data.length; j++) {
                    temp[j] = [ j, obj.options.data[j][column] ];
                }
            } else {
                for (var j = 0; j < obj.options.data.length; j++) {
                    temp[j] = [ j, obj.records[j][column].innerHTML ];
                }
            }
            temp = temp.orderBy(1, order);

            // Save history
            var newValue = [];
            for (var j = 0; j < temp.length; j++) {
                newValue[j] = temp[j][0];
            }

            // Save history
            obj.setHistory({
                action: 'orderBy',
                rows: newValue,
                column: column,
                order: order,
            });

            // Update order
            obj.updateOrderArrow(column, order);
            obj.updateOrder(newValue);

            // On sort event
            if (obj.ignoreEvents != true) {
                if (typeof(obj.options.onsort) == 'function') {
                    obj.options.onsort(el, column, order);
                }
            }

            return true;
        }
    }

    /**
     * Update order arrow
     */
    obj.updateOrderArrow = function(column, order) {
        // Remove order
        for (var i = 0; i < obj.headers.length; i++) {
            obj.headers[i].classList.remove('arrow-up');
            obj.headers[i].classList.remove('arrow-down');
        }

        // No order specified then toggle order
        if (order) {
            obj.headers[column].classList.add('arrow-up');
        } else {
            obj.headers[column].classList.add('arrow-down');
        }
    }

    /**
     * Update rows position
     */
    obj.updateOrder = function(rows) {
        // History
        var data = []
        for (var j = 0; j < rows.length; j++) {
            data[j] = obj.options.data[rows[j]];
        }
        obj.options.data = data;

        var data = []
        for (var j = 0; j < rows.length; j++) {
            data[j] = obj.records[rows[j]];
        }
        obj.records = data;

        var data = []
        for (var j = 0; j < rows.length; j++) {
            data[j] = obj.rows[rows[j]];
        }
        obj.rows = data;

        // Update references
        obj.updateTableReferences();

        // Redo search
        if (obj.searchInput.value) {
            obj.search(obj.searchInput.value);
        } else {
            // Create page
            obj.results = null;
            obj.pageNumber = 0;

            if (obj.options.pagination > 0) {
                obj.page(0);
            } else if (obj.options.lazyLoading == true) {
                obj.loadPage(0);
            } else {
                for (var j = 0; j < obj.rows.length; j++) {
                    obj.tbody.appendChild(obj.rows[j]);
                }
            }
        }
    }

    /**
     * Move row
     * 
     * @return void
     */
    obj.moveRow = function(o, d, ignoreDom) {
        if (Object.keys(obj.options.mergeCells).length > 0) {
           if (o > d) {
               var insertBefore = 1;
           } else {
               var insertBefore = 0;
           }

           if (obj.isRowMerged(o).length || obj.isRowMerged(d, insertBefore).length) {
                if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                    return false;
                } else {
                    obj.destroyMerged();
                }
            }
        }

        if (obj.options.search == true) {
            if (obj.results && obj.results.length != obj.rows.length) {
                if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {
                    obj.resetSearch();
                } else {
                    return false;
                }
            }

            obj.results = null;
        }

        if (! ignoreDom) {
            if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[d]) >= 0) {
                if (o > d) {
                    obj.tbody.insertBefore(obj.rows[o], obj.rows[d]);
                } else {
                    obj.tbody.insertBefore(obj.rows[o], obj.rows[d].nextSibling);
                }
            } else {
                obj.tbody.removeChild(obj.rows[o]);
            }
        }

        // Place references in the correct position
        obj.rows.splice(d, 0, obj.rows.splice(o, 1)[0]);
        obj.records.splice(d, 0, obj.records.splice(o, 1)[0]);
        obj.options.data.splice(d, 0, obj.options.data.splice(o, 1)[0]);

        // Respect pagination
        if (obj.options.pagination > 0 && obj.tbody.children.length != obj.options.pagination) {
            obj.page(obj.pageNumber);
        }

        // Keeping history of changes
        obj.setHistory({
            action:'moveRow',
            oldValue: o,
            newValue: d,
        });

        // Update table references
        obj.updateTableReferences();

        // Events
        if (obj.ignoreEvents != true) {
            if (typeof(obj.options.onmoverow) == 'function') {
                obj.options.onmoverow(el, o, d);
            }
        }
    }

    /**
     * Insert a new row
     * 
     * @param mixed - number of blank lines to be insert or a single array with the data of the new row
     * @param rowNumber
     * @param insertBefore
     * @return void
     */
    obj.insertRow = function(mixed, rowNumber, insertBefore) {
        // Configuration
        if (obj.options.allowInsertRow == true) {
            // Records
            var records = [];

            // Data to be insert
            var data = [];

            // The insert could be lead by number of rows or the array of data
            if (mixed > 0) {
                var numOfRows = mixed;
            } else {
                var numOfRows = 1;

                if (mixed) {
                    data = mixed;
                }
            }

            // Direction
            var insertBefore = insertBefore ? true : false;

            // Current column number
            var lastRow = obj.options.data.length - 1;

            if (rowNumber == undefined || rowNumber >= parseInt(lastRow) || rowNumber < 0) {
                rowNumber = lastRow;
            }

            // Onbeforeinsertrow
            if (typeof(obj.options.onbeforeinsertrow) == 'function') {
                if (! obj.options.onbeforeinsertrow(el, rowNumber, numOfRows, insertBefore)) {
                    console.log('onbeforeinsertrow returned false');

                    return false;
                }
            }

            // Merged cells
            if (Object.keys(obj.options.mergeCells).length > 0) {
                if (obj.isRowMerged(rowNumber, insertBefore).length) {
                    if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                        return false;
                    } else {
                        obj.destroyMerged();
                    }
                }
            }

            // Clear any search
            if (obj.options.search == true) {
                if (obj.results && obj.results.length != obj.rows.length) {
                    if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {
                        obj.resetSearch();
                    } else {
                        return false;
                    }
                }

                obj.results = null;
            }

            // Insertbefore
            var rowIndex = (! insertBefore) ? rowNumber + 1 : rowNumber;

            // Keep the current data
            var currentRecords = obj.records.splice(rowIndex);
            var currentData = obj.options.data.splice(rowIndex);
            var currentRows = obj.rows.splice(rowIndex);

            // Adding lines
            var rowRecords = [];
            var rowData = [];
            var rowNode = [];

            for (var row = rowIndex; row < (numOfRows + rowIndex); row++) {
                // Push data to the data container
                obj.options.data[row] = [];
                for (var col = 0; col < obj.options.columns.length; col++) {
                    obj.options.data[row][col]  = data[col] ? data[col] : '';
                }
                // Create row
                var tr = obj.createRow(row, obj.options.data[row]);
                // Append node
                if (currentRows[0]) {
                    if (Array.prototype.indexOf.call(obj.tbody.children, currentRows[0]) >= 0) {
                        obj.tbody.insertBefore(tr, currentRows[0]);
                    }
                } else {
                    if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[rowNumber]) >= 0) {
                        obj.tbody.appendChild(tr);
                    }
                }
                // Record History
                rowRecords.push(obj.records[row]);
                rowData.push(obj.options.data[row]);
                rowNode.push(tr);
            }

            // Copy the data back to the main data
            Array.prototype.push.apply(obj.records, currentRecords);
            Array.prototype.push.apply(obj.options.data, currentData);
            Array.prototype.push.apply(obj.rows, currentRows);

            // Respect pagination
            if (obj.options.pagination > 0) {
                obj.page(obj.pageNumber);
            }

            // Keep history
            obj.setHistory({
                action: 'insertRow',
                rowNumber: rowNumber,
                numOfRows: numOfRows,
                insertBefore: insertBefore,
                rowRecords: rowRecords,
                rowData: rowData,
                rowNode: rowNode,
            });

            // Remove table references
            obj.updateTableReferences();

            // Events
            if (obj.ignoreEvents != true) {
                if (typeof(obj.options.oninsertrow) == 'function') {
                    obj.options.oninsertrow(el, rowNumber, numOfRows, rowRecords, insertBefore);
                }
            }
        }
    }

    /**
     * Delete a row by number
     * 
     * @param integer rowNumber - row number to be excluded
     * @param integer numOfRows - number of lines
     * @return void
     */
    obj.deleteRow = function(rowNumber, numOfRows) {
        // Global Configuration
        if (obj.options.allowDeleteRow == true) {
            if (obj.options.allowDeletingAllRows == true || obj.options.data.length > 1) {
                // Delete row definitions
                if (rowNumber == undefined) {
                    var number = obj.getSelectedRows();

                    if (! number[0]) {
                        rowNumber = obj.options.data.length - 1;
                        numOfRows = 1;
                    } else {
                        rowNumber = parseInt(number[0].getAttribute('data-y'));
                        numOfRows = number.length;
                    }
                }

                // Last column
                var lastRow = obj.options.data.length - 1;

                if (rowNumber == undefined || rowNumber > lastRow || rowNumber < 0) {
                    rowNumber = lastRow;
                }

                if (! numOfRows) {
                    numOfRows = 1;
                }

                // Do not delete more than the number of recoreds
                if (rowNumber + numOfRows >= obj.options.data.length) {
                    numOfRows = obj.options.data.length - rowNumber;
                }

                // Onbeforedeleterow
                if (typeof(obj.options.onbeforedeleterow) == 'function') {
                    if (! obj.options.onbeforedeleterow(el, rowNumber, numOfRows)) {
                        console.log('onbeforedeleterow returned false');
                        return false;
                    }
                }

                if (parseInt(rowNumber) > -1) {
                    // Merged cells
                    var mergeExists = false;
                    if (Object.keys(obj.options.mergeCells).length > 0) {
                        for (var row = rowNumber; row < rowNumber + numOfRows; row++) {
                            if (obj.isRowMerged(row, false).length) {
                                mergeExists = true;
                            }
                        }
                    }
                    if (mergeExists) {
                        if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                            return false;
                        } else {
                            obj.destroyMerged();
                        }
                    }

                    // Clear any search
                    if (obj.options.search == true) {
                        if (obj.results && obj.results.length != obj.rows.length) {
                            if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {
                                obj.resetSearch();
                            } else {
                                return false;
                            }
                        }

                        obj.results = null;
                    }

                    // Remove node
                    for (var row = rowNumber; row < rowNumber + numOfRows; row++) {
                        if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[row]) >= 0) {
                            obj.rows[row].className = '';
                            obj.rows[row].parentNode.removeChild(obj.rows[row]);
                        }
                    }

                    // Remove data
                    var rowRecords = obj.records.splice(rowNumber, numOfRows);
                    var rowData = obj.options.data.splice(rowNumber, numOfRows);
                    var rowNode = obj.rows.splice(rowNumber, numOfRows);

                    // Respect pagination
                    if (obj.options.pagination > 0 && obj.tbody.children.length != obj.options.pagination) {
                        obj.page(obj.pageNumber);
                    }

                    // Remove selection
                    obj.conditionalSelectionUpdate(1, rowNumber, (rowNumber + numOfRows) - 1);

                    // Keep history
                    obj.setHistory({
                        action: 'deleteRow',
                        rowNumber: rowNumber,
                        numOfRows: numOfRows,
                        insertBefore: 1,
                        rowRecords: rowRecords,
                        rowData: rowData,
                        rowNode: rowNode
                    });

                    // Remove table references
                    obj.updateTableReferences();

                    // Events
                    if (obj.ignoreEvents != true) {
                        if (typeof(obj.options.ondeleterow) == 'function') {
                            obj.options.ondeleterow(el, rowNumber, numOfRows, rowRecords);
                        }
                    }
                }
            } else {
                console.error('JEXCEL. It is not possible to delete the last row');
            }
        }
    }


    /**
     * Move column
     * 
     * @return void
     */
    obj.moveColumn = function(o, d) {
        if (Object.keys(obj.options.mergeCells).length > 0) {
            if (o > d) {
                var insertBefore = 1;
            } else {
                var insertBefore = 0;
            }

            if (obj.isColMerged(o).length || obj.isColMerged(d, insertBefore).length) {
                if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                    return false;
                } else {
                    obj.destroyMerged();
                }
            }
        }

        var o = parseInt(o);
        var d = parseInt(d);

        if (o > d) {
            obj.headerContainer.insertBefore(obj.headers[o], obj.headers[d]);
            obj.colgroupContainer.insertBefore(obj.colgroup[o], obj.colgroup[d]);

            for (var j = 0; j < obj.rows.length; j++) {
                obj.rows[j].insertBefore(obj.records[j][o], obj.records[j][d]);
            }
        } else {
            obj.headerContainer.insertBefore(obj.headers[o], obj.headers[d].nextSibling);
            obj.colgroupContainer.insertBefore(obj.colgroup[o], obj.colgroup[d].nextSibling);

            for (var j = 0; j < obj.rows.length; j++) {
                obj.rows[j].insertBefore(obj.records[j][o], obj.records[j][d].nextSibling);
            }
        }

        obj.options.columns.splice(d, 0, obj.options.columns.splice(o, 1)[0]);
        obj.headers.splice(d, 0, obj.headers.splice(o, 1)[0]);
        obj.colgroup.splice(d, 0, obj.colgroup.splice(o, 1)[0]);

        for (var j = 0; j < obj.rows.length; j++) {
            obj.options.data[j].splice(d, 0, obj.options.data[j].splice(o, 1)[0]);
            obj.records[j].splice(d, 0, obj.records[j].splice(o, 1)[0]);
        }

        // Keeping history of changes
        obj.setHistory({
            action:'moveColumn',
            oldValue: o,
            newValue: d,
        });

        // Update table references
        obj.updateTableReferences();

        // Events
        if (obj.ignoreEvents != true) {
            if (typeof(obj.options.onmovecolumn) == 'function') {
                obj.options.onmovecolumn(el, o, d);
            }
        }
    }


    /**
     * Insert a new column
     * 
     * @param mixed - num of columns to be added or data to be added in one single column
     * @param int columnNumber - number of columns to be created
     * @param bool insertBefore
     * @param object properties - column properties
     * @return void
     */
    obj.insertColumn = function(mixed, columnNumber, insertBefore, properties) {
        // Configuration
        if (obj.options.allowInsertColumn == true) {
            // Records
            var records = [];

            // Data to be insert
            var data = [];

            // The insert could be lead by number of rows or the array of data
            if (mixed > 0) {
                var numOfColumns = mixed;
            } else {
                var numOfColumns = 1;

                if (mixed) {
                    data = mixed;
                }
            }

            // Direction
            var insertBefore = insertBefore ? true : false;

            // Current column number
            var lastColumn = obj.options.columns.length - 1;

            // Confirm position
            if (columnNumber == undefined || columnNumber >= parseInt(lastColumn) || columnNumber < 0) {
                columnNumber = lastColumn;
            }

            // Onbeforeinsertcolumn
            if (typeof(obj.options.onbeforeinsertcolumn) == 'function') {
                if (! obj.options.onbeforeinsertcolumn(el, columnNumber, numOfColumns, insertBefore)) {
                    console.log('onbeforeinsertcolumn returned false');

                    return false;
                }
            }

            // Merged cells
            if (Object.keys(obj.options.mergeCells).length > 0) {
                if (obj.isColMerged(columnNumber, insertBefore).length) {
                    if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                        return false;
                    } else {
                        obj.destroyMerged();
                    }
                }
            }

            // Create default properties
            if (! properties) {
                properties = [];
            }

            for (var i = 0; i < numOfColumns; i++) {
                if (! properties[i]) {
                    properties[i] = { type:'text', source:[], options:[], width:obj.options.defaultColWidth, align:obj.options.defaultColAlign };
                }
            }

            // Insert before
            var columnIndex = (! insertBefore) ? columnNumber + 1 : columnNumber;
            obj.options.columns = jexcel.injectArray(obj.options.columns, columnIndex, properties);

            // Open space in the containers
            var currentHeaders = obj.headers.splice(columnIndex);
            var currentColgroup = obj.colgroup.splice(columnIndex);

            // History
            var historyHeaders = [];
            var historyColgroup = [];
            var historyRecords = [];
            var historyData = [];

            // Add new headers
            for (var col = columnIndex; col < (numOfColumns + columnIndex); col++) {
                obj.createCellHeader(col);
                obj.headerContainer.insertBefore(obj.headers[col], obj.headerContainer.children[col+1]);
                obj.colgroupContainer.insertBefore(obj.colgroup[col], obj.colgroupContainer.children[col+1]);

                historyHeaders.push(obj.headers[col]);
                historyColgroup.push(obj.colgroup[col]);
            }

            // Adding visual columns
            for (var row = 0; row < obj.options.data.length; row++) {
                // Keep the current data
                var currentData = obj.options.data[row].splice(columnIndex);
                var currentRecord = obj.records[row].splice(columnIndex);

                // History
                historyData[row] = [];
                historyRecords[row] = [];

                for (var col = columnIndex; col < (numOfColumns + columnIndex); col++) {
                    // New value
                    var value = data[row] ? data[row] : '';
                    obj.options.data[row][col] = value;
                    // New cell
                    var td = obj.createCell(col, row, obj.options.data[row][col]);
                    obj.records[row][col] = td;
                    // Add cell to the row
                    if (obj.rows[row]) {
                        obj.rows[row].insertBefore(td, obj.rows[row].children[col+1]);
                    }

                    // Record History
                    historyData[row].push(value);
                    historyRecords[row].push(td);
                }

                // Copy the data back to the main data
                Array.prototype.push.apply(obj.options.data[row], currentData);
                Array.prototype.push.apply(obj.records[row], currentRecord);
            }

            Array.prototype.push.apply(obj.headers, currentHeaders);
            Array.prototype.push.apply(obj.colgroup, currentColgroup);

            // Adjust nested headers
            if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {
                // Flexible way to handle nestedheaders
                if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {
                    for (var j = 0; j < obj.options.nestedHeaders.length; j++) {
                        var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) + numOfColumns;
                        obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;
                        obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);
                    }
                } else {
                    var colspan = parseInt(obj.options.nestedHeaders[0].colspan) + numOfColumns;
                    obj.options.nestedHeaders[0].colspan = colspan;
                    obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);
                }
            }

            // Keep history
            obj.setHistory({
                action: 'insertColumn',
                columnNumber:columnNumber,
                numOfColumns:numOfColumns,
                insertBefore:insertBefore,
                columns:properties,
                headers:historyHeaders,
                colgroup:historyColgroup,
                records:historyRecords,
                data:historyData,
            });

            // Remove table references
            obj.updateTableReferences();

            // Events
            if (obj.ignoreEvents != true) {
                if (typeof(obj.options.oninsertcolumn) == 'function') {
                    obj.options.oninsertcolumn(el, columnNumber, numOfColumns, historyRecords, insertBefore);
                }
            }
        }
    }

    /**
     * Delete a column by number
     * 
     * @param integer columnNumber - reference column to be excluded
     * @param integer numOfColumns - number of columns to be excluded from the reference column
     * @return void
     */
    obj.deleteColumn = function(columnNumber, numOfColumns) {
        // Global Configuration
        if (obj.options.allowDeleteColumn == true) {
            if (obj.headers.length > 1) {
                // Delete column definitions
                if (columnNumber == undefined) {
                    var number = obj.getSelectedColumns(true);

                    if (! number.length) {
                        // Remove last column
                        columnNumber = obj.headers.length - 1;
                        numOfColumns = 1;
                    } else {
                        // Remove selected
                        columnNumber = parseInt(number[0]);
                        numOfColumns = parseInt(number.length);
                    }
                }

                // Lasat column
                var lastColumn = obj.options.data[0].length - 1;

                if (columnNumber == undefined || columnNumber > lastColumn || columnNumber < 0) {
                    columnNumber = lastColumn;
                }

                // Minimum of columns to be delete is 1
                if (! numOfColumns) {
                    numOfColumns = 1;
                }



                // Can't delete more than the limit of the table
                if (numOfColumns > obj.options.data[0].length - columnNumber) {
                    numOfColumns = obj.options.data[0].length - columnNumber;
                }

                // onbeforedeletecolumn
                if (typeof(obj.options.onbeforedeletecolumn) == 'function') {
                   if (! obj.options.onbeforedeletecolumn(el, columnNumber, numOfColumns)) {
                      console.log('onbeforedeletecolumn returned false');
                      return false;
                   }
                }

                // Can't remove the last column
                if (parseInt(columnNumber) > -1) {
                    // Merged cells
                    var mergeExists = false;
                    if (Object.keys(obj.options.mergeCells).length > 0) {
                        for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {
                            if (obj.isColMerged(col, false).length) {
                                mergeExists = true;
                            }
                        }
                    }
                    if (mergeExists) {
                        if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {
                            return false;
                        } else {
                            obj.destroyMerged();
                        }
                    }

                    // Delete the column properties
                    var columns = obj.options.columns.splice(columnNumber, numOfColumns);

                    for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {
                        obj.colgroup[col].className = '';
                        obj.headers[col].className = '';
                        obj.colgroup[col].parentNode.removeChild(obj.colgroup[col]);
                        obj.headers[col].parentNode.removeChild(obj.headers[col]);
                    }

                    var historyHeaders = obj.headers.splice(columnNumber, numOfColumns);
                    var historyColgroup = obj.colgroup.splice(columnNumber, numOfColumns);
                    var historyRecords = [];
                    var historyData = [];

                    for (var row = 0; row < obj.options.data.length; row++) {
                        for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {
                            obj.records[row][col].className = '';
                            obj.records[row][col].parentNode.removeChild(obj.records[row][col]);
                        }
                    }

                    // Delete headers
                    for (var row = 0; row < obj.options.data.length; row++) {
                        // History
                        historyData[row] = obj.options.data[row].splice(columnNumber, numOfColumns);
                        historyRecords[row] = obj.records[row].splice(columnNumber, numOfColumns);
                    }

                    // Remove selection
                    obj.conditionalSelectionUpdate(0, columnNumber, (columnNumber + numOfColumns) - 1);

                    // Adjust nested headers
                    if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {
                        // Flexible way to handle nestedheaders
                        if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {
                            for (var j = 0; j < obj.options.nestedHeaders.length; j++) {
                                var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) - numOfColumns;
                                obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;
                                obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);
                            }
                        } else {
                            var colspan = parseInt(obj.options.nestedHeaders[0].colspan) - numOfColumns;
                            obj.options.nestedHeaders[0].colspan = colspan;
                            obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);
                        }
                    }

                    // Keeping history of changes
                    obj.setHistory({
                        action:'deleteColumn',
                        columnNumber:columnNumber,
                        numOfColumns:numOfColumns,
                        insertBefore: 1,
                        columns:columns,
                        headers:historyHeaders,
                        colgroup:historyColgroup,
                        records:historyRecords,
                        data:historyData,
                    });

                    // Update table references
                    obj.updateTableReferences();

                    // Delete
                    if (obj.ignoreEvents != true) {
                        if (typeof(obj.options.ondeletecolumn) == 'function') {
                            obj.options.ondeletecolumn(el, columnNumber, numOfColumns, historyRecords);
                        }
                    }
                }
            } else {
                console.error('JEXCEL. It is not possible to delete the last column');
            }
        }
    }

    /**
     * Get seleted rows numbers
     * 
     * @return array
     */
    obj.getSelectedRows = function(asIds) {
        var rows = [];
        // Get all selected rows
        for (var j = 0; j < obj.rows.length; j++) {
            if (obj.rows[j].classList.contains('selected')) {
                if (asIds) {
                    rows.push(j);
                } else {
                    rows.push(obj.rows[j]);
                }
            }
        }

        return rows;
    },

    /**
     * Get seleted column numbers
     * 
     * @return array
     */
    obj.getSelectedColumns = function() {
        var cols = [];
        // Get all selected cols
        for (var i = 0; i < obj.headers.length; i++) {
            if (obj.headers[i].classList.contains('selected')) {
                cols.push(i);
            }
        }

        return cols;
    }

    /**
     * Get highlighted
     * 
     * @return array
     */
    obj.getHighlighted = function() {
        return obj.highlighted;
    }

    /**
     * Update cell references
     * 
     * @return void
     */
    obj.updateTableReferences = function() {
        // Update headers
        for (var i = 0; i < obj.headers.length; i++) {
            var x = obj.headers[i].getAttribute('data-x');

            if (x != i) {
                // Update coords
                obj.headers[i].setAttribute('data-x', i);
                // Title
                if (! obj.headers[i].getAttribute('title')) {
                    obj.headers[i].innerHTML = jexcel.getColumnName(i);
                }
            }
        }

        // Update all rows
        for (var j = 0; j < obj.rows.length; j++) {
            if (obj.rows[j]) {
                var y = obj.rows[j].getAttribute('data-y');

                if (y != j) {
                    // Update coords
                    obj.rows[j].setAttribute('data-y', j);
                    obj.rows[j].children[0].setAttribute('data-y', j);
                    // Row number
                    obj.rows[j].children[0].innerHTML = j + 1;
                }
            }
        }

        // Regular cells affected by this change
        var affectedTokens = [];
        var mergeCellUpdates = [];

        // Update cell
        var updatePosition = function(x,y,i,j) {
            if (x != i) {
                obj.records[j][i].setAttribute('data-x', i);
            }
            if (y != j) {
                obj.records[j][i].setAttribute('data-y', j);
            }

            // Other updates
            if (x != i || y != j) {
                var columnIdFrom = jexcel.getColumnNameFromId([x, y]);
                var columnIdTo = jexcel.getColumnNameFromId([i, j]);
                affectedTokens[columnIdFrom] = columnIdTo;
            }
        }

        for (var j = 0; j < obj.records.length; j++) {
            for (var i = 0; i < obj.records[0].length; i++) {
                if (obj.records[j][i]) {
                    // Current values
                    var x = obj.records[j][i].getAttribute('data-x');
                    var y = obj.records[j][i].getAttribute('data-y');

                    // Update column
                    if (obj.records[j][i].getAttribute('data-merged')) {
                        var columnIdFrom = jexcel.getColumnNameFromId([x, y]);
                        var columnIdTo = jexcel.getColumnNameFromId([i, j]);
                        if (mergeCellUpdates[columnIdFrom] == null) {
                            if (columnIdFrom == columnIdTo) {
                                mergeCellUpdates[columnIdFrom] = false;
                            } else {
                                var totalX = parseInt(i - x);
                                var totalY = parseInt(j - y);
                                mergeCellUpdates[columnIdFrom] = [ columnIdTo, totalX, totalY ];
                            }
                        }
                    } else {
                        updatePosition(x,y,i,j);
                    }
                }
            }
        }

        // Update merged if applicable
        var keys = Object.keys(mergeCellUpdates);
        if (keys.length) {
            for (var i = 0; i < keys.length; i++) {
                if (mergeCellUpdates[keys[i]]) {
                    var info = jexcel.getIdFromColumnName(keys[i], true)
                    var x = info[0];
                    var y = info[1];
                    updatePosition(x,y,x + mergeCellUpdates[keys[i]][1],y + mergeCellUpdates[keys[i]][2]);

                    var columnIdFrom = keys[i];
                    var columnIdTo = mergeCellUpdates[keys[i]][0];
                    for (var j = 0; j < obj.options.mergeCells[columnIdFrom][2].length; j++) {
                        var x = parseInt(obj.options.mergeCells[columnIdFrom][2][j].getAttribute('data-x'));
                        var y = parseInt(obj.options.mergeCells[columnIdFrom][2][j].getAttribute('data-y'));
                        obj.options.mergeCells[columnIdFrom][2][j].setAttribute('data-x', x + mergeCellUpdates[keys[i]][1]);
                        obj.options.mergeCells[columnIdFrom][2][j].setAttribute('data-y', y + mergeCellUpdates[keys[i]][2]);
                    }

                    obj.options.mergeCells[columnIdTo] = obj.options.mergeCells[columnIdFrom];
                    delete(obj.options.mergeCells[columnIdFrom]);
                }
            }
        }

        // Update formulas
        obj.updateFormulas(affectedTokens);

        // Update meta data
        obj.updateMeta(affectedTokens);

        // Refresh selection
        obj.refreshSelection();

        // Update table with custom configuration if applicable
        obj.updateTable();
    }

    /**
     * Custom settings for the cells
     */
    obj.updateTable = function() {
        // Check for spare
        if (obj.options.minSpareRows > 0) {
            var numBlankRows = 0;
            for (var j = obj.rows.length - 1; j >= 0; j--) {
                var test = false;
                for (var i = 0; i < obj.headers.length; i++) {
                    if (obj.options.data[j][i]) {
                        test = true;
                    }
                }
                if (test) {
                    break;
                } else {
                    numBlankRows++;
                }
            }

            if (obj.options.minSpareRows - numBlankRows > 0) {
                obj.insertRow(obj.options.minSpareRows - numBlankRows)
            }
        }

        if (obj.options.minSpareCols > 0) {
            var numBlankCols = 0;
            for (var i = obj.headers.length - 1; i >= 0 ; i--) {
                var test = false;
                for (var j = 0; j < obj.rows.length; j++) {
                    if (obj.options.data[j][i]) {
                        test = true;
                    }
                }
                if (test) {
                    break;
                } else {
                    numBlankCols++;
                }
            }

            if (obj.options.minSpareCols - numBlankCols > 0) {
                obj.insertColumn(obj.options.minSpareCols - numBlankCols)
            }
        }

        // Customizations by the developer
        if (typeof(obj.options.updateTable) == 'function') {
            if (obj.options.detachForUpdates) {
                el.removeChild(obj.content);
            }

            for (var j = 0; j < obj.rows.length; j++) {
                for (var i = 0; i < obj.headers.length; i++) {
                    obj.options.updateTable(el, obj.records[j][i], i, j, obj.options.data[j][i], obj.records[j][i].innerText, jexcel.getColumnNameFromId([i, j]));
                }
            }

            if (obj.options.detachForUpdates) {
                el.insertBefore(obj.content, obj.pagination);
            }
        }

        // Update corner position
        setTimeout(function() {
            obj.updateCornerPosition();
        },0);
    }

    /**
     * Show column
     */
    obj.showColumn = function(colNumber) {
        obj.headers[colNumber].style.display = '';
        obj.colgroup[colNumber].style.display = '';
        for (var j = 0; j < obj.options.data.length; j++) {
            obj.records[j][colNumber].style.display = '';
        }
    }

    /**
     * Hide column
     */
    obj.hideColumn = function(colNumber) {
        obj.headers[colNumber].style.display = 'none';
        obj.colgroup[colNumber].style.display = 'none';
        for (var j = 0; j < obj.options.data.length; j++) {
            obj.records[j][colNumber].style.display = 'none';
        }
    }

    /**
     * Show index column
     */
    obj.showIndex = function() {
        obj.table.classList.remove('jexcel_hidden_index');
    }

    /**
     * Hide index column
     */
    obj.hideIndex = function() {
        obj.table.classList.add('jexcel_hidden_index');
    }

    /**
     * Update all related cells in the chain
     */
    var chainLoopProtection = [];

    obj.updateFormulaChain = function(x, y, records) {
        var cellId = jexcel.getColumnNameFromId([x, y]);
        if (obj.formula[cellId] && obj.formula[cellId].length > 0) {
            if (chainLoopProtection[cellId]) {
                obj.records[y][x].innerHTML = '#ERROR';
                obj.formula[cellId] = '';
            } else {
                // Protection
                chainLoopProtection[cellId] = true;

                for (var i = 0; i < obj.formula[cellId].length; i++) {
                    var cell = jexcel.getIdFromColumnName(obj.formula[cellId][i], true);
                    // Update cell
                    var value = ''+obj.options.data[cell[1]][cell[0]];
                    if (value.substr(0,1) == '=') {
                        records.push(obj.updateCell(cell[0], cell[1], value, true));
                    } else {
                        // No longer a formula, remove from the chain
                        Object.keys(obj.formula)[i] = null;
                    }
                    obj.updateFormulaChain(cell[0], cell[1], records);
                }
            }
        }

        chainLoopProtection = [];
    }

    /**
     * Update formulas
     */
    obj.updateFormulas = function(referencesToUpdate) {
        // Update formulas
        for (var j = 0; j < obj.options.data.length; j++) {
            for (var i = 0; i < obj.options.data[0].length; i++) {
                var value = '' + obj.options.data[j][i];
                // Is formula
                if (value.substr(0,1) == '=') {
                    // Replace tokens
                    var newFormula = obj.updateFormula(value, referencesToUpdate);
                    if (newFormula != value) {
                        obj.options.data[j][i] = newFormula;
                    }
                }
            }
        }

        // Update formula chain
        var formula = [];
        var keys = Object.keys(obj.formula);
        for (var j = 0; j < keys.length; j++) {
            // Current key and values
            var key = keys[j];
            var value = obj.formula[key];
            // Update key
            if (referencesToUpdate[key]) {
                key = referencesToUpdate[key];
            }
            // Update values
            formula[key] = [];
            for (var i = 0; i < value.length; i++) {
                var letter = value[i];
                if (referencesToUpdate[letter]) {
                    letter = referencesToUpdate[letter];
                }
                formula[key].push(letter);
            }
        }
        obj.formula = formula;
    }

    /**
     * Update formula
     */
    obj.updateFormula = function(formula, referencesToUpdate) {
        var testLetter = /[A-Z]/;
        var testNumber = /[0-9]/;

        var newFormula = '';
        var letter = null;
        var number = null;
        var token = '';

        for (var index = 0; index < formula.length; index++) {
            if (testLetter.exec(formula[index])) {
                letter = 1;
                number = 0;
                token += formula[index];
            } else if (testNumber.exec(formula[index])) {
                number = letter ? 1 : 0;
                token += formula[index];
            } else {
                if (letter && number) {
                    token = referencesToUpdate[token] ? referencesToUpdate[token] : token;
                }
                newFormula += token;
                newFormula += formula[index];
                letter = 0;
                number = 0;
                token = '';
            }
        }

        if (token) {
            if (letter && number) {
                token = referencesToUpdate[token] ? referencesToUpdate[token] : token;
            }
            newFormula += token;
        }

        return newFormula;
    }

    /**
     * Parse formulas
     */
    obj.executeFormula = function(expression, x, y) {

        var formulaResults = [];
        var formulaLoopProtection = [];

        // Execute formula with loop protection
        var execute = function(expression, x, y) {
         // Parent column identification
            var parentId = jexcel.getColumnNameFromId([x, y]);

            // Code protection
            if (formulaLoopProtection[parentId]) {
                console.error('Reference loop detected');
                return '#ERROR';
            }

            formulaLoopProtection[parentId] = true;

            // Convert range tokens
            var tokensUpdate = function(tokens) {
                for (var index = 0; index < tokens.length; index++) {
                    var f = [];
                    var token = tokens[index].split(':');
                    var e1 = jexcel.getIdFromColumnName(token[0], true);
                    var e2 = jexcel.getIdFromColumnName(token[1], true);

                    if (e1[0] <= e2[0]) {
                        var x1 = e1[0];
                        var x2 = e2[0];
                    } else {
                        var x1 = e2[0];
                        var x2 = e1[0];
                    }

                    if (e1[1] <= e2[1]) {
                        var y1 = e1[1];
                        var y2 = e2[1];
                    } else {
                        var y1 = e2[1];
                        var y2 = e1[1];
                    }

                    for (var j = y1; j <= y2; j++) {
                        for (var i = x1; i <= x2; i++) {
                            f.push(jexcel.getColumnNameFromId([i, j]));
                        }
                    }

                    expression = expression.replace(tokens[index], f.join(','));
                }
            }

            var tokens = expression.match(/([A-Z]+[0-9]+)\:([A-Z]+[0-9]+)/g);
            if (tokens && tokens.length) {
                tokensUpdate(tokens);
            }

            // String
            var evalstring = '';

            // Get tokens
            var tokens = expression.match(/([A-Z]+[0-9]+)/g);

            // Direct self-reference protection
            if (tokens && tokens.indexOf(parentId) > -1) {
                console.error('Self Reference detected');
                return '#ERROR';
            } else {
                if (tokens) {
                    for (var i = 0; i < tokens.length; i++) {
                        // Keep chain
                        if (! obj.formula[tokens[i]]) {
                            obj.formula[tokens[i]] = [];
                        }
                        // Is already in the register
                        if (obj.formula[tokens[i]].indexOf(parentId) < 0) {
                            obj.formula[tokens[i]].push(parentId);
                        }

                        // Do not calculate again
                        if (eval('typeof(' + tokens[i] + ') == "undefined"')) {
                            // Coords
                            var position = jexcel.getIdFromColumnName(tokens[i], 1);
                            // Get value
                            if (typeof(obj.options.data[position[1]]) != 'undefined' && typeof(obj.options.data[position[1]][position[0]]) != 'undefined') {
                                var value = obj.options.data[position[1]][position[0]];
                            } else {
                                var value = '';
                            }
                            // Get column data
                            if ((''+value).substr(0,1) == '=') {
                                if (formulaResults[tokens[i]]) {
                                    value = formulaResults[tokens[i]];
                                } else {
                                    value = execute(value, position[0], position[1]);
                                    formulaResults[tokens[i]] = value;
                                }
                            }
                            // Type!
                            if ((''+value).trim() == '') {
                                // Null
                                evalstring += "var " + tokens[i] + " = null;";
                            } else {
                                if (value == Number(value) && obj.options.autoCasting == true) {
                                    // Number
                                    evalstring += "var " + tokens[i] + " = " + Number(value) + ";";
                                } else {
                                    // Trying any formatted number
                                    var number = obj.parseNumber(value, position[0])
                                    if (obj.options.autoCasting == true && number) {
                                        // Render as number
                                        evalstring += "var " + tokens[i] + " = " + number + ";";
                                    } else {
                                        // Render as string
                                        evalstring += "var " + tokens[i] + " = '" + value + "';";
                                    }
                                }
                            }
                        }
                    }
                }

                // Convert formula to javascript
                try {
                    evalstring += "function COLUMN() { return parseInt(x) + 1; }; function ROW() { return parseInt(y) + 1; }; function CELL() { return parentId; };";

                    var res = eval(evalstring + expression.substr(1));
                } catch (e) {
                    var res = '#ERROR';
                }

                return res;
            }
        }

        return execute(expression, x, y);
    }

    /**
     * Trying to extract a number from a string
     */
    obj.parseNumber = function(value, columnNumber) {
        // Decimal point
        var decimal = columnNumber && obj.options.columns[columnNumber].decimal ? obj.options.columns[columnNumber].decimal : '.';

        // Parse both parts of the number
        var number = ('' + value);
        number = number.split(decimal);
        number[0] = number[0].match(/[+-]?[0-9]/g);
        if (number[0]) {
            number[0] = number[0].join('');
        }
        if (number[1]) {
            number[1] = number[1].match(/[0-9]*/g).join('');
        }

        // Is a valid number
        if (number[0] && Number(number[0]) >= 0) {
            if (! number[1]) {
                var value = Number(number[0] + '.00');
            } else {
                var value = Number(number[0] + '.' + number[1]);
            }
        } else {
            var value = null;
        }

        return value;
    }

    /**
     * Get row number
     */
    obj.row = function(cell) {
    }

    /**
     * Get col number
     */
    obj.col = function(cell) {
    }

    obj.up = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (obj.selectedCell[3] > 0) {
                obj.up.visible(1, ctrlKey ? 0 : 1)
            }
        } else {
            if (obj.selectedCell[1] > 0) {
                obj.up.visible(0, ctrlKey ? 0 : 1)
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        // Update selection
        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);

        // Change page
        if (obj.options.lazyLoading == true) {
            if (obj.selectedCell[1] == 0 || obj.selectedCell[3] == 0) {
                obj.loadPage(0);
                obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
            } else {
                if (obj.loadValidation()) {
                    obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
                } else {
                    var item = parseInt(obj.tbody.firstChild.getAttribute('data-y'));
                    if (obj.selectedCell[1] - item < 30) {
                        obj.loadUp();
                        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
                    }
                }
            }
        } else if (obj.options.pagination > 0) {
            var pageNumber = obj.whichPage(obj.selectedCell[3]);
            if (pageNumber != obj.pageNumber) {
                obj.page(pageNumber);
            }
        }

        obj.updateScroll(1);
    }

    obj.up.visible = function(group, direction) {
        if (group == 0) {
            var x = parseInt(obj.selectedCell[0]);
            var y = parseInt(obj.selectedCell[1]);
        } else {
            var x = parseInt(obj.selectedCell[2]);
            var y = parseInt(obj.selectedCell[3]);
        }

        if (direction == 0) {
            for (var j = 0; j < y; j++) {
                if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {
                    y = j;
                    break;
                }
            }
        } else {
            y = obj.up.get(x, y);
        }

        if (group == 0) {
            obj.selectedCell[0] = x;
            obj.selectedCell[1] = y;
        } else {
            obj.selectedCell[2] = x;
            obj.selectedCell[3] = y;
        }
    }

    obj.up.get = function(x, y) {
        var x = parseInt(x);
        var y = parseInt(y);
        for (var j = (y - 1); j >= 0; j--) {
            if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {
                if (obj.records[j][x].getAttribute('data-merged')) {
                    if (obj.records[j][x] == obj.records[y][x]) {
                        continue;
                    }
                }
                y = j;
                break;
            }
        }

        return y;
    }

    obj.down = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (obj.selectedCell[3] < obj.records.length - 1) {
                obj.down.visible(1, ctrlKey ? 0 : 1)
            }
        } else {
            if (obj.selectedCell[1] < obj.records.length - 1) {
                obj.down.visible(0, ctrlKey ? 0 : 1)
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);

        // Change page
        if (obj.options.lazyLoading == true) {
            if ((obj.selectedCell[1] == obj.records.length - 1 || obj.selectedCell[3] == obj.records.length - 1)) {
                obj.loadPage(-1);
                obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
            } else {
                if (obj.loadValidation()) {
                    obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
                } else {
                    var item = parseInt(obj.tbody.lastChild.getAttribute('data-y'));
                    if (item - obj.selectedCell[3] < 30) {
                        obj.loadDown();
                        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
                    }
                }
            }
        } else if (obj.options.pagination > 0) {
            var pageNumber = obj.whichPage(obj.selectedCell[3]);
            if (pageNumber != obj.pageNumber) {
                obj.page(pageNumber);
            }
        }

        obj.updateScroll(3);
    }

    obj.down.visible = function(group, direction) {
        if (group == 0) {
            var x = parseInt(obj.selectedCell[0]);
            var y = parseInt(obj.selectedCell[1]);
        } else {
            var x = parseInt(obj.selectedCell[2]);
            var y = parseInt(obj.selectedCell[3]);
        }

        if (direction == 0) {
            for (var j = obj.rows.length - 1; j > y; j--) {
                if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {
                    y = j;
                    break;
                }
            }
        } else {
            y = obj.down.get(x, y);
        }

        if (group == 0) {
            obj.selectedCell[0] = x;
            obj.selectedCell[1] = y;
        } else {
            obj.selectedCell[2] = x;
            obj.selectedCell[3] = y;
        }
    }

    obj.down.get = function(x, y) {
        var x = parseInt(x);
        var y = parseInt(y);
        for (var j = (y + 1); j < obj.rows.length; j++) {
            if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {
                if (obj.records[j][x].getAttribute('data-merged')) {
                    if (obj.records[j][x] == obj.records[y][x]) {
                        continue;
                    }
                }
                y = j;
                break;
            }
        }

        return y;
    }

    obj.right = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (obj.selectedCell[2] < obj.headers.length - 1) {
                obj.right.visible(1, ctrlKey ? 0 : 1)
            }
        } else {
            if (obj.selectedCell[0] < obj.headers.length - 1) {
                obj.right.visible(0, ctrlKey ? 0 : 1)
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
        obj.updateScroll(2);
    }

    obj.right.visible = function(group, direction) {
        if (group == 0) {
            var x = parseInt(obj.selectedCell[0]);
            var y = parseInt(obj.selectedCell[1]);
        } else {
            var x = parseInt(obj.selectedCell[2]);
            var y = parseInt(obj.selectedCell[3]);
        }

        if (direction == 0) {
            for (var i = obj.headers.length - 1; i > x; i--) {
                if (obj.records[y][i].style.display != 'none') {
                    x = i;
                    break;
                }
            }
        } else {
            x = obj.right.get(x, y);
        }

        if (group == 0) {
            obj.selectedCell[0] = x;
            obj.selectedCell[1] = y;
        } else {
            obj.selectedCell[2] = x;
            obj.selectedCell[3] = y;
        }
    }

    obj.right.get = function(x, y) {
        var x = parseInt(x);
        var y = parseInt(y);

        for (var i = (x + 1); i < obj.headers.length; i++) {
            if (obj.records[y][i].style.display != 'none') {
                if (obj.records[y][i].getAttribute('data-merged')) {
                    if (obj.records[y][i] == obj.records[y][x]) {
                        continue;
                    }
                }
                x = i;
                break;
            }
        }

        return x;
    }

    obj.left = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (obj.selectedCell[2] > 0) {
                obj.left.visible(1, ctrlKey ? 0 : 1)
            }
        } else {
            if (obj.selectedCell[0] > 0) {
                obj.left.visible(0, ctrlKey ? 0 : 1)
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
        obj.updateScroll(0);
    }

    obj.left.visible = function(group, direction) {
        if (group == 0) {
            var x = parseInt(obj.selectedCell[0]);
            var y = parseInt(obj.selectedCell[1]);
        } else {
            var x = parseInt(obj.selectedCell[2]);
            var y = parseInt(obj.selectedCell[3]);
        }

        if (direction == 0) {
            for (var i = 0; i < x; i++) {
                if (obj.records[y][i].style.display != 'none') {
                    x = i;
                    break;
                }
            }
        } else {
            x = obj.left.get(x, y);
        }

        if (group == 0) {
            obj.selectedCell[0] = x;
            obj.selectedCell[1] = y;
        } else {
            obj.selectedCell[2] = x;
            obj.selectedCell[3] = y;
        }
    }

    obj.left.get = function(x, y) {
        var x = parseInt(x);
        var y = parseInt(y);
        for (var i = (x - 1); i >= 0; i--) {
            if (obj.records[y][i].style.display != 'none') {
                if (obj.records[y][i].getAttribute('data-merged')) {
                    if (obj.records[y][i] == obj.records[y][x]) {
                        continue;
                    }
                }
                x = i;
                break;
            }
        }

        return x;
    }

    obj.first = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (ctrlKey) {
                obj.selectedCell[3] = 0;
            } else {
                obj.left.visible(1, 0);
            }
        } else {
            if (ctrlKey) {
                obj.selectedCell[1] = 0;
            } else {
                obj.left.visible(0, 0);
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        // Change page
        if (obj.options.lazyLoading == true && (obj.selectedCell[1] == 0 || obj.selectedCell[3] == 0)) {
            obj.loadPage(0);
        } else if (obj.options.pagination > 0) {
            var pageNumber = obj.whichPage(obj.selectedCell[3]);
            if (pageNumber != obj.pageNumber) {
                obj.page(pageNumber);
            }
        }

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
        obj.updateScroll(1);
    }

    obj.last = function(shiftKey, ctrlKey) {
        if (shiftKey) {
            if (ctrlKey) {
                obj.selectedCell[3] = obj.records.length - 1;
            } else {
                obj.right.visible(1, 0);
            }
        } else {
            if (ctrlKey) {
                obj.selectedCell[1] = obj.records.length - 1;
            } else {
                obj.right.visible(0, 0);
            }
            obj.selectedCell[2] = obj.selectedCell[0];
            obj.selectedCell[3] = obj.selectedCell[1];
        }

        // Change page
        if (obj.options.lazyLoading == true && (obj.selectedCell[1] == obj.records.length - 1 || obj.selectedCell[3] == obj.records.length - 1)) {
            obj.loadPage(-1);
        } else if (obj.options.pagination > 0) {
            var pageNumber = obj.whichPage(obj.selectedCell[3]);
            if (pageNumber != obj.pageNumber) {
                obj.page(pageNumber);
            }
        }

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
        obj.updateScroll(3);
    }

    obj.selectAll = function() {
        if (! obj.selectedCell) {
            obj.selectedCell = [];
        }

        obj.selectedCell[0] = 0;
        obj.selectedCell[1] = 0;
        obj.selectedCell[2] = obj.headers.length - 1;
        obj.selectedCell[3] = obj.records.length - 1;

        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);
    }

    /**
     * Go to a page in a lazyLoading
     */
    obj.loadPage = function(pageNumber) {
        // Search
        if (obj.options.search == true && obj.results) {
            var results = obj.results;
        } else {
            var results = obj.rows;
        }

        // Per page
        var quantityPerPage = 100;

        // pageNumber
        if (pageNumber == null || pageNumber == -1) {
            // Last page
            pageNumber = Math.ceil(results.length / quantityPerPage); 
        }

        var startRow = (pageNumber * quantityPerPage);
        var finalRow = (pageNumber * quantityPerPage) + quantityPerPage;
        if (finalRow > results.length) {
            finalRow = results.length;
        }
        startRow = finalRow - 100;
        if (startRow < 0) {
            startRow = 0;
        }

        // Appeding items
        for (var j = startRow; j < finalRow; j++) {
            if (obj.options.search == true && obj.results) {
                obj.tbody.appendChild(obj.rows[results[j]]);
            } else {
                obj.tbody.appendChild(obj.rows[j]);
            }

            if (obj.tbody.children.length > quantityPerPage) {
                obj.tbody.removeChild(obj.tbody.firstChild);
            }
        }
    }

    obj.loadUp = function() {
        // Search
        if (obj.options.search == true && obj.results) {
            var results = obj.results;
        } else {
            var results = obj.rows;
        }
        var test = 0;
        if (results.length > 100) {
            // Get the first element in the page
            var item = parseInt(obj.tbody.firstChild.getAttribute('data-y'));
            if (obj.options.search == true && obj.results) {
                item = results.indexOf(item);
            }
            if (item > 0) {
                for (var j = 0; j < 30; j++) {
                    item = item - 1;
                    if (item > -1) {
                        if (obj.options.search == true && obj.results) {
                            obj.tbody.insertBefore(obj.rows[results[item]], obj.tbody.firstChild);
                        } else {
                            obj.tbody.insertBefore(obj.rows[item], obj.tbody.firstChild);
                        }
                        if (obj.tbody.children.length > 100) {
                            obj.tbody.removeChild(obj.tbody.lastChild);
                            test = 1;
                        }
                    }
                }
            }
        }
        return test;
    }

    obj.loadDown = function() {
        // Search
        if (obj.options.search == true && obj.results) {
            var results = obj.results;
        } else {
            var results = obj.rows;
        }
        var test = 0;
        if (results.length > 100) {
            // Get the last element in the page
            var item = parseInt(obj.tbody.lastChild.getAttribute('data-y'));
            if (obj.options.search == true && obj.results) {
                item = results.indexOf(item);
            }
            if (item < obj.rows.length - 1) {
                for (var j = 0; j <= 30; j++) {
                    if (item < results.length) {
                        if (obj.options.search == true && obj.results) {
                            obj.tbody.appendChild(obj.rows[results[item]]);
                        } else {
                            obj.tbody.appendChild(obj.rows[item]);
                        }
                        if (obj.tbody.children.length > 100) {
                            obj.tbody.removeChild(obj.tbody.firstChild);
                            test = 1;
                        }
                    }
                    item = item + 1;
                }
            }
        }

        return test;
    }

    obj.loadValidation = function() {
        if (obj.selectedCell) {
            var currentPage = parseInt(obj.tbody.firstChild.getAttribute('data-y')) / 100;
            var selectedPage = parseInt(obj.selectedCell[3] / 100);
            var totalPages = parseInt(obj.rows.length / 100);

            if (currentPage != selectedPage && selectedPage <= totalPages) {
                if (! Array.prototype.indexOf.call(obj.tbody.children, obj.rows[obj.selectedCell[3]])) {
                    obj.loadPage(selectedPage);
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Reset search
     */
    obj.resetSearch = function() {
        obj.searchInput.value = '';
        obj.search('');
        obj.results = null;
    }

    /**
     * Search
     */
    obj.search = function(query) {
        // Query
        if (query) {
            var query = query.toLowerCase();
        }

        // Reset selection
        obj.resetSelection();

        // Total of results
        obj.pageNumber = 0;
        obj.results = [];

        if (query) {
            // Search filter
            var search = function(item, query, index) {
                for (var i = 0; i < item.length; i++) {
                    if ((''+item[i]).toLowerCase().search(query) >= 0 ||
                        (''+obj.records[index][i].innerHTML).toLowerCase().search(query) >= 0) {
                        return true;
                    }
                }
                return false;
            }

            // Result
            var addToResult = function(k) {
                if (obj.results.indexOf(k) == -1) {
                    obj.results.push(k);
                }
            }

            // Filter
            var data = obj.options.data.filter(function(v, k) {
                if (search(v, query, k)) {
                    // Merged rows found
                    var rows = obj.isRowMerged(k);
                    if (rows.length) {
                        for (var i = 0; i < rows.length; i++) {
                            var row = jexcel.getIdFromColumnName(rows[i], true);
                            for (var j = 0; j < obj.options.mergeCells[rows[i]][1]; j++) {
                                addToResult(row[1]+j);
                            }
                        }
                    } else {
                        // Normal row found
                        addToResult(k);
                    }
                    return true;
                } else {
                    return false;
                }
            });
        } else {
            obj.results = null;
        }

        var total = 0;
        var index = 0;

        // Page 1
        if (obj.options.lazyLoading == true) {
            total = 100;
        } else if (obj.options.pagination > 0) {
            total = obj.options.pagination;
        } else {
            if (obj.results) {
                total = obj.results.length;
            } else {
                total = obj.rows.length;
            }
        }

        // Reset current nodes
        while (obj.tbody.firstChild) {
            obj.tbody.removeChild(obj.tbody.firstChild);
        }

        // Hide all records from the table
        for (var j = 0; j < obj.rows.length; j++) {
            if (! obj.results || obj.results.indexOf(j) > -1) {
                if (index < total) {
                    obj.tbody.appendChild(obj.rows[j]);
                    index++;
                }
                obj.rows[j].style.display = '';
            } else {
                obj.rows[j].style.display = 'none';
            }
        }

        // Update pagination
        if (obj.options.pagination > 0) {
            obj.updatePagination();
        }

        return total;
    }

    /**
     * Which page the cell is
     */
    obj.whichPage = function(cell) {
        // Search
        if (obj.options.search == true && obj.results) {
            cell = obj.results.indexOf(cell);
        }

        return (Math.ceil((parseInt(cell) + 1) / parseInt(obj.options.pagination))) - 1;
    }

    /**
     * Go to page
     */
    obj.page = function(pageNumber) {
        var oldPage = obj.pageNumber;

        // Search
        if (obj.options.search == true && obj.results) {
            var results = obj.results;
        } else {
            var results = obj.rows;
        }

        // Per page
        var quantityPerPage = parseInt(obj.options.pagination);

        // pageNumber
        if (pageNumber == null || pageNumber == -1) {
            // Last page
            pageNumber = Math.ceil(results.length / quantityPerPage); 
        }

        // Page number
        obj.pageNumber = pageNumber;

        var startRow = (pageNumber * quantityPerPage);
        var finalRow = (pageNumber * quantityPerPage) + quantityPerPage;
        if (finalRow > results.length) {
            finalRow = results.length;
        }
        if (startRow < 0) {
            startRow = 0;
        }

        // Reset container
        while (obj.tbody.firstChild) {
            obj.tbody.removeChild(obj.tbody.firstChild);
        }

        // Appeding items
        for (var j = startRow; j < finalRow; j++) {
            if (obj.options.search == true && obj.results) {
                obj.tbody.appendChild(obj.rows[results[j]]);
            } else {
                obj.tbody.appendChild(obj.rows[j]);
            }
        }

        if (obj.options.pagination > 0) {
            obj.updatePagination();
        }

        // Update corner position
        obj.updateCornerPosition();

        if (typeof(obj.options.onchangepage) == 'function') {
            obj.options.onchangepage(el, pageNumber, oldPage);
        }
    }

    /**
     * Update the pagination
     */
    obj.updatePagination = function() {
        // Reset container
        obj.pagination.children[0].innerHTML = '';
        obj.pagination.children[1].innerHTML = '';

        // Start pagination
        if (obj.options.pagination) {
            // Searchable
            if (obj.options.search == true && obj.results) {
                var results = obj.results.length;
            } else {
                var results = obj.rows.length;
            }

            if (! results) {
                // No records found
                obj.pagination.children[0].innerHTML = obj.options.text.noRecordsFound;
            } else {
                // Pagination container
                var quantyOfPages = Math.ceil(results / obj.options.pagination);

                if (obj.pageNumber < 6) {
                    var startNumber = 1;
                    var finalNumber = quantyOfPages < 10 ? quantyOfPages : 10;
                } else if (quantyOfPages - obj.pageNumber < 5) {
                    var startNumber = quantyOfPages - 9;
                    var finalNumber = quantyOfPages;
                    if (startNumber < 1) {
                        startNumber = 1;
                    }
                } else {
                    var startNumber = obj.pageNumber - 4;
                    var finalNumber = obj.pageNumber + 5;
                }

                // First
                if (startNumber > 1) {
                    var paginationItem = document.createElement('div');
                    paginationItem.className = 'jexcel_page';
                    paginationItem.innerHTML = '<';
                    paginationItem.title = 1;
                    obj.pagination.children[1].appendChild(paginationItem);
                }

                // Get page links
                for (var i = startNumber; i <= finalNumber; i++) {
                    var paginationItem = document.createElement('div');
                    paginationItem.className = 'jexcel_page';
                    paginationItem.innerHTML = i;
                    obj.pagination.children[1].appendChild(paginationItem);

                    if (obj.pageNumber == (i-1)) {
                        paginationItem.classList.add('jexcel_page_selected');
                    }
                }

                // Last
                if (finalNumber < quantyOfPages) {
                    var paginationItem = document.createElement('div');
                    paginationItem.className = 'jexcel_page';
                    paginationItem.innerHTML = '>';
                    paginationItem.title = quantyOfPages;
                    obj.pagination.children[1].appendChild(paginationItem);
                }

                // Text
                var format = function(format) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    return format.replace(/{(\d+)}/g, function(match, number) {
                      return typeof args[number] != 'undefined'
                        ? args[number]
                        : match
                      ;
                    });
                };

                obj.pagination.children[0].innerHTML = format(obj.options.text.showingPage, obj.pageNumber + 1, quantyOfPages)
            }
        }
    }

    /**
     * Download CSV table
     * 
     * @return null
     */
    obj.download = function(includeHeaders) {
        if (obj.options.allowExport == false) {
            console.error('Export not allowed');
        } else {
            // Data
            var data = '';
            if (includeHeaders == true || obj.options.includeHeadersOnDownload == true) {
                data += obj.getHeaders();
                data += "\r\n";
            }

            // Get data
            data += obj.copy(false, obj.options.csvDelimiter, true);

            // Download element
            var blob = new Blob(["\uFEFF"+data], {type: 'text/csv;charset=utf-8;'});

            // IE Compatibility
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(blob, options.csvFileName + '.csv');
            } else {
                // Download element
                var pom = document.createElement('a');
                var url = URL.createObjectURL(blob);
                pom.href = url;
                pom.setAttribute('download', obj.options.csvFileName + '.csv');
                document.body.appendChild(pom);
                pom.click();
                pom.parentNode.removeChild(pom);
            }
        }
    }

    /**
     * Initializes a new history record for undo/redo
     * 
     * @return null
     */
    obj.setHistory = function(changes) {
        if (obj.ignoreHistory != true) {
            // Increment and get the current history index
            var index = ++obj.historyIndex;

            // Slice the array to discard undone changes
            obj.history = (obj.history = obj.history.slice(0, index + 1));

            // Keep history
            obj.history[index] = changes;
        }
    }

    /**
     * Copy method
     * 
     * @param bool highlighted - Get only highlighted cells
     * @param delimiter - \t default to keep compatibility with excel
     * @return string value
     */
    obj.copy = function(highlighted, delimiter, returnData) {
        if (! delimiter) {
            delimiter = "\t";
        }

        // Controls
        var col = [];
        var colLabel = [];
        var row = [];
        var rowLabel = [];
        var x = obj.options.data[0].length
        var y = obj.options.data.length
        var tmp = '';

        // Reset container
        obj.style = [];

        // Go through the columns to get the data
        for (var j = 0; j < y; j++) {
            col = [];
            colLabel = [];

            for (var i = 0; i < x; i++) {
                // If cell is highlighted
                if (! highlighted || obj.records[j][i].classList.contains('highlight')) {
                    // Values
                    var value = obj.options.data[j][i];
                    if (value.match && (value.match(/,/g) || value.match(/\n/) || value.match(/\"/))) {
                        value = value.replace(new RegExp('"', 'g'), '""');
                        value = '"' + value + '"';
                    }
                    col.push(value);

                    // Labels
                    if (obj.options.columns[i].type == 'checkbox' || obj.options.columns[i].type == 'radio') {
                        var label = value;
                    } else {
                        var label = obj.records[j][i].innerHTML;
                        if (label.match && (label.match(/,/g) || label.match(/\n/) || label.match(/\"/))) {
                            // Scape double quotes
                            label = label.replace(new RegExp('"', 'g'), '""');
                            label = '"' + label + '"';
                        }
                    }
                    colLabel.push(label);

                    // Get style
                    tmp = obj.records[j][i].getAttribute('style');
                    obj.style.push(tmp ? tmp : '');
                }
            }

            if (col.length) {
                row.push(col.join(delimiter));
            }
            if (colLabel.length) {
                rowLabel.push(colLabel.join(delimiter));
            }
        }

        // Final string
        var str = row.join("\r\n");
        var strLabel = rowLabel.join("\r\n");

        // Create a hidden textarea to copy the values
        if (! returnData) {
            if (obj.options.copyCompatibility == true) {
                obj.textarea.value = strLabel;
            } else {
                obj.textarea.value = str;
            }
            obj.textarea.select();
            document.execCommand("copy");
        }

        // Keep data
        if (obj.options.copyCompatibility == true) {
            obj.data = strLabel;
        } else {
        obj.data = str;
        }
        // Keep non visible information
        obj.hashString = obj.hash(obj.data);

        return obj.data;
    }

    /**
     * jExcel paste method
     * 
     * @param integer row number
     * @return string value
     */
    obj.paste = function(x, y, data) {
        // Paste filter
        if (typeof(obj.options.onbeforepaste) == 'function') {
            var data = obj.options.onbeforepaste(el, data);
        }

        // Controls
        var hash = obj.hash(data);
        var style = (hash == obj.hashString) ? obj.style : null;

        // Depending on the behavior
        if (obj.options.copyCompatibility == true && hash == obj.hashString) {
            var data = obj.data;
        }

        // Split new line
        var data = obj.parseCSV(data, "\t");

        if (x != null && y != null && data) {
            // Records
            var i = 0;
            var j = 0;
            var records = [];
            var newStyle = {};
            var oldStyle = {};
            var styleIndex = 0;

            // Index
            var colIndex = parseInt(x);
            var rowIndex = parseInt(y);
            var row = null;

            // Go through the columns to get the data
            while (row = data[j]) {
                i = 0;
                colIndex = parseInt(x);

                while (row[i] != null) {
                    // Update and keep history
                    var record = obj.updateCell(colIndex, rowIndex, row[i]);
                    // Keep history
                    records.push(record);
                    // Update all formulas in the chain
                    obj.updateFormulaChain(colIndex, rowIndex, records);
                    // Style
                    if (style && style[styleIndex]) {
                        var columnName = jexcel.getColumnNameFromId([colIndex, rowIndex]);
                        newStyle[columnName] = style[styleIndex];
                        oldStyle[columnName] = obj.getStyle(columnName);
                        obj.records[rowIndex][colIndex].setAttribute('style', style[styleIndex]);
                        styleIndex++
                    }
                    i++;
                    if (row[i] != null) {
                        if (colIndex >= obj.headers.length - 1) {
                            obj.insertColumn();
                        }
                        colIndex = obj.right.get(colIndex, rowIndex);
                    }
                }

                j++;
                if (data[j]) {
                    if (rowIndex >= obj.rows.length-1) {
                        obj.insertRow();
                    }
                    rowIndex = obj.down.get(x, rowIndex);
                }
            }

            // Select the new cells
            obj.updateSelectionFromCoords(x, y, colIndex, rowIndex);

            // Update history
            obj.setHistory({
                action:'setValue',
                records:records,
                selection:obj.selectedCell,
                newStyle:newStyle,
                oldStyle:oldStyle,
            });

            // Update table
            obj.updateTable();

            // Paste event
            if (typeof(obj.options.onpaste) == 'function') {
                obj.options.onpaste(el, records);
            }

            // On after changes
            obj.onafterchanges(el, records);
        }
    }

    /**
     * Process row
     */
    obj.historyProcessRow = function(type, historyRecord) {
        var rowIndex = (! historyRecord.insertBefore) ? historyRecord.rowNumber + 1 : historyRecord.rowNumber;

        if (obj.options.search == true) {
            if (obj.results && obj.results.length != obj.rows.length) {
                obj.resetSearch();
            }
        }

        // Remove row
        if (type == 1) {
            var numOfRows = historyRecord.numOfRows;
            // Remove nodes
            for (var j = rowIndex; j < (numOfRows + rowIndex); j++) {
                obj.rows[j].parentNode.removeChild(obj.rows[j]);
            }
            // Remove references
            obj.records.splice(rowIndex, numOfRows);
            obj.options.data.splice(rowIndex, numOfRows);
            obj.rows.splice(rowIndex, numOfRows);

            obj.conditionalSelectionUpdate(1, rowIndex, (numOfRows + rowIndex) - 1);
        } else {
            // Insert data
            obj.records = jexcel.injectArray(obj.records, rowIndex, historyRecord.rowRecords);
            obj.options.data = jexcel.injectArray(obj.options.data, rowIndex, historyRecord.rowData);
            obj.rows = jexcel.injectArray(obj.rows, rowIndex, historyRecord.rowNode);
            // Insert nodes
            var index = 0
            for (var j = rowIndex; j < (historyRecord.numOfRows + rowIndex); j++) {
                obj.tbody.insertBefore(historyRecord.rowNode[index], obj.tbody.children[j]);
                index++;
            }
        }

        // Respect pagination
        if (obj.options.pagination > 0) {
            obj.page(obj.pageNumber);
        }

        obj.updateTableReferences();
    }

    /**
     * Process column
     */
    obj.historyProcessColumn = function(type, historyRecord) {
        var columnIndex = (! historyRecord.insertBefore) ? historyRecord.columnNumber + 1 : historyRecord.columnNumber;

        // Remove column
        if (type == 1) {
            var numOfColumns = historyRecord.numOfColumns;

            obj.options.columns.splice(columnIndex, numOfColumns);
            for (var i = columnIndex; i < (numOfColumns + columnIndex); i++) {
                obj.headers[i].parentNode.removeChild(obj.headers[i]);
                obj.colgroup[i].parentNode.removeChild(obj.colgroup[i]);
            }
            obj.headers.splice(columnIndex, numOfColumns);
            obj.colgroup.splice(columnIndex, numOfColumns);
            for (var j = 0; j < historyRecord.data.length; j++) {
                for (var i = columnIndex; i < (numOfColumns + columnIndex); i++) {
                    obj.records[j][i].parentNode.removeChild(obj.records[j][i]);
                }
                obj.records[j].splice(columnIndex, numOfColumns);
                obj.options.data[j].splice(columnIndex, numOfColumns);
            }

            obj.conditionalSelectionUpdate(0, columnIndex, (numOfColumns + columnIndex) - 1);
        } else {
            // Insert data
            obj.options.columns = jexcel.injectArray(obj.options.columns, columnIndex, historyRecord.columns);
            obj.headers = jexcel.injectArray(obj.headers, columnIndex, historyRecord.headers);
            obj.colgroup = jexcel.injectArray(obj.colgroup, columnIndex, historyRecord.colgroup);

            var index = 0
            for (var i = columnIndex; i < (historyRecord.numOfColumns + columnIndex); i++) {
                obj.headerContainer.insertBefore(historyRecord.headers[index], obj.headerContainer.children[i+1]);
                obj.colgroupContainer.insertBefore(historyRecord.colgroup[index], obj.colgroupContainer.children[i+1]);
                index++;
            }

            for (var j = 0; j < historyRecord.data.length; j++) {
                obj.options.data[j] = jexcel.injectArray(obj.options.data[j], columnIndex, historyRecord.data[j]);
                obj.records[j] = jexcel.injectArray(obj.records[j], columnIndex, historyRecord.records[j]);
                var index = 0
                for (var i = columnIndex; i < (historyRecord.numOfColumns + columnIndex); i++) {
                    obj.rows[j].insertBefore(historyRecord.records[j][index], obj.rows[j].children[i+1]);
                    index++;
                }
            }
        }

        // Adjust nested headers
        if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {
            // Flexible way to handle nestedheaders
            if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {
                for (var j = 0; j < obj.options.nestedHeaders.length; j++) {
                    if (type == 1) {
                        var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) - historyRecord.numOfColumns;
                    } else {
                        var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) + historyRecord.numOfColumns;
                    }
                    obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;
                    obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);
                }
            } else {
                if (type == 1) {
                    var colspan = parseInt(obj.options.nestedHeaders[0].colspan) - historyRecord.numOfColumns;
                } else {
                    var colspan = parseInt(obj.options.nestedHeaders[0].colspan) + historyRecord.numOfColumns;
                }
                obj.options.nestedHeaders[0].colspan = colspan;
                obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);
            }
        }

        obj.updateTableReferences();
    }

    /**
     * Undo last action
     */
    obj.undo = function() {
        // Ignore events and history
        var ignoreEvents = obj.ignoreEvents ? true : false;
        var ignoreHistory = obj.ignoreHistory ? true : false;

        obj.ignoreEvents = true;
        obj.ignoreHistory = true;

        // Records
        var records = [];

        // Update cells
        if (obj.historyIndex >= 0) {
            // History
            var historyRecord = obj.history[obj.historyIndex--];

            if (historyRecord.action == 'insertRow') {
                obj.historyProcessRow(1, historyRecord);
            } else if (historyRecord.action == 'deleteRow') {
                obj.historyProcessRow(0, historyRecord);
            } else if (historyRecord.action == 'insertColumn') {
                obj.historyProcessColumn(1, historyRecord);
            } else if (historyRecord.action == 'deleteColumn') {
                obj.historyProcessColumn(0, historyRecord);
            } else if (historyRecord.action == 'moveRow') {
                obj.moveRow(historyRecord.newValue, historyRecord.oldValue);
            } else if (historyRecord.action == 'moveColumn') {
                obj.moveColumn(historyRecord.newValue, historyRecord.oldValue);
            } else if (historyRecord.action == 'setMerge') {
                obj.removeMerge(historyRecord.column, historyRecord.data);
            } else if (historyRecord.action == 'setStyle') {
                obj.setStyle(historyRecord.oldValue, null, null, 1);
            } else if (historyRecord.action == 'setWidth') {
                obj.setWidth(historyRecord.column, historyRecord.oldValue);
            } else if (historyRecord.action == 'setHeight') {
                obj.setHeight(historyRecord.row, historyRecord.oldValue);
            } else if (historyRecord.action == 'setHeader') {
                obj.setHeader(historyRecord.column, historyRecord.oldValue);
            } else if (historyRecord.action == 'setComments') {
                obj.setComments(historyRecord.column, historyRecord.oldValue[0], historyRecord.oldValue[1]);
            } else if (historyRecord.action == 'orderBy') {
                var rows = [];
                for (var j = 0; j < historyRecord.rows.length; j++) {
                    rows[historyRecord.rows[j]] = j;
                }
                obj.updateOrderArrow(historyRecord.column, historyRecord.order ? 0 : 1);
                obj.updateOrder(rows);
            } else if (historyRecord.action == 'setValue') {
                // Redo for changes in cells
                for (var i = 0; i < historyRecord.records.length; i++) {
                    obj.updateCell(historyRecord.records[i].col, historyRecord.records[i].row, historyRecord.records[i].oldValue);
                    obj.updateFormulaChain(historyRecord.records[i].col, historyRecord.records[i].row, records);
                    if (historyRecord.oldStyle) {
                        obj.resetStyle(historyRecord.oldStyle, true);
                    }
                }
                // Update selection
                if (! historyRecord.selection) {
                    historyRecord.selection = [historyRecord.records[0].col, historyRecord.records[0].row];
                }
                obj.updateSelectionFromCoords(historyRecord.selection[0], historyRecord.selection[1], historyRecord.selection[2], historyRecord.selection[3]);
                // Update table
                obj.updateTable();
            }
        }
        obj.ignoreEvents = ignoreEvents;
        obj.ignoreHistory = ignoreHistory;

        if (typeof(obj.options.onundo) == 'function') {
            obj.options.onundo(el, historyRecord);
        }
    }

    /**
     * Redo previously undone action
     */
    obj.redo = function() {
        // Ignore events and history
        var ignoreEvents = obj.ignoreEvents ? true : false;
        var ignoreHistory = obj.ignoreHistory ? true : false;

        obj.ignoreEvents = true;
        obj.ignoreHistory = true;

        // Records
        var records = [];

        // Update cells
        if (obj.historyIndex < obj.history.length - 1) {
            // History
            var historyRecord = obj.history[++obj.historyIndex];

            if (historyRecord.action == 'insertRow') {
                obj.historyProcessRow(0, historyRecord);
            } else if (historyRecord.action == 'deleteRow') {
                obj.historyProcessRow(1, historyRecord);
            } else if (historyRecord.action == 'insertColumn') {
                obj.historyProcessColumn(0, historyRecord);
            } else if (historyRecord.action == 'deleteColumn') {
                obj.historyProcessColumn(1, historyRecord);
            } else if (historyRecord.action == 'moveRow') {
                obj.moveRow(historyRecord.oldValue, historyRecord.newValue);
            } else if (historyRecord.action == 'moveColumn') {
                obj.moveColumn(historyRecord.oldValue, historyRecord.newValue);
            } else if (historyRecord.action == 'setMerge') {
                obj.setMerge(historyRecord.column, historyRecord.colspan, historyRecord.rowspan, 1);
            } else if (historyRecord.action == 'setStyle') {
                obj.setStyle(historyRecord.newValue, null, null, 1);
            } else if (historyRecord.action == 'setWidth') {
                obj.setWidth(historyRecord.column, historyRecord.newValue);
            } else if (historyRecord.action == 'setHeight') {
                obj.setHeight(historyRecord.row, historyRecord.newValue);
            } else if (historyRecord.action == 'setHeader') {
                obj.setHeader(historyRecord.column, historyRecord.newValue);
            } else if (historyRecord.action == 'setComments') {
                obj.setComments(historyRecord.column, historyRecord.newValue[0], historyRecord.newValue[1]);
            } else if (historyRecord.action == 'orderBy') {
                obj.updateOrderArrow(historyRecord.column, historyRecord.order);
                obj.updateOrder(historyRecord.rows);
            } else if (historyRecord.action == 'setValue') {
                // Redo for changes in cells
                for (var i = 0; i < historyRecord.records.length; i++) {
                    obj.updateCell(historyRecord.records[i].col, historyRecord.records[i].row, historyRecord.records[i].newValue);
                    obj.updateFormulaChain(historyRecord.records[i].col, historyRecord.records[i].row, records);
                    if (historyRecord.newStyle) {
                        obj.resetStyle(historyRecord.newStyle, true);
                    }
                }

                // Update selection
                if (! historyRecord.selection) {
                    historyRecord.selection = [historyRecord.records[0].col, historyRecord.records[0].row];
                }
                obj.updateSelectionFromCoords(historyRecord.selection[0], historyRecord.selection[1], historyRecord.selection[2], historyRecord.selection[3]);
                // Update table
                obj.updateTable();
            }
        }
        obj.ignoreEvents = ignoreEvents;
        obj.ignoreHistory = ignoreHistory;

        if (typeof(obj.options.onredo) == 'function') {
            obj.options.onredo(el, historyRecord);
        }
    }

    /**
     * Get dropdown value from key
     */
    obj.getDropDownValue = function(column, key) {
        var value = [];

        if (obj.options.columns[column] && obj.options.columns[column].source) {
            // Create array from source
            var combo = [];
            var source = obj.options.columns[column].source;

            for (var i = 0; i < source.length; i++) {
                if (typeof(source[i]) == 'object') {
                    combo[source[i].id] = source[i].name;
                } else {
                    combo[source[i]] = source[i];
                }
            }

            // Garante single multiple compatibily
            var keys = ('' + key).split(';')

            for (var i = 0; i < keys.length; i++) {
                if (combo[keys[i]]) {
                    value.push(combo[keys[i]]);
                }
            }
        } else {
            console.error('Invalid column');
        }

        return (value.length > 0) ? value.join('; ') : '';
    }

    /**
     * From starckoverflow contributions
     */
    obj.parseCSV = function(str, delimiter) {
        // Remove last line break
        str = str.replace(/\r?\n$|\r$|\n$/g, "");
        // Last caracter is the delimiter
        if (str.charCodeAt(str.length-1) == 9) {
            str += "\0";
        }
        // user-supplied delimeter or default comma
        delimiter = (delimiter || ",");

        var arr = [];
        var quote = false;  // true means we're inside a quoted field
        // iterate over each character, keep track of current row and column (of the returned array)
        for (var row = 0, col = 0, c = 0; c < str.length; c++) {
            var cc = str[c], nc = str[c+1];
            arr[row] = arr[row] || [];
            arr[row][col] = arr[row][col] || '';

            // If the current character is a quotation mark, and we're inside a quoted field, and the next character is also a quotation mark, add a quotation mark to the current column and skip the next character
            if (cc == '"' && quote && nc == '"') { arr[row][col] += cc; ++c; continue; }  

            // If it's just one quotation mark, begin/end quoted field
            if (cc == '"') { quote = !quote; continue; }

            // If it's a comma and we're not in a quoted field, move on to the next column
            if (cc == delimiter && !quote) { ++col; continue; }

            // If it's a newline (CRLF) and we're not in a quoted field, skip the next character and move on to the next row and move to column 0 of that new row
            if (cc == '\r' && nc == '\n' && !quote) { ++row; col = 0; ++c; continue; }

            // If it's a newline (LF or CR) and we're not in a quoted field, move on to the next row and move to column 0 of that new row
            if (cc == '\n' && !quote) { ++row; col = 0; continue; }
            if (cc == '\r' && !quote) { ++row; col = 0; continue; }

            // Otherwise, append the current character to the current column
            arr[row][col] += cc;
        }
        return arr;
    }

    obj.hash = function(str) {
        var hash = 0, i, chr;

        if (str.length === 0) {
            return hash;
        } else {
            for (i = 0; i < str.length; i++) {
              chr = str.charCodeAt(i);
              hash = ((hash << 5) - hash) + chr;
              hash |= 0;
            }
        }
        return hash;
    }

    obj.onafterchanges = function(el, records) {
        if (! obj.ignoreEvents) {
            // On after changes
            if (typeof(obj.options.onafterchanges) == 'function') {
                obj.options.onafterchanges(el, records);
            }
        }
    }

    obj.destroy = function() {
        jexcel.destroy(el);
    }

    /**
     * Initialization method
     */
    obj.init = function() {
        jexcel.current = obj;

        // Build handlers
        if (typeof(jexcel.build) == 'function') {
            jexcel.build();
            jexcel.build = null;
        }

        // Load the table data based on an CSV file
        if (obj.options.csv) {
            // Loading
            if (obj.options.loadingSpin == true) {
                jSuites.loading.show();
            }

            // Load CSV file
            jSuites.ajax({
                url: obj.options.csv,
                method: 'GET',
                dataType: 'text',
                success: function(result) {
                    // Convert data
                    var newData = obj.parseCSV(result, obj.options.csvDelimiter)

                    // Headers
                    if (obj.options.csvHeaders == true && newData.length > 0) {
                        var headers = newData.shift();
                        for(var i = 0; i < headers.length; i++) {
                            if (! obj.options.columns[i]) {
                                obj.options.columns[i] = { type:'text', align:obj.options.defaultColAlign, width:obj.options.defaultColWidth };
                            }
                            // Precedence over pre-configurated titles
                            if (typeof obj.options.columns[i].title === 'undefined') {
                              obj.options.columns[i].title = headers[i];
                            }
                        }
                    }
                    // Data
                    obj.options.data = newData;
                    // Prepare table
                    obj.prepareTable();
                    // Hide spin
                    if (obj.options.loadingSpin == true) {
                        jSuites.loading.hide();
                    }
                }
            });
        } else if (obj.options.url) {
            // Loading
            if (obj.options.loadingSpin == true) {
                jSuites.loading.show();
            }

            jSuites.ajax({
                url: obj.options.url,
                method: 'GET',
                dataType: 'json',
                success: function(result) {
                    // Data
                    obj.options.data = (result.data) ? result.data : result;
                    // Prepare table
                    obj.prepareTable();
                    // Hide spin
                    if (obj.options.loadingSpin == true) {
                        jSuites.loading.hide();
                    }
                }
            });
        } else {
            // Prepare table
            obj.prepareTable();
        }
    }

    // Context menu
    if (options && options.contextMenu != null) {
        obj.options.contextMenu = options.contextMenu;
    } else {
        obj.options.contextMenu = function(el, x, y, e) {
            var items = [];

            if (y == null) {
                // Insert a new column
                if (obj.options.allowInsertColumn == true) {
                    items.push({
                        title:obj.options.text.insertANewColumnBefore,
                        onclick:function() {
                            obj.insertColumn(1, parseInt(x), 1);
                        }
                    });
                }

                if (obj.options.allowInsertColumn == true) {
                    items.push({
                        title:obj.options.text.insertANewColumnAfter,
                        onclick:function() {
                            obj.insertColumn(1, parseInt(x), 0);
                        }
                    });
                }

                // Delete a column
                if (obj.options.allowDeleteColumn == true) {
                    items.push({
                        title:obj.options.text.deleteSelectedColumns,
                        onclick:function() {
                            obj.deleteColumn(obj.getSelectedColumns().length ? undefined : parseInt(x));
                        }
                    });
                }

                // Rename column
                if (obj.options.allowRenameColumn == true) {
                    items.push({
                        title:obj.options.text.renameThisColumn,
                        onclick:function() {
                            obj.setHeader(x);
                        }
                    });
                }

                // Sorting
                if (obj.options.columnSorting == true) {
                    // Line
                    items.push({ type:'line' });

                    items.push({
                        title:obj.options.text.orderAscending,
                        onclick:function() {
                            obj.orderBy(x, 0);
                        }
                    });
                    items.push({
                        title:obj.options.text.orderDescending,
                        onclick:function() {
                            obj.orderBy(x, 1);
                        }
                    });
                }
            } else {
                // Insert new row
                if (obj.options.allowInsertRow == true) {
                    items.push({
                        title:obj.options.text.insertANewRowBefore,
                        onclick:function() {
                            obj.insertRow(1, parseInt(y), 1);
                        }
                    });

                    items.push({
                        title:obj.options.text.insertANewRowAfter,
                        onclick:function() {
                            obj.insertRow(1, parseInt(y));
                        }
                    });
                }

                if (obj.options.allowDeleteRow == true) {
                    items.push({
                        title:obj.options.text.deleteSelectedRows,
                        onclick:function() {
                            obj.deleteRow(obj.getSelectedRows().length ? undefined : parseInt(y));
                        }
                    });
                }

                if (x) {
                    if (obj.options.allowComments == true) {
                        items.push({ type:'line' });

                        var title = obj.records[y][x].getAttribute('title') || '';

                        items.push({
                            title: title ? obj.options.text.editComments : obj.options.text.addComments,
                            onclick:function() {
                                var comment = prompt(obj.options.text.comments, title);
                                if (comment) {
                                    obj.setComments([ x, y ], comment);
                                }
                            }
                        });

                        if (title) {
                            items.push({
                                title:obj.options.text.clearComments,
                                onclick:function() {
                                    obj.setComments([ x, y ], '');
                                }
                            });
                        }
                    }
                }
            }

            // Line
            items.push({ type:'line' });

            // Copy
            items.push({
                title:obj.options.text.copy,
                shortcut:'Ctrl + C',
                onclick:function() {
                    obj.copy(true);
                }
            });

            // Paste
            if (navigator && navigator.clipboard) {
                items.push({
                    title:obj.options.text.paste,
                    shortcut:'Ctrl + V',
                    onclick:function() {
                        if (obj.selectedCell) {
                            navigator.clipboard.readText().then(function(text) {
                                if (text) {
                                    jexcel.current.paste(obj.selectedCell[0], obj.selectedCell[1], text);
                                }
                            });
                        }
                    }
                });
            }

            // Save
            if (obj.options.allowExport) {
                items.push({
                    title: obj.options.text.saveAs,
                    shortcut: 'Ctrl + S',
                    onclick: function () {
                        obj.download();
                    }
                });
            }

            // About
            if (obj.options.about) {
                items.push({
                    title:obj.options.text.about,
                    onclick:function() {
                        alert(obj.options.about);
                    }
                });
            }

            return items;
        }
    }

    obj.scrollControls = function(e) {
        if (obj.options.lazyLoading == true) {
            if (jexcel.timeControlLoading == null) {
                jexcel.timeControlLoading = setTimeout(function() {
                    if (obj.content.scrollTop + obj.content.clientHeight >= obj.content.scrollHeight) {
                        if (obj.loadDown()) {
                            if (obj.content.scrollTop + obj.content.clientHeight > obj.content.scrollHeight - 10) {
                                obj.content.scrollTop = obj.content.scrollTop - obj.content.clientHeight;
                            }
                            obj.updateCornerPosition();
                        }
                    } else if (obj.content.scrollTop <= obj.content.clientHeight) {
                        if (obj.loadUp()) {
                            if (obj.content.scrollTop < 10) {
                                obj.content.scrollTop = obj.content.scrollTop + obj.content.clientHeight;
                            }
                            obj.updateCornerPosition();
                        }
                    }

                    jexcel.timeControlLoading = null;
                }, 100);
            }
        }

        // Close editor
        if (obj.options.lazyLoading == true || obj.options.tableOverflow == true) {
            if (obj.edition && e.target.className.substr(0,9) != 'jdropdown') {
                obj.closeEditor(obj.edition[0], true);
            }
        }
    }

    el.addEventListener("DOMMouseScroll", obj.scrollControls);
    el.addEventListener("mousewheel", obj.scrollControls);

    el.jexcel = obj;

    obj.init();

    return obj;
});

jexcel.current = null;
jexcel.timeControl = null;
jexcel.timeControlLoading = null;

jexcel.destroy = function(element, destroyEventHandlers) {
    if (element.jexcel) {
        element.removeEventListener("DOMMouseScroll", element.jexcel.scrollControls);
        element.removeEventListener("mousewheel", element.jexcel.scrollControls);
        element.jexcel = null;
        element.innerHTML = '';

        if (destroyEventHandlers) {
            document.removeEventListener("keydown", jexcel.keyDownControls);
            document.removeEventListener("mouseup", jexcel.mouseUpControls);
            document.removeEventListener("mousedown", jexcel.mouseDownControls);
            document.removeEventListener("mousemove", jexcel.mouseMoveControls);
            document.removeEventListener("mouseover", jexcel.mouseOverControls);
            document.removeEventListener("dblclick", jexcel.doubleClickControls);
            document.removeEventListener("paste", jexcel.pasteControls);
            document.removeEventListener("contextmenu", jexcel.contextMenuControls);
            document.removeEventListener("touchstart", jexcel.touchStartControls);
            document.removeEventListener("touchend", jexcel.touchEndControls);
            document.removeEventListener("touchcancel", jexcel.touchEndControls);
            jexcel = null;
        }
    }
}

jexcel.build = function() {
    document.addEventListener("keydown", jexcel.keyDownControls);
    document.addEventListener("mouseup", jexcel.mouseUpControls);
    document.addEventListener("mousedown", jexcel.mouseDownControls);
    document.addEventListener("mousemove", jexcel.mouseMoveControls);
    document.addEventListener("mouseover", jexcel.mouseOverControls);
    document.addEventListener("dblclick", jexcel.doubleClickControls);
    document.addEventListener("paste", jexcel.pasteControls);
    document.addEventListener("contextmenu", jexcel.contextMenuControls);
    document.addEventListener("touchstart", jexcel.touchStartControls);
    document.addEventListener("touchend", jexcel.touchEndControls);
    document.addEventListener("touchcancel", jexcel.touchEndControls);
    document.addEventListener("touchmove", jexcel.touchEndControls);
}

/**
 * Events
 */
jexcel.keyDownControls = function(e) {
    if (jexcel.current) {
        if (jexcel.current.edition) {
            if (e.which == 27) {
                // Escape
                if (jexcel.current.edition) {
                    // Exit without saving
                    jexcel.current.closeEditor(jexcel.current.edition[0], false);
                }
                e.preventDefault();
            } else if (e.which == 13) {
                // Enter
                if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'calendar') {
                    jexcel.current.editor[0].children[0].calendar.close(1);
                } else if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'dropdown' ||
                           jexcel.current.options.columns[jexcel.current.edition[2]].type == 'autocomplete') {
                    // Do nothing
                } else {
                    // Alt enter -> do not close editor
                    if ((jexcel.current.options.wordWrap == true ||
                         jexcel.current.options.columns[jexcel.current.edition[2]].wordWrap == true ||
                         jexcel.current.options.data[jexcel.current.edition[3]][jexcel.current.edition[2]].length > 200) && e.altKey) {
                        // Add new line to the editor
                        var editorTextarea = jexcel.current.edition[0].children[0];
                        var editorValue = jexcel.current.edition[0].children[0].value;
                        var editorIndexOf = editorTextarea.selectionStart;
                        editorValue = editorValue.slice(0, editorIndexOf) + "\n" + editorValue.slice(editorIndexOf);
                        editorTextarea.value = editorValue;
                        editorTextarea.focus();
                        editorTextarea.selectionStart = editorIndexOf + 1;
                        editorTextarea.selectionEnd = editorIndexOf + 1;
                    } else {
                        jexcel.current.edition[0].children[0].blur();
                    }
                }
            } else if (e.which == 9) {
                // Tab
                if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'calendar') {
                    jexcel.current.edition[0].children[0].calendar.close(1);
                } else {
                    jexcel.current.edition[0].children[0].blur();
                }
            }
        }

        if (! jexcel.current.edition && jexcel.current.selectedCell) {
            // Which key
            if (e.which == 37) {
                jexcel.current.left(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 39) {
                jexcel.current.right(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 38) {
                jexcel.current.up(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 40) {
                jexcel.current.down(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 36) {
                jexcel.current.first(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 35) {
                jexcel.current.last(e.shiftKey, e.ctrlKey);
                e.preventDefault();
            } else if (e.which == 32) {
                if (jexcel.current.options.editable == true) {
                    jexcel.current.setCheckRadioValue();
                }
                e.preventDefault();
            } else if (e.which == 46) {
                // Delete
                if (jexcel.current.options.editable == true) {
                    if (jexcel.current.selectedRow) {
                        if (jexcel.current.options.allowDeleteRow == true) {
                            if (confirm(jexcel.current.options.text.areYouSureToDeleteTheSelectedRows)) {
                                jexcel.current.deleteRow();
                            }
                        }
                    } else if (jexcel.current.selectedHeader) {
                        if (jexcel.current.options.allowDeleteColumn == true) {
                            if (confirm(jexcel.current.options.text.areYouSureToDeleteTheSelectedColumns)) {
                                jexcel.current.deleteColumn();
                            }
                        }
                    } else {
                        // Change value
                        jexcel.current.setValue(jexcel.current.highlighted, '');
                    }
                }
            } else if (e.which == 13) {
                // Move cursor
                if (e.shiftKey) {
                    jexcel.current.up();
                } else {
                    if (jexcel.current.options.allowInsertRow == true) {
                        if (jexcel.current.options.allowManualInsertRow == true) {
                            if (jexcel.current.selectedCell[1] == jexcel.current.options.data.length - 1) {
                                // New record in case selectedCell in the last row
                                jexcel.current.insertRow();
                            }
                        }
                    }

                    jexcel.current.down();
                }
                e.preventDefault();
            } else if (e.which == 9) {
                // Tab
                if (e.shiftKey) {
                    jexcel.current.left();
                } else {
                    if (jexcel.current.options.allowInsertColumn == true) {
                        if (jexcel.current.options.allowManualInsertColumn == true) {
                            if (jexcel.current.selectedCell[0] == jexcel.current.options.data[0].length - 1) {
                                // New record in case selectedCell in the last column
                                jexcel.current.insertColumn();
                            }
                        }
                    }

                    jexcel.current.right();
                }
                e.preventDefault();
            } else {
                if ((e.ctrlKey || e.metaKey) && ! e.shiftKey) {
                    if (e.which == 65) {
                        // Ctrl + A
                        jexcel.current.selectAll();
                        e.preventDefault();
                    } else if (e.which == 83) {
                        // Ctrl + S
                        jexcel.current.download();
                        e.preventDefault();
                    } else if (e.which == 89) {
                        // Ctrl + Y
                        jexcel.current.redo();
                        e.preventDefault();
                    } else if (e.which == 90) {
                        // Ctrl + Z
                        jexcel.current.undo();
                        e.preventDefault();
                    } else if (e.which == 67) {
                        // Ctrl + C
                        jexcel.current.copy(true);
                        e.preventDefault();
                    } else if (e.which == 67) {
                        // Ctrl + C
                        jexcel.current.copy(true);
                        e.preventDefault();
                    } else if (e.which == 88) {
                        // Ctrl + X
                        if (jexcel.current.options.editable == true) {
                            jexcel.cutControls();
                        } else {
                            jexcel.copyControls();
                        }
                        e.preventDefault();
                    } else if (e.which == 86) {
                        // Ctrl + V
                        jexcel.pasteControls();
                    }
                } else {
                    if (jexcel.current.selectedCell) {
                        if (jexcel.current.options.editable == true) {
                            var rowId = jexcel.current.selectedCell[1];
                            var columnId = jexcel.current.selectedCell[0];

                            // If is not readonly
                            if (jexcel.current.options.columns[columnId].type != 'readonly') {
                                // Characters able to start a edition
                                if (e.keyCode == 32) {
                                    // Space
                                    if (jexcel.current.options.columns[columnId].type == 'checkbox' ||
                                        jexcel.current.options.columns[columnId].type == 'radio') {
                                        e.preventDefault();
                                    } else {
                                        // Start edition
                                        jexcel.current.openEditor(jexcel.current.records[rowId][columnId], true);
                                    }
                                } else if (e.keyCode == 113) {
                                    // Start edition with current content F2
                                    jexcel.current.openEditor(jexcel.current.records[rowId][columnId], false);
                                } else if ((e.keyCode == 8) ||
                                           (e.keyCode >= 48 && e.keyCode <= 57) ||
                                           (e.keyCode >= 96 && e.keyCode <= 111) ||
                                           (e.keyCode == 187) ||
                                           (e.keyCode == 189) ||
                                           ((String.fromCharCode(e.keyCode) == e.key || String.fromCharCode(e.keyCode).toLowerCase() == e.key.toLowerCase()) && jexcel.validLetter(String.fromCharCode(e.keyCode)))) {
                                    // Start edition
                                    jexcel.current.openEditor(jexcel.current.records[rowId][columnId], true);
                                    // Prevent entries in the calendar
                                    if (jexcel.current.options.columns[columnId].type == 'calendar') {
                                        e.preventDefault();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (e.target.classList.contains('jexcel_search')) {
                if (jexcel.timeControl) {
                    clearTimeout(jexcel.timeControl);
                }

                jexcel.timeControl = setTimeout(function() {
                    jexcel.current.search(e.target.value);
                }, 200);
            }
        }
    }
}

jexcel.isMouseAction = false;

jexcel.mouseDownControls = function(e) {
    e = e || window.event;
    if (e.buttons) {
        var mouseButton = e.buttons;
    } else if (e.button) {
        var mouseButton = e.button;
    } else {
        var mouseButton = e.which;
    }

    // Get elements
    var jexcelTable = jexcel.getElement(e.target);

    if (jexcelTable[0]) {
        if (jexcel.current != jexcelTable[0].jexcel) {
            if (jexcel.current) {
                jexcel.current.resetSelection();
            }
            jexcel.current = jexcelTable[0].jexcel;
        }
    } else {
        if (jexcel.current) {
            jexcel.current.resetSelection(true);
            jexcel.current = null;
        }
    }

    if (jexcel.current && mouseButton == 1) {
        if (e.target.classList.contains('jexcel_selectall')) {
            if (jexcel.current) {
                jexcel.current.selectAll();
            }
        } else if (e.target.classList.contains('jexcel_corner')) {
            if (jexcel.current.options.editable == true) {
                jexcel.current.selectedCorner = true;
            }
        } else {
            // Header found
            if (jexcelTable[1] == 1) {
                var columnId = e.target.getAttribute('data-x');
                if (columnId) {
                    // Update cursor
                    var info = e.target.getBoundingClientRect();
                    if (jexcel.current.options.columnResize == true && info.width - e.offsetX < 6) {
                        // Resize helper
                        jexcel.current.resizing = {
                            mousePosition: e.pageX,
                            column: columnId,
                            width: info.width,
                        };

                        // Border indication
                        jexcel.current.headers[columnId].classList.add('resizing');
                        for (var j = 0; j < jexcel.current.records.length; j++) {
                            if (jexcel.current.records[j][columnId]) {
                                jexcel.current.records[j][columnId].classList.add('resizing');
                            }
                        }
                    } else if (jexcel.current.options.columnDrag == true && info.height - e.offsetY < 6) {
                        if (jexcel.current.isColMerged(columnId).length) {
                            console.error('JEXCEL: This column is part of a merged cell.');
                        } else {
                            // Reset selection
                            jexcel.current.resetSelection();
                            // Drag helper
                            jexcel.current.dragging = {
                                element: e.target,
                                column:columnId,
                                destination:columnId,
                            };
                            // Border indication
                            jexcel.current.headers[columnId].classList.add('dragging');
                            for (var j = 0; j < jexcel.current.records.length; j++) {
                                if (jexcel.current.records[j][columnId]) {
                                    jexcel.current.records[j][columnId].classList.add('dragging');
                                }
                            }
                        }
                    } else {
                        if (jexcel.current.selectedHeader && (e.shiftKey || e.ctrlKey)) {
                            var o = jexcel.current.selectedHeader;
                            var d = columnId;
                        } else {
                            // Press to rename
                            if (jexcel.current.selectedHeader == columnId && jexcel.current.options.allowRenameColumn == true) {
                                jexcel.timeControl = setTimeout(function() {
                                    jexcel.current.setHeader(columnId);
                                }, 800);
                            }

                            // Keep track of which header was selected first
                            jexcel.current.selectedHeader = columnId;

                            // Update selection single column
                            var o = columnId;
                            var d = columnId;
                        }

                        // Update selection
                        jexcel.current.updateSelectionFromCoords(o, 0, d, jexcel.current.options.data.length - 1);
                    }
                } else {
                    if (e.target.parentNode.classList.contains('jexcel_nested')) {
                        if (e.target.getAttribute('data-column')) {
                            var column = e.target.getAttribute('data-column').split(',');
                            var c1 = parseInt(column[0]);
                            var c2 = parseInt(column[column.length-1]);
                        } else {
                            var c1 = 0;
                            var c2 = jexcel.current.options.columns.length - 1;
                        }
                        jexcel.current.updateSelectionFromCoords(c1, 0, c2, jexcel.current.options.data.length - 1);
                    }
                }
            } else {
                jexcel.current.selectedHeader = false;
            }

            // Body found
            if (jexcelTable[1] == 2) {
                var rowId = e.target.getAttribute('data-y');

                if (e.target.classList.contains('jexcel_row')) {
                    var info = e.target.getBoundingClientRect();
                    if (jexcel.current.options.rowResize == true && info.height - e.offsetY < 6) {
                        // Resize helper
                        jexcel.current.resizing = {
                            element: e.target.parentNode,
                            mousePosition: e.pageY,
                            row: rowId,
                            height: info.height,
                        };
                        // Border indication
                        e.target.parentNode.classList.add('resizing');
                    } else if (jexcel.current.options.rowDrag == true && info.width - e.offsetX < 6) {
                        if (jexcel.current.isRowMerged(rowId).length) {
                            console.error('JEXCEL: This row is part of a merged cell');
                        } else if (jexcel.current.options.search == true && jexcel.current.results) {
                            console.error('JEXCEL: Please clear your search before perform this action');
                        } else {
                            // Reset selection
                            jexcel.current.resetSelection();
                            // Drag helper
                            jexcel.current.dragging = {
                                element: e.target.parentNode,
                                row:rowId,
                                destination:rowId,
                            };
                            // Border indication
                            e.target.parentNode.classList.add('dragging');
                        }
                    } else {
                        if (jexcel.current.selectedRow && (e.shiftKey || e.ctrlKey)) {
                            var o = jexcel.current.selectedRow;
                            var d = rowId;
                        } else {
                            // Keep track of which header was selected first
                            jexcel.current.selectedRow = rowId;

                            // Update selection single column
                            var o = rowId;
                            var d = rowId;
                        }

                        // Update selection
                        jexcel.current.updateSelectionFromCoords(0, o, jexcel.current.options.data[0].length - 1, d);
                    }
                } else {
                    // Jclose
                    if (e.target.classList.contains('jclose') && e.target.clientWidth - e.offsetX < 50 && e.offsetY < 50) {
                        jexcel.current.closeEditor(jexcel.current.edition[0], true);
                    } else {
                        var getCellCoords = function(element) {
                            var x = element.getAttribute('data-x');
                            var y = element.getAttribute('data-y');
                            if (x && y) {
                                return [x, y];
                            } else {
                                if (element.parentNode) {
                                    return getCellCoords(element.parentNode);
                                }
                            }
                        };

                        var position = getCellCoords(e.target);
                        if (position) {
                            var columnId = position[0];
                            var rowId = position[1];
                            // Close edition
                            if (jexcel.current.edition) {
                                if (jexcel.current.edition[2] != columnId || jexcel.current.edition[3] != rowId) {
                                    jexcel.current.closeEditor(jexcel.current.edition[0], true);
                                }
                            }

                            if (! jexcel.current.edition) {
                                // Update cell selection
                                if (e.shiftKey) {
                                    jexcel.current.updateSelectionFromCoords(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], columnId, rowId);
                                } else {
                                    jexcel.current.updateSelectionFromCoords(columnId, rowId);
                                }
                            }

                            // No full row selected
                            jexcel.current.selectedHeader = null;
                            jexcel.current.selectedRow = null;
                        }
                    }
                }
            } else {
                jexcel.current.selectedRow = false;
            }

            // Pagination
            if (e.target.classList.contains('jexcel_page')) {
                if (e.target.innerText == '<') {
                    jexcel.current.page(0);
                } else if (e.target.innerText == '>') {
                    jexcel.current.page(e.target.getAttribute('title') - 1);
                } else {
                    jexcel.current.page(e.target.innerText - 1);
                }
            }
        }

        if (jexcel.current.edition) {
            jexcel.isMouseAction = false;
        } else {
            jexcel.isMouseAction = true;
        }
    } else {
        jexcel.isMouseAction = false;
    }
}

jexcel.mouseUpControls = function(e) {
    if (jexcel.current) {
        // Update cell size
        if (jexcel.current.resizing) {
            // Columns to be updated
            if (jexcel.current.resizing.column) {
                // Remove Class
                jexcel.current.headers[jexcel.current.resizing.column].classList.remove('resizing');
                var newWidth = jexcel.current.colgroup[jexcel.current.resizing.column].getAttribute('width');
                jexcel.current.setWidth(jexcel.current.resizing.column, newWidth, jexcel.current.resizing.width);
                // Remove border
                jexcel.current.headers[jexcel.current.resizing.column].classList.remove('resizing');
                for (var j = 0; j < jexcel.current.records.length; j++) {
                    if (jexcel.current.records[j][jexcel.current.resizing.column]){
                        jexcel.current.records[j][jexcel.current.resizing.column].classList.remove('resizing');
                    }
                }
            } else {
                // Remove Class
                jexcel.current.rows[jexcel.current.resizing.row].children[0].classList.remove('resizing');
                var newHeight = jexcel.current.rows[jexcel.current.resizing.row].getAttribute('height');
                jexcel.current.setHeight(jexcel.current.resizing.row, newHeight, jexcel.current.resizing.height);
                // Remove border
                jexcel.current.resizing.element.classList.remove('resizing');
            }
            // Reset resizing helper
            jexcel.current.resizing = null;
        } else if (jexcel.current.dragging) {
            // Reset dragging helper
            if (jexcel.current.dragging) {
                if (jexcel.current.dragging.column) {
                    // Target
                    var columnId = e.target.getAttribute('data-x');
                    // Remove move style
                    jexcel.current.headers[jexcel.current.dragging.column].classList.remove('dragging');
                    for (var j = 0; j < jexcel.current.rows.length; j++) {
                        if (jexcel.current.records[j][jexcel.current.dragging.column]) {
                            jexcel.current.records[j][jexcel.current.dragging.column].classList.remove('dragging');
                        }
                    }
                    for (var i = 0; i < jexcel.current.headers.length; i++) {
                        jexcel.current.headers[i].classList.remove('dragging-left');
                        jexcel.current.headers[i].classList.remove('dragging-right');
                    }
                    // Update position
                    if (columnId) {
                        if (jexcel.current.dragging.column != jexcel.current.dragging.destination) {
                            jexcel.current.moveColumn(jexcel.current.dragging.column, jexcel.current.dragging.destination);
                        }
                    }
                } else {
                    var position = Array.prototype.indexOf.call(jexcel.current.dragging.element.parentNode.children, jexcel.current.dragging.element);
                    if (jexcel.current.dragging.row != position) {
                        jexcel.current.moveRow(jexcel.current.dragging.row, position, true);
                    }
                    jexcel.current.dragging.element.classList.remove('dragging');
                }
                jexcel.current.dragging = null;
            }
        } else {
            // Close any corner selection
            if (jexcel.current.selectedCorner) {
                jexcel.current.selectedCorner = false;

                // Data to be copied
                if (jexcel.current.selection.length > 0) {
                    // Copy data
                    jexcel.current.copyData(jexcel.current.selection[0], jexcel.current.selection[jexcel.current.selection.length - 1]);

                    // Remove selection
                    jexcel.current.removeCopySelection();
                }
            }
        }
    }

    // Clear any time control
    if (jexcel.timeControl) {
        clearTimeout(jexcel.timeControl);
        jexcel.timeControl = null;
    }

    // Mouse up
    jexcel.isMouseAction = false;
}

// Mouse move controls
jexcel.mouseMoveControls = function(e) {
    e = e || window.event;
    if (e.buttons) {
        var mouseButton = e.buttons;
    } else if (e.button) {
        var mouseButton = e.button;
    } else {
        var mouseButton = e.which;
    }

    if (! mouseButton) {
        jexcel.isMouseAction = false;
    }

    if (jexcel.current) {
        if (jexcel.isMouseAction == true) {
            // Resizing is ongoing
            if (jexcel.current.resizing) {
                if (jexcel.current.resizing.column) {
                    var width = e.pageX - jexcel.current.resizing.mousePosition;

                    if (jexcel.current.resizing.width + width > 0) {
                        var tempWidth = jexcel.current.resizing.width + width;
                        jexcel.current.colgroup[jexcel.current.resizing.column].setAttribute('width', tempWidth);

                        jexcel.current.updateCornerPosition();
                    }
                } else {
                    var height = e.pageY - jexcel.current.resizing.mousePosition;

                    if (jexcel.current.resizing.height + height > 0) {
                        var tempHeight = jexcel.current.resizing.height + height;
                        jexcel.current.rows[jexcel.current.resizing.row].setAttribute('height', tempHeight);

                        jexcel.current.updateCornerPosition();
                    }
                }
            }
        } else {
            var x = e.target.getAttribute('data-x');
            var y = e.target.getAttribute('data-y');
            var rect = e.target.getBoundingClientRect();

            if (jexcel.current.cursor) {
                jexcel.current.cursor.style.cursor = '';
                jexcel.current.cursor = null;
            }

            if (e.target.parentNode.parentNode && e.target.parentNode.parentNode.className) {
                if (e.target.parentNode.parentNode.classList.contains('resizable')) {
                    if (e.target && x && ! y && (rect.width - (e.clientX - rect.left) < 6)) {
                        jexcel.current.cursor = e.target;
                        jexcel.current.cursor.style.cursor = 'col-resize';
                    } else if (e.target && ! x && y && (rect.height - (e.clientY - rect.top) < 6)) {
                        jexcel.current.cursor = e.target;
                        jexcel.current.cursor.style.cursor = 'row-resize';
                    }
                }

                if (e.target.parentNode.parentNode.classList.contains('draggable')) {
                    if (e.target && ! x && y && (rect.width - (e.clientX - rect.left) < 6)) {
                        jexcel.current.cursor = e.target;
                        jexcel.current.cursor.style.cursor = 'move';
                    } else if (e.target && x && ! y && (rect.height - (e.clientY - rect.top) < 6)) {
                        jexcel.current.cursor = e.target;
                        jexcel.current.cursor.style.cursor = 'move';
                    }
                }
            }
        }
    }
}

jexcel.mouseOverControls = function(e) {
    e = e || window.event;
    if (e.buttons) {
        var mouseButton = e.buttons;
    } else if (e.button) {
        var mouseButton = e.button;
    } else {
        var mouseButton = e.which;
    }

    if (! mouseButton) {
        jexcel.isMouseAction = false;
    }

    if (jexcel.current && jexcel.isMouseAction == true) {
        // Get elements
        var jexcelTable = jexcel.getElement(e.target);

        if (jexcelTable[0]) {
            // Avoid cross reference
            if (jexcel.current != jexcelTable[0].jexcel) {
                if (jexcel.current) {
                    return false;
                }
            }

            var columnId = e.target.getAttribute('data-x');
            var rowId = e.target.getAttribute('data-y');

            if (jexcel.current.dragging) {
                if (jexcel.current.dragging.column) {
                    if (columnId) {
                        if (jexcel.current.isColMerged(columnId).length) {
                            console.error('JEXCEL: This column is part of a merged cell.');
                        } else {
                            for (var i = 0; i < jexcel.current.headers.length; i++) {
                                jexcel.current.headers[i].classList.remove('dragging-left');
                                jexcel.current.headers[i].classList.remove('dragging-right');
                            }

                            if (jexcel.current.dragging.column == columnId) {
                                jexcel.current.dragging.destination = parseInt(columnId);
                            } else {
                                if (e.target.clientWidth / 2 > e.offsetX) {
                                    if (jexcel.current.dragging.column < columnId) {
                                        jexcel.current.dragging.destination = parseInt(columnId) - 1;
                                    } else {
                                        jexcel.current.dragging.destination = parseInt(columnId);
                                    }
                                    jexcel.current.headers[columnId].classList.add('dragging-left');
                                } else {
                                    if (jexcel.current.dragging.column < columnId) {
                                        jexcel.current.dragging.destination = parseInt(columnId);
                                    } else {
                                        jexcel.current.dragging.destination = parseInt(columnId) + 1;
                                    }
                                    jexcel.current.headers[columnId].classList.add('dragging-right');
                                }
                            }
                        }
                    }
                } else {
                    if (rowId) {
                        if (jexcel.current.isRowMerged(rowId).length) {
                            console.error('JEXCEL: This row is part of a merged cell.');
                        } else {
                            var target = (e.target.clientHeight / 2 > e.offsetY) ? e.target.parentNode.nextSibling : e.target.parentNode;
                            e.target.parentNode.parentNode.insertBefore(jexcel.current.dragging.element, target);
                        }
                    }
                }
            } else if (jexcel.current.resizing) {
            } else {
                // Header found
                if (jexcelTable[1] == 1) {
                    if (jexcel.current.selectedHeader) {
                        var columnId = e.target.getAttribute('data-x');
                        var o = jexcel.current.selectedHeader;
                        var d = columnId;
                        // Update selection
                        jexcel.current.updateSelectionFromCoords(o, 0, d, jexcel.current.options.data.length - 1);
                    }
                }

                // Body found
                if (jexcelTable[1] == 2) {
                    if (e.target.classList.contains('jexcel_row')) {
                        if (jexcel.current.selectedRow) {
                            var o = jexcel.current.selectedRow;
                            var d = rowId;
                            // Update selection
                            jexcel.current.updateSelectionFromCoords(0, o, jexcel.current.options.data[0].length - 1, d);
                        }
                    } else {
                        // Do not select edtion is in progress
                        if (! jexcel.current.edition) {
                            if (columnId && rowId) {
                                if (jexcel.current.selectedCorner) {
                                    jexcel.current.updateCopySelection(columnId, rowId);
                                } else {
                                    if (jexcel.current.selectedCell) {
                                        jexcel.current.updateSelectionFromCoords(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], columnId, rowId);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Clear any time control
    if (jexcel.timeControl) {
        clearTimeout(jexcel.timeControl);
        jexcel.timeControl = null;
    }
}

/**
 * Double click event handler: controls the double click in the corner, cell edition or column re-ordering.
 */
jexcel.doubleClickControls = function(e) {
    // Jexcel is selected
    if (jexcel.current) {
        // Corner action
        if (e.target.classList.contains('jexcel_corner')) {
            // Any selected cells
            if (jexcel.current.highlighted.length > 0) {
                // Copy from this
                var x1 = jexcel.current.highlighted[0].getAttribute('data-x');
                var y1 = parseInt(jexcel.current.highlighted[jexcel.current.highlighted.length - 1].getAttribute('data-y')) + 1;
                // Until this
                var x2 = jexcel.current.highlighted[jexcel.current.highlighted.length - 1].getAttribute('data-x');
                var y2 = jexcel.current.records.length - 1
                // Execute copy
                jexcel.current.copyData(jexcel.current.records[y1][x1], jexcel.current.records[y2][x2]);
            }
        } else {
            // Get table
            var jexcelTable = jexcel.getElement(e.target);

            // Double click over header
            if (jexcelTable[1] == 1 && jexcel.current.options.columnSorting == true) {
                // Check valid column header coords
                var columnId = e.target.getAttribute('data-x');
                if (columnId) {
                    jexcel.current.orderBy(columnId);
                }
            }

            // Double click over body
            if (jexcelTable[1] == 2 && jexcel.current.options.editable == true) {
                if (! jexcel.current.edition) {
                    var getCellCoords = function(element) {
                        if (element.parentNode) {
                            var x = element.getAttribute('data-x');
                            var y = element.getAttribute('data-y');
                            if (x && y) {
                                return element;
                            } else {
                                return getCellCoords(element.parentNode);
                            }
                        }
                    }
                    var cell = getCellCoords(e.target);
                    if (cell && cell.classList.contains('highlight')) {
                        jexcel.current.openEditor(cell);
                    }
                }
            }
        }
    }
}

jexcel.copyControls = function(e) {
    if (jexcel.current && jexcel.copyControls.enabled) {
        if (! jexcel.current.edition) {
            jexcel.current.copy(true);
        }
    }
}

jexcel.cutControls = function(e) {
    if (jexcel.current) {
        if (! jexcel.current.edition) {
            jexcel.current.copy(true);
            if (jexcel.current.options.editable == true) {
                jexcel.current.setValue(jexcel.current.highlighted, '');
            }
        }
    }
}

jexcel.pasteControls = function(e) {
    if (jexcel.current && jexcel.current.selectedCell) {
        if (! jexcel.current.edition) {
            if (jexcel.current.options.editable == true) {
                if (e && e.clipboardData) {
                    jexcel.current.paste(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], e.clipboardData.getData('text'));
                    e.preventDefault();
                } else if (window.clipboardData) {
                    jexcel.current.paste(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], window.clipboardData.getData('text'));
                }
            }
        }
    }
}

jexcel.contextMenuControls = function(e) {
    e = e || window.event;
    if ("buttons" in e) {
        var mouseButton = e.buttons;
    } else {
        var mouseButton = e.which || e.button;
    }

    if (jexcel.current) {
        if (jexcel.current.edition) {
            e.preventDefault();
        } else if (jexcel.current.options.contextMenu) {
            jexcel.current.contextMenu.contextmenu.close();

            if (jexcel.current) {
                var x = e.target.getAttribute('data-x');
                var y = e.target.getAttribute('data-y');

                if (x || y) {
                    // Table found
                    var items = jexcel.current.options.contextMenu(jexcel.current, x, y, e);
                    // The id is depending on header and body
                    jexcel.current.contextMenu.contextmenu.open(e, items);
                    // Avoid the real one
                    e.preventDefault();
                }
            }
        }
    }
}

jexcel.touchStartControls = function(e) {
    var jexcelTable = jexcel.getElement(e.target);

    if (jexcelTable[0]) {
        if (jexcel.current != jexcelTable[0].jexcel) {
            if (jexcel.current) {
                jexcel.current.resetSelection();
            }
            jexcel.current = jexcelTable[0].jexcel;
        }
    } else {
        if (jexcel.current) {
            jexcel.current.resetSelection();
            jexcel.current = null;
        }
    }

    if (jexcel.current) {
        if (! jexcel.current.edition) {
            var columnId = e.target.getAttribute('data-x');
            var rowId = e.target.getAttribute('data-y');

            if (columnId && rowId) {
                jexcel.current.updateSelectionFromCoords(columnId, rowId);

                jexcel.timeControl = setTimeout(function() {
                    // Keep temporary reference to the element
                    if (jexcel.current.options.columns[columnId].type == 'color') {
                        jexcel.tmpElement = null;
                    } else {
                        jexcel.tmpElement = e.target;
                    }
                    jexcel.current.openEditor(e.target, false, e);
                }, 500);
            }
        }
    }
}

jexcel.touchEndControls = function(e) {
    // Clear any time control
    if (jexcel.timeControl) {
        clearTimeout(jexcel.timeControl);
        jexcel.timeControl = null;
        // Element
        if (jexcel.tmpElement && jexcel.tmpElement.children[0].tagName == 'INPUT') {
            jexcel.tmpElement.children[0].focus();
        }
        jexcel.tmpElement = null;
    }
}

/**
 * Jexcel extensions
 */

jexcel.createTabs = function(tabs, result) {
    // Create tab container
    tabs.innerHTML = '';
    tabs.classList.add('jexcel_tabs');
    var spreadsheet = []
    var link = [];
    for (var i = 0; i < result.length; i++) {
        // Spreadsheet container
        spreadsheet[i] = document.createElement('div');
        spreadsheet[i].classList.add('jexcel_tab');
        // Tab link
        link[i] = document.createElement('div');
        link[i].classList.add('jexcel_tab_link');
        link[i].setAttribute('data-spreadsheet', i);
        link[i].innerHTML = result[i].sheetName;
        link[i].onclick = function() {
            for (var j = 0; j < spreadsheet.length; j++) {
                spreadsheet[j].style.display = 'none';
                link[j].classList.remove('selected');
            }
            var i = this.getAttribute('data-spreadsheet');
            spreadsheet[i].style.display = 'block';
            link[i].classList.add('selected')
        }
        tabs.appendChild(link[i]);
    }

    // Append spreadsheet
    for (var i = 0; i < spreadsheet.length - 1; i++) {
        tabs.appendChild(spreadsheet[i]);
        jexcel(spreadsheet[i], result[i]);
    }

    // First tab
    spreadsheet[0].style.display = 'block';
    link[0].classList.add('selected')
}

jexcel.fromSpreadsheet = function(file, __callback) {
    var convert = function(workbook) {
        var spreadsheets = [];
        workbook.SheetNames.forEach(function(sheetName) {
            var spreadsheet = {};
            spreadsheet.rows = [];
            spreadsheet.columns = [];
            spreadsheet.data = [];
            spreadsheet.style = {};
            spreadsheet.sheetName = sheetName;

            // Column widths
            var temp = workbook.Sheets[sheetName]['!cols'];
            if (temp && temp.length) {
                for (var i = 0; i < temp.length; i++) {
                    spreadsheet.columns[i] = {};
                    if (temp[i] && temp[i].wpx) {
                        spreadsheet.columns[i].width = temp[i].wpx + 'px';
                    }
                }
            }
            // Rows heights
            var temp = workbook.Sheets[sheetName]['!rows'];
            if (temp && temp.length) {
                for (var i = 0; i < temp.length; i++) {
                    if (temp[i] && temp[i].hpx) {
                        spreadsheet.rows[i] = {};
                        spreadsheet.rows[i].height = temp[i].hpx + 'px';
                    }
                }
            }
            // Merge cells
            var temp = workbook.Sheets[sheetName]['!merges'];
            if (temp && temp.length > 0) {
                spreadsheet.mergeCells = [];
                for (var i = 0; i < temp.length; i++) {
                    var x1 = temp[i].s.c;
                    var y1 = temp[i].s.r;
                    var x2 = temp[i].e.c;
                    var y2 = temp[i].e.r;
                    var key = jexcel.getColumnNameFromId([x1,y1]);
                    spreadsheet.mergeCells[key] = [ x2-x1+1, y2-y1+1 ];
                }
            }
            // Data container
            var max_x = 0;
            var max_y = 0;
            var temp = Object.keys(workbook.Sheets[sheetName]);
            for (var i = 0; i < temp.length; i++) {
                if (temp[i].substr(0,1) != '!') {
                    var cell = workbook.Sheets[sheetName][temp[i]];
                    var info = jexcel.getIdFromColumnName(temp[i], true);
                    if (! spreadsheet.data[info[1]]) {
                        spreadsheet.data[info[1]] = [];
                    }
                    spreadsheet.data[info[1]][info[0]] = cell.f ? '=' + cell.f : cell.w;
                    if (max_x < info[0]) {
                        max_x = info[0];
                    }
                    if (max_y < info[1]) {
                        max_y = info[1];
                    }
                    // Style
                    if (cell.style && Object.keys(cell.style).length > 0) {
                        spreadsheet.style[temp[i]] = cell.style;
                    }
                    if (cell.s && cell.s.fgColor) {
                        if (spreadsheet.style[temp[i]]) {
                            spreadsheet.style[temp[i]] += ';';
                        }
                        spreadsheet.style[temp[i]] += 'background-color:#' + cell.s.fgColor.rgb;
                    }
                }
            }
            var numColumns = spreadsheet.columns;
            for (var j = 0; j <= max_y; j++) {
                for (var i = 0; i <= max_x; i++) {
                    if (! spreadsheet.data[j]) {
                        spreadsheet.data[j] = [];
                    }
                    if (! spreadsheet.data[j][i]) {
                        if (numColumns < i) {
                            spreadsheet.data[j][i] = '';
                        }
                    }
                }
            }
            spreadsheets.push(spreadsheet);
        });

        return spreadsheets;
    }

    var oReq;
    oReq = new XMLHttpRequest();
    oReq.open("GET", file, true);

    if(typeof Uint8Array !== 'undefined') {
        oReq.responseType = "arraybuffer";
        oReq.onload = function(e) {
            var arraybuffer = oReq.response;
            var data = new Uint8Array(arraybuffer);
            var wb = XLSX.read(data, {type:"array", cellFormula:true, cellStyles:true });
            __callback(convert(wb))
        };
    } else {
        oReq.setRequestHeader("Accept-Charset", "x-user-defined");  
        oReq.onreadystatechange = function() { if(oReq.readyState == 4 && oReq.status == 200) {
            var ff = convertResponseBodyToText(oReq.responseBody);
            var wb = XLSX.read(ff, {type:"binary", cellFormula:true, cellStyles:true });
            __callback(convert(wb))
        }};
    }

    oReq.send();
}

/**
 * Valid international letter
 */

jexcel.validLetter = function (text) {
    var regex = /([\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC-\u0400-\u04FF']+)/g;
    return text.match(regex) ? 1 : 0;
}

/**
 * Helper injectArray
 */
jexcel.injectArray = function(o, idx, arr) {
    return o.slice(0, idx).concat(arr).concat(o.slice(idx));
}

/**
 * Get letter based on a number
 * 
 * @param integer i
 * @return string letter
 */
jexcel.getColumnName = function(i) {
    var letter = '';
    if (i > 701) {
        letter += String.fromCharCode(64 + parseInt(i / 676));
        letter += String.fromCharCode(64 + parseInt((i % 676) / 26));
    } else if (i > 25) {
        letter += String.fromCharCode(64 + parseInt(i / 26));
    }
    letter += String.fromCharCode(65 + (i % 26));

    return letter;
}

/**
 * Convert excel like column to jexcel id
 * 
 * @param string id
 * @return string id
 */
jexcel.getIdFromColumnName = function (id, arr) {
    // Get the letters
    var t = /^[a-zA-Z]+/.exec(id);

    if (t) {
        // Base 26 calculation
        var code = 0;
        for (var i = 0; i < t[0].length; i++) {
            code += parseInt(t[0].charCodeAt(i) - 64) * Math.pow(26, (t[0].length - 1 - i));
        }
        code--;
        // Make sure jexcel starts on zero
        if (code < 0) {
            code = 0;
        }

        // Number
        var number = parseInt(/[0-9]+$/.exec(id));
        if (number > 0) {
            number--;
        }

        if (arr == true) {
            id = [ code, number ];
        } else {
            id = code + '-' + number;
        }
    }

    return id;
}

/**
 * Convert jexcel id to excel like column name
 * 
 * @param string id
 * @return string id
 */
jexcel.getColumnNameFromId = function (cellId) {
    if (! Array.isArray(cellId)) {
        cellId = cellId.split('-');
    }

    return jexcel.getColumnName(parseInt(cellId[0])) + (parseInt(cellId[1]) + 1);
}

/**
 * Verify element inside jexcel table
 * 
 * @param string id
 * @return string id
 */
jexcel.getElement = function(element) {
    var jexcelSection = 0;
    var jexcelElement = 0;

    function path (element) {
        if (element.className) {
            if (element.classList.contains('jexcel_container')) {
                jexcelElement = element;
            }
        }

        if (element.tagName == 'THEAD') {
            jexcelSection = 1;
        } else if (element.tagName == 'TBODY') {
            jexcelSection = 2;
        }

        if (element.parentNode) {
            path(element.parentNode);
        }
    }

    path(element);

    return [ jexcelElement, jexcelSection ];
}

jexcel.doubleDigitFormat = function(v) {
    v = ''+v;
    if (v.length == 1) {
        v = '0'+v;
    }
    return v;
}

/**
 * Jquery Support
 */
if (typeof(jQuery) != 'undefined') {
    (function($){
        $.fn.jexcel = function(method) {
            var spreadsheetContainer = $(this).get(0);
            if (! spreadsheetContainer.jexcel) {
                return jexcel($(this).get(0), arguments[0]);
            } else {
                return spreadsheetContainer.jexcel[method].apply(this, Array.prototype.slice.call( arguments, 1 ));
            }
        };

    })(jQuery);
}


// Based on sutoiku work (https://github.com/sutoiku)

var error = (function() {
    var exports = {};

    exports.nil = new Error('#NULL!');
    exports.div0 = new Error('#DIV/0!');
    exports.value = new Error('#VALUE!');
    exports.ref = new Error('#REF!');
    exports.name = new Error('#NAME?');
    exports.num = new Error('#NUM!');
    exports.na = new Error('#N/A');
    exports.error = new Error('#ERROR!');
    exports.data = new Error('#GETTING_DATA');

    return exports;
})();

var utils = (function() {
    var exports = {};

    exports.flattenShallow = function(array) {
        if (!array || !array.reduce) {
            return array;
        }

        return array.reduce(function(a, b) {
            var aIsArray = Array.isArray(a);
            var bIsArray = Array.isArray(b);

            if (aIsArray && bIsArray) {
                return a.concat(b);
            }
            if (aIsArray) {
                a.push(b);

                return a;
            }
            if (bIsArray) {
                return [ a ].concat(b);
            }

            return [ a, b ];
        });
    };

    exports.isFlat = function(array) {
        if (!array) {
            return false;
        }

        for (var i = 0; i < array.length; ++i) {
            if (Array.isArray(array[i])) {
                return false;
            }
        }

        return true;
    };

    exports.flatten = function() {
        var result = exports.argsToArray.apply(null, arguments);

        while (!exports.isFlat(result)) {
            result = exports.flattenShallow(result);
        }

        return result;
    };

    exports.argsToArray = function(args) {
        var result = [];

        exports.arrayEach(args, function(value) {
            result.push(value);
        });

        return result;
    };

    exports.numbers = function() {
        var possibleNumbers = this.flatten.apply(null, arguments);
        return possibleNumbers.filter(function(el) {
            return typeof el === 'number';
        });
    };

    exports.cleanFloat = function(number) {
        var power = 1e14;
        return Math.round(number * power) / power;
    };

    exports.parseBool = function(bool) {
        if (typeof bool === 'boolean') {
            return bool;
        }

        if (bool instanceof Error) {
            return bool;
        }

        if (typeof bool === 'number') {
            return bool !== 0;
        }

        if (typeof bool === 'string') {
            var up = bool.toUpperCase();
            if (up === 'TRUE') {
                return true;
            }

            if (up === 'FALSE') {
                return false;
            }
        }

        if (bool instanceof Date && !isNaN(bool)) {
            return true;
        }

        return error.value;
    };

    exports.parseNumber = function(string) {
        if (string === undefined || string === '') {
            return error.value;
        }
        if (!isNaN(string)) {
            return parseFloat(string);
        }

        return error.value;
    };

    exports.parseNumberArray = function(arr) {
        var len;

        if (!arr || (len = arr.length) === 0) {
            return error.value;
        }

        var parsed;

        while (len--) {
            parsed = exports.parseNumber(arr[len]);
            if (parsed === error.value) {
                return parsed;
            }
            arr[len] = parsed;
        }

        return arr;
    };

    exports.parseMatrix = function(matrix) {
        var n;

        if (!matrix || (n = matrix.length) === 0) {
            return error.value;
        }
        var pnarr;

        for (var i = 0; i < matrix.length; i++) {
            pnarr = exports.parseNumberArray(matrix[i]);
            matrix[i] = pnarr;

            if (pnarr instanceof Error) {
                return pnarr;
            }
        }

        return matrix;
    };

    var d1900 = new Date(Date.UTC(1900, 0, 1));
    exports.parseDate = function(date) {
        if (!isNaN(date)) {
            if (date instanceof Date) {
                return new Date(date);
            }
            var d = parseInt(date, 10);
            if (d < 0) {
                return error.num;
            }
            if (d <= 60) {
                return new Date(d1900.getTime() + (d - 1) * 86400000);
            }
            return new Date(d1900.getTime() + (d - 2) * 86400000);
        }
        if (typeof date === 'string') {
            date = new Date(date);
            if (!isNaN(date)) {
                return date;
            }
        }
        return error.value;
    };

    exports.parseDateArray = function(arr) {
        var len = arr.length;
        var parsed;
        while (len--) {
            parsed = this.parseDate(arr[len]);
            if (parsed === error.value) {
                return parsed;
            }
            arr[len] = parsed;
        }
        return arr;
    };

    exports.anyIsError = function() {
        var n = arguments.length;
        while (n--) {
            if (arguments[n] instanceof Error) {
                return true;
            }
        }
        return false;
    };

    exports.arrayValuesToNumbers = function(arr) {
        var n = arr.length;
        var el;
        while (n--) {
            el = arr[n];
            if (typeof el === 'number') {
                continue;
            }
            if (el === true) {
                arr[n] = 1;
                continue;
            }
            if (el === false) {
                arr[n] = 0;
                continue;
            }
            if (typeof el === 'string') {
                var number = this.parseNumber(el);
                if (number instanceof Error) {
                    arr[n] = 0;
                } else {
                    arr[n] = number;
                }
            }
        }
        return arr;
    };

    exports.rest = function(array, idx) {
        idx = idx || 1;
        if (!array || typeof array.slice !== 'function') {
            return array;
        }
        return array.slice(idx);
    };

    exports.initial = function(array, idx) {
        idx = idx || 1;
        if (!array || typeof array.slice !== 'function') {
            return array;
        }
        return array.slice(0, array.length - idx);
    };

    exports.arrayEach = function(array, iteratee) {
        var index = -1, length = array.length;

        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }

        return array;
    };

    exports.transpose = function(matrix) {
        if (!matrix) {
            return error.value;
        }

        return matrix[0].map(function(col, i) {
            return matrix.map(function(row) {
                return row[i];
            });
        });
    };

    return exports;
})();

jexcel.methods = {};

jexcel.methods.datetime = (function() {
    var exports = {};

    var d1900 = new Date(1900, 0, 1);
    var WEEK_STARTS = [
        undefined,
        0,
        1,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        1,
        2,
        3,
        4,
        5,
        6,
        0
    ];
    var WEEK_TYPES = [
        [],
        [1, 2, 3, 4, 5, 6, 7],
        [7, 1, 2, 3, 4, 5, 6],
        [6, 0, 1, 2, 3, 4, 5],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [7, 1, 2, 3, 4, 5, 6],
        [6, 7, 1, 2, 3, 4, 5],
        [5, 6, 7, 1, 2, 3, 4],
        [4, 5, 6, 7, 1, 2, 3],
        [3, 4, 5, 6, 7, 1, 2],
        [2, 3, 4, 5, 6, 7, 1],
        [1, 2, 3, 4, 5, 6, 7]
    ];
    var WEEKEND_TYPES = [
        [],
        [6, 0],
        [0, 1],
        [1, 2],
        [2, 3],
        [3, 4],
        [4, 5],
        [5, 6],
        undefined,
        undefined,
        undefined, [0, 0],
        [1, 1],
        [2, 2],
        [3, 3],
        [4, 4],
        [5, 5],
        [6, 6]
    ];

    exports.DATE = function(year, month, day) {
        year = utils.parseNumber(year);
        month = utils.parseNumber(month);
        day = utils.parseNumber(day);
        if (utils.anyIsError(year, month, day)) {
            return error.value;
        }
        if (year < 0 || month < 0 || day < 0) {
            return error.num;
        }
        var date = new Date(year, month - 1, day);
        return date;
    };

    exports.DATEVALUE = function(date_text) {
        if (typeof date_text !== 'string') {
            return error.value;
        }
        var date = Date.parse(date_text);
        if (isNaN(date)) {
            return error.value;
        }
        if (date <= -2203891200000) {
            return (date - d1900) / 86400000 + 1;
        }
        return (date - d1900) / 86400000 + 2;
    };

    exports.DAY = function(serial_number) {
        var date = utils.parseDate(serial_number);
        if (date instanceof Error) {
            return date;
        }
        return date.getDate();
    };

    exports.DAYS = function(end_date, start_date) {
        end_date = utils.parseDate(end_date);
        start_date = utils.parseDate(start_date);
        if (end_date instanceof Error) {
            return end_date;
        }
        if (start_date instanceof Error) {
            return start_date;
        }
        return serial(end_date) - serial(start_date);
    };

    exports.DAYS360 = function(start_date, end_date, method) {
    };

    exports.EDATE = function(start_date, months) {
        start_date = utils.parseDate(start_date);
        if (start_date instanceof Error) {
            return start_date;
        }
        if (isNaN(months)) {
            return error.value;
        }
        months = parseInt(months, 10);
        start_date.setMonth(start_date.getMonth() + months);
        return serial(start_date);
    };

    exports.EOMONTH = function(start_date, months) {
        start_date = utils.parseDate(start_date);
        if (start_date instanceof Error) {
            return start_date;
        }
        if (isNaN(months)) {
            return error.value;
        }
        months = parseInt(months, 10);
        return serial(new Date(start_date.getFullYear(), start_date.getMonth() + months + 1, 0));
    };

    exports.HOUR = function(serial_number) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        return serial_number.getHours();
    };

    exports.INTERVAL = function(second) {
        if (typeof second !== 'number' && typeof second !== 'string') {
            return error.value;
        } else {
            second = parseInt(second, 10);
        }

        var year  = Math.floor(second/946080000);
        second    = second%946080000;
        var month = Math.floor(second/2592000);
        second    = second%2592000;
        var day   = Math.floor(second/86400);
        second    = second%86400;

        var hour  = Math.floor(second/3600);
        second    = second%3600;
        var min   = Math.floor(second/60);
        second    = second%60;
        var sec   = second;

        year  = (year  > 0) ? year  + 'Y' : '';
        month = (month > 0) ? month + 'M' : '';
        day   = (day   > 0) ? day   + 'D' : '';
        hour  = (hour  > 0) ? hour  + 'H' : '';
        min   = (min   > 0) ? min   + 'M' : '';
        sec   = (sec   > 0) ? sec   + 'S' : '';

        return 'P' + year + month + day + 'T' + hour + min + sec;
    };

    exports.ISOWEEKNUM = function(date) {
        date = utils.parseDate(date);
        if (date instanceof Error) {
            return date;
        }

        date.setHours(0, 0, 0);
        date.setDate(date.getDate() + 4 - (date.getDay() || 7));
        var yearStart = new Date(date.getFullYear(), 0, 1);
        return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);
    };

    exports.MINUTE = function(serial_number) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        return serial_number.getMinutes();
    };

    exports.MONTH = function(serial_number) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        return serial_number.getMonth() + 1;
    };

    exports.NETWORKDAYS = function(start_date, end_date, holidays) {
    };

    exports.NETWORKDAYS.INTL = function(start_date, end_date, weekend, holidays) {
    };

    exports.NOW = function() {
        return new Date();
    };

    exports.SECOND = function(serial_number) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        return serial_number.getSeconds();
    };

    exports.TIME = function(hour, minute, second) {
        hour = utils.parseNumber(hour);
        minute = utils.parseNumber(minute);
        second = utils.parseNumber(second);
        if (utils.anyIsError(hour, minute, second)) {
            return error.value;
        }
        if (hour < 0 || minute < 0 || second < 0) {
            return error.num;
        }
        return (3600 * hour + 60 * minute + second) / 86400;
    };

    exports.TIMEVALUE = function(time_text) {
        time_text = utils.parseDate(time_text);
        if (time_text instanceof Error) {
            return time_text;
        }
        return (3600 * time_text.getHours() + 60 * time_text.getMinutes() + time_text.getSeconds()) / 86400;
    };

    exports.TODAY = function() {
        return new Date();
    };

    exports.WEEKDAY = function(serial_number, return_type) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        if (return_type === undefined) {
            return_type = 1;
        }
        var day = serial_number.getDay();
        return WEEK_TYPES[return_type][day];
    };

    exports.WEEKNUM = function(serial_number, return_type) {
    };

    exports.WORKDAY = function(start_date, days, holidays) {
    };

    exports.WORKDAY.INTL = function(start_date, days, weekend, holidays) {
    };

    exports.YEAR = function(serial_number) {
        serial_number = utils.parseDate(serial_number);
        if (serial_number instanceof Error) {
            return serial_number;
        }
        return serial_number.getFullYear();
    };

    function isLeapYear(year) {
        return new Date(year, 1, 29).getMonth() === 1;
    }

    exports.YEARFRAC = function(start_date, end_date, basis) {
    };

    function serial(date) {
        var addOn = (date > -2203891200000)?2:1;
        return (date - d1900) / 86400000 + addOn;
    }

    return exports;
})();

jexcel.methods.database = (function() {
    var exports = {};

    function compact(array) {
        if (!array) {
            return array;
        }
        var result = [];
        for (var i = 0; i < array.length; ++i) {
            if (!array[i]) {
                continue;
            }
            result.push(array[i]);
        }
        return result;
    }

    exports.FINDFIELD = function(database, title) {
        var index = null;
        for (var i = 0; i < database.length; i++) {
            if (database[i][0] === title) {
                index = i;
                break;
            }
        }

        // Return error if the input field title is incorrect
        if (index == null) {
            return error.value;
        }
        return index;
    };

    function findResultIndex(database, criterias) {
        var matches = {};
        for (var i = 1; i < database[0].length; ++i) {
            matches[i] = true;
        }
        var maxCriteriaLength = criterias[0].length;
        for (i = 1; i < criterias.length; ++i) {
            if (criterias[i].length > maxCriteriaLength) {
                maxCriteriaLength = criterias[i].length;
            }
        }

        for (var k = 1; k < database.length; ++k) {
            for (var l = 1; l < database[k].length; ++l) {
                var currentCriteriaResult = false;
                var hasMatchingCriteria = false;
                for (var j = 0; j < criterias.length; ++j) {
                    var criteria = criterias[j];
                    if (criteria.length < maxCriteriaLength) {
                        continue;
                    }

                    var criteriaField = criteria[0];
                    if (database[k][0] !== criteriaField) {
                        continue;
                    }
                    hasMatchingCriteria = true;
                    for (var p = 1; p < criteria.length; ++p) {
                        currentCriteriaResult = currentCriteriaResult
                                || eval(database[k][l] + criteria[p]); // jshint
                                                                        // ignore:line
                    }
                }
                if (hasMatchingCriteria) {
                    matches[l] = matches[l] && currentCriteriaResult;
                }
            }
        }

        var result = [];
        for (var n = 0; n < database[0].length; ++n) {
            if (matches[n]) {
                result.push(n - 1);
            }
        }
        return result;
    }

    // Database functions
    exports.DAVERAGE = function(database, field, criteria) {
        // Return error if field is not a number and not a string
        if (isNaN(field) && (typeof field !== "string")) {
            return error.value;
        }
        var resultIndexes = findResultIndex(database, criteria);
        var targetFields = [];
        if (typeof field === "string") {
            var index = exports.FINDFIELD(database, field);
            targetFields = utils.rest(database[index]);
        } else {
            targetFields = utils.rest(database[field]);
        }
        var sum = 0;
        for (var i = 0; i < resultIndexes.length; i++) {
            sum += targetFields[resultIndexes[i]];
        }
        return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;
    };

    exports.DCOUNT = function(database, field, criteria) {
    };

    exports.DCOUNTA = function(database, field, criteria) {
    };

    exports.DGET = function(database, field, criteria) {
        // Return error if field is not a number and not a string
        if (isNaN(field) && (typeof field !== "string")) {
            return error.value;
        }
        var resultIndexes = findResultIndex(database, criteria);
        var targetFields = [];
        if (typeof field === "string") {
            var index = exports.FINDFIELD(database, field);
            targetFields = utils.rest(database[index]);
        } else {
            targetFields = utils.rest(database[field]);
        }
        // Return error if no record meets the criteria
        if (resultIndexes.length === 0) {
            return error.value;
        }
        // Returns the #NUM! error value because more than one record meets the
        // criteria
        if (resultIndexes.length > 1) {
            return error.num;
        }

        return targetFields[resultIndexes[0]];
    };

    exports.DMAX = function(database, field, criteria) {
        // Return error if field is not a number and not a string
        if (isNaN(field) && (typeof field !== "string")) {
            return error.value;
        }
        var resultIndexes = findResultIndex(database, criteria);
        var targetFields = [];
        if (typeof field === "string") {
            var index = exports.FINDFIELD(database, field);
            targetFields = utils.rest(database[index]);
        } else {
            targetFields = utils.rest(database[field]);
        }
        var maxValue = targetFields[resultIndexes[0]];
        for (var i = 1; i < resultIndexes.length; i++) {
            if (maxValue < targetFields[resultIndexes[i]]) {
                maxValue = targetFields[resultIndexes[i]];
            }
        }
        return maxValue;
    };

    exports.DMIN = function(database, field, criteria) {
        // Return error if field is not a number and not a string
        if (isNaN(field) && (typeof field !== "string")) {
            return error.value;
        }
        var resultIndexes = findResultIndex(database, criteria);
        var targetFields = [];
        if (typeof field === "string") {
            var index = exports.FINDFIELD(database, field);
            targetFields = utils.rest(database[index]);
        } else {
            targetFields = utils.rest(database[field]);
        }
        var minValue = targetFields[resultIndexes[0]];
        for (var i = 1; i < resultIndexes.length; i++) {
            if (minValue > targetFields[resultIndexes[i]]) {
                minValue = targetFields[resultIndexes[i]];
            }
        }
        return minValue;
    };

    exports.DPRODUCT = function(database, field, criteria) {
        // Return error if field is not a number and not a string
        if (isNaN(field) && (typeof field !== "string")) {
            return error.value;
        }
        var resultIndexes = findResultIndex(database, criteria);
        var targetFields = [];
        if (typeof field === "string") {
            var index = exports.FINDFIELD(database, field);
            targetFields = utils.rest(database[index]);
        } else {
            targetFields = utils.rest(database[field]);
        }
        var targetValues = [];
        for (var i = 0; i < resultIndexes.length; i++) {
            targetValues[i] = targetFields[resultIndexes[i]];
        }
        targetValues = compact(targetValues);
        var result = 1;
        for (i = 0; i < targetValues.length; i++) {
            result *= targetValues[i];
        }
        return result;
    };

    exports.DSTDEV = function(database, field, criteria) {
    };

    exports.DSTDEVP = function(database, field, criteria) {
    };

    exports.DSUM = function(database, field, criteria) {
    };

    exports.DVAR = function(database, field, criteria) {
    };

    exports.DVARP = function(database, field, criteria) {
    };

    exports.MATCH = function(lookupValue, lookupArray, matchType) {
        if (!lookupValue && !lookupArray) {
            return error.na;
        }
        if (arguments.length === 2) {
            matchType = 1;
        }
        if (!(lookupArray instanceof Array)) {
            return error.na;
        }
        if (matchType !== -1 && matchType !== 0 && matchType !== 1) {
            return error.na;
        }

        var index;
        var indexValue;

        for (var idx = 0; idx < lookupArray.length; idx++) {
            if (matchType === 1) {
                if (lookupArray[idx] === lookupValue) {
                    return idx + 1;
                } else if (lookupArray[idx] < lookupValue) {
                    if (!indexValue) {
                        index = idx + 1;
                        indexValue = lookupArray[idx];
                    } else if (lookupArray[idx] > indexValue) {
                        index = idx + 1;
                        indexValue = lookupArray[idx];
                    }
                }
            } else if (matchType === 0) {
                if (typeof lookupValue === 'string') {
                    lookupValue = lookupValue.replace(/\?/g, '.');
                    if (lookupArray[idx].toLowerCase().match(lookupValue.toLowerCase())) {
                        return idx + 1;
                    }
                } else {
                    if (lookupArray[idx] === lookupValue) {
                        return idx + 1;
                    }
                }
            } else if (matchType === -1) {
                if (lookupArray[idx] === lookupValue) {
                    return idx + 1;
                } else if (lookupArray[idx] > lookupValue) {
                    if (!indexValue) {
                        index = idx + 1;
                        indexValue = lookupArray[idx];
                    } else if (lookupArray[idx] < indexValue) {
                        index = idx + 1;
                        indexValue = lookupArray[idx];
                    }
                }
            }
        }

        return index ? index : error.na;
    };

    return exports;
})();

jexcel.methods.engineering = (function() {
    var exports = {};

    function isValidBinaryNumber(number) {
        return (/^[01]{1,10}$/).test(number);
    }

    exports.BESSELI = function(x, n) {
    };

    exports.BESSELJ = function(x, n) {
    };

    exports.BESSELK = function(x, n) {
    };

    exports.BESSELY = function(x, n) {
    };

    exports.BIN2DEC = function(number) {
        // Return error if number is not binary or contains more than 10
        // characters (10 digits)
        if (!isValidBinaryNumber(number)) {
            return error.num;
        }

        // Convert binary number to decimal
        var result = parseInt(number, 2);

        // Handle negative numbers
        var stringified = number.toString();
        if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
            return parseInt(stringified.substring(1), 2) - 512;
        } else {
            return result;
        }
    };

    exports.BIN2HEX = function(number, places) {
        // Return error if number is not binary or contains more than 10
        // characters (10 digits)
        if (!isValidBinaryNumber(number)) {
            return error.num;
        }

        // Ignore places and return a 10-character hexadecimal number if number
        // is negative
        var stringified = number.toString();
        if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
            return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);
        }

        // Convert binary number to hexadecimal
        var result = parseInt(number, 2).toString(16);

        // Return hexadecimal number using the minimum number of characters
        // necessary if places is undefined
        if (places === undefined) {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.BIN2OCT = function(number, places) {
        // Return error if number is not binary or contains more than 10
        // characters (10 digits)
        if (!isValidBinaryNumber(number)) {
            return error.num;
        }

        // Ignore places and return a 10-character octal number if number is
        // negative
        var stringified = number.toString();
        if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
            return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);
        }

        // Convert binary number to octal
        var result = parseInt(number, 2).toString(8);

        // Return octal number using the minimum number of characters necessary
        // if places is undefined
        if (places === undefined) {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.BITAND = function(number1, number2) {
        // Return error if either number is a non-numeric value
        number1 = utils.parseNumber(number1);
        number2 = utils.parseNumber(number2);
        if (utils.anyIsError(number1, number2)) {
            return error.value;
        }

        // Return error if either number is less than 0
        if (number1 < 0 || number2 < 0) {
            return error.num;
        }

        // Return error if either number is a non-integer
        if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
            return error.num;
        }

        // Return error if either number is greater than (2^48)-1
        if (number1 > 281474976710655 || number2 > 281474976710655) {
            return error.num;
        }

        // Return bitwise AND of two numbers
        return number1 & number2;
    };

    exports.BITLSHIFT = function(number, shift) {
        number = utils.parseNumber(number);
        shift = utils.parseNumber(shift);
        if (utils.anyIsError(number, shift)) {
            return error.value;
        }

        // Return error if number is less than 0
        if (number < 0) {
            return error.num;
        }

        // Return error if number is a non-integer
        if (Math.floor(number) !== number) {
            return error.num;
        }

        // Return error if number is greater than (2^48)-1
        if (number > 281474976710655) {
            return error.num;
        }

        // Return error if the absolute value of shift is greater than 53
        if (Math.abs(shift) > 53) {
            return error.num;
        }

        // Return number shifted by shift bits to the left or to the right if
        // shift is negative
        return (shift >= 0) ? number << shift : number >> -shift;
    };

    exports.BITOR = function(number1, number2) {
        number1 = utils.parseNumber(number1);
        number2 = utils.parseNumber(number2);
        if (utils.anyIsError(number1, number2)) {
            return error.value;
        }

        // Return error if either number is less than 0
        if (number1 < 0 || number2 < 0) {
            return error.num;
        }

        // Return error if either number is a non-integer
        if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
            return error.num;
        }

        // Return error if either number is greater than (2^48)-1
        if (number1 > 281474976710655 || number2 > 281474976710655) {
            return error.num;
        }

        // Return bitwise OR of two numbers
        return number1 | number2;
    };

    exports.BITRSHIFT = function(number, shift) {
        number = utils.parseNumber(number);
        shift = utils.parseNumber(shift);
        if (utils.anyIsError(number, shift)) {
            return error.value;
        }

        // Return error if number is less than 0
        if (number < 0) {
            return error.num;
        }

        // Return error if number is a non-integer
        if (Math.floor(number) !== number) {
            return error.num;
        }

        // Return error if number is greater than (2^48)-1
        if (number > 281474976710655) {
            return error.num;
        }

        // Return error if the absolute value of shift is greater than 53
        if (Math.abs(shift) > 53) {
            return error.num;
        }

        // Return number shifted by shift bits to the right or to the left if
        // shift is negative
        return (shift >= 0) ? number >> shift : number << -shift;
    };

    exports.BITXOR = function(number1, number2) {
        number1 = utils.parseNumber(number1);
        number2 = utils.parseNumber(number2);
        if (utils.anyIsError(number1, number2)) {
            return error.value;
        }

        // Return error if either number is less than 0
        if (number1 < 0 || number2 < 0) {
            return error.num;
        }

        // Return error if either number is a non-integer
        if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
            return error.num;
        }

        // Return error if either number is greater than (2^48)-1
        if (number1 > 281474976710655 || number2 > 281474976710655) {
            return error.num;
        }

        // Return bitwise XOR of two numbers
        return number1 ^ number2;
    };

    exports.COMPLEX = function(real, imaginary, suffix) {
        real = utils.parseNumber(real);
        imaginary = utils.parseNumber(imaginary);
        if (utils.anyIsError(real, imaginary)) {
            return real;
        }

        // Set suffix
        suffix = (suffix === undefined) ? 'i' : suffix;

        // Return error if suffix is neither "i" nor "j"
        if (suffix !== 'i' && suffix !== 'j') {
            return error.value;
        }

        // Return complex number
        if (real === 0 && imaginary === 0) {
            return 0;
        } else if (real === 0) {
            return (imaginary === 1) ? suffix : imaginary.toString() + suffix;
        } else if (imaginary === 0) {
            return real.toString();
        } else {
            var sign = (imaginary > 0) ? '+' : '';
            return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);
        }
    };

    exports.CONVERT = function(number, from_unit, to_unit) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }

        // List of units supported by CONVERT and units defined by the
        // International System of Units
        // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion
        // ratio]
        var units = [
            ["a.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
            ["a.u. of charge", "e", null, "electric_charge", false, false, 1.60217653141414e-19],
            ["a.u. of energy", "Eh", null, "energy", false, false, 4.35974417757576e-18],
            ["a.u. of length", "a?", null, "length", false, false, 5.29177210818182e-11],
            ["a.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
            ["a.u. of time", "?/Eh", null, "time", false, false, 2.41888432650516e-17],
            ["admiralty knot", "admkn", null, "speed", false, true, 0.514773333],
            ["ampere", "A", null, "electric_current", true, false, 1],
            ["ampere per meter", "A/m", null, "magnetic_field_intensity", true, false, 1],
            ["ångström", "Å", ["ang"], "length", false, true, 1e-10],
            ["are", "ar", null, "area", false, true, 100],
            ["astronomical unit", "ua", null, "length", false, false, 1.49597870691667e-11],
            ["bar", "bar", null, "pressure", false, false, 100000],
            ["barn", "b", null, "area", false, false, 1e-28],
            ["becquerel", "Bq", null, "radioactivity", true, false, 1],
            ["bit", "bit", ["b"], "information", false, true, 1],
            ["btu", "BTU", ["btu"], "energy", false, true, 1055.05585262],
            ["byte", "byte", null, "information", false, true, 8],
            ["candela", "cd", null, "luminous_intensity", true, false, 1],
            ["candela per square metre", "cd/m?", null, "luminance", true, false, 1],
            ["coulomb", "C", null, "electric_charge", true, false, 1],
            ["cubic ångström", "ang3", ["ang^3"], "volume", false, true, 1e-30],
            ["cubic foot", "ft3", ["ft^3"], "volume", false, true, 0.028316846592],
            ["cubic inch", "in3", ["in^3"], "volume", false, true, 0.000016387064],
            ["cubic light-year", "ly3", ["ly^3"], "volume", false, true, 8.46786664623715e-47],
            ["cubic metre", "m?", null, "volume", true, true, 1],
            ["cubic mile", "mi3", ["mi^3"], "volume", false, true, 4168181825.44058],
            ["cubic nautical mile", "Nmi3", ["Nmi^3"], "volume", false, true, 6352182208],
            ["cubic Pica", "Pica3", ["Picapt3", "Pica^3", "Picapt^3"], "volume", false, true, 7.58660370370369e-8],
            ["cubic yard", "yd3", ["yd^3"], "volume", false, true, 0.764554857984],
            ["cup", "cup", null, "volume", false, true, 0.0002365882365],
            ["dalton", "Da", ["u"], "mass", false, false, 1.66053886282828e-27],
            ["day", "d", ["day"], "time", false, true, 86400],
            ["degree", "°", null, "angle", false, false, 0.0174532925199433],
            ["degrees Rankine", "Rank", null, "temperature", false, true, 0.555555555555556],
            ["dyne", "dyn", ["dy"], "force", false, true, 0.00001],
            ["electronvolt", "eV", ["ev"], "energy", false, true, 1.60217656514141],
            ["ell", "ell", null, "length", false, true, 1.143],
            ["erg", "erg", ["e"], "energy", false, true, 1e-7],
            ["farad", "F", null, "electric_capacitance", true, false, 1],
            ["fluid ounce", "oz", null, "volume", false, true, 0.0000295735295625],
            ["foot", "ft", null, "length", false, true, 0.3048],
            ["foot-pound", "flb", null, "energy", false, true, 1.3558179483314],
            ["gal", "Gal", null, "acceleration", false, false, 0.01],
            ["gallon", "gal", null, "volume", false, true, 0.003785411784],
            ["gauss", "G", ["ga"], "magnetic_flux_density", false, true, 1],
            ["grain", "grain", null, "mass", false, true, 0.0000647989],
            ["gram", "g", null, "mass", false, true, 0.001],
            ["gray", "Gy", null, "absorbed_dose", true, false, 1],
            ["gross registered ton", "GRT", ["regton"], "volume", false, true, 2.8316846592],
            ["hectare", "ha", null, "area", false, true, 10000],
            ["henry", "H", null, "inductance", true, false, 1],
            ["hertz", "Hz", null, "frequency", true, false, 1],
            ["horsepower", "HP", ["h"], "power", false, true, 745.69987158227],
            ["horsepower-hour", "HPh", ["hh", "hph"], "energy", false, true, 2684519.538],
            ["hour", "h", ["hr"], "time", false, true, 3600],
            ["imperial gallon (U.K.)", "uk_gal", null, "volume", false, true, 0.00454609],
            ["imperial hundredweight", "lcwt", ["uk_cwt", "hweight"], "mass", false, true, 50.802345],
            ["imperial quart (U.K)", "uk_qt", null, "volume", false, true, 0.0011365225],
            ["imperial ton", "brton", ["uk_ton", "LTON"], "mass", false, true, 1016.046909],
            ["inch", "in", null, "length", false, true, 0.0254],
            ["international acre", "uk_acre", null, "area", false, true, 4046.8564224],
            ["IT calorie", "cal", null, "energy", false, true, 4.1868],
            ["joule", "J", null, "energy", true, true, 1],
            ["katal", "kat", null, "catalytic_activity", true, false, 1],
            ["kelvin", "K", ["kel"], "temperature", true, true, 1],
            ["kilogram", "kg", null, "mass", true, true, 1],
            ["knot", "kn", null, "speed", false, true, 0.514444444444444],
            ["light-year", "ly", null, "length", false, true, 9460730472580800],
            ["litre", "L", ["l", "lt"], "volume", false, true, 0.001],
            ["lumen", "lm", null, "luminous_flux", true, false, 1],
            ["lux", "lx", null, "illuminance", true, false, 1],
            ["maxwell", "Mx", null, "magnetic_flux", false, false, 1e-18],
            ["measurement ton", "MTON", null, "volume", false, true, 1.13267386368],
            ["meter per hour", "m/h", ["m/hr"], "speed", false, true, 0.00027777777777778],
            ["meter per second", "m/s", ["m/sec"], "speed", true, true, 1],
            ["meter per second squared", "m?s??", null, "acceleration", true, false, 1],
            ["parsec", "pc", ["parsec"], "length", false, true, 30856775814671900],
            ["meter squared per second", "m?/s", null, "kinematic_viscosity", true, false, 1],
            ["metre", "m", null, "length", true, true, 1],
            ["miles per hour", "mph", null, "speed", false, true, 0.44704],
            ["millimetre of mercury", "mmHg", null, "pressure", false, false, 133.322],
            ["minute", "?", null, "angle", false, false, 0.000290888208665722],
            ["minute", "min", ["mn"], "time", false, true, 60],
            ["modern teaspoon", "tspm", null, "volume", false, true, 0.000005],
            ["mole", "mol", null, "amount_of_substance", true, false, 1],
            ["morgen", "Morgen", null, "area", false, true, 2500],
            ["n.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
            ["n.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
            ["n.u. of speed", "c?", null, "speed", false, false, 299792458],
            ["n.u. of time", "?/(me?c??)", null, "time", false, false, 1.28808866778687e-21],
            ["nautical mile", "M", ["Nmi"], "length", false, true, 1852],
            ["newton", "N", null, "force", true, true, 1],
            ["œrsted", "Oe ", null, "magnetic_field_intensity", false, false, 79.5774715459477],
            ["ohm", "Ω", null, "electric_resistance", true, false, 1],
            ["ounce mass", "ozm", null, "mass", false, true, 0.028349523125],
            ["pascal", "Pa", null, "pressure", true, false, 1],
            ["pascal second", "Pa?s", null, "dynamic_viscosity", true, false, 1],
            ["pferdestärke", "PS", null, "power", false, true, 735.49875],
            ["phot", "ph", null, "illuminance", false, false, 0.0001],
            ["pica (1/6 inch)", "pica", null, "length", false, true, 0.00035277777777778],
            ["pica (1/72 inch)", "Pica", ["Picapt"], "length", false, true, 0.00423333333333333],
            ["poise", "P", null, "dynamic_viscosity", false, false, 0.1],
            ["pond", "pond", null, "force", false, true, 0.00980665],
            ["pound force", "lbf", null, "force", false, true, 4.4482216152605],
            ["pound mass", "lbm", null, "mass", false, true, 0.45359237],
            ["quart", "qt", null, "volume", false, true, 0.000946352946],
            ["radian", "rad", null, "angle", true, false, 1],
            ["second", "?", null, "angle", false, false, 0.00000484813681109536],
            ["second", "s", ["sec"], "time", true, true, 1],
            ["short hundredweight", "cwt", ["shweight"], "mass", false, true, 45.359237],
            ["siemens", "S", null, "electrical_conductance", true, false, 1],
            ["sievert", "Sv", null, "equivalent_dose", true, false, 1],
            ["slug", "sg", null, "mass", false, true, 14.59390294],
            ["square ångström", "ang2", ["ang^2"], "area", false, true, 1e-20],
            ["square foot", "ft2", ["ft^2"], "area", false, true, 0.09290304],
            ["square inch", "in2", ["in^2"], "area", false, true, 0.00064516],
            ["square light-year", "ly2", ["ly^2"], "area", false, true, 8.95054210748189e+31],
            ["square meter", "m?", null, "area", true, true, 1],
            ["square mile", "mi2", ["mi^2"], "area", false, true, 2589988.110336],
            ["square nautical mile", "Nmi2", ["Nmi^2"], "area", false, true, 3429904],
            ["square Pica", "Pica2", ["Picapt2", "Pica^2", "Picapt^2"], "area", false, true, 0.00001792111111111],
            ["square yard", "yd2", ["yd^2"], "area", false, true, 0.83612736],
            ["statute mile", "mi", null, "length", false, true, 1609.344],
            ["steradian", "sr", null, "solid_angle", true, false, 1],
            ["stilb", "sb", null, "luminance", false, false, 0.0001],
            ["stokes", "St", null, "kinematic_viscosity", false, false, 0.0001],
            ["stone", "stone", null, "mass", false, true, 6.35029318],
            ["tablespoon", "tbs", null, "volume", false, true, 0.0000147868],
            ["teaspoon", "tsp", null, "volume", false, true, 0.00000492892],
            ["tesla", "T", null, "magnetic_flux_density", true, true, 1],
            ["thermodynamic calorie", "c", null, "energy", false, true, 4.184],
            ["ton", "ton", null, "mass", false, true, 907.18474],
            ["tonne", "t", null, "mass", false, false, 1000],
            ["U.K. pint", "uk_pt", null, "volume", false, true, 0.00056826125],
            ["U.S. bushel", "bushel", null, "volume", false, true, 0.03523907],
            ["U.S. oil barrel", "barrel", null, "volume", false, true, 0.158987295],
            ["U.S. pint", "pt", ["us_pt"], "volume", false, true, 0.000473176473],
            ["U.S. survey mile", "survey_mi", null, "length", false, true, 1609.347219],
            ["U.S. survey/statute acre", "us_acre", null, "area", false, true, 4046.87261],
            ["volt", "V", null, "voltage", true, false, 1],
            ["watt", "W", null, "power", true, true, 1],
            ["watt-hour", "Wh", ["wh"], "energy", false, true, 3600],
            ["weber", "Wb", null, "magnetic_flux", true, false, 1],
            ["yard", "yd", null, "length", false, true, 0.9144],
            ["year", "yr", null, "time", false, true, 31557600]
        ];

        // Binary prefixes
        // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived
        // from]
        var binary_prefixes = {
            Yi: ["yobi", 80, 1208925819614629174706176, "Yi", "yotta"],
            Zi: ["zebi", 70, 1180591620717411303424, "Zi", "zetta"],
            Ei: ["exbi", 60, 1152921504606846976, "Ei", "exa"],
            Pi: ["pebi", 50, 1125899906842624, "Pi", "peta"],
            Ti: ["tebi", 40, 1099511627776, "Ti", "tera"],
            Gi: ["gibi", 30, 1073741824, "Gi", "giga"],
            Mi: ["mebi", 20, 1048576, "Mi", "mega"],
            ki: ["kibi", 10, 1024, "ki", "kilo"]
        };

        // Unit prefixes
        // [Name, Multiplier, Abbreviation]
        var unit_prefixes = {
            Y: ["yotta", 1e+24, "Y"],
            Z: ["zetta", 1e+21, "Z"],
            E: ["exa", 1e+18, "E"],
            P: ["peta", 1e+15, "P"],
            T: ["tera", 1e+12, "T"],
            G: ["giga", 1e+09, "G"],
            M: ["mega", 1e+06, "M"],
            k: ["kilo", 1e+03, "k"],
            h: ["hecto", 1e+02, "h"],
            e: ["dekao", 1e+01, "e"],
            d: ["deci", 1e-01, "d"],
            c: ["centi", 1e-02, "c"],
            m: ["milli", 1e-03, "m"],
            u: ["micro", 1e-06, "u"],
            n: ["nano", 1e-09, "n"],
            p: ["pico", 1e-12, "p"],
            f: ["femto", 1e-15, "f"],
            a: ["atto", 1e-18, "a"],
            z: ["zepto", 1e-21, "z"],
            y: ["yocto", 1e-24, "y"]
        };

        // Initialize units and multipliers
        var from = null;
        var to = null;
        var base_from_unit = from_unit;
        var base_to_unit = to_unit;
        var from_multiplier = 1;
        var to_multiplier = 1;
        var alt;

        // Lookup from and to units
        for (var i = 0; i < units.length; i++) {
            alt = (units[i][2] === null) ? [] : units[i][2];
            if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
              from = units[i];
            }
            if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
              to = units[i];
            }
        }

        // Lookup from prefix
        if (from === null) {
            var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];
            var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];

            // Handle dekao unit prefix (only unit prefix with two characters)
            if (from_unit.substring(0, 2) === 'da') {
              from_unit_prefix = ["dekao", 1e+01, "da"];
            }

            // Handle binary prefixes first (so that 'Yi' is processed before
            // 'Y')
            if (from_binary_prefix) {
              from_multiplier = from_binary_prefix[2];
              base_from_unit = from_unit.substring(2);
            } else if (from_unit_prefix) {
              from_multiplier = from_unit_prefix[1];
              base_from_unit = from_unit.substring(from_unit_prefix[2].length);
            }

            // Lookup from unit
            for (var j = 0; j < units.length; j++) {
              alt = (units[j][2] === null) ? [] : units[j][2];
              if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
                  from = units[j];
              }
            }
        }

        // Lookup to prefix
        if (to === null) {
            var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];
            var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];

            // Handle dekao unit prefix (only unit prefix with two characters)
            if (to_unit.substring(0, 2) === 'da') {
              to_unit_prefix = ["dekao", 1e+01, "da"];
            }

            // Handle binary prefixes first (so that 'Yi' is processed before
            // 'Y')
            if (to_binary_prefix) {
              to_multiplier = to_binary_prefix[2];
              base_to_unit = to_unit.substring(2);
            } else if (to_unit_prefix) {
              to_multiplier = to_unit_prefix[1];
              base_to_unit = to_unit.substring(to_unit_prefix[2].length);
            }

            // Lookup to unit
            for (var k = 0; k < units.length; k++) {
              alt = (units[k][2] === null) ? [] : units[k][2];
              if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
                  to = units[k];
              }
            }
        }

        // Return error if a unit does not exist
        if (from === null || to === null) {
            return error.na;
        }

        // Return error if units represent different quantities
        if (from[3] !== to[3]) {
            return error.na;
        }

        // Return converted number
        return number * from[6] * from_multiplier / (to[6] * to_multiplier);
    };

    exports.DEC2BIN = function(number, places) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }

        // Return error if number is not decimal, is lower than -512, or is
        // greater than 511
        if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {
            return error.num;
        }

        // Ignore places and return a 10-character binary number if number is
        // negative
        if (number < 0) {
            return '1' + REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);
        }

        // Convert decimal number to binary
        var result = parseInt(number, 10).toString(2);

        // Return binary number using the minimum number of characters necessary
        // if places is undefined
        if (typeof places === 'undefined') {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.DEC2HEX = function(number, places) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }

        // Return error if number is not decimal, is lower than -549755813888,
        // or is greater than 549755813887
        if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {
            return error.num;
        }

        // Ignore places and return a 10-character hexadecimal number if number
        // is negative
        if (number < 0) {
            return (1099511627776 + number).toString(16);
        }

        // Convert decimal number to hexadecimal
        var result = parseInt(number, 10).toString(16);

        // Return hexadecimal number using the minimum number of characters
        // necessary if places is undefined
        if (typeof places === 'undefined') {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.DEC2OCT = function(number, places) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }

        // Return error if number is not decimal, is lower than -549755813888,
        // or is greater than 549755813887
        if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {
            return error.num;
        }

        // Ignore places and return a 10-character octal number if number is
        // negative
        if (number < 0) {
            return (1073741824 + number).toString(8);
        }

        // Convert decimal number to octal
        var result = parseInt(number, 10).toString(8);

        // Return octal number using the minimum number of characters necessary
        // if places is undefined
        if (typeof places === 'undefined') {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.DELTA = function(number1, number2) {
        // Set number2 to zero if undefined
        number2 = (number2 === undefined) ? 0 : number2;
        number1 = utils.parseNumber(number1);
        number2 = utils.parseNumber(number2);
        if (utils.anyIsError(number1, number2)) {
            return error.value;
        }

        // Return delta
        return (number1 === number2) ? 1 : 0;
    };

    exports.ERF = function(lower_bound, upper_bound) {
    };

    exports.ERF.PRECISE = function() {
    };

    exports.ERFC = function(x) {
    };

    exports.ERFC.PRECISE = function() {
    };

    exports.GESTEP = function(number, step) {
        step = step || 0;
        number = utils.parseNumber(number);
        if (utils.anyIsError(step, number)) {
            return number;
        }

        // Return delta
        return (number >= step) ? 1 : 0;
    };

    exports.HEX2BIN = function(number, places) {
        // Return error if number is not hexadecimal or contains more than ten
        // characters (10 digits)
        if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
            return error.num;
        }

        // Check if number is negative
        var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;

        // Convert hexadecimal number to decimal
        var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);

        // Return error if number is lower than -512 or greater than 511
        if (decimal < -512 || decimal > 511) {
            return error.num;
        }

        // Ignore places and return a 10-character binary number if number is
        // negative
        if (negative) {
            return '1' + REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);
        }

        // Convert decimal number to binary
        var result = decimal.toString(2);

        // Return binary number using the minimum number of characters necessary
        // if places is undefined
        if (places === undefined) {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.HEX2DEC = function(number) {
        // Return error if number is not hexadecimal or contains more than ten
        // characters (10 digits)
        if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
            return error.num;
        }

        // Convert hexadecimal number to decimal
        var decimal = parseInt(number, 16);

        // Return decimal number
        return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;
    };

    exports.HEX2OCT = function(number, places) {
        // Return error if number is not hexadecimal or contains more than ten
        // characters (10 digits)
        if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
            return error.num;
        }

        // Convert hexadecimal number to decimal
        var decimal = parseInt(number, 16);

        // Return error if number is positive and greater than 0x1fffffff
        // (536870911)
        if (decimal > 536870911 && decimal < 1098974756864) {
            return error.num;
        }

        // Ignore places and return a 10-character octal number if number is
        // negative
        if (decimal >= 1098974756864) {
            return (decimal - 1098437885952).toString(8);
        }

        // Convert decimal number to octal
        var result = decimal.toString(8);

        // Return octal number using the minimum number of characters necessary
        // if places is undefined
        if (places === undefined) {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.IMABS = function(inumber) {
        // Lookup real and imaginary coefficients using exports.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        // Return error if either coefficient is not a number
        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return absolute value of complex number
        return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    };

    exports.IMAGINARY = function(inumber) {
        if (inumber === undefined || inumber === true || inumber === false) {
            return error.value;
        }

        // Return 0 if inumber is equal to 0
        if (inumber === 0 || inumber === '0') {
            return 0;
        }

        // Handle special cases
        if (['i', 'j'].indexOf(inumber) >= 0) {
            return 1;
        }

        // Normalize imaginary coefficient
        inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');

        // Lookup sign
        var plus = inumber.indexOf('+');
        var minus = inumber.indexOf('-');
        if (plus === 0) {
            plus = inumber.indexOf('+', 1);
        }

        if (minus === 0) {
            minus = inumber.indexOf('-', 1);
        }

        // Lookup imaginary unit
        var last = inumber.substring(inumber.length - 1, inumber.length);
        var unit = (last === 'i' || last === 'j');

        if (plus >= 0 || minus >= 0) {
            // Return error if imaginary unit is neither i nor j
            if (!unit) {
              return error.num;
            }

            // Return imaginary coefficient of complex number
            if (plus >= 0) {
              return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?
                  error.num :
                  Number(inumber.substring(plus + 1, inumber.length - 1));
            } else {
              return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?
                  error.num :
                  -Number(inumber.substring(minus + 1, inumber.length - 1));
            }
        } else {
            if (unit) {
              return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);
            } else {
              return (isNaN(inumber)) ? error.num : 0;
            }
        }
    };

    exports.IMARGUMENT = function(inumber) {
        // Lookup real and imaginary coefficients using exports.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        // Return error if either coefficient is not a number
        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return error if inumber is equal to zero
        if (x === 0 && y === 0) {
            return error.div0;
        }

        // Return PI/2 if x is equal to zero and y is positive
        if (x === 0 && y > 0) {
            return Math.PI / 2;
        }

        // Return -PI/2 if x is equal to zero and y is negative
        if (x === 0 && y < 0) {
            return -Math.PI / 2;
        }

        // Return zero if x is negative and y is equal to zero
        if (y === 0 && x > 0) {
            return 0;
        }

        // Return zero if x is negative and y is equal to zero
        if (y === 0 && x < 0) {
            return -Math.PI;
        }

        // Return argument of complex number
        if (x > 0) {
            return Math.atan(y / x);
        } else if (x < 0 && y >= 0) {
            return Math.atan(y / x) + Math.PI;
        } else {
            return Math.atan(y / x) - Math.PI;
        }
    };

    exports.IMCONJUGATE = function(inumber) {
        // Lookup real and imaginary coefficients using exports.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return conjugate of complex number
        return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;
    };

    exports.IMCOS = function(inumber) {
        // Lookup real and imaginary coefficients using exports.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return cosine of complex number
        return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);
    };

    exports.IMCOSH = function(inumber) {
        // Lookup real and imaginary coefficients using exports.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return hyperbolic cosine of complex number
        return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);
    };

    exports.IMCOT = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return cotangent of complex number
        return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));
    };

    exports.IMDIV = function(inumber1, inumber2) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var a = exports.IMREAL(inumber1);
        var b = exports.IMAGINARY(inumber1);
        var c = exports.IMREAL(inumber2);
        var d = exports.IMAGINARY(inumber2);

        if (utils.anyIsError(a, b, c, d)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit1 = inumber1.substring(inumber1.length - 1);
        var unit2 = inumber2.substring(inumber2.length - 1);
        var unit = 'i';
        if (unit1 === 'j') {
            unit = 'j';
        } else if (unit2 === 'j') {
            unit = 'j';
        }

        // Return error if inumber2 is null
        if (c === 0 && d === 0) {
            return error.num;
        }

        // Return exponential of complex number
        var den = c * c + d * d;
        return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);
    };

    exports.IMEXP = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return exponential of complex number
        var e = Math.exp(x);
        return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);
    };

    exports.IMLN = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return exponential of complex number
        return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);
    };

    exports.IMLOG10 = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return exponential of complex number
        return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);
    };

    exports.IMLOG2 = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return exponential of complex number
        return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);
    };

    exports.IMPOWER = function(inumber, number) {
        number = utils.parseNumber(number);
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);
        if (utils.anyIsError(number, x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Calculate power of modulus
        var p = Math.pow(exports.IMABS(inumber), number);

        // Calculate argument
        var t = exports.IMARGUMENT(inumber);

        // Return exponential of complex number
        return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);
    };

    exports.IMPRODUCT = function() {
        // Initialize result
        var result = arguments[0];

        // Loop on all numbers
        for (var i = 1; i < arguments.length; i++) {
            // Lookup coefficients of two complex numbers
            var a = exports.IMREAL(result);
            var b = exports.IMAGINARY(result);
            var c = exports.IMREAL(arguments[i]);
            var d = exports.IMAGINARY(arguments[i]);

            if (utils.anyIsError(a, b, c, d)) {
              return error.value;
            }

            // Complute product of two complex numbers
            result = exports.COMPLEX(a * c - b * d, a * d + b * c);
        }

        // Return product of complex numbers
        return result;
    };

    exports.IMREAL = function(inumber) {
        if (inumber === undefined || inumber === true || inumber === false) {
            return error.value;
        }

        // Return 0 if inumber is equal to 0
        if (inumber === 0 || inumber === '0') {
            return 0;
        }

        // Handle special cases
        if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {
            return 0;
        }

        // Lookup sign
        var plus = inumber.indexOf('+');
        var minus = inumber.indexOf('-');
        if (plus === 0) {
            plus = inumber.indexOf('+', 1);
        }
        if (minus === 0) {
            minus = inumber.indexOf('-', 1);
        }

        // Lookup imaginary unit
        var last = inumber.substring(inumber.length - 1, inumber.length);
        var unit = (last === 'i' || last === 'j');

        if (plus >= 0 || minus >= 0) {
            // Return error if imaginary unit is neither i nor j
            if (!unit) {
              return error.num;
            }

            // Return real coefficient of complex number
            if (plus >= 0) {
              return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?
                  error.num :
                  Number(inumber.substring(0, plus));
            } else {
              return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?
                  error.num :
                  Number(inumber.substring(0, minus));
            }
        } else {
            if (unit) {
              return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;
            } else {
              return (isNaN(inumber)) ? error.num : inumber;
            }
        }
    };

    exports.IMSEC = function(inumber) {
        // Return error if inumber is a logical value
        if (inumber === true || inumber === false) {
            return error.value;
        }

        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return secant of complex number
        return exports.IMDIV('1', exports.IMCOS(inumber));
    };

    exports.IMSECH = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return hyperbolic secant of complex number
        return exports.IMDIV('1', exports.IMCOSH(inumber));
    };

    exports.IMSIN = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return sine of complex number
        return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);
    };

    exports.IMSINH = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Return hyperbolic sine of complex number
        return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);
    };

    exports.IMSQRT = function(inumber) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit = inumber.substring(inumber.length - 1);
        unit = (unit === 'i' || unit === 'j') ? unit : 'i';

        // Calculate power of modulus
        var s = Math.sqrt(exports.IMABS(inumber));

        // Calculate argument
        var t = exports.IMARGUMENT(inumber);

        // Return exponential of complex number
        return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);
    };

    exports.IMCSC = function (inumber) {
        // Return error if inumber is a logical value
        if (inumber === true || inumber === false) {
            return error.value;
        }

        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        // Return error if either coefficient is not a number
        if (utils.anyIsError(x, y)) {
            return error.num;
        }

        // Return cosecant of complex number
        return exports.IMDIV('1', exports.IMSIN(inumber));
    };

    exports.IMCSCH = function (inumber) {
        // Return error if inumber is a logical value
        if (inumber === true || inumber === false) {
            return error.value;
        }

        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        // Return error if either coefficient is not a number
        if (utils.anyIsError(x, y)) {
            return error.num;
        }

        // Return hyperbolic cosecant of complex number
        return exports.IMDIV('1', exports.IMSINH(inumber));
    };

    exports.IMSUB = function(inumber1, inumber2) {
        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var a = this.IMREAL(inumber1);
        var b = this.IMAGINARY(inumber1);
        var c = this.IMREAL(inumber2);
        var d = this.IMAGINARY(inumber2);

        if (utils.anyIsError(a, b, c, d)) {
            return error.value;
        }

        // Lookup imaginary unit
        var unit1 = inumber1.substring(inumber1.length - 1);
        var unit2 = inumber2.substring(inumber2.length - 1);
        var unit = 'i';
        if (unit1 === 'j') {
            unit = 'j';
        } else if (unit2 === 'j') {
            unit = 'j';
        }

        // Return _ of two complex numbers
        return this.COMPLEX(a - c, b - d, unit);
    };

    exports.IMSUM = function() {
        var args = utils.flatten(arguments);

        // Initialize result
        var result = args[0];

        // Loop on all numbers
        for (var i = 1; i < args.length; i++) {
            // Lookup coefficients of two complex numbers
            var a = this.IMREAL(result);
            var b = this.IMAGINARY(result);
            var c = this.IMREAL(args[i]);
            var d = this.IMAGINARY(args[i]);

            if (utils.anyIsError(a, b, c, d)) {
              return error.value;
            }

            // Complute product of two complex numbers
            result = this.COMPLEX(a + c, b + d);
        }

        // Return sum of complex numbers
        return result;
    };

    exports.IMTAN = function(inumber) {
        // Return error if inumber is a logical value
        if (inumber === true || inumber === false) {
            return error.value;
        }

        // Lookup real and imaginary coefficients using Formula.js
        // [http://formulajs.org]
        var x = exports.IMREAL(inumber);
        var y = exports.IMAGINARY(inumber);

        if (utils.anyIsError(x, y)) {
            return error.value;
        }

        // Return tangent of complex number
        return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));
    };

    exports.OCT2BIN = function(number, places) {
        // Return error if number is not hexadecimal or contains more than ten
        // characters (10 digits)
        if (!/^[0-7]{1,10}$/.test(number)) {
            return error.num;
        }

        // Check if number is negative
        var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;

        // Convert octal number to decimal
        var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);

        // Return error if number is lower than -512 or greater than 511
        if (decimal < -512 || decimal > 511) {
            return error.num;
        }

        // Ignore places and return a 10-character binary number if number is
        // negative
        if (negative) {
            return '1' + REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);
        }

        // Convert decimal number to binary
        var result = decimal.toString(2);

        // Return binary number using the minimum number of characters necessary
        // if places is undefined
        if (typeof places === 'undefined') {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    exports.OCT2DEC = function(number) {
        // Return error if number is not octal or contains more than ten
        // characters (10 digits)
        if (!/^[0-7]{1,10}$/.test(number)) {
            return error.num;
        }

        // Convert octal number to decimal
        var decimal = parseInt(number, 8);

        // Return decimal number
        return (decimal >= 536870912) ? decimal - 1073741824 : decimal;
    };

    exports.OCT2HEX = function(number, places) {
        // Return error if number is not octal or contains more than ten
        // characters (10 digits)
        if (!/^[0-7]{1,10}$/.test(number)) {
            return error.num;
        }

        // Convert octal number to decimal
        var decimal = parseInt(number, 8);

        // Ignore places and return a 10-character octal number if number is
        // negative
        if (decimal >= 536870912) {
            return 'ff' + (decimal + 3221225472).toString(16);
        }

        // Convert decimal number to hexadecimal
        var result = decimal.toString(16);

        // Return hexadecimal number using the minimum number of characters
        // necessary if places is undefined
        if (places === undefined) {
            return result;
        } else {
            // Return error if places is nonnumeric
            if (isNaN(places)) {
              return error.value;
            }

            // Return error if places is negative
            if (places < 0) {
              return error.num;
            }

            // Truncate places in case it is not an integer
            places = Math.floor(places);

            // Pad return value with leading 0s (zeros) if necessary (using
            // Underscore.string)
            return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;
        }
    };

    return exports;
})();

jexcel.methods.financial = (function() {
    var exports = {};

    function validDate(d) {
        return d && d.getTime && !isNaN(d.getTime());
    }

    function ensureDate(d) {
        return (d instanceof Date)?d:new Date(d);
    }

    exports.ACCRINT = function(issue, first, settlement, rate, par, frequency, basis) {
        // Return error if either date is invalid
        issue        = ensureDate(issue);
        first        = ensureDate(first);
        settlement = ensureDate(settlement);
        if (!validDate(issue) || !validDate(first) || !validDate(settlement)) {
            return '#VALUE!';
        }

        // Return error if either rate or par are lower than or equal to zero
        if (rate <= 0 || par <= 0) {
            return '#NUM!';
        }

        // Return error if frequency is neither 1, 2, or 4
        if ([1, 2, 4].indexOf(frequency) === -1) {
            return '#NUM!';
        }

        // Return error if basis is neither 0, 1, 2, 3, or 4
        if ([0, 1, 2, 3, 4].indexOf(basis) === -1) {
            return '#NUM!';
        }

        // Return error if settlement is before or equal to issue
        if (settlement <= issue) {
            return '#NUM!';
        }

        // Set default values
        par   = par   || 0;
        basis = basis || 0;

        // Compute accrued interest
        return par * rate * YEARFRAC(issue, settlement, basis);
    };

    exports.ACCRINTM = null;

    exports.AMORDEGRC = null;

    exports.AMORLINC = null;

    exports.COUPDAYBS = null;

    exports.COUPDAYS = null;

    exports.COUPDAYSNC = null;

    exports.COUPNCD = null;

    exports.COUPNUM = null;

    exports.COUPPCD = null;

    exports.CUMIPMT = function(rate, periods, value, start, end, type) {
        // Credits: algorithm inspired by Apache OpenOffice
        // Credits: Hannes Stiebitzhofer for the translations of function and
            // variable names
        // Requires exports.FV() and exports.PMT() from exports.js
            // [http://stoic.com/exports/]

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        value = utils.parseNumber(value);
        if (utils.anyIsError(rate, periods, value)) {
            return error.value;
        }

        // Return error if either rate, periods, or value are lower than or
            // equal to zero
        if (rate <= 0 || periods <= 0 || value <= 0) {
            return error.num;
        }

        // Return error if start < 1, end < 1, or start > end
        if (start < 1 || end < 1 || start > end) {
            return error.num;
        }

        // Return error if type is neither 0 nor 1
        if (type !== 0 && type !== 1) {
            return error.num;
        }

        // Compute cumulative interest
        var payment = exports.PMT(rate, periods, value, 0, type);
        var interest = 0;

        if (start === 1) {
            if (type === 0) {
                interest = -value;
                start++;
            }
        }

        for (var i = start; i <= end; i++) {
            if (type === 1) {
                interest += exports.FV(rate, i - 2, payment, value, 1) - payment;
            } else {
                interest += exports.FV(rate, i - 1, payment, value, 0);
            }
        }
        interest *= rate;

        // Return cumulative interest
        return interest;
    };

    exports.CUMPRINC = function(rate, periods, value, start, end, type) {
        // Credits: algorithm inspired by Apache OpenOffice
        // Credits: Hannes Stiebitzhofer for the translations of function and
            // variable names

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        value = utils.parseNumber(value);
        if (utils.anyIsError(rate, periods, value)) {
            return error.value;
        }

        // Return error if either rate, periods, or value are lower than or
            // equal to zero
        if (rate <= 0 || periods <= 0 || value <= 0) {
            return error.num;
        }

        // Return error if start < 1, end < 1, or start > end
        if (start < 1 || end < 1 || start > end) {
            return error.num;
        }

        // Return error if type is neither 0 nor 1
        if (type !== 0 && type !== 1) {
            return error.num;
        }

        // Compute cumulative principal
        var payment = exports.PMT(rate, periods, value, 0, type);
        var principal = 0;
        if (start === 1) {
            if (type === 0) {
                principal = payment + value * rate;
            } else {
                principal = payment;
            }
            start++;
        }
        for (var i = start; i <= end; i++) {
            if (type > 0) {
                principal += payment - (exports.FV(rate, i - 2, payment, value, 1) - payment) * rate;
            } else {
                principal += payment - exports.FV(rate, i - 1, payment, value, 0) * rate;
            }
        }

        // Return cumulative principal
        return principal;
    };

    exports.DB = function(cost, salvage, life, period, month) {
        // Initialize month
        month = (month === undefined) ? 12 : month;

        cost = utils.parseNumber(cost);
        salvage = utils.parseNumber(salvage);
        life = utils.parseNumber(life);
        period = utils.parseNumber(period);
        month = utils.parseNumber(month);
        if (utils.anyIsError(cost, salvage, life, period, month)) {
            return error.value;
        }

        // Return error if any of the parameters is negative
        if (cost < 0 || salvage < 0 || life < 0 || period < 0) {
            return error.num;
        }

        // Return error if month is not an integer between 1 and 12
        if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(month) === -1) {
            return error.num;
        }

        // Return error if period is greater than life
        if (period > life) {
            return error.num;
        }

        // Return 0 (zero) if salvage is greater than or equal to cost
        if (salvage >= cost) {
            return 0;
        }

        // Rate is rounded to three decimals places
        var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);

        // Compute initial depreciation
        var initial = cost * rate * month / 12;

        // Compute total depreciation
        var total = initial;
        var current = 0;
        var ceiling = (period === life) ? life - 1 : period;
        for (var i = 2; i <= ceiling; i++) {
            current = (cost - total) * rate;
            total += current;
        }

        // Depreciation for the first and last periods are special cases
        if (period === 1) {
            // First period
            return initial;
        } else if (period === life) {
            // Last period
            return (cost - total) * rate;
        } else {
            return current;
        }
    };

    exports.DDB = function(cost, salvage, life, period, factor) {
        // Initialize factor
        factor = (factor === undefined) ? 2 : factor;

        cost = utils.parseNumber(cost);
        salvage = utils.parseNumber(salvage);
        life = utils.parseNumber(life);
        period = utils.parseNumber(period);
        factor = utils.parseNumber(factor);
        if (utils.anyIsError(cost, salvage, life, period, factor)) {
            return error.value;
        }

        // Return error if any of the parameters is negative or if factor is
            // null
        if (cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0) {
            return error.num;
        }

        // Return error if period is greater than life
        if (period > life) {
            return error.num;
        }

        // Return 0 (zero) if salvage is greater than or equal to cost
        if (salvage >= cost) {
            return 0;
        }

        // Compute depreciation
        var total = 0;
        var current = 0;
        for (var i = 1; i <= period; i++) {
            current = Math.min((cost - total) * (factor / life), (cost - salvage - total));
            total += current;
        }

        // Return depreciation
        return current;
    };

    exports.DISC = null;

    exports.DOLLARDE = function(dollar, fraction) {
        // Credits: algorithm inspired by Apache OpenOffice

        dollar = utils.parseNumber(dollar);
        fraction = utils.parseNumber(fraction);
        if (utils.anyIsError(dollar, fraction)) {
            return error.value;
        }

        // Return error if fraction is negative
        if (fraction < 0) {
            return error.num;
        }

        // Return error if fraction is greater than or equal to 0 and less than
            // 1
        if (fraction >= 0 && fraction < 1) {
            return error.div0;
        }

        // Truncate fraction if it is not an integer
        fraction = parseInt(fraction, 10);

        // Compute integer part
        var result = parseInt(dollar, 10);

        // Add decimal part
        result += (dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;

        // Round result
        var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);
        result = Math.round(result * power) / power;

        // Return converted dollar price
        return result;
    };

    exports.DOLLARFR = function(dollar, fraction) {
        // Credits: algorithm inspired by Apache OpenOffice

        dollar = utils.parseNumber(dollar);
        fraction = utils.parseNumber(fraction);
        if (utils.anyIsError(dollar, fraction)) {
            return error.value;
        }

        // Return error if fraction is negative
        if (fraction < 0) {
            return error.num;
        }

        // Return error if fraction is greater than or equal to 0 and less than
            // 1
        if (fraction >= 0 && fraction < 1) {
            return error.div0;
        }

        // Truncate fraction if it is not an integer
        fraction = parseInt(fraction, 10);

        // Compute integer part
        var result = parseInt(dollar, 10);

        // Add decimal part
        result += (dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;

        // Return converted dollar price
        return result;
    };

    exports.DURATION = null;

    exports.EFFECT = function(rate, periods) {
        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        if (utils.anyIsError(rate, periods)) {
            return error.value;
        }

        // Return error if rate <=0 or periods < 1
        if (rate <= 0 || periods < 1) {
            return error.num;
        }

        // Truncate periods if it is not an integer
        periods = parseInt(periods, 10);

        // Return effective annual interest rate
        return Math.pow(1 + rate / periods, periods) - 1;
    };

    exports.FV = function(rate, periods, payment, value, type) {
        // Credits: algorithm inspired by Apache OpenOffice

        value = value || 0;
        type = type || 0;

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        payment = utils.parseNumber(payment);
        value = utils.parseNumber(value);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, periods, payment, value, type)) {
            return error.value;
        }

        // Return future value
        var result;
        if (rate === 0) {
            result = value + payment * periods;
        } else {
            var term = Math.pow(1 + rate, periods);
            if (type === 1) {
                result = value * term + payment * (1 + rate) * (term - 1) / rate;
            } else {
                result = value * term + payment * (term - 1) / rate;
            }
        }
        return -result;
    };

    exports.FVSCHEDULE = function(principal, schedule) {
        principal = utils.parseNumber(principal);
        schedule = utils.parseNumberArray(utils.flatten(schedule));
        if (utils.anyIsError(principal, schedule)) {
            return error.value;
        }

        var n = schedule.length;
        var future = principal;

        // Apply all interests in schedule
        for (var i = 0; i < n; i++) {
            // Apply scheduled interest
            future *= 1 + schedule[i];
        }

        // Return future value
        return future;
    };

    exports.INTRATE = null;

    exports.IPMT = function(rate, period, periods, present, future, type) {
        // Credits: algorithm inspired by Apache OpenOffice

        future = future || 0;
        type = type || 0;

        rate = utils.parseNumber(rate);
        period = utils.parseNumber(period);
        periods = utils.parseNumber(periods);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, period, periods, present, future, type)) {
            return error.value;
        }

        // Compute payment
        var payment = exports.PMT(rate, periods, present, future, type);

        // Compute interest
        var interest;
        if (period === 1) {
            if (type === 1) {
                interest = 0;
            } else {
                interest = -present;
            }
        } else {
            if (type === 1) {
                interest = exports.FV(rate, period - 2, payment, present, 1) - payment;
            } else {
                interest = exports.FV(rate, period - 1, payment, present, 0);
            }
        }

        // Return interest
        return interest * rate;
    };

    exports.IRR = function(values, guess) {
        // Credits: algorithm inspired by Apache OpenOffice

        guess = guess || 0;

        values = utils.parseNumberArray(utils.flatten(values));
        guess = utils.parseNumber(guess);
        if (utils.anyIsError(values, guess)) {
            return error.value;
        }

        // Calculates the resulting amount
        var irrResult = function(values, dates, rate) {
            var r = rate + 1;
            var result = values[0];
            for (var i = 1; i < values.length; i++) {
                result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);
            }
            return result;
        };

        // Calculates the first derivation
        var irrResultDeriv = function(values, dates, rate) {
            var r = rate + 1;
            var result = 0;
            for (var i = 1; i < values.length; i++) {
                var frac = (dates[i] - dates[0]) / 365;
                result -= frac * values[i] / Math.pow(r, frac + 1);
            }
            return result;
        };

        // Initialize dates and check that values contains at least one positive
            // value and one negative value
        var dates = [];
        var positive = false;
        var negative = false;
        for (var i = 0; i < values.length; i++) {
            dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;
            if (values[i] > 0) {
                positive = true;
            }
            if (values[i] < 0) {
                negative = true;
            }
        }

        // Return error if values does not contain at least one positive value
            // and one negative value
        if (!positive || !negative) {
            return error.num;
        }

        // Initialize guess and resultRate
        guess = (guess === undefined) ? 0.1 : guess;
        var resultRate = guess;

        // Set maximum epsilon for end of iteration
        var epsMax = 1e-10;

        // Implement Newton's method
        var newRate, epsRate, resultValue;
        var contLoop = true;
        do {
            resultValue = irrResult(values, dates, resultRate);
            newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);
            epsRate = Math.abs(newRate - resultRate);
            resultRate = newRate;
            contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
        } while (contLoop);

        // Return internal rate of return
        return resultRate;
    };

    exports.ISPMT = function(rate, period, periods, value) {
        rate = utils.parseNumber(rate);
        period = utils.parseNumber(period);
        periods = utils.parseNumber(periods);
        value = utils.parseNumber(value);
        if (utils.anyIsError(rate, period, periods, value)) {
            return error.value;
        }

        // Return interest
        return value * rate * (period / periods - 1);
    };

    exports.MDURATION = null;

    exports.MIRR = function(values, finance_rate, reinvest_rate) {
        values = utils.parseNumberArray(utils.flatten(values));
        finance_rate = utils.parseNumber(finance_rate);
        reinvest_rate = utils.parseNumber(reinvest_rate);
        if (utils.anyIsError(values, finance_rate, reinvest_rate)) {
            return error.value;
        }

        // Initialize number of values
        var n = values.length;

        // Lookup payments (negative values) and incomes (positive values)
        var payments = [];
        var incomes = [];
        for (var i = 0; i < n; i++) {
            if (values[i] < 0) {
                payments.push(values[i]);
            } else {
                incomes.push(values[i]);
            }
        }

        // Return modified internal rate of return
        var num = -exports.NPV(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);
        var den = exports.NPV(finance_rate, payments) * (1 + finance_rate);
        return Math.pow(num / den, 1 / (n - 1)) - 1;
    };

    exports.NOMINAL = function(rate, periods) {
        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        if (utils.anyIsError(rate, periods)) {
            return error.value;
        }

        // Return error if rate <=0 or periods < 1
        if (rate <= 0 || periods < 1) {
            return error.num;
        }

        // Truncate periods if it is not an integer
        periods = parseInt(periods, 10);

        // Return nominal annual interest rate
        return (Math.pow(rate + 1, 1 / periods) - 1) * periods;
    };

    exports.NPER = function(rate, payment, present, future, type) {
        type = (type === undefined) ? 0 : type;
        future = (future === undefined) ? 0 : future;

        rate = utils.parseNumber(rate);
        payment = utils.parseNumber(payment);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, payment, present, future, type)) {
            return error.value;
        }

        // Return number of periods
        var num = payment * (1 + rate * type) - future * rate;
        var den = (present * rate + payment * (1 + rate * type));
        return Math.log(num / den) / Math.log(1 + rate);
    };

    exports.NPV = function() {
        var args = utils.parseNumberArray(utils.flatten(arguments));
        if (args instanceof Error) {
            return args;
        }

        // Lookup rate
        var rate = args[0];

        // Initialize net present value
        var value = 0;

        // Loop on all values
        for (var j = 1; j < args.length; j++) {
            value += args[j] / Math.pow(1 + rate, j);
        }

        // Return net present value
        return value;
    };

    exports.ODDFPRICE = null;

    exports.ODDFYIELD = null;

    exports.ODDLPRICE = null;

    exports.ODDLYIELD = null;

    exports.PDURATION = function(rate, present, future) {
        rate = utils.parseNumber(rate);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        if (utils.anyIsError(rate, present, future)) {
            return error.value;
        }

        // Return error if rate <=0
        if (rate <= 0) {
            return error.num;
        }

        // Return number of periods
        return (Math.log(future) - Math.log(present)) / Math.log(1 + rate);
    };

    exports.PMT = function(rate, periods, present, future, type) {
        // Credits: algorithm inspired by Apache OpenOffice

        future = future || 0;
        type = type || 0;

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, periods, present, future, type)) {
            return error.value;
        }

        // Return payment
        var result;
        if (rate === 0) {
            result = (present + future) / periods;
        } else {
            var term = Math.pow(1 + rate, periods);
            if (type === 1) {
                result = (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate);
            } else {
                result = future * rate / (term - 1) + present * rate / (1 - 1 / term);
            }
        }
        return -result;
    };

    exports.PPMT = function(rate, period, periods, present, future, type) {
        future = future || 0;
        type = type || 0;

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, periods, present, future, type)) {
            return error.value;
        }

        return exports.PMT(rate, periods, present, future, type) - exports.IPMT(rate, period, periods, present, future, type);
    };

    exports.PRICE = null;

    exports.PRICEDISC = null;

    exports.PRICEMAT = null;

    exports.PV = function(rate, periods, payment, future, type) {
        future = future || 0;
        type = type || 0;

        rate = utils.parseNumber(rate);
        periods = utils.parseNumber(periods);
        payment = utils.parseNumber(payment);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        if (utils.anyIsError(rate, periods, payment, future, type)) {
            return error.value;
        }

        // Return present value
        if (rate === 0) {
            return -payment * periods - future;
        } else {
            return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 + rate * type) - future) / Math.pow(1 + rate, periods);
        }
    };

    exports.RATE = function(periods, payment, present, future, type, guess) {
        // Credits: rabugento

        guess = (guess === undefined) ? 0.01 : guess;
        future = (future === undefined) ? 0 : future;
        type = (type === undefined) ? 0 : type;

        periods = utils.parseNumber(periods);
        payment = utils.parseNumber(payment);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        type = utils.parseNumber(type);
        guess = utils.parseNumber(guess);
        if (utils.anyIsError(periods, payment, present, future, type, guess)) {
            return error.value;
        }

        // Set maximum epsilon for end of iteration
        var epsMax = 1e-6;

        // Set maximum number of iterations
        var iterMax = 100;
        var iter = 0;
        var close = false;
        var rate = guess;

        while (iter < iterMax && !close) {
            var t1 = Math.pow(rate + 1, periods);
            var t2 = Math.pow(rate + 1, periods - 1);

            var f1 = future + t1 * present + payment * (t1 - 1) * (rate * type + 1) / rate;
            var f2 = periods * t2 * present - payment * (t1 - 1) *(rate * type + 1) / Math.pow(rate,2);
            var f3 = periods * payment * t2 * (rate * type + 1) / rate + payment * (t1 - 1) * type / rate;

            var newRate = rate - f1 / (f2 + f3);

            if (Math.abs(newRate - rate) < epsMax) close = true;
            iter++
            rate = newRate;
        }

        if (!close) return Number.NaN + rate;
        return rate;
    };

    // TODO
    exports.RECEIVED = null;

    exports.RRI = function(periods, present, future) {
        periods = utils.parseNumber(periods);
        present = utils.parseNumber(present);
        future = utils.parseNumber(future);
        if (utils.anyIsError(periods, present, future)) {
            return error.value;
        }

        // Return error if periods or present is equal to 0 (zero)
        if (periods === 0 || present === 0) {
            return error.num;
        }

        // Return equivalent interest rate
        return Math.pow(future / present, 1 / periods) - 1;
    };

    exports.SLN = function(cost, salvage, life) {
        cost = utils.parseNumber(cost);
        salvage = utils.parseNumber(salvage);
        life = utils.parseNumber(life);
        if (utils.anyIsError(cost, salvage, life)) {
            return error.value;
        }

        // Return error if life equal to 0 (zero)
        if (life === 0) {
            return error.num;
        }

        // Return straight-line depreciation
        return (cost - salvage) / life;
    };

    exports.SYD = function(cost, salvage, life, period) {
        // Return error if any of the parameters is not a number
        cost = utils.parseNumber(cost);
        salvage = utils.parseNumber(salvage);
        life = utils.parseNumber(life);
        period = utils.parseNumber(period);
        if (utils.anyIsError(cost, salvage, life, period)) {
            return error.value;
        }

        // Return error if life equal to 0 (zero)
        if (life === 0) {
            return error.num;
        }

        // Return error if period is lower than 1 or greater than life
        if (period < 1 || period > life) {
            return error.num;
        }

        // Truncate period if it is not an integer
        period = parseInt(period, 10);

        // Return straight-line depreciation
        return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));
    };

    exports.TBILLEQ = function(settlement, maturity, discount) {
        settlement = utils.parseDate(settlement);
        maturity = utils.parseDate(maturity);
        discount = utils.parseNumber(discount);
        if (utils.anyIsError(settlement, maturity, discount)) {
            return error.value;
        }

        // Return error if discount is lower than or equal to zero
        if (discount <= 0) {
            return error.num;
        }

        // Return error if settlement is greater than maturity
        if (settlement > maturity) {
            return error.num;
        }

        // Return error if maturity is more than one year after settlement
        if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
            return error.num;
        }

        // Return bond-equivalent yield
        return (365 * discount) / (360 - discount * DAYS360(settlement, maturity, false));
    };

    exports.TBILLPRICE = function(settlement, maturity, discount) {
        settlement = utils.parseDate(settlement);
        maturity = utils.parseDate(maturity);
        discount = utils.parseNumber(discount);
        if (utils.anyIsError(settlement, maturity, discount)) {
            return error.value;
        }

        // Return error if discount is lower than or equal to zero
        if (discount <= 0) {
            return error.num;
        }

        // Return error if settlement is greater than maturity
        if (settlement > maturity) {
            return error.num;
        }

        // Return error if maturity is more than one year after settlement
        if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
            return error.num;
        }

        // Return bond-equivalent yield
        return 100 * (1 - discount * DAYS360(settlement, maturity, false) / 360);
    };

    exports.TBILLYIELD = function(settlement, maturity, price) {
        settlement = utils.parseDate(settlement);
        maturity = utils.parseDate(maturity);
        price = utils.parseNumber(price);
        if (utils.anyIsError(settlement, maturity, price)) {
            return error.value;
        }

        // Return error if price is lower than or equal to zero
        if (price <= 0) {
            return error.num;
        }

        // Return error if settlement is greater than maturity
        if (settlement > maturity) {
            return error.num;
        }

        // Return error if maturity is more than one year after settlement
        if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
            return error.num;
        }

        // Return bond-equivalent yield
        return (100 - price) * 360 / (price * DAYS360(settlement, maturity, false));
    };

    exports.VDB = null;

    exports.XIRR = function(values, dates, guess) {
        // Credits: algorithm inspired by Apache OpenOffice

        values = utils.parseNumberArray(utils.flatten(values));
        dates = utils.parseDateArray(utils.flatten(dates));
        guess = utils.parseNumber(guess);
        if (utils.anyIsError(values, dates, guess)) {
            return error.value;
        }

        // Calculates the resulting amount
        var irrResult = function(values, dates, rate) {
            var r = rate + 1;
            var result = values[0];
            for (var i = 1; i < values.length; i++) {
                result += values[i] / Math.pow(r, DAYS(dates[i], dates[0]) / 365);
            }
            return result;
        };

        // Calculates the first derivation
        var irrResultDeriv = function(values, dates, rate) {
            var r = rate + 1;
            var result = 0;
            for (var i = 1; i < values.length; i++) {
                var frac = DAYS(dates[i], dates[0]) / 365;
                result -= frac * values[i] / Math.pow(r, frac + 1);
            }
            return result;
        };

        // Check that values contains at least one positive value and one
            // negative value
        var positive = false;
        var negative = false;
        for (var i = 0; i < values.length; i++) {
            if (values[i] > 0) {
                positive = true;
            }
            if (values[i] < 0) {
                negative = true;
            }
        }

        // Return error if values does not contain at least one positive value
            // and one negative value
        if (!positive || !negative) {
            return error.num;
        }

        // Initialize guess and resultRate
        guess = guess || 0.1;
        var resultRate = guess;

        // Set maximum epsilon for end of iteration
        var epsMax = 1e-10;

        // Implement Newton's method
        var newRate, epsRate, resultValue;
        var contLoop = true;
        do {
            resultValue = irrResult(values, dates, resultRate);
            newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);
            epsRate = Math.abs(newRate - resultRate);
            resultRate = newRate;
            contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
        } while (contLoop);

        // Return internal rate of return
        return resultRate;
    };

    exports.XNPV = function(rate, values, dates) {
        rate = utils.parseNumber(rate);
        values = utils.parseNumberArray(utils.flatten(values));
        dates = utils.parseDateArray(utils.flatten(dates));
        if (utils.anyIsError(rate, values, dates)) {
            return error.value;
        }

        var result = 0;
        for (var i = 0; i < values.length; i++) {
            result += values[i] / Math.pow(1 + rate, DAYS(dates[i], dates[0]) / 365);
        }
        return result;
    };

    exports.YIELD = null;

    exports.YIELDDISC = null;

    exports.YIELDMAT = null;

    return exports;
})();

jexcel.methods.information = (function() {
    var exports = {};
    exports.CELL = null;

    exports.ERROR = {};
    exports.ERROR.TYPE = function(error_val) {
        switch (error_val) {
            case error.nil: return 1;
            case error.div0: return 2;
            case error.value: return 3;
            case error.ref: return 4;
            case error.name: return 5;
            case error.num: return 6;
            case error.na: return 7;
            case error.data: return 8;
        }
        return error.na;
    };

    exports.INFO = null;

    exports.ISBLANK = function(value) {
        return value === null;
    };

    exports.ISBINARY = function (number) {
        return (/^[01]{1,10}$/).test(number);
    };

    exports.ISERR = function(value) {
        return ([error.value, error.ref, error.div0, error.num, error.name, error.nil]).indexOf(value) >= 0 ||
            (typeof value === 'number' && (isNaN(value) || !isFinite(value)));
    };

    exports.ISERROR = function(value) {
        return exports.ISERR(value) || value === error.na;
    };

    exports.ISEVEN = function(number) {
        return (Math.floor(Math.abs(number)) & 1) ? false : true;
    };

    // TODO
    exports.ISFORMULA = null;

    exports.ISLOGICAL = function(value) {
        return value === true || value === false;
    };

    exports.ISNA = function(value) {
        return value === error.na;
    };

    exports.ISNONTEXT = function(value) {
        return typeof(value) !== 'string';
    };

    exports.ISNUMBER = function(value) {
        return typeof(value) === 'number' && !isNaN(value) && isFinite(value);
    };

    exports.ISODD = function(number) {
        return (Math.floor(Math.abs(number)) & 1) ? true : false;
    };

    exports.ISREF = null;

    exports.ISTEXT = function(value) {
        return typeof(value) === 'string';
    };

    exports.N = function(value) {
        if (this.ISNUMBER(value)) {
            return value;
        }
        if (value instanceof Date) {
            return value.getTime();
        }
        if (value === true) {
            return 1;
        }
        if (value === false) {
            return 0;
        }
        if (this.ISERROR(value)) {
            return value;
        }
        return 0;
    };

    exports.NA = function() {
        return error.na;
    };

    exports.SHEET = null;

    exports.SHEETS = null;

    exports.TYPE = function(value) {
        if (this.ISNUMBER(value)) {
            return 1;
        }
        if (this.ISTEXT(value)) {
            return 2;
        }
        if (this.ISLOGICAL(value)) {
            return 4;
        }
        if (this.ISERROR(value)) {
            return 16;
        }
        if (Array.isArray(value)) {
            return 64;
        }
    };

    return exports;
})();

jexcel.methods.logical = (function() {
    var exports = {};

    exports.AND = function() {
        var args = utils.flatten(arguments);
        var result = true;
        for (var i = 0; i < args.length; i++) {
            if (!args[i]) {
                result = false;
            }
        }
        return result;
    };

    exports.CHOOSE = function() {
        if (arguments.length < 2) {
            return error.na;
        }

        var index = arguments[0];
        if (index < 1 || index > 254) {
            return error.value;
        }

        if (arguments.length < index + 1) {
            return error.value;
        }

        return arguments[index];
    };

    exports.FALSE = function() {
        return false;
    };

    exports.IF = function(test, then_value, otherwise_value) {
        return test ? then_value : otherwise_value;
    };

    exports.IFERROR = function(value, valueIfError) {
        if (ISERROR(value)) {
            return valueIfError;
        }
        return value;
    };

    exports.IFNA = function(value, value_if_na) {
        return value === error.na ? value_if_na : value;
    };

    exports.NOT = function(logical) {
        return !logical;
    };

    exports.OR = function() {
        var args = utils.flatten(arguments);
        var result = false;
        for (var i = 0; i < args.length; i++) {
            if (args[i]) {
                result = true;
            }
        }
        return result;
    };

    exports.TRUE = function() {
        return true;
    };

    exports.XOR = function() {
        var args = utils.flatten(arguments);
        var result = 0;
        for (var i = 0; i < args.length; i++) {
            if (args[i]) {
                result++;
            }
        }
        return (Math.floor(Math.abs(result)) & 1) ? true : false;
    };

    exports.SWITCH = function() {
        var result;
        if (arguments.length > 0)  {
            var targetValue = arguments[0];
            var argc = arguments.length - 1;
            var switchCount = Math.floor(argc / 2);
            var switchSatisfied = false;
            var defaultClause = argc % 2 === 0 ? null : arguments[arguments.length - 1];

            if (switchCount) {
                for (var index = 0; index < switchCount; index++) {
                    if (targetValue === arguments[index * 2 + 1]) {
                      result = arguments[index * 2 + 2];
                      switchSatisfied = true;
                      break;
                    }
                }
            }

            if (!switchSatisfied && defaultClause) {
                result = defaultClause;
            }
        }

        return result;
    };

    return exports;
})();

jexcel.methods.math = (function() {
    var exports = {};

    exports.ABS = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.abs(utils.parseNumber(number));
    };

    exports.ACOS = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.acos(number);
    };

    exports.ACOSH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.log(number + Math.sqrt(number * number - 1));
    };

    exports.ACOT = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.atan(1 / number);
    };

    exports.ACOTH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 0.5 * Math.log((number + 1) / (number - 1));
    };

    exports.AGGREGATE = null

    exports.ARABIC = function(text) {
        // Credits: Rafa? Kukawski
        if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {
            return error.value;
        }
        var r = 0;
        text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {
            r += {
                M: 1000,
                CM: 900,
                D: 500,
                CD: 400,
                C: 100,
                XC: 90,
                L: 50,
                XL: 40,
                X: 10,
                IX: 9,
                V: 5,
                IV: 4,
                I: 1
            }[i];
        });
        return r;
    };

    exports.ASIN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.asin(number);
    };

    exports.ASINH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.log(number + Math.sqrt(number * number + 1));
    };

    exports.ATAN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.atan(number);
    };

    exports.ATAN2 = function(number_x, number_y) {
        number_x = utils.parseNumber(number_x);
        number_y = utils.parseNumber(number_y);
        if (utils.anyIsError(number_x, number_y)) {
            return error.value;
        }
        return Math.atan2(number_x, number_y);
    };

    exports.ATANH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.log((1 + number) / (1 - number)) / 2;
    };

    exports.BASE = function(number, radix, min_length) {
        min_length = min_length || 0;

        number = utils.parseNumber(number);
        radix = utils.parseNumber(radix);
        min_length = utils.parseNumber(min_length);
        if (utils.anyIsError(number, radix, min_length)) {
            return error.value;
        }
        min_length = (min_length === undefined) ? 0 : min_length;
        var result = number.toString(radix);
        return new Array(Math.max(min_length + 1 - result.length, 0)).join('0') + result;
    };

    exports.CEILING = function(number, significance, mode) {
        significance = (significance === undefined) ? 1 : significance;
        mode = (mode === undefined) ? 0 : mode;

        number = utils.parseNumber(number);
        significance = utils.parseNumber(significance);
        mode = utils.parseNumber(mode);
        if (utils.anyIsError(number, significance, mode)) {
            return error.value;
        }
        if (significance === 0) {
            return 0;
        }

        significance = Math.abs(significance);
        if (number >= 0) {
            return Math.ceil(number / significance) * significance;
        } else {
            if (mode === 0) {
                return -1 * Math.floor(Math.abs(number) / significance) * significance;
            } else {
                return -1 * Math.ceil(Math.abs(number) / significance) * significance;
            }
        }
    };

    exports.CEILING.MATH = exports.CEILING;

    exports.CEILING.PRECISE = exports.CEILING;

    exports.COMBIN = function(number, number_chosen) {
        number = utils.parseNumber(number);
        number_chosen = utils.parseNumber(number_chosen);
        if (utils.anyIsError(number, number_chosen)) {
            return error.value;
        }
        return exports.FACT(number) / (exports.FACT(number_chosen) * exports.FACT(number - number_chosen));
    };

    exports.COMBINA = function(number, number_chosen) {
        number = utils.parseNumber(number);
        number_chosen = utils.parseNumber(number_chosen);
        if (utils.anyIsError(number, number_chosen)) {
            return error.value;
        }
        return (number === 0 && number_chosen === 0) ? 1 : exports.COMBIN(number + number_chosen - 1, number - 1);
    };

    exports.COS = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.cos(number);
    };

    exports.COSH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return (Math.exp(number) + Math.exp(-number)) / 2;
    };

    exports.COT = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 1 / Math.tan(number);
    };

    exports.COTH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        var e2 = Math.exp(2 * number);
        return (e2 + 1) / (e2 - 1);
    };

    exports.CSC = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 1 / Math.sin(number);
    };

    exports.CSCH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 2 / (Math.exp(number) - Math.exp(-number));
    };

    exports.DECIMAL = function(number, radix) {
        if (arguments.length < 1) {
            return error.value;
        }


        return parseInt(number, radix);
    };

    exports.DEGREES = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return number * 180 / Math.PI;
    };

    exports.EVEN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return exports.CEILING(number, -2, -1);
    };

    exports.EXP = Math.exp;

    var MEMOIZED_FACT = [];
    exports.FACT = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        var n = Math.floor(number);
        if (n === 0 || n === 1) {
            return 1;
        } else if (MEMOIZED_FACT[n] > 0) {
            return MEMOIZED_FACT[n];
        } else {
            MEMOIZED_FACT[n] = exports.FACT(n - 1) * n;
            return MEMOIZED_FACT[n];
        }
    };

    exports.FACTDOUBLE = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        var n = Math.floor(number);
        if (n <= 0) {
            return 1;
        } else {
            return n * exports.FACTDOUBLE(n - 2);
        }
    };

    exports.FLOOR = function(number, significance, mode) {
        significance = (significance === undefined) ? 1 : significance;
        mode = (mode === undefined) ? 0 : mode;

        number = utils.parseNumber(number);
        significance = utils.parseNumber(significance);
        mode = utils.parseNumber(mode);
        if (utils.anyIsError(number, significance, mode)) {
            return error.value;
        }
        if (significance === 0) {
            return 0;
        }

        significance = Math.abs(significance);
        if (number >= 0) {
            return Math.floor(number / significance) * significance;
        } else {
            if (mode === 0) {
                return -1 * Math.ceil(Math.abs(number) / significance) * significance;
            } else {
                return -1 * Math.floor(Math.abs(number) / significance) * significance;
            }
        }
    };

    exports.FLOOR.MATH = exports.FLOOR;

    exports.GCD = null;

    exports.INT = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.floor(number);
    };

    exports.LCM = function() {
        // Credits: Jonas Raoni Soares Silva
        var o = utils.parseNumberArray(utils.flatten(arguments));
        if (o instanceof Error) {
            return o;
        }
        for (var i, j, n, d, r = 1;
            (n = o.pop()) !== undefined;) {
            while (n > 1) {
                if (n % 2) {
                    for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {
                      //empty
                    }
                    d = (i <= j) ? i : n;
                } else {
                    d = 2;
                }
                for (n /= d, r *= d, i = o.length; i;
                    (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {
                    //empty
                }
            }
        }
        return r;
    };

    exports.LN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.log(number);
    };

    exports.LOG = function(number, base) {
        number = utils.parseNumber(number);
        base = (base === undefined) ? 10 : utils.parseNumber(base);

        if (utils.anyIsError(number, base)) {
            return error.value;
        }

        return Math.log(number) / Math.log(base);
    };

    exports.LOG10 = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.log(number) / Math.log(10);
    };

    exports.MDETERM = null;

    exports.MINVERSE = null;

    exports.MMULT = null;

    exports.MOD = function(dividend, divisor) {
        dividend = utils.parseNumber(dividend);
        divisor = utils.parseNumber(divisor);
        if (utils.anyIsError(dividend, divisor)) {
            return error.value;
        }
        if (divisor === 0) {
            return error.div0;
        }
        var modulus = Math.abs(dividend % divisor);
        return (divisor > 0) ? modulus : -modulus;
    };

    exports.MROUND = function(number, multiple) {
        number = utils.parseNumber(number);
        multiple = utils.parseNumber(multiple);
        if (utils.anyIsError(number, multiple)) {
            return error.value;
        }
        if (number * multiple < 0) {
            return error.num;
        }

        return Math.round(number / multiple) * multiple;
    };

    exports.MULTINOMIAL = function() {
        var args = utils.parseNumberArray(utils.flatten(arguments));
        if (args instanceof Error) {
            return args;
        }
        var sum = 0;
        var divisor = 1;
        for (var i = 0; i < args.length; i++) {
            sum += args[i];
            divisor *= exports.FACT(args[i]);
        }
        return exports.FACT(sum) / divisor;
    };

    exports.MUNIT = null;

    exports.ODD = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        var temp = Math.ceil(Math.abs(number));
        temp = (temp & 1) ? temp : temp + 1;
        return (number > 0) ? temp : -temp;
    };

    exports.PI = function() {
        return Math.PI;
    };

    exports.POWER = function(number, power) {
        number = utils.parseNumber(number);
        power = utils.parseNumber(power);
        if (utils.anyIsError(number, power)) {
            return error.value;
        }
        var result = Math.pow(number, power);
        if (isNaN(result)) {
            return error.num;
        }

        return result;
    };

    exports.PRODUCT = function() {
        var args = utils.parseNumberArray(utils.flatten(arguments));
        if (args instanceof Error) {
            return args;
        }
        var result = 1;
        for (var i = 0; i < args.length; i++) {
            result *= args[i];
        }
        return result;
    };

    exports.QUOTIENT = function(numerator, denominator) {
        numerator = utils.parseNumber(numerator);
        denominator = utils.parseNumber(denominator);
        if (utils.anyIsError(numerator, denominator)) {
            return error.value;
        }
        return parseInt(numerator / denominator, 10);
    };

    exports.RADIANS = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return number * Math.PI / 180;
    };

    exports.RAND = function() {
        return Math.random();
    };

    exports.RANDBETWEEN = function(bottom, top) {
        bottom = utils.parseNumber(bottom);
        top = utils.parseNumber(top);
        if (utils.anyIsError(bottom, top)) {
            return error.value;
        }
        // Creative Commons Attribution 3.0 License
        // Copyright (c) 2012 eqcode
        return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;
    };

    exports.ROMAN = null;

    exports.ROUND = function(number, digits) {
        number = utils.parseNumber(number);
        digits = utils.parseNumber(digits);
        if (utils.anyIsError(number, digits)) {
            return error.value;
        }
        return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);
    };

    exports.ROUNDDOWN = function(number, digits) {
        number = utils.parseNumber(number);
        digits = utils.parseNumber(digits);
        if (utils.anyIsError(number, digits)) {
            return error.value;
        }
        var sign = (number > 0) ? 1 : -1;
        return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
    };

    exports.ROUNDUP = function(number, digits) {
        number = utils.parseNumber(number);
        digits = utils.parseNumber(digits);
        if (utils.anyIsError(number, digits)) {
            return error.value;
        }
        var sign = (number > 0) ? 1 : -1;
        return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
    };

    exports.SEC = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 1 / Math.cos(number);
    };

    exports.SECH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return 2 / (Math.exp(number) + Math.exp(-number));
    };

    exports.SERIESSUM = function(x, n, m, coefficients) {
        x = utils.parseNumber(x);
        n = utils.parseNumber(n);
        m = utils.parseNumber(m);
        coefficients = utils.parseNumberArray(coefficients);
        if (utils.anyIsError(x, n, m, coefficients)) {
            return error.value;
        }
        var result = coefficients[0] * Math.pow(x, n);
        for (var i = 1; i < coefficients.length; i++) {
            result += coefficients[i] * Math.pow(x, n + i * m);
        }
        return result;
    };

    exports.SIGN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        if (number < 0) {
            return -1;
        } else if (number === 0) {
            return 0;
        } else {
            return 1;
        }
    };

    exports.SIN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.sin(number);
    };

    exports.SINH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return (Math.exp(number) - Math.exp(-number)) / 2;
    };

    exports.SQRT = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        if (number < 0) {
            return error.num;
        }
        return Math.sqrt(number);
    };

    exports.SQRTPI = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.sqrt(number * Math.PI);
    };

    exports.SUBTOTAL = null;

    exports.ADD = function (num1, num2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        num1 = utils.parseNumber(num1);
        num2 = utils.parseNumber(num2);
        if (utils.anyIsError(num1, num2)) {
            return error.value;
        }

        return num1 + num2;
    };

    exports.MINUS = function (num1, num2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        num1 = utils.parseNumber(num1);
        num2 = utils.parseNumber(num2);
        if (utils.anyIsError(num1, num2)) {
            return error.value;
        }

        return num1 - num2;
    };

    exports.DIVIDE = function (dividend, divisor) {
        if (arguments.length !== 2) {
            return error.na;
        }

        dividend = utils.parseNumber(dividend);
        divisor = utils.parseNumber(divisor);
        if (utils.anyIsError(dividend, divisor)) {
            return error.value;
        }

        if (divisor === 0) {
            return error.div0;
        }

        return dividend / divisor;
    };

    exports.MULTIPLY = function (factor1, factor2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        factor1 = utils.parseNumber(factor1);
        factor2 = utils.parseNumber(factor2);
        if (utils.anyIsError(factor1, factor2)) {
            return error.value;
        }

        return factor1 * factor2;
    };

    exports.GTE = function (num1, num2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        num1 = utils.parseNumber(num1);
        num2 = utils.parseNumber(num2);
        if (utils.anyIsError(num1, num2)) {
            return error.error;
        }

        return num1 >= num2;
    };

    exports.LT = function (num1, num2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        num1 = utils.parseNumber(num1);
        num2 = utils.parseNumber(num2);
        if (utils.anyIsError(num1, num2)) {
            return error.error;
        }

        return num1 < num2;
    };

    exports.LTE = function (num1, num2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        num1 = utils.parseNumber(num1);
        num2 = utils.parseNumber(num2);
        if (utils.anyIsError(num1, num2)) {
            return error.error;
        }

        return num1 <= num2;
    };

    exports.EQ = function (value1, value2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        return value1 === value2;
    };

    exports.NE = function (value1, value2) {
        if (arguments.length !== 2) {
            return error.na;
        }

        return value1 !== value2;
    };

    exports.POW = function (base, exponent) {
        if (arguments.length !== 2) {
            return error.na;
        }

        base = utils.parseNumber(base);
        exponent = utils.parseNumber(exponent);
        if (utils.anyIsError(base, exponent)) {
            return error.error;
        }

        return exports.POWER(base, exponent);
    };

    exports.SUM = function() {
        var result = 0;
        var argsKeys = Object.keys(arguments);
        for (var i = 0; i < argsKeys.length; ++i) {
            var elt = arguments[argsKeys[i]];
            if (typeof elt === 'number') {
                result += elt;
            } else if (typeof elt === 'string') {
                var parsed = parseFloat(elt);
                !isNaN(parsed) && (result += parsed);
            } else if (Array.isArray(elt)) {
                result += exports.SUM.apply(null, elt);
            }
        }
        return result;
    };

    exports.SUMIF = function(range, criteria) {
        range = utils.parseNumberArray(utils.flatten(range));
        if (range instanceof Error) {
            return range;
        }
        var result = 0;
        for (var i = 0; i < range.length; i++) {
            result += (eval(range[i] + criteria)) ? range[i] : 0; // jshint ignore:line
        }
        return result;
    };

    exports.SUMIFS = function() {
        var args = utils.argsToArray(arguments);
        var range = utils.parseNumberArray(utils.flatten(args.shift()));
        if (range instanceof Error) {
            return range;
        }
        var criteria = args;

        var n_range_elements = range.length;
        var n_criterias = criteria.length;

        var result = 0;
        for (var i = 0; i < n_range_elements; i++) {
            var el = range[i];
            var condition = '';
            for (var c = 0; c < n_criterias; c++) {
                condition += el + criteria[c];
                if (c !== n_criterias - 1) {
                    condition += '&&';
                }
            }
            if (eval(condition)) { // jshint ignore:line
                result += el;
            }
        }
        return result;
    };

    exports.SUMPRODUCT = null;

    exports.SUMSQ = function() {
        var numbers = utils.parseNumberArray(utils.flatten(arguments));
        if (numbers instanceof Error) {
            return numbers;
        }
        var result = 0;
        var length = numbers.length;
        for (var i = 0; i < length; i++) {
            result += (ISNUMBER(numbers[i])) ? numbers[i] * numbers[i] : 0;
        }
        return result;
    };

    exports.SUMX2MY2 = function(array_x, array_y) {
        array_x = utils.parseNumberArray(utils.flatten(array_x));
        array_y = utils.parseNumberArray(utils.flatten(array_y));
        if (utils.anyIsError(array_x, array_y)) {
            return error.value;
        }
        var result = 0;
        for (var i = 0; i < array_x.length; i++) {
            result += array_x[i] * array_x[i] - array_y[i] * array_y[i];
        }
        return result;
    };

    exports.SUMX2PY2 = function(array_x, array_y) {
        array_x = utils.parseNumberArray(utils.flatten(array_x));
        array_y = utils.parseNumberArray(utils.flatten(array_y));
        if (utils.anyIsError(array_x, array_y)) {
            return error.value;
        }
        var result = 0;
        array_x = utils.parseNumberArray(utils.flatten(array_x));
        array_y = utils.parseNumberArray(utils.flatten(array_y));
        for (var i = 0; i < array_x.length; i++) {
            result += array_x[i] * array_x[i] + array_y[i] * array_y[i];
        }
        return result;
    };

    exports.SUMXMY2 = function(array_x, array_y) {
        array_x = utils.parseNumberArray(utils.flatten(array_x));
        array_y = utils.parseNumberArray(utils.flatten(array_y));
        if (utils.anyIsError(array_x, array_y)) {
            return error.value;
        }
        var result = 0;
        array_x = utils.flatten(array_x);
        array_y = utils.flatten(array_y);
        for (var i = 0; i < array_x.length; i++) {
            result += Math.pow(array_x[i] - array_y[i], 2);
        }
        return result;
    };

    exports.TAN = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return Math.tan(number);
    };

    exports.TANH = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        var e2 = Math.exp(2 * number);
        return (e2 - 1) / (e2 + 1);
    };

    exports.TRUNC = function(number, digits) {
        digits = (digits === undefined) ? 0 : digits;
        number = utils.parseNumber(number);
        digits = utils.parseNumber(digits);
        if (utils.anyIsError(number, digits)) {
            return error.value;
        }
        var sign = (number > 0) ? 1 : -1;
        return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
    };

    return exports;
})();

jexcel.methods.misc = (function() {
    var exports = {};

    exports.UNIQUE = function () {
        var result = [];
        for (var i = 0; i < arguments.length; ++i) {
            var hasElement = false;
            var element = arguments[i];

            // Check if we've already seen this element.
            for (var j = 0; j < result.length; ++j) {
                hasElement = result[j] === element;
                if (hasElement) { break; }
            }

            // If we did not find it, add it to the result.
            if (!hasElement) {
                result.push(element);
            }
        }
        return result;
    };

    exports.FLATTEN = utils.flatten;

    exports.ARGS2ARRAY = function () {
        return Array.prototype.slice.call(arguments, 0);
    };

    exports.REFERENCE = function (context, reference) {
        try {
            var path = reference.split('.');
            var result = context;
            for (var i = 0; i < path.length; ++i) {
                var step = path[i];
                if (step[step.length - 1] === ']') {
                    var opening = step.indexOf('[');
                    var index = step.substring(opening + 1, step.length - 1);
                    result = result[step.substring(0, opening)][index];
                } else {
                    result = result[step];
                }
            }
            return result;
        } catch (error) {}
    };

    exports.JOIN = function (array, separator) {
        return array.join(separator);
    };

    exports.NUMBERS = function () {
        var possibleNumbers = utils.flatten(arguments);
        return possibleNumbers.filter(function (el) {
            return typeof el === 'number';
        });
    };

    exports.NUMERAL = null;

    return exports;
})();

jexcel.methods.text = (function() {
    var exports = {};

    exports.ASC = null;

    exports.BAHTTEXT = null;

    exports.CHAR = function(number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return String.fromCharCode(number);
    };

    exports.CLEAN = function(text) {
        text = text || '';
        var re = /[\0-\x1F]/g;
        return text.replace(re, "");
    };

    exports.CODE = function(text) {
        text = text || '';
        return text.charCodeAt(0);
    };

    exports.CONCATENATE = function() {
        var args = utils.flatten(arguments);

        var trueFound = 0;
        while ((trueFound = args.indexOf(true)) > -1) {
            args[trueFound] = 'TRUE';
        }

        var falseFound = 0;
        while ((falseFound = args.indexOf(false)) > -1) {
            args[falseFound] = 'FALSE';
        }

        return args.join('');
    };

    exports.DBCS = null;

    exports.DOLLAR = null;

    exports.EXACT = function(text1, text2) {
        return text1 === text2;
    };

    exports.FIND = function(find_text, within_text, position) {
        position = (position === undefined) ? 0 : position;
        return within_text ? within_text.indexOf(find_text, position - 1) + 1 : null;
    };

    exports.FIXED = null;

    exports.HTML2TEXT = function (value) {
        var result = '';

        if (value) {
            if (value instanceof Array) {
                value.forEach(function (line) {
                    if (result !== '') {
                      result += '\n';
                    }
                    result += (line.replace(/<(?:.|\n)*?>/gm, ''));
                });
            } else {
                result = value.replace(/<(?:.|\n)*?>/gm, '');
            }
        }

        return result;
    };

    exports.LEFT = function(text, number) {
        number = (number === undefined) ? 1 : number;
        number = utils.parseNumber(number);
        if (number instanceof Error || typeof text !== 'string') {
            return error.value;
        }
        return text ? text.substring(0, number) : null;
    };

    exports.LEN = function(text) {
        if (arguments.length === 0) {
            return error.error;
        }

        if (typeof text === 'string') {
            return text ? text.length : 0;
        }

        if (text.length) {
            return text.length;
        }

        return error.value;
    };

    exports.LOWER = function(text) {
        if (typeof text !== 'string') {
            return error.value;
        }
        return text ? text.toLowerCase() : text;
    };

    exports.MID = function(text, start, number) {
        start = utils.parseNumber(start);
        number = utils.parseNumber(number);
        if (utils.anyIsError(start, number) || typeof text !== 'string') {
            return number;
        }

        var begin = start - 1;
        var end = begin + number;

        return text.substring(begin, end);
    };

    exports.NUMBERVALUE = null;

    exports.PRONETIC = null;

    exports.PROPER = function(text) {
        if (text === undefined || text.length === 0) {
            return error.value;
        }
        if (text === true) {
            text = 'TRUE';
        }
        if (text === false) {
            text = 'FALSE';
        }
        if (isNaN(text) && typeof text === 'number') {
            return error.value;
        }
        if (typeof text === 'number') {
            text = '' + text;
        }

        return text.replace(/\w\S*/g, function(txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    };

    exports.REGEXEXTRACT = function (text, regular_expression) {
        var match = text.match(new RegExp(regular_expression));
        return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;
    };

    exports.REGEXMATCH = function (text, regular_expression, full) {
        var match = text.match(new RegExp(regular_expression));
        return full ? match : !!match;
    };

    exports.REGEXREPLACE = function (text, regular_expression, replacement) {
        return text.replace(new RegExp(regular_expression), replacement);
    };

    exports.REPLACE = function(text, position, length, new_text) {
        position = utils.parseNumber(position);
        length = utils.parseNumber(length);
        if (utils.anyIsError(position, length) ||
            typeof text !== 'string' ||
            typeof new_text !== 'string') {
            return error.value;
        }
        return text.substr(0, position - 1) + new_text + text.substr(position - 1 + length);
    };

    exports.REPT = function(text, number) {
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return new Array(number + 1).join(text);
    };

    exports.RIGHT = function(text, number) {
        number = (number === undefined) ? 1 : number;
        number = utils.parseNumber(number);
        if (number instanceof Error) {
            return number;
        }
        return text ? text.substring(text.length - number) : null;
    };

    exports.SEARCH = function(find_text, within_text, position) {
        var foundAt;
        if (typeof find_text !== 'string' || typeof within_text !== 'string') {
            return error.value;
        }
        position = (position === undefined) ? 0 : position;
        foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), position - 1)+1;
        return (foundAt === 0)?error.value:foundAt;
    };

    exports.SPLIT = function (text, separator) {
        return text.split(separator);
    };

    exports.SUBSTITUTE = function(text, old_text, new_text, occurrence) {
        if (!text || !old_text || !new_text) {
            return text;
        } else if (occurrence === undefined) {
            return text.replace(new RegExp(old_text, 'g'), new_text);
        } else {
            var index = 0;
            var i = 0;
            while (text.indexOf(old_text, index) > 0) {
                index = text.indexOf(old_text, index + 1);
                i++;
                if (i === occurrence) {
                    return text.substring(0, index) + new_text + text.substring(index + old_text.length);
                }
            }
        }
    };

    exports.T = function(value) {
        return (typeof value === "string") ? value : '';
    };

    exports.TEXT = null;

    exports.TRIM = function(text) {
        if (typeof text !== 'string') {
            return error.value;
        }
        return text.replace(/ +/g, ' ').trim();
    };

    exports.UNICHAR = exports.CHAR;

    exports.UNICODE = exports.CODE;

    exports.UPPER = function(text) {
        if (typeof text !== 'string') {
            return error.value;
        }
        return text.toUpperCase();
    };

    exports.VALUE = null;

    return exports;
})();

jexcel.methods.stats = (function() {
    var exports = {};

    var SQRT2PI = 2.5066282746310002;

    exports.AVEDEV = null;

    exports.AVERAGE = function() {
        var range = utils.numbers(utils.flatten(arguments));
        var n = range.length;
        var sum = 0;
        var count = 0;
        for (var i = 0; i < n; i++) {
            sum += range[i];
            count += 1;
        }
        return sum / count;
    };

    exports.AVERAGEA = function() {
        var range = utils.flatten(arguments);
        var n = range.length;
        var sum = 0;
        var count = 0;
        for (var i = 0; i < n; i++) {
            var el = range[i];
            if (typeof el === 'number') {
                sum += el;
            }
            if (el === true) {
                sum++;
            }
            if (el !== null) {
                count++;
            }
        }
        return sum / count;
    };

    exports.AVERAGEIF = function(range, criteria, average_range) {
        average_range = average_range || range;
        range = utils.flatten(range);
        average_range = utils.parseNumberArray(utils.flatten(average_range));
        if (average_range instanceof Error) {
            return average_range;
        }
        var average_count = 0;
        var result = 0;
        for (var i = 0; i < range.length; i++) {
            if (eval(range[i] + criteria)) { // jshint ignore:line
                result += average_range[i];
                average_count++;
            }
        }
        return result / average_count;
    };

    exports.AVERAGEIFS = null;

    exports.COUNT = function() {
        return utils.numbers(utils.flatten(arguments)).length;
    };

    exports.COUNTA = function() {
        var range = utils.flatten(arguments);
        return range.length - exports.COUNTBLANK(range);
    };

    exports.COUNTIN = function (range, value) {
        var result = 0;
        for (var i = 0; i < range.length; i++) {
            if (range[i] === value) {
                result++;
            }
        }
        return result;
    };

    exports.COUNTBLANK = function() {
        var range = utils.flatten(arguments);
        var blanks = 0;
        var element;
        for (var i = 0; i < range.length; i++) {
            element = range[i];
            if (element === null || element === '') {
                blanks++;
            }
        }
        return blanks;
    };

    exports.COUNTIF = function(range, criteria) {
        range = utils.flatten(range);
        if (!/[<>=!]/.test(criteria)) {
            criteria = '=="' + criteria + '"';
        }
        var matches = 0;
        for (var i = 0; i < range.length; i++) {
            if (typeof range[i] !== 'string') {
                if (eval(range[i] + criteria)) { // jshint ignore:line
                    matches++;
                }
            } else {
                if (eval('"' + range[i] + '"' + criteria)) { // jshint ignore:line
                    matches++;
                }
            }
        }
        return matches;
    };

    exports.COUNTIFS = function() {
        var args = utils.argsToArray(arguments);
        var results = new Array(utils.flatten(args[0]).length);
        for (var i = 0; i < results.length; i++) {
            results[i] = true;
        }
        for (i = 0; i < args.length; i += 2) {
            var range = utils.flatten(args[i]);
            var criteria = args[i + 1];
            if (!/[<>=!]/.test(criteria)) {
                criteria = '=="' + criteria + '"';
            }
            for (var j = 0; j < range.length; j++) {
                if (typeof range[j] !== 'string') {
                    results[j] = results[j] && eval(range[j] + criteria); // jshint ignore:line
                } else {
                    results[j] = results[j] && eval('"' + range[j] + '"' + criteria); // jshint ignore:line
                }
            }
        }
        var result = 0;
        for (i = 0; i < results.length; i++) {
            if (results[i]) {
                result++;
            }
        }
        return result;
    };

    exports.COUNTUNIQUE = function () {
        return UNIQUE.apply(null, utils.flatten(arguments)).length;
    };

    exports.FISHER = function(x) {
        x = utils.parseNumber(x);
        if (x instanceof Error) {
            return x;
        }
        return Math.log((1 + x) / (1 - x)) / 2;
    };

    exports.FISHERINV = function(y) {
        y = utils.parseNumber(y);
        if (y instanceof Error) {
            return y;
        }
        var e2y = Math.exp(2 * y);
        return (e2y - 1) / (e2y + 1);
    };

    exports.FREQUENCY = function(data, bins) {
        data = utils.parseNumberArray(utils.flatten(data));
        bins = utils.parseNumberArray(utils.flatten(bins));
        if (utils.anyIsError(data, bins)) {
            return error.value;
        }
        var n = data.length;
        var b = bins.length;
        var r = [];
        for (var i = 0; i <= b; i++) {
            r[i] = 0;
            for (var j = 0; j < n; j++) {
                if (i === 0) {
                    if (data[j] <= bins[0]) {
                        r[0] += 1;
                    }
                } else if (i < b) {
                    if (data[j] > bins[i - 1] && data[j] <= bins[i]) {
                        r[i] += 1;
                    }
                } else if (i === b) {
                    if (data[j] > bins[b - 1]) {
                        r[b] += 1;
                    }
                }
            }
        }
        return r;
    };

    exports.LARGE = function(range, k) {
        range = utils.parseNumberArray(utils.flatten(range));
        k = utils.parseNumber(k);
        if (utils.anyIsError(range, k)) {
            return range;
        }
        return range.sort(function(a, b) {
            return b - a;
        })[k - 1];
    };

    exports.MAX = function() {
        var range = utils.numbers(utils.flatten(arguments));
        return (range.length === 0) ? 0 : Math.max.apply(Math, range);
    };

    exports.MAXA = function() {
        var range = utils.arrayValuesToNumbers(utils.flatten(arguments));
        return (range.length === 0) ? 0 : Math.max.apply(Math, range);
    };

    exports.MIN = function() {
        var range = utils.numbers(utils.flatten(arguments));
        return (range.length === 0) ? 0 : Math.min.apply(Math, range);
    };

    exports.MINA = function() {
        var range = utils.arrayValuesToNumbers(utils.flatten(arguments));
        return (range.length === 0) ? 0 : Math.min.apply(Math, range);
    };

    exports.MODE = {};

    exports.MODE.MULT = function() {
        // Credits: Roönaän
        var range = utils.parseNumberArray(utils.flatten(arguments));
        if (range instanceof Error) {
            return range;
        }
        var n = range.length;
        var count = {};
        var maxItems = [];
        var max = 0;
        var currentItem;

        for (var i = 0; i < n; i++) {
            currentItem = range[i];
            count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;
            if (count[currentItem] > max) {
                max = count[currentItem];
                maxItems = [];
            }
            if (count[currentItem] === max) {
                maxItems[maxItems.length] = currentItem;
            }
        }
        return maxItems;
    };

    exports.MODE.SNGL = function() {
        var range = utils.parseNumberArray(utils.flatten(arguments));
        if (range instanceof Error) {
            return range;
        }
        return exports.MODE.MULT(range).sort(function(a, b) {
            return a - b;
        })[0];
    };

    exports.PERCENTILE = {};

    exports.PERCENTILE.EXC = function(array, k) {
        array = utils.parseNumberArray(utils.flatten(array));
        k = utils.parseNumber(k);
        if (utils.anyIsError(array, k)) {
            return error.value;
        }
        array = array.sort(function(a, b) {
            {
                return a - b;
            }
        });
        var n = array.length;
        if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {
            return error.num;
        }
        var l = k * (n + 1) - 1;
        var fl = Math.floor(l);
        return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));
    };

    exports.PERCENTILE.INC = function(array, k) {
        array = utils.parseNumberArray(utils.flatten(array));
        k = utils.parseNumber(k);
        if (utils.anyIsError(array, k)) {
            return error.value;
        }
        array = array.sort(function(a, b) {
            return a - b;
        });
        var n = array.length;
        var l = k * (n - 1);
        var fl = Math.floor(l);
        return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));
    };

    exports.PERCENTRANK = {};

    exports.PERCENTRANK.EXC = function(array, x, significance) {
        significance = (significance === undefined) ? 3 : significance;
        array = utils.parseNumberArray(utils.flatten(array));
        x = utils.parseNumber(x);
        significance = utils.parseNumber(significance);
        if (utils.anyIsError(array, x, significance)) {
            return error.value;
        }
        array = array.sort(function(a, b) {
            return a - b;
        });
        var uniques = UNIQUE.apply(null, array);
        var n = array.length;
        var m = uniques.length;
        var power = Math.pow(10, significance);
        var result = 0;
        var match = false;
        var i = 0;
        while (!match && i < m) {
            if (x === uniques[i]) {
                result = (array.indexOf(uniques[i]) + 1) / (n + 1);
                match = true;
            } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
                result = (array.indexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);
                match = true;
            }
            i++;
        }
        return Math.floor(result * power) / power;
    };

    exports.PERCENTRANK.INC = function(array, x, significance) {
        significance = (significance === undefined) ? 3 : significance;
        array = utils.parseNumberArray(utils.flatten(array));
        x = utils.parseNumber(x);
        significance = utils.parseNumber(significance);
        if (utils.anyIsError(array, x, significance)) {
            return error.value;
        }
        array = array.sort(function(a, b) {
            return a - b;
        });
        var uniques = UNIQUE.apply(null, array);
        var n = array.length;
        var m = uniques.length;
        var power = Math.pow(10, significance);
        var result = 0;
        var match = false;
        var i = 0;
        while (!match && i < m) {
            if (x === uniques[i]) {
                result = array.indexOf(uniques[i]) / (n - 1);
                match = true;
            } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
                result = (array.indexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);
                match = true;
            }
            i++;
        }
        return Math.floor(result * power) / power;
    };

    exports.PERMUT = function(number, number_chosen) {
        number = utils.parseNumber(number);
        number_chosen = utils.parseNumber(number_chosen);
        if (utils.anyIsError(number, number_chosen)) {
            return error.value;
        }
        return FACT(number) / FACT(number - number_chosen);
    };

    exports.PERMUTATIONA = function(number, number_chosen) {
        number = utils.parseNumber(number);
        number_chosen = utils.parseNumber(number_chosen);
        if (utils.anyIsError(number, number_chosen)) {
            return error.value;
        }
        return Math.pow(number, number_chosen);
    };

    exports.PHI = function(x) {
        x = utils.parseNumber(x);
        if (x instanceof Error) {
            return error.value;
        }
        return Math.exp(-0.5 * x * x) / SQRT2PI;
    };

    exports.PROB = function(range, probability, lower, upper) {
        if (lower === undefined) {
            return 0;
        }
        upper = (upper === undefined) ? lower : upper;

        range = utils.parseNumberArray(utils.flatten(range));
        probability = utils.parseNumberArray(utils.flatten(probability));
        lower = utils.parseNumber(lower);
        upper = utils.parseNumber(upper);
        if (utils.anyIsError(range, probability, lower, upper)) {
            return error.value;
        }

        if (lower === upper) {
            return (range.indexOf(lower) >= 0) ? probability[range.indexOf(lower)] : 0;
        }

        var sorted = range.sort(function(a, b) {
            return a - b;
        });
        var n = sorted.length;
        var result = 0;
        for (var i = 0; i < n; i++) {
            if (sorted[i] >= lower && sorted[i] <= upper) {
                result += probability[range.indexOf(sorted[i])];
            }
        }
        return result;
    };

    exports.QUARTILE = {};

    exports.QUARTILE.EXC = function(range, quart) {
        range = utils.parseNumberArray(utils.flatten(range));
        quart = utils.parseNumber(quart);
        if (utils.anyIsError(range, quart)) {
            return error.value;
        }
        switch (quart) {
            case 1:
                return exports.PERCENTILE.EXC(range, 0.25);
            case 2:
                return exports.PERCENTILE.EXC(range, 0.5);
            case 3:
                return exports.PERCENTILE.EXC(range, 0.75);
            default:
                return error.num;
        }
    };

    exports.QUARTILE.INC = function(range, quart) {
        range = utils.parseNumberArray(utils.flatten(range));
        quart = utils.parseNumber(quart);
        if (utils.anyIsError(range, quart)) {
            return error.value;
        }
        switch (quart) {
            case 1:
                return exports.PERCENTILE.INC(range, 0.25);
            case 2:
                return exports.PERCENTILE.INC(range, 0.5);
            case 3:
                return exports.PERCENTILE.INC(range, 0.75);
            default:
                return error.num;
        }
    };

    exports.RANK = {};

    exports.RANK.AVG = function(number, range, order) {
        number = utils.parseNumber(number);
        range = utils.parseNumberArray(utils.flatten(range));
        if (utils.anyIsError(number, range)) {
            return error.value;
        }
        range = utils.flatten(range);
        order = order || false;
        var sort = (order) ? function(a, b) {
            return a - b;
        } : function(a, b) {
            return b - a;
        };
        range = range.sort(sort);

        var length = range.length;
        var count = 0;
        for (var i = 0; i < length; i++) {
            if (range[i] === number) {
                count++;
            }
        }

        return (count > 1) ? (2 * range.indexOf(number) + count + 1) / 2 : range.indexOf(number) + 1;
    };

    exports.RANK.EQ = function(number, range, order) {
        number = utils.parseNumber(number);
        range = utils.parseNumberArray(utils.flatten(range));
        if (utils.anyIsError(number, range)) {
            return error.value;
        }
        order = order || false;
        var sort = (order) ? function(a, b) {
            return a - b;
        } : function(a, b) {
            return b - a;
        };
        range = range.sort(sort);
        return range.indexOf(number) + 1;
    };

    exports.RSQ = function(data_x, data_y) { // no need to flatten here, PEARSON will take care of that
        data_x = utils.parseNumberArray(utils.flatten(data_x));
        data_y = utils.parseNumberArray(utils.flatten(data_y));
        if (utils.anyIsError(data_x, data_y)) {
            return error.value;
        }
        return Math.pow(exports.PEARSON(data_x, data_y), 2);
    };

    exports.SMALL = function(range, k) {
        range = utils.parseNumberArray(utils.flatten(range));
        k = utils.parseNumber(k);
        if (utils.anyIsError(range, k)) {
            return range;
        }
        return range.sort(function(a, b) {
            return a - b;
        })[k - 1];
    };

    exports.STANDARDIZE = function(x, mean, sd) {
        x = utils.parseNumber(x);
        mean = utils.parseNumber(mean);
        sd = utils.parseNumber(sd);
        if (utils.anyIsError(x, mean, sd)) {
            return error.value;
        }
        return (x - mean) / sd;
    };

    exports.STDEV = {};

    exports.STDEV.P = function() {
        var v = exports.VAR.P.apply(this, arguments);
        return Math.sqrt(v);
    };

    exports.STDEV.S = function() {
        var v = exports.VAR.S.apply(this, arguments);
        return Math.sqrt(v);
    };

    exports.STDEVA = function() {
        var v = exports.VARA.apply(this, arguments);
        return Math.sqrt(v);
    };

    exports.STDEVPA = function() {
        var v = exports.VARPA.apply(this, arguments);
        return Math.sqrt(v);
    };

    exports.VAR = {};

    exports.VAR.P = function() {
        var range = utils.numbers(utils.flatten(arguments));
        var n = range.length;
        var sigma = 0;
        var mean = exports.AVERAGE(range);
        for (var i = 0; i < n; i++) {
            sigma += Math.pow(range[i] - mean, 2);
        }
        return sigma / n;
    };

    exports.VAR.S = function() {
        var range = utils.numbers(utils.flatten(arguments));
        var n = range.length;
        var sigma = 0;
        var mean = exports.AVERAGE(range);
        for (var i = 0; i < n; i++) {
            sigma += Math.pow(range[i] - mean, 2);
        }
        return sigma / (n - 1);
    };

    exports.VARA = function() {
        var range = utils.flatten(arguments);
        var n = range.length;
        var sigma = 0;
        var count = 0;
        var mean = exports.AVERAGEA(range);
        for (var i = 0; i < n; i++) {
            var el = range[i];
            if (typeof el === 'number') {
                sigma += Math.pow(el - mean, 2);
            } else if (el === true) {
                sigma += Math.pow(1 - mean, 2);
            } else {
                sigma += Math.pow(0 - mean, 2);
            }

            if (el !== null) {
                count++;
            }
        }
        return sigma / (count - 1);
    };

    exports.VARPA = function() {
        var range = utils.flatten(arguments);
        var n = range.length;
        var sigma = 0;
        var count = 0;
        var mean = exports.AVERAGEA(range);
        for (var i = 0; i < n; i++) {
            var el = range[i];
            if (typeof el === 'number') {
                sigma += Math.pow(el - mean, 2);
            } else if (el === true) {
                sigma += Math.pow(1 - mean, 2);
            } else {
                sigma += Math.pow(0 - mean, 2);
            }

            if (el !== null) {
                count++;
            }
        }
        return sigma / count;
    };

    exports.WEIBULL = {};

    exports.WEIBULL.DIST = function(x, alpha, beta, cumulative) {
        x = utils.parseNumber(x);
        alpha = utils.parseNumber(alpha);
        beta = utils.parseNumber(beta);
        if (utils.anyIsError(x, alpha, beta)) {
            return error.value;
        }
        return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);
    };

    exports.Z = {};

    exports.Z.TEST = function(range, x, sd) {
        range = utils.parseNumberArray(utils.flatten(range));
        x = utils.parseNumber(x);
        if (utils.anyIsError(range, x)) {
            return error.value;
        }

        sd = sd || exports.STDEV.S(range);
        var n = range.length;
        return 1 - exports.NORM.S.DIST((exports.AVERAGE(range) - x) / (sd / Math.sqrt(n)), true);
    };

    return exports;
})();

for (var i = 0; i < Object.keys(jexcel.methods).length; i++) {
    var methods = jexcel.methods[Object.keys(jexcel.methods)[i]];
    for (var j = 0; j < Object.keys(methods).length; j++) {
        if (typeof(methods[Object.keys(methods)[j]]) == 'function') {
            window[Object.keys(methods)[j]] = methods[Object.keys(methods)[j]];
        } else {
            window[Object.keys(methods)[j]] = function() {
                return Object.keys(methods)[j] + 'Not implemented';
            }
        }
    }
}




    return jexcel;

})));

/***/ }),

/***/ 45551:
/*!**********************************************!*\
  !*** ./node_modules/jsuites/dist/jsuites.js ***!
  \**********************************************/
/***/ (function(module) {


/**
 * (c) jSuites Javascript Web Components (v2.8)
 *
 * Author: Paul Hodel <paul.hodel@gmail.com>
 * Website: https://bossanova.uk/jsuites/
 * Description: Create amazing web based applications.
 *
 * MIT License
 *
 */
;(function (global, factory) {
     true ? module.exports = factory() :
    0;
}(this, (function () {

    'use strict';

var jSuites = function(options) {
    var obj = {}

    obj.init = function() {
        // Find root element
        var app = document.querySelector('.japp');

        // Root element
        if (app) {
            obj.el = app;
        } else {
            obj.el = document.body;
        }

        // Loading modules
        var modules = document.querySelectorAll('[data-autoload]');
        for (var i = 0; i < modules.length; i++) {
            var m = modules[i].getAttribute('data-autoload');
            if (typeof(window[m]) == 'function') {
                window[m](modules[i]);
            }
        }
    }

    obj.guid = function() {
        var guid = '';
        for (var i = 0; i < 32; i++) {
            guid += Math.floor(Math.random()*0xF).toString(0xF);
        }
        return guid;
    }

    obj.getWindowWidth = function() {
        var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        x = w.innerWidth || e.clientWidth || g.clientWidth;
        return x;
    }

    obj.getWindowHeight = function() {
        var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        y = w.innerHeight|| e.clientHeight|| g.clientHeight;
        return  y;
    }

    obj.getPosition = function(e) {
        if (e.changedTouches && e.changedTouches[0]) {
            var x = e.changedTouches[0].pageX;
            var y = e.changedTouches[0].pageY;
        } else {
            var x = (window.Event) ? e.pageX : e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
            var y = (window.Event) ? e.pageY : e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
        }

        return [ x, y ];
    }

    obj.click = function(el) {
        if (el.click) {
            el.click();
        } else {
            var evt = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window
            });
            el.dispatchEvent(evt);
        }
    }

    obj.getElement = function(element, className) {
        var foundElement = false;

        function path (element) {
            if (element.className) {
                if (element.classList.contains(className)) {
                    foundElement = element;
                }
            }

            if (element.parentNode) {
                path(element.parentNode);
            }
        }

        path(element);

        return foundElement;
    }

    obj.getLinkElement = function(element) {
        var targetElement = false;

        function path (element) {
            if ((element.tagName == 'A' || element.tagName == 'DIV') && element.getAttribute('data-href')) {
                targetElement = element;
            }

            if (element.parentNode) {
                path(element.parentNode);
            }
        }

        path(element);

        return targetElement;
    }

    obj.getFormElements = function(formObject) {
        var ret = {};

        if (formObject) {
            var elements = formObject.querySelectorAll("input, select, textarea");
        } else {
            var elements = document.querySelectorAll("input, select, textarea");
        }

        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            var name = element.name;
            var value = element.value;

            if (name) {
                ret[name] = value;
            }
        }

        return ret;
    }

    obj.exists = function(url, __callback) {
        var http = new XMLHttpRequest();
        http.open('HEAD', url, false);
        http.send();
        if (http.status) {
            __callback(http.status);
        }
    }

    obj.getFiles = function(element) {
        if (! element) {
            console.error('No element defined in the arguments of your method');
        }

        // Get attachments
        var files = element.querySelectorAll('.jfile');

        if (files.length > 0) {
            var data = [];
            for (var i = 0; i < files.length; i++) {
                var file = {};

                var src = files[i].getAttribute('src');

                if (files[i].classList.contains('jremove')) {
                    file.remove = 1;
                } else {
                    if (src.substr(0,4) == 'data') {
                        file.content = src.substr(src.indexOf(',') + 1);
                        file.extension = files[i].getAttribute('data-extension');
                    } else {
                        file.file = src;
                        file.extension = files[i].getAttribute('data-extension');
                        if (! file.extension) {
                            file.extension =  src.substr(src.lastIndexOf('.') + 1);
                        }
                        if (jSuites.files[file.file]) {
                            file.content = jSuites.files[file.file];
                        }
                    }

                    // Optional file information
                    if (files[i].getAttribute('data-name')) {
                        file.name = files[i].getAttribute('data-name');
                    }

                    if (files[i].getAttribute('data-file')) {
                        file.file = files[i].getAttribute('data-file');
                    }

                    if (files[i].getAttribute('data-size')) {
                        file.size = files[i].getAttribute('data-size');
                    }

                    if (files[i].getAttribute('data-date')) {
                        file.date = files[i].getAttribute('data-date');
                    }

                    if (files[i].getAttribute('data-cover')) {
                        file.cover = files[i].getAttribute('data-cover');
                    }
                }

                // TODO SMALL thumbs?

                data[i] = file;
            }

            return data;
        }
    }

    obj.ajax = function(options) {
        if (! options.data) {
            options.data = {};
        }

        if (options.type) {
            options.method = options.type;
        }

        if (options.data) {
            var data = [];
            var keys = Object.keys(options.data);

            if (keys.length) {
                for (var i = 0; i < keys.length; i++) {
                    if (typeof(options.data[keys[i]]) == 'object') {
                        var o = options.data[keys[i]];
                        for (var j = 0; j < o.length; j++) {
                            if (typeof(o[j]) == 'string') {
                                data.push(keys[i] + '[' + j + ']=' + encodeURIComponent(o[j]));
                            } else {
                                var prop = Object.keys(o[j]);
                                for (var z = 0; z < prop.length; z++) {
                                    data.push(keys[i] + '[' + j + '][' + prop[z] + ']=' + encodeURIComponent(o[j][prop[z]]));
                                }
                            }
                        }
                    } else {
                        data.push(keys[i] + '=' + encodeURIComponent(options.data[keys[i]]));
                    }
                }
            }

            if (options.method == 'GET' && data.length > 0) {
                if (options.url.indexOf('?') < 0) {
                    options.url += '?';
                }
                options.url += data.join('&');
            }
        }

        var httpRequest = new XMLHttpRequest();
        httpRequest.open(options.method, options.url, true);
        httpRequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        if (options.method == 'POST') {
            httpRequest.setRequestHeader('Accept', 'application/json');
            httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        } else {
            if (options.dataType == 'json') {
                httpRequest.setRequestHeader('Content-Type', 'text/json');
            }
        }

        // No cache
        if (options.cache != true) {
            httpRequest.setRequestHeader('pragma', 'no-cache');
            httpRequest.setRequestHeader('cache-control', 'no-cache');
        }

        // Authentication
        if (options.withCredentials == true) {
            httpRequest.withCredentials = true
        }

        // Before send
        if (typeof(options.beforeSend) == 'function') {
            options.beforeSend(httpRequest);
        }

        httpRequest.onload = function() {
            if (httpRequest.status === 200) {
                if (options.dataType == 'json') {
                    try {
                        var result = JSON.parse(httpRequest.responseText);

                        if (options.success && typeof(options.success) == 'function') {
                            options.success(result);
                        }
                    } catch(err) {
                        if (options.error && typeof(options.error) == 'function') {
                            options.error(result);
                        }
                    }
                } else {
                    var result = httpRequest.responseText;

                    if (options.success && typeof(options.success) == 'function') {
                        options.success(result);
                    }
                }
            } else {
                if (options.error && typeof(options.error) == 'function') {
                    options.error(httpRequest.responseText);
                }
            }

            // Global complete method
            if (obj.ajax.requests && obj.ajax.requests.length) {
                // Get index of this request in the container
                var index = obj.ajax.requests.indexOf(httpRequest)
                // Remove from the ajax requests container
                obj.ajax.requests.splice(index, 1);
                // Last one?
                if (! obj.ajax.requests.length) {
                    if (options.complete && typeof(options.complete) == 'function') {
                        options.complete(result);
                    }
                }
            }
        }

        if (data) {
            httpRequest.send(data.join('&'));
        } else {
            httpRequest.send();
        }

        obj.ajax.requests.push(httpRequest);

        return httpRequest;
    }

    obj.ajax.requests = [];

    obj.slideLeft = function(element, direction, done) {
        if (direction == true) {
            element.classList.add('slide-left-in');
            setTimeout(function() {
                element.classList.remove('slide-left-in');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        } else {
            element.classList.add('slide-left-out');
            setTimeout(function() {
                element.classList.remove('slide-left-out');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        }
    }

    obj.slideRight = function(element, direction, done) {
        if (direction == true) {
            element.classList.add('slide-right-in');
            setTimeout(function() {
                element.classList.remove('slide-right-in');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        } else {
            element.classList.add('slide-right-out');
            setTimeout(function() {
                element.classList.remove('slide-right-out');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        }
    }

    obj.slideTop = function(element, direction, done) {
        if (direction == true) {
            element.classList.add('slide-top-in');
            setTimeout(function() {
                element.classList.remove('slide-top-in');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        } else {
            element.classList.add('slide-top-out');
            setTimeout(function() {
                element.classList.remove('slide-top-out');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        }
    }

    obj.slideBottom = function(element, direction, done) {
        if (direction == true) {
            element.classList.add('slide-bottom-in');
            setTimeout(function() {
                element.classList.remove('slide-bottom-in');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 400);
        } else {
            element.classList.add('slide-bottom-out');
            setTimeout(function() {
                element.classList.remove('slide-bottom-out');
                if (typeof(done) == 'function') {
                    done();
                }
            }, 100);
        }
    }

    obj.fadeIn = function(element, done) {
        element.classList.add('fade-in');
        setTimeout(function() {
            element.classList.remove('fade-in');
            if (typeof(done) == 'function') {
                done();
            }
        }, 2000);
    }

    obj.fadeOut = function(element, done) {
        element.classList.add('fade-out');
        setTimeout(function() {
            element.classList.remove('fade-out');
            if (typeof(done) == 'function') {
                done();
            }
        }, 1000);
    }

    obj.keyDownControls = function(e) {
        if (e.which == 27) {
            var nodes = document.querySelectorAll('.jslider');
            if (nodes.length > 0) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].slider.close();
                }
            }

            if (document.querySelector('.jdialog')) {
                jSuites.dialog.close();
            }
        } else if (e.which == 13) {
            if (document.querySelector('.jdialog')) {
                if (typeof(jSuites.dialog.options.onconfirm) == 'function') {
                    jSuites.dialog.options.onconfirm();
                }
                jSuites.dialog.close();
            }
        }

        // Verify mask
        if (jSuites.mask) {
            jSuites.mask.apply(e);
        }
    }

    var actionUpControl = function(e) {
        var element = null;
        if (element = jSuites.getLinkElement(e.target)) {
            var link = element.getAttribute('data-href');
            if (link == '#back') {
                window.history.back();
            } else if (link == '#panel') {
                jSuites.panel();
            } else {
                jSuites.pages(link);
            }
        }
    }

    var controlSwipeLeft = function(e) {
        var element = jSuites.getElement(e.target, 'option');

        if (element && element.querySelector('.option-actions')) {
            element.scrollTo({
                left: 100,
                behavior: 'smooth'
            });
        } else {
            var element = jSuites.getElement(e.target, 'jcalendar');
            if (element && jSuites.calendar.current) {
                jSuites.calendar.current.prev();
            } else {
                if (jSuites.panel) {
                    var element = jSuites.panel.get();
                    if (element) {
                        if (element.style.display != 'none') {
                            jSuites.panel.close();
                        }
                    }
                }
            }
        }
    }

    var controlSwipeRight = function(e) {
        var element = jSuites.getElement(e.target, 'option');
        if (element && element.querySelector('.option-actions')) {
            element.scrollTo({
                left: 0,
                behavior: 'smooth'
            });
        } else {
            var element = jSuites.getElement(e.target, 'jcalendar');
            if (element && jSuites.calendar.current) {
                jSuites.calendar.current.next();
            } else {
                if (jSuites.panel) {
                    var element = jSuites.panel.get();
                    if (element) {
                        if (element.style.display == 'none') {
                            jSuites.panel();
                        }
                    }
                }
            }
        }
    }

    var actionOverControl = function(e) {
        // Tooltip
        if (jSuites.tooltip) {
            jSuites.tooltip(e);
        }
    }

    var actionOutControl = function(e) {
        // Tooltip
        if (jSuites.tooltip) {
            jSuites.tooltip.hide();
        }
    }

    // Create page container
    document.addEventListener('swipeleft', controlSwipeLeft);
    document.addEventListener('swiperight', controlSwipeRight);
    document.addEventListener('keydown', obj.keyDownControls);

    if ('ontouchend' in document.documentElement === true) {
        document.addEventListener('touchend', actionUpControl);
    } else {
        document.addEventListener('mouseup', actionUpControl);
    }

    // Onmouseover
    document.addEventListener('mouseover', actionOverControl);
    document.addEventListener('mouseout', actionOutControl);
    document.addEventListener('DOMContentLoaded', function() {
        obj.init();
    });

    // Pop state control
    window.onpopstate = function(e) {
        if (e.state && e.state.route) {
            if (jSuites.pages.get(e.state.route)) {
                jSuites.pages(e.state.route, { ignoreHistory:true });
            }
        }
    }

    return obj;
}();

jSuites.files = [];

jSuites.calendar = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Global container
    if (! jSuites.calendar.current) {
        jSuites.calendar.current = null;
    }

    // Default configuration
    var defaults = {
        // Data
        data: null,
        // Inline or not
        type: null,
        // Restrictions
        validRange: null,
        // Starting weekday - 0 for sunday, 6 for saturday
        startingDay: null, 
        // Date format
        format: 'DD/MM/YYYY',
        // Allow keyboard date entry
        readonly: true,
        // Today is default
        today: false,
        // Show timepicker
        time: false,
        // Show the reset button
        resetButton: true,
        // Placeholder
        placeholder: '',
        // Translations can be done here
        months: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        weekdays: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
        weekdays_short: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
        // Value
        value: null,
        // Events
        onclose: null,
        onchange: null,
        // Fullscreen (this is automatic set for screensize < 800)
        fullscreen: false,
        // Internal mode controller
        mode: null,
        position: null,
        // Create the calendar closed as default
        opened: false,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Value
    if (! obj.options.value) {
        if (el.tagName == 'INPUT' && el.value) {
            obj.options.value = el.value;
        }
    }

    // Make sure use upper case in the format
    obj.options.format = obj.options.format.toUpperCase();

    if (obj.options.value) {
        var date = obj.options.value.split(' ');
        var time = date[1];
        var date = date[0].split('-');
        var y = parseInt(date[0]);
        var m = parseInt(date[1]);
        var d = parseInt(date[2]);

        if (time) {
            var time = time.split(':');
            var h = parseInt(time[0]);
            var i = parseInt(time[1]);
        } else {
            var h = 0;
            var i = 0;
        }
    } else {
        var date = new Date();
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        var d = date.getDate();
        var h = date.getHours();
        var i = date.getMinutes();
    }

    // Current value
    obj.date = [ y, m, d, h, i, 0 ];

    // Two digits
    var two = function(value) {
        value = '' + value;
        if (value.length == 1) {
            value = '0' + value;
        }
        return value;
    }

    // Calendar elements
    var calendarReset = document.createElement('div');
    calendarReset.className = 'jcalendar-reset';
    calendarReset.innerHTML = 'Reset';

    var calendarConfirm = document.createElement('div');
    calendarConfirm.className = 'jcalendar-confirm';
    calendarConfirm.innerHTML = 'Done';

    var calendarControls = document.createElement('div');
    calendarControls.className = 'jcalendar-controls'
    if (obj.options.resetButton) {
        calendarControls.appendChild(calendarReset);
    }
    calendarControls.appendChild(calendarConfirm);

    var calendarContainer = document.createElement('div');
    calendarContainer.className = 'jcalendar-container';

    var calendarContent = document.createElement('div');
    calendarContent.className = 'jcalendar-content';
    calendarContent.appendChild(calendarControls);
    calendarContainer.appendChild(calendarContent);

    // Table container
    var calendarTableContainer = document.createElement('div');
    calendarTableContainer.className = 'jcalendar-table';
    calendarContent.appendChild(calendarTableContainer);

    // Main element
    if (el.tagName == 'INPUT') {
        var calendar = document.createElement('div');
    } else {
        var calendar = el;
    }
    calendar.className = 'jcalendar';
    calendar.appendChild(calendarContainer);

    // Previous button
    var calendarHeaderPrev = document.createElement('td');
    calendarHeaderPrev.setAttribute('colspan', '2');
    calendarHeaderPrev.className = 'jcalendar-prev';

    // Header with year and month
    var calendarLabelYear = document.createElement('span');
    calendarLabelYear.className = 'jcalendar-year';

    var calendarLabelMonth = document.createElement('span');
    calendarLabelMonth.className = 'jcalendar-month';

    var calendarHeaderTitle = document.createElement('td');
    calendarHeaderTitle.className = 'jcalendar-header';
    calendarHeaderTitle.setAttribute('colspan', '3');
    calendarHeaderTitle.appendChild(calendarLabelMonth);
    calendarHeaderTitle.appendChild(calendarLabelYear);

    var calendarHeaderNext = document.createElement('td');
    calendarHeaderNext.setAttribute('colspan', '2');
    calendarHeaderNext.className = 'jcalendar-next';

    var calendarHeaderRow = document.createElement('tr');
    calendarHeaderRow.appendChild(calendarHeaderPrev);
    calendarHeaderRow.appendChild(calendarHeaderTitle);
    calendarHeaderRow.appendChild(calendarHeaderNext);

    var calendarHeader = document.createElement('thead');
    calendarHeader.appendChild(calendarHeaderRow);

    var calendarBody = document.createElement('tbody');
    var calendarFooter = document.createElement('tfoot');

    // Calendar table
    var calendarTable = document.createElement('table');
    calendarTable.setAttribute('cellpadding', '0');
    calendarTable.setAttribute('cellspacing', '0');
    calendarTable.appendChild(calendarHeader);
    calendarTable.appendChild(calendarBody);
    calendarTable.appendChild(calendarFooter);
    calendarTableContainer.appendChild(calendarTable);

    var calendarSelectHour = document.createElement('select');
    calendarSelectHour.className = 'jcalendar-select';
    calendarSelectHour.onchange = function() {
        obj.date[3] = this.value; 
    }

    for (var i = 0; i < 24; i++) {
        var element = document.createElement('option');
        element.value = i;
        element.innerHTML = two(i);
        calendarSelectHour.appendChild(element);
    }

    var calendarSelectMin = document.createElement('select');
    calendarSelectMin.className = 'jcalendar-select';
    calendarSelectMin.onchange = function() {
        obj.date[4] = this.value; 
    }

    for (var i = 0; i < 60; i++) {
        var element = document.createElement('option');
        element.value = i;
        element.innerHTML = two(i);
        calendarSelectMin.appendChild(element);
    }

    // Footer controls
    var calendarControlsFooter = document.createElement('div');
    calendarControlsFooter.className = 'jcalendar-controls';

    var calendarControlsTime = document.createElement('div');
    calendarControlsTime.className = 'jcalendar-time';
    calendarControlsTime.style.maxWidth = '140px';
    calendarControlsTime.appendChild(calendarSelectHour);
    calendarControlsTime.appendChild(calendarSelectMin);

    var calendarControlsUpdateButton = document.createElement('input');
    calendarControlsUpdateButton.setAttribute('type', 'button');
    calendarControlsUpdateButton.className = 'jcalendar-update';
    calendarControlsUpdateButton.value = 'Update';

    var calendarControlsUpdate = document.createElement('div');
    calendarControlsUpdate.style.flexGrow = '10';
    calendarControlsUpdate.appendChild(calendarControlsUpdateButton);
    calendarControlsFooter.appendChild(calendarControlsTime);
    calendarControlsFooter.appendChild(calendarControlsUpdate);
    calendarContent.appendChild(calendarControlsFooter);

    var calendarBackdrop = document.createElement('div');
    calendarBackdrop.className = 'jcalendar-backdrop';
    calendar.appendChild(calendarBackdrop);

    // Update actions button
    var updateActions = function() {
        var currentDay = calendar.querySelector('.jcalendar-selected');

        if (currentDay && currentDay.classList.contains('jcalendar-disabled')) {
            calendarControlsUpdateButton.setAttribute('disabled', 'disabled');
            calendarSelectHour.setAttribute('disabled', 'disabled');
            calendarSelectMin.setAttribute('disabled', 'disabled');
        } else {
            calendarControlsUpdateButton.removeAttribute('disabled');
            calendarSelectHour.removeAttribute('disabled');
            calendarSelectMin.removeAttribute('disabled');
        }
    }

    // Methods
    obj.open = function (value) {
        if (! calendar.classList.contains('jcalendar-focus')) {
            if (jSuites.calendar.current) {
                jSuites.calendar.current.close();
            }
            // Current
            jSuites.calendar.current = obj;
            // Show calendar
            calendar.classList.add('jcalendar-focus');
            // Get days
            obj.getDays();
            // Hour
            if (obj.options.time) {
                calendarSelectHour.value = obj.date[3];
                calendarSelectMin.value = obj.date[4];
            }

            // Get the position of the corner helper
            if (jSuites.getWindowWidth() < 800 || obj.options.fullscreen) {
                // Full
                calendar.classList.add('jcalendar-fullsize');
                // Animation
                jSuites.slideBottom(calendarContent, 1);
            } else {
                const rect = el.getBoundingClientRect();
                const rectContent = calendarContent.getBoundingClientRect();

                if (obj.options.position) {
                    calendarContainer.style.position = 'fixed';
                    if (window.innerHeight < rect.bottom + rectContent.height) {
                        calendarContainer.style.top = (rect.top - (rectContent.height + 2)) + 'px';
                    } else {
                        calendarContainer.style.top = (rect.top + rect.height + 2) + 'px';
                    }
                    calendarContainer.style.left = rect.left + 'px';
                } else {
                    if (window.innerHeight < rect.bottom + rectContent.height) {
                        calendarContainer.style.bottom = (1 * rect.height + rectContent.height + 2) + 'px';
                    } else {
                        calendarContainer.style.top = 2 + 'px'; 
                    }
                }
            }
        }
    }

    obj.close = function (ignoreEvents, update) {
        if (jSuites.calendar.current) {
            // Current
            jSuites.calendar.current = null;

            if (update !== false) {
                var element = calendar.querySelector('.jcalendar-selected');

                if (typeof(update) == 'string') {
                    var value = update;
                } else if (element && element.classList.contains('jcalendar-disabled')) {
                    var value = obj.options.value
                } else {
                    var value = obj.getValue();
                }

                obj.setValue(value);
            }

            // Events
            if (! ignoreEvents && typeof(obj.options.onclose) == 'function') {
                obj.options.onclose(el);
            }

            // Hide
            calendar.classList.remove('jcalendar-focus');
        }

        return obj.options.value;
    }

    obj.prev = function() {
        // Check if the visualization is the days picker or years picker
        if (obj.options.mode == 'years') {
            obj.date[0] = obj.date[0] - 12;

            // Update picker table of days
            obj.getYears();
        } else {
            // Go to the previous month
            if (obj.date[1] < 2) {
                obj.date[0] = obj.date[0] - 1;
                obj.date[1] = 12;
            } else {
                obj.date[1] = obj.date[1] - 1;
            }

            // Update picker table of days
            obj.getDays();
        }
    }

    obj.next = function() {
        // Check if the visualization is the days picker or years picker
        if (obj.options.mode == 'years') {
            obj.date[0] = parseInt(obj.date[0]) + 12;

            // Update picker table of days
            obj.getYears();
        } else {
            // Go to the previous month
            if (obj.date[1] > 11) {
                obj.date[0] = parseInt(obj.date[0]) + 1;
                obj.date[1] = 1;
            } else {
                obj.date[1] = parseInt(obj.date[1]) + 1;
            }

            // Update picker table of days
            obj.getDays();
        }
    }

    obj.setValue = function(val) {
        if (! val) {
            val = '' + val;
        }
        // Values
        var newValue = val;
        var oldValue = obj.options.value;
        // Set label
        var value = obj.setLabel(newValue, obj.options.format);
        var date = newValue.split(' ');
        if (! date[1]) {
            date[1] = '00:00:00';
        }
        var time = date[1].split(':')
        var date = date[0].split('-');
        var y = parseInt(date[0]);
        var m = parseInt(date[1]);
        var d = parseInt(date[2]);
        var h = parseInt(time[0]);
        var i = parseInt(time[1]);
        obj.date = [ y, m, d, h, i, 0 ];
        var val = obj.setLabel(newValue, obj.options.format);

        if (oldValue != newValue) {
            // Input value
            if (el.tagName == 'INPUT') {
                el.value = val;
            }
            // New value
            obj.options.value = newValue;
            // On change
            if (typeof(obj.options.onchange) ==  'function') {
                obj.options.onchange(el, newValue, oldValue);
            }
        }

        obj.getDays();
    }

    obj.getValue = function() {
        if (obj.date) {
            if (obj.options.time) {
                return two(obj.date[0]) + '-' + two(obj.date[1]) + '-' + two(obj.date[2]) + ' ' + two(obj.date[3]) + ':' + two(obj.date[4]) + ':' + two(0);
            } else {
                return two(obj.date[0]) + '-' + two(obj.date[1]) + '-' + two(obj.date[2]) + ' ' + two(0) + ':' + two(0) + ':' + two(0);
            }
        } else {
            return "";
        }
    }

    /**
     *  Calendar
     */
    obj.update = function(element) {
        if (element.classList.contains('jcalendar-disabled')) {
            // Do nothing
        } else {
            obj.date[2] = element.innerText;

            if (! obj.options.time) {
                obj.close();
            } else {
                obj.date[3] = calendarSelectHour.value;
                obj.date[4] = calendarSelectMin.value;
            }

            var elements = calendar.querySelector('.jcalendar-selected');
            if (elements) {
                elements.classList.remove('jcalendar-selected');
            }
            element.classList.add('jcalendar-selected');
        }

        // Update
        updateActions();
    }

    /**
     * Set to blank
     */
    obj.reset = function() {
        // Close calendar
        obj.close(false, '');
    }

    /**
     * Get calendar days
     */
    obj.getDays = function() {
        // Mode
        obj.options.mode = 'days';

        // Setting current values in case of NULLs
        var date = new Date();

        // Current selection
        var year = obj.date && obj.date[0] ? obj.date[0] : parseInt(date.getFullYear());
        var month = obj.date && obj.date[1] ? obj.date[1] : parseInt(date.getMonth()) + 1;
        var day = obj.date && obj.date[2] ? obj.date[2] : parseInt(date.getDay());
        var hour = obj.date && obj.date[3] ? obj.date[3] : parseInt(date.getHours());
        var min = obj.date && obj.date[4] ? obj.date[4] : parseInt(date.getMinutes());

        // Selection container
        obj.date = [year, month, day, hour, min, 0 ];

        // Update title
        calendarLabelYear.innerHTML = year;
        calendarLabelMonth.innerHTML = obj.options.months[month - 1];

        // Current month and Year
        var isCurrentMonthAndYear = (date.getMonth() == month - 1) && (date.getFullYear() == year) ? true : false;
        var currentDay = date.getDate();

        // Number of days in the month
        var date = new Date(year, month, 0, 0, 0);
        var numberOfDays = date.getDate();

        // First day
        var date = new Date(year, month-1, 0, 0, 0);
        var firstDay = date.getDay() + 1;

        // Index value
        var index = obj.options.startingDay || 0;

        // First of day relative to the starting calendar weekday
        firstDay = firstDay - index;

        // Reset table
        calendarBody.innerHTML = '';

        // Weekdays Row
        var row = document.createElement('tr');
        row.setAttribute('align', 'center');
        calendarBody.appendChild(row);

        // Create weekdays row
        for (var i = 0; i < 7; i++) {
            var cell = document.createElement('td');
            cell.classList.add('jcalendar-weekday')
            cell.innerHTML = obj.options.weekdays_short[index];
            row.appendChild(cell);
            // Next week day
            index++;
            // Restart index
            if (index > 6) {
                index = 0;
            }
        }

        // Index of days
        var index = 0;
        var d = 0;
 
        // Calendar table
        for (var j = 0; j < 5; j++) {
            // Reset cells container
            var row = document.createElement('tr');
            row.setAttribute('align', 'center');
            // Data control
            var emptyRow = true;
            // Create cells
            for (var i = 0; i < 7; i++) {
                // Create cell
                var cell = document.createElement('td');
                cell.classList.add('jcalendar-set-day');

                if (index >= firstDay && index < (firstDay + numberOfDays)) {
                    // Day cell
                    d++;
                    cell.innerHTML = d;

                    // Selected
                    if (d == day) {
                        cell.classList.add('jcalendar-selected');
                    }

                    // Current selection day is today
                    if (isCurrentMonthAndYear && currentDay == d) {
                        cell.style.fontWeight = 'bold';
                    }

                    // Current selection day
                    var current = jSuites.calendar.now(new Date(year, month-1, d), true);

                    // Available ranges
                    if (obj.options.validRange) {
                        if (! obj.options.validRange[0] || current >= obj.options.validRange[0]) {
                            var test1 = true;
                        } else {
                            var test1 = false;
                        }

                        if (! obj.options.validRange[1] || current <= obj.options.validRange[1]) {
                            var test2 = true;
                        } else {
                            var test2 = false;
                        }

                        if (! (test1 && test2)) {
                            cell.classList.add('jcalendar-disabled');
                        }
                    }

                    // Control
                    emptyRow = false;
                }
                // Day cell
                row.appendChild(cell);
                // Index
                index++;
            }

            // Add cell to the calendar body
            if (emptyRow == false) {
                calendarBody.appendChild(row);
            }
        }

        // Show time controls
        if (obj.options.time) {
            calendarControlsTime.style.display = '';
        } else {
            calendarControlsTime.style.display = 'none';
        }

        // Update
        updateActions();
    }

    obj.getMonths = function() {
        // Mode
        obj.options.mode = 'months';

        // Loading month labels
        var months = obj.options.months;

        // Update title
        calendarLabelYear.innerHTML = obj.date[0];
        calendarLabelMonth.innerHTML = '';

        // Create months table
        var html = '<td colspan="7"><table width="100%"><tr align="center">';

        for (i = 0; i < 12; i++) {
            if ((i > 0) && (!(i % 4))) {
                html += '</tr><tr align="center">';
            }

            var month = parseInt(i) + 1;
            html += '<td class="jcalendar-set-month" data-value="' + month + '">' + months[i] +'</td>';
        }

        html += '</tr></table></td>';

        calendarBody.innerHTML = html;
    }

    obj.getYears = function() { 
        // Mode
        obj.options.mode = 'years';

        // Array of years
        var y = [];
        for (i = 0; i < 25; i++) {
            y[i] = parseInt(obj.date[0]) + (i - 12);
        }

        // Assembling the year tables
        var html = '<td colspan="7"><table width="100%"><tr align="center">';

        for (i = 0; i < 25; i++) {
            if ((i > 0) && (!(i % 5))) {
                html += '</tr><tr align="center">';
            }
            html += '<td class="jcalendar-set-year">'+ y[i] +'</td>';
        }

        html += '</tr></table></td>';

        calendarBody.innerHTML = html;
    }

    obj.setLabel = function(value, format) {
        return jSuites.calendar.getDateString(value, format);
    }

    obj.fromFormatted = function (value, format) {
        return jSuites.calendar.extractDateFromString(value, format);
    }

    var mouseUpControls = function(e) {
        var action = e.target.className;

        // Object id
        if (action == 'jcalendar-prev') {
            obj.prev();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-next') {
            obj.next();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-month') {
            obj.getMonths();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-year') {
            obj.getYears();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-set-year') {
            obj.date[0] = e.target.innerText;
            obj.getDays();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-set-month') {
            obj.date[1] = parseInt(e.target.getAttribute('data-value'));
            obj.getDays();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-confirm' || action == 'jcalendar-update') {
            obj.close();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-close') {
            obj.close();
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-backdrop') {
            obj.close(false, false);
            e.stopPropagation();
            e.preventDefault();
        } else if (action == 'jcalendar-reset') {
            obj.reset();
            e.stopPropagation();
            e.preventDefault();
        } else if (e.target.classList.contains('jcalendar-set-day')) {
            if (e.target.innerText) {
                obj.update(e.target);
                e.stopPropagation();
                e.preventDefault();
            }
        }
    }

    var keyUpControls = function(e) {
        if (e.target.value && e.target.value.length > 3) {
            var test = jSuites.calendar.extractDateFromString(e.target.value, obj.options.format);
            if (test) {
                if (e.target.getAttribute('data-completed') == 'true') {
                    obj.setValue(test);
                }
            }
        }
    }

    // Handle events
    el.addEventListener("keyup", keyUpControls);

    // Add global events
    calendar.addEventListener("swipeleft", function(e) {
        jSuites.slideLeft(calendarTable, 0, function() {
            obj.next();
            jSuites.slideRight(calendarTable, 1);
        });
        e.preventDefault();
        e.stopPropagation();
    });

    calendar.addEventListener("swiperight", function(e) {
        jSuites.slideRight(calendarTable, 0, function() {
            obj.prev();
            jSuites.slideLeft(calendarTable, 1);
        });
        e.preventDefault();
        e.stopPropagation();
    });

    if ('ontouchend' in document.documentElement === true) {
        calendar.addEventListener("touchend", mouseUpControls);

        el.addEventListener("touchend", function(e) {
            obj.open();
        });
    } else {
        calendar.addEventListener("mouseup", mouseUpControls);

        el.addEventListener("mouseup", function(e) {
            obj.open();
        });
    }

    // Append element to the DOM
    if (el.tagName == 'INPUT') {
        el.parentNode.insertBefore(calendar, el.nextSibling);
        // Add properties
        el.setAttribute('autocomplete', 'off');
        el.setAttribute('data-mask', obj.options.format.toLowerCase());

        if (obj.options.readonly) {
            el.setAttribute('readonly', 'readonly');
        }
        if (obj.options.placeholder) {
            el.setAttribute('placeholder', obj.options.placeholder);
        }
        // Element
        el.classList.add('jcalendar-input');
        // Value
        el.value = obj.setLabel(obj.getValue(), obj.options.format);
    }

    // Keep object available from the node
    el.calendar = obj;

    if (obj.options.opened == true) {
        obj.open();
    }

    return obj;
});

jSuites.calendar.prettify = function(d, texts) {
    if (! texts) {
        var texts = {
            justNow: 'Just now',
            xMinutesAgo: '{0}m ago',
            xHoursAgo: '{0}h ago',
            xDaysAgo: '{0}d ago',
            xWeeksAgo: '{0}w ago',
            xMonthsAgo: '{0} mon ago',
            xYearsAgo: '{0}y ago',
        }
    }

    var d1 = new Date();
    var d2 = new Date(d);
    var total = parseInt((d1 - d2) / 1000 / 60);

    String.prototype.format = function(o) {
        return this.replace('{0}', o);
    }

    if (total == 0) {
        var text = texts.justNow;
    } else if (total < 90) {
        var text = texts.xMinutesAgo.format(total);
    } else if (total < 1440) { // One day
        var text = texts.xHoursAgo.format(Math.round(total/60));
    } else if (total < 20160) { // 14 days
        var text = texts.xDaysAgo.format(Math.round(total / 1440));
    } else if (total < 43200) { // 30 days
        var text = texts.xWeeksAgo.format(Math.round(total / 10080));
    } else if (total < 1036800) { // 24 months
        var text = texts.xMonthsAgo.format(Math.round(total / 43200));
    } else { // 24 months+
        var text = texts.xYearsAgo.format(Math.round(total / 525600));
    }

    return text;
}

jSuites.calendar.prettifyAll = function() {
    var elements = document.querySelectorAll('.prettydate');
    for (var i = 0; i < elements.length; i++) {
        if (elements[i].getAttribute('data-date')) {
            elements[i].innerHTML = jSuites.calendar.prettify(elements[i].getAttribute('data-date'));
        } else {
            elements[i].setAttribute('data-date', elements[i].innerHTML);
            elements[i].innerHTML = jSuites.calendar.prettify(elements[i].innerHTML);
        }
    }
}

jSuites.calendar.now = function(date, dateOnly) {
    if (! date) {
        var date = new Date();
    }
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    var d = date.getDate();
    var h = date.getHours();
    var i = date.getMinutes();
    var s = date.getSeconds();

    // Two digits
    var two = function(value) {
        value = '' + value;
        if (value.length == 1) {
            value = '0' + value;
        }
        return value;
    }

    if (dateOnly == true) {
        return two(y) + '-' + two(m) + '-' + two(d);
    } else {
        return two(y) + '-' + two(m) + '-' + two(d) + ' ' + two(h) + ':' + two(i) + ':' + two(s);
    }
}

// Helper to extract date from a string
jSuites.calendar.extractDateFromString = function(date, format) {
    var v1 = '' + date;
    var v2 = format.replace(/[0-9]/g,'');

    var test = 1;

    // Get year
    var y = v2.search("YYYY");
    y = v1.substr(y,4);
    if (parseInt(y) != y) {
        test = 0;
    }

    // Get month
    var m = v2.search("MM");
    m = v1.substr(m,2);
    if (parseInt(m) != m || d > 12) {
        test = 0;
    }

    // Get day
    var d = v2.search("DD");
    d = v1.substr(d,2);
    if (parseInt(d) != d  || d > 31) {
        test = 0;
    }

    // Get hour
    var h = v2.search("HH");
    if (h >= 0) {
        h = v1.substr(h,2);
        if (! parseInt(h) || h > 23) {
            h = '00';
        }
    } else {
        h = '00';
    }
    
    // Get minutes
    var i = v2.search("MI");
    if (i >= 0) {
        i = v1.substr(i,2);
        if (! parseInt(i) || i > 59) {
            i = '00';
        }
    } else {
        i = '00';
    }

    // Get seconds
    var s = v2.search("SS");
    if (s >= 0) {
        s = v1.substr(s,2);
        if (! parseInt(s) || s > 59) {
            s = '00';
        }
    } else {
        s = '00';
    }

    if (test == 1 && date.length == v2.length) {
        // Update source
        var data = y + '-' + m + '-' + d + ' ' + h + ':' +  i + ':' + s;

        return data;
    }

    return '';
}

// Helper to convert date into string
jSuites.calendar.getDateString = function(value, format) {
    // Default calendar
    if (! format) {
        var format = 'DD/MM/YYYY';
    }

    if (value) {
        var d = ''+value;
        d = d.split(' ');

        var h = '';
        var m = '';
        var s = '';

        if (d[1]) {
            h = d[1].split(':');
            m = h[1] ? h[1] : '00';
            s = h[2] ? h[2] : '00';
            h = h[0] ? h[0] : '00';
        } else {
            h = '00';
            m = '00';
            s = '00';
        }

        d = d[0].split('-');

        if (d[0] && d[1] && d[2] && d[0] > 0 && d[1] > 0 && d[1] < 13 && d[2] > 0 && d[2] < 32) {
            var calendar = new Date(d[0], d[1]-1, d[2]);
            var weekday = new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');
            var months = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');

            d[1] = (d[1].length < 2 ? '0' : '') + d[1];
            d[2] = (d[2].length < 2 ? '0' : '') + d[2];
            h = (h.length < 2 ? '0' : '') + h;
            m = (m.length < 2 ? '0' : '') + m;
            s = (s.length < 2 ? '0' : '') + s;

            value = format;
            value = value.replace('WD', weekday[calendar.getDay()]);
            value = value.replace('DD', d[2]);
            value = value.replace('MM', d[1]);
            value = value.replace('YYYY', d[0]);
            value = value.replace('YY', d[0].substring(2,4));
            value = value.replace('MON', months[parseInt(d[1])-1].toUpperCase());

            if (h) {
                value = value.replace('HH24', h);
            }

            if (h > 12) {
                value = value.replace('HH12', h - 12);
                value = value.replace('HH', h);
            } else {
                value = value.replace('HH12', h);
                value = value.replace('HH', h);
            }

            value = value.replace('MI', m);
            value = value.replace('MM', m);
            value = value.replace('SS', s);
        } else {
            value = '';
        }
    }

    return value;
}

jSuites.calendar.isOpen = function(e) {
    if (jSuites.calendar.current) {
        if (! e.target.className || e.target.className.indexOf('jcalendar') == -1) {
            jSuites.calendar.current.close(false, false);
        }
    }
}

if ('ontouchstart' in document.documentElement === true) {
    document.addEventListener("touchstart", jSuites.calendar.isOpen);
} else {
    document.addEventListener("mousedown", jSuites.calendar.isOpen);
}

jSuites.color = (function(el, options) {
    var obj = {};
    obj.options = {};
    obj.values = [];

    // Global container
    if (! jSuites.color.current) {
        jSuites.color.current = null;
    }

    /**
     * @typedef {Object} defaults
     * @property {(string|Array)} value - Initial value of the compontent
     * @property {string} placeholder - The default instruction text on the element
     * @property {requestCallback} onchange - Method to be execute after any changes on the element
     * @property {requestCallback} onclose - Method to be execute when the element is closed
     */
    var defaults = {
        placeholder: '',
        value: null,
        onclose: null,
        onchange: null,
        closeOnChange: true,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    var palette = {
          "red": {
            "50": "#ffebee",
            "100": "#ffcdd2",
            "200": "#ef9a9a",
            "300": "#e57373",
            "400": "#ef5350",
            "500": "#f44336",
            "600": "#e53935",
            "700": "#d32f2f",
            "800": "#c62828",
            "900": "#b71c1c",
          },
          "pink": {
            "50": "#fce4ec",
            "100": "#f8bbd0",
            "200": "#f48fb1",
            "300": "#f06292",
            "400": "#ec407a",
            "500": "#e91e63",
            "600": "#d81b60",
            "700": "#c2185b",
            "800": "#ad1457",
            "900": "#880e4f",
          },
          "purple": {
            "50": "#f3e5f5",
            "100": "#e1bee7",
            "200": "#ce93d8",
            "300": "#ba68c8",
            "400": "#ab47bc",
            "500": "#9c27b0",
            "600": "#8e24aa",
            "700": "#7b1fa2",
            "800": "#6a1b9a",
            "900": "#4a148c",
          },
          "indigo": {
            "50": "#e8eaf6",
            "100": "#c5cae9",
            "200": "#9fa8da",
            "300": "#7986cb",
            "400": "#5c6bc0",
            "500": "#3f51b5",
            "600": "#3949ab",
            "700": "#303f9f",
            "800": "#283593",
            "900": "#1a237e",
          },
          "blue": {
            "50": "#e3f2fd",
            "100": "#bbdefb",
            "200": "#90caf9",
            "300": "#64b5f6",
            "400": "#42a5f5",
            "500": "#2196f3",
            "600": "#1e88e5",
            "700": "#1976d2",
            "800": "#1565c0",
            "900": "#0d47a1",
          },
          "cyan": {
            "50": "#e0f7fa",
            "100": "#b2ebf2",
            "200": "#80deea",
            "300": "#4dd0e1",
            "400": "#26c6da",
            "500": "#00bcd4",
            "600": "#00acc1",
            "700": "#0097a7",
            "800": "#00838f",
            "900": "#006064",
          },
          "teal": {
            "50": "#e0f2f1",
            "100": "#b2dfdb",
            "200": "#80cbc4",
            "300": "#4db6ac",
            "400": "#26a69a",
            "500": "#009688",
            "600": "#00897b",
            "700": "#00796b",
            "800": "#00695c",
            "900": "#004d40",
          },
          "green": {
            "50": "#e8f5e9",
            "100": "#c8e6c9",
            "200": "#a5d6a7",
            "300": "#81c784",
            "400": "#66bb6a",
            "500": "#4caf50",
            "600": "#43a047",
            "700": "#388e3c",
            "800": "#2e7d32",
            "900": "#1b5e20",
          },
          "lightgreen": {
            "50": "#f1f8e9",
            "100": "#dcedc8",
            "200": "#c5e1a5",
            "300": "#aed581",
            "400": "#9ccc65",
            "500": "#8bc34a",
            "600": "#7cb342",
            "700": "#689f38",
            "800": "#558b2f",
            "900": "#33691e",
          },
          "lime": {
            "50": "#f9fbe7",
            "100": "#f0f4c3",
            "200": "#e6ee9c",
            "300": "#dce775",
            "400": "#d4e157",
            "500": "#cddc39",
            "600": "#c0ca33",
            "700": "#afb42b",
            "800": "#9e9d24",
            "900": "#827717",
          },
          "yellow": {
            "50": "#fffde7",
            "100": "#fff9c4",
            "200": "#fff59d",
            "300": "#fff176",
            "400": "#ffee58",
            "500": "#ffeb3b",
            "600": "#fdd835",
            "700": "#fbc02d",
            "800": "#f9a825",
            "900": "#f57f17",
          },
          "amber": {
            "50": "#fff8e1",
            "100": "#ffecb3",
            "200": "#ffe082",
            "300": "#ffd54f",
            "400": "#ffca28",
            "500": "#ffc107",
            "600": "#ffb300",
            "700": "#ffa000",
            "800": "#ff8f00",
            "900": "#ff6f00",
          },
          "orange": {
            "50": "#fff3e0",
            "100": "#ffe0b2",
            "200": "#ffcc80",
            "300": "#ffb74d",
            "400": "#ffa726",
            "500": "#ff9800",
            "600": "#fb8c00",
            "700": "#f57c00",
            "800": "#ef6c00",
            "900": "#e65100",
          },
          "deeporange": {
            "50": "#fbe9e7",
            "100": "#ffccbc",
            "200": "#ffab91",
            "300": "#ff8a65",
            "400": "#ff7043",
            "500": "#ff5722",
            "600": "#f4511e",
            "700": "#e64a19",
            "800": "#d84315",
            "900": "#bf360c",
          },
          "brown": {
            "50": "#efebe9",
            "100": "#d7ccc8",
            "200": "#bcaaa4",
            "300": "#a1887f",
            "400": "#8d6e63",
            "500": "#795548",
            "600": "#6d4c41",
            "700": "#5d4037",
            "800": "#4e342e",
            "900": "#3e2723"
          },
          "grey": {
            "50": "#fafafa",
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121"
          },
          "bluegrey": {
            "50": "#eceff1",
            "100": "#cfd8dc",
            "200": "#b0bec5",
            "300": "#90a4ae",
            "400": "#78909c",
            "500": "#607d8b",
            "600": "#546e7a",
            "700": "#455a64",
            "800": "#37474f",
            "900": "#263238"
          }
    };

    var x = 0;
    var y = 0;
    var colors = [];

    var col = Object.keys(palette);
    var shade = Object.keys(palette[col[0]]);

    for (var i = 0; i < col.length; i++) {
        for (var j = 0; j < shade.length; j++) {
            if (! colors[j]) {
                colors[j] = [];
            }
            colors[j][i] = palette[col[i]][shade[j]];
        }
    };

    // Value
    if (obj.options.value) {
        el.value = obj.options.value;
    }

    // Table container
    var container = document.createElement('div');
    container.className = 'jcolor';

    // Table container
    var backdrop = document.createElement('div');
    backdrop.className = 'jcolor-backdrop';
    container.appendChild(backdrop);

    // Content
    var content = document.createElement('div');
    content.className = 'jcolor-content';

    // Close button
    var closeButton  = document.createElement('div');
    closeButton.className = 'jcolor-close';
    closeButton.innerHTML = 'Done';
    closeButton.onclick = function() {
        obj.close();
    }
    content.appendChild(closeButton);

    // Table pallete
    var table = document.createElement('table');
    table.setAttribute('cellpadding', '7');
    table.setAttribute('cellspacing', '0');

    for (var i = 0; i < colors.length; i++) {
        var tr = document.createElement('tr');
        for (var j = 0; j < colors[i].length; j++) {
            var td = document.createElement('td');
            td.style.backgroundColor = colors[i][j];
            td.setAttribute('data-value', colors[i][j]);
            td.innerHTML = '';
            tr.appendChild(td);

            // Selected color
            if (obj.options.value == colors[i][j]) {
                td.classList.add('jcolor-selected');
            }

            // Possible values
            obj.values[colors[i][j]] = td;
        }
        table.appendChild(tr);
    }

    /**
     * Open color pallete
     */
    obj.open = function() {
        if (jSuites.color.current) {
            if (jSuites.color.current != obj) {
                jSuites.color.current.close();
            }
        }

        if (! jSuites.color.current) {
            // Persist element
            jSuites.color.current = obj;
            // Show colorpicker
            container.classList.add('jcolor-focus');

            const rectContent = content.getBoundingClientRect();

            if (jSuites.getWindowWidth() < 800) {
                content.style.top = '';
                content.classList.add('jcolor-fullscreen');
                jSuites.slideBottom(content, 1);
                backdrop.style.display = 'block';
            } else {
                if (content.classList.contains('jcolor-fullscreen')) {
                    content.classList.remove('jcolor-fullscreen');
                    backdrop.style.display = '';
                }

                const rect = el.getBoundingClientRect();

                if (window.innerHeight < rect.bottom + rectContent.height) {
                    content.style.top = -1 * (rectContent.height + rect.height + 2) + 'px';
                } else {
                    content.style.top = '2px';
                }
            }

            container.focus();
        }
    }

    /**
     * Close color pallete
     */
    obj.close = function(ignoreEvents) {
        if (jSuites.color.current) {
            jSuites.color.current = null;
            if (! ignoreEvents && typeof(obj.options.onclose) == 'function') {
                obj.options.onclose(el);
            }
            container.classList.remove('jcolor-focus');
        }

        // Make sure backdrop is hidden
        backdrop.style.display = '';

        return obj.options.value;
    }

    /**
     * Set value
     */
    obj.setValue = function(color) {
        if (color) {
            el.value = color;
            obj.options.value = color;
        }

        // Remove current selecded mark
        var selected = container.querySelector('.jcolor-selected');
        if (selected) {
            selected.classList.remove('jcolor-selected');
        }

        // Mark cell as selected
        obj.values[color].classList.add('jcolor-selected');

        // Onchange
        if (typeof(obj.options.onchange) == 'function') {
            obj.options.onchange(el, color);
        }

        if (obj.options.closeOnChange == true) {
            obj.close();
        }
    }

    /**
     * Get value
     */
    obj.getValue = function() {
        return obj.options.value;
    }

    /**
     * If element is focus open the picker
     */
    el.addEventListener("focus", function(e) {
        obj.open();
    });

    el.addEventListener("mousedown", function(e) {
        if (! jSuites.color.current) {
            setTimeout(function() {
        obj.open();
                e.preventDefault();
            }, 200);
        }
    });

    // Select color
    container.addEventListener("mouseup", function(e) {
        if (e.target.tagName == 'TD') {
            jSuites.color.current.setValue(e.target.getAttribute('data-value'));

            if (jSuites.color.current) {
                jSuites.color.current.close();
            }
        }
    });

    // Close controller
    document.addEventListener("mousedown", function(e) {
        if (jSuites.color.current) {
            var element = jSuites.getElement(e.target, 'jcolor');
            if (! element) {
                jSuites.color.current.close();
            }
        }
    });

    // Possible to focus the container
    container.setAttribute('tabindex', '900');

    // Placeholder
    if (obj.options.placeholder) {
        el.setAttribute('placeholder', obj.options.placeholder);
    }

    // Append to the table
    content.appendChild(table);
    container.appendChild(content);

    // Insert picker after the element
    if (el.tagName == 'INPUT') {
        el.parentNode.insertBefore(container, el.nextSibling);
    } else {
        el.appendChild(container);
    }

    // Keep object available from the node
    el.color = obj;

    return obj;
});


jSuites.contextmenu = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        items: null,
        onclick: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Class definition
    el.classList.add('jcontextmenu');
    // Focusable
    el.setAttribute('tabindex', '900');

    /**
     * Open contextmenu
     */
    obj.open = function(e, items) {
        if (items) {
            // Update content
            obj.options.items = items;
            // Create items
            obj.create(items);
        }
        // Coordinates
        if (e.target) {
            var x = e.clientX;
            var y = e.clientY;
        } else {
            var x = e.x;
            var y = e.y;
        }

        el.classList.add('jcontextmenu-focus');
        el.focus();

        const rect = el.getBoundingClientRect();

        if (window.innerHeight < y + rect.height) {
            el.style.top = (y - rect.height) + 'px';
        } else {
            el.style.top = y + 'px';
        }

        if (window.innerWidth < x + rect.width) {
            if (x - rect.width > 0) {
                el.style.left = (x - rect.width) + 'px';
            } else {
                el.style.left = '10px';
            }
        } else {
            el.style.left = x + 'px';
        }
    }

    /**
     * Close menu
     */
    obj.close = function() {
        if (el.classList.contains('jcontextmenu-focus')) {
            el.classList.remove('jcontextmenu-focus');
        }
    }

    /**
     * Create items based on the declared objectd
     * @param {object} items - List of object
     */
    obj.create = function(items) {
        // Update content
        el.innerHTML = '';

        // Append items
        for (var i = 0; i < items.length; i++) {
            if (items[i].type && items[i].type == 'line') {
                var itemContainer = document.createElement('hr');
            } else {
                var itemContainer = document.createElement('div');
                var itemText = document.createElement('a');
                itemText.innerHTML = items[i].title;

                if (items[i].disabled) {
                    itemContainer.className = 'jcontextmenu-disabled';
                } else if (items[i].onclick) {
                    itemContainer.method = items[i].onclick;
                    itemContainer.addEventListener("mouseup", function() {
                        // Execute method
                        this.method(this);
                    });
                }
                itemContainer.appendChild(itemText);

                if (items[i].shortcut) {
                    var itemShortCut = document.createElement('span');
                    itemShortCut.innerHTML = items[i].shortcut;
                    itemContainer.appendChild(itemShortCut);
                }
            }

            el.appendChild(itemContainer);
        }
    }

    if (typeof(obj.options.onclick) == 'function') {
        el.addEventListener('click', function(e) {
            obj.options.onclick(obj);
        });
    }

    el.addEventListener('blur', function(e) {
        setTimeout(function() {
            obj.close();
        }, 120);
    });

    window.addEventListener("mousewheel", function() {
        obj.close();
    });

    // Create items
    if (obj.options.items) {
        obj.create(obj.options.items);
    }

    el.contextmenu = obj;

    return obj;
});

jSuites.contextmenu.getElement = function(element) {
    var foundId = 0;

    function path (element) {
        if (element.parentNode && element.getAttribute('aria-contextmenu-id')) {
            foundId = element.getAttribute('aria-contextmenu-id')
        } else {
            if (element.parentNode) {
                path(element.parentNode);
            }
        }
    }

    path(element);

    return foundId;
}

document.addEventListener("contextmenu", function(e) {
    var id = jSuites.contextmenu.getElement(e.target);
    if (id) {
        var element = document.querySelector('#' + id);
        if (! element) {
            console.error('JSUITES: Contextmenu id not found');
        } else {
            element.contextmenu.open(e);
            e.preventDefault();
        }
    }
});

/**
 * Dialog v1.0.1
 * Author: paul.hodel@gmail.com
 * https://github.com/paulhodel/jtools
 */
 
jSuites.dialog = (function() {
    var obj = {};
    obj.options = {};

    var dialog = document.createElement('div');
    dialog.setAttribute('tabindex', '901');
    dialog.className = 'jdialog';
    dialog.id = 'dialog';

    var dialogHeader = document.createElement('div');
    dialogHeader.className = 'jdialog-header';

    var dialogTitle = document.createElement('div');
    dialogTitle.className = 'jdialog-title';
    dialogHeader.appendChild(dialogTitle);

    var dialogMessage = document.createElement('div');
    dialogMessage.className = 'jdialog-message';
    dialogHeader.appendChild(dialogMessage);

    var dialogFooter = document.createElement('div');
    dialogFooter.className = 'jdialog-footer';

    var dialogContainer = document.createElement('div');
    dialogContainer.className = 'jdialog-container';
    dialogContainer.appendChild(dialogHeader);
    dialogContainer.appendChild(dialogFooter);

    // Confirm
    var dialogConfirm = document.createElement('div');
    var dialogConfirmButton = document.createElement('input');
    dialogConfirmButton.value = obj.options.confirmLabel;
    dialogConfirmButton.type = 'button';
    dialogConfirmButton.onclick = function() {
        if (typeof(obj.options.onconfirm) == 'function') {
            obj.options.onconfirm();
        }
        obj.close();
    };
    dialogConfirm.appendChild(dialogConfirmButton);
    dialogFooter.appendChild(dialogConfirm);

    // Cancel
    var dialogCancel = document.createElement('div');
    var dialogCancelButton = document.createElement('input');
    dialogCancelButton.value = obj.options.cancelLabel;
    dialogCancelButton.type = 'button';
    dialogCancelButton.onclick = function() {
        if (typeof(obj.options.oncancel) == 'function') {
            obj.options.oncancel();
        }
        obj.close();
    }
    dialogCancel.appendChild(dialogCancelButton);
    dialogFooter.appendChild(dialogCancel);

    // Dialog
    dialog.appendChild(dialogContainer);

    obj.open = function(options) {
        obj.options = options;

        if (obj.options.title) {
            dialogTitle.innerHTML = obj.options.title;
        }

        if (obj.options.message) {
            dialogMessage.innerHTML = obj.options.message;
        }

        if (! obj.options.confirmLabel) {
            obj.options.confirmLabel = 'OK';
        }
        dialogConfirmButton.value = obj.options.confirmLabel;

        if (! obj.options.cancelLabel) {
            obj.options.cancelLabel = 'Cancel';
        }
        dialogCancelButton.value = obj.options.cancelLabel;

        if (obj.options.type == 'confirm') {
            dialogCancelButton.parentNode.style.display = '';
        } else {
            dialogCancelButton.parentNode.style.display = 'none';
        }

        // Append element to the app
        dialog.style.opacity = 100;

        // Append to the page
        if (jSuites.el) {
            jSuites.el.appendChild(dialog);
        } else {
            document.body.appendChild(dialog);
        }

        // Focus
        dialog.focus();

        // Show
        setTimeout(function() {
            dialogContainer.style.opacity = 100;
        }, 0);
    };

    obj.close = function() {
        dialog.style.opacity = 0;
        dialogContainer.style.opacity = 0;
        setTimeout(function() {
            dialog.remove();
        }, 100);
    };

    return obj;
})();

jSuites.confirm = (function(message, onconfirm) {
    if (jSuites.getWindowWidth() < 800) {
        jSuites.dialog.open({
            type: 'confirm',
            message: message,
            title: 'Confirmation',
            onconfirm: onconfirm,
        });
    } else {
        if (confirm(message)) {
            onconfirm();
        }
    }
});

jSuites.alert = function(message) {
    if (jSuites.getWindowWidth() < 800) {
        jSuites.dialog.open({
            title:'Alert',
            message:message,
        });
    } else {
        alert(message);
    }
}


jSuites.dropdown = (function(el, options) {
    var obj = {};
    obj.options = {};

    // If the element is a SELECT tag, create a configuration object
    if (el.tagName == 'SELECT') {
        var ret = jSuites.dropdown.extractFromDom(el, options);
        el = ret.el;
        options = ret.options;
    }

    // Default configuration
    var defaults = {
        url: null,
        data: [],
        multiple: false,
        autocomplete: false,
        type: null,
        width: null,
        opened: false,
        value: null,
        placeholder: '',
        position: false,
        onchange: null,
        onload: null,
        onopen: null,
        onclose: null,
        onblur: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Global container
    if (! jSuites.dropdown.current) {
        jSuites.dropdown.current = null;
    }

    // Containers
    obj.items = [];
    obj.groups = [];
    obj.selected = [];

    // Create dropdown
    el.classList.add('jdropdown');
 
    if (obj.options.type == 'searchbar') {
        el.classList.add('jdropdown-searchbar');
    } else if (obj.options.type == 'list') {
        el.classList.add('jdropdown-list');
    } else if (obj.options.type == 'picker') {
        el.classList.add('jdropdown-picker');
    } else {
        if (jSuites.getWindowWidth() < 800) {
            el.classList.add('jdropdown-picker');
            obj.options.type = 'picker';
        } else {
            if (obj.options.width) {
                el.style.width = obj.options.width;
                el.style.minWidth = obj.options.width;
            }
            el.classList.add('jdropdown-default');
            obj.options.type = 'default';
        }
    }

    // Header container
    var containerHeader = document.createElement('div');
    containerHeader.className = 'jdropdown-container-header';

    // Header
    var header = document.createElement('input');
    header.className = 'jdropdown-header';
    if (typeof(obj.options.onblur) == 'function') {
        header.onblur = function() {
            obj.options.onblur(el);
        }
    }

    // Container
    var container = document.createElement('div');
    container.className = 'jdropdown-container';

    // Dropdown content
    var content = document.createElement('div');
    content.className = 'jdropdown-content';

    // Close button
    var closeButton  = document.createElement('div');
    closeButton.className = 'jdropdown-close';
    closeButton.innerHTML = 'Done';

    // Create backdrop
    var backdrop  = document.createElement('div');
    backdrop.className = 'jdropdown-backdrop';

    // Autocomplete
    if (obj.options.autocomplete == true) {
        el.setAttribute('data-autocomplete', true);

        // Handler
        var keyTimer = null;
        header.addEventListener('keyup', function(e) {
            if (keyTimer) {
                clearTimeout(keyTimer);
            }
            keyTimer = setTimeout(function() {
                obj.find(header.value);
                keyTimer = null;
            }, 500);

            if (! el.classList.contains('jdropdown-focus')) {
                if (e.which > 65) {
                    obj.open();
                }
            }
        });
    } else {
        header.setAttribute('readonly', 'readonly');
    }

    // Place holder
    if (! obj.options.placeholder && el.getAttribute('placeholder')) {
        obj.options.placeholder = el.getAttribute('placeholder');
    }

    if (obj.options.placeholder) {
        header.setAttribute('placeholder', obj.options.placeholder);
    }

    // Append elements
    containerHeader.appendChild(header);
    if (obj.options.type == 'searchbar') {
        containerHeader.appendChild(closeButton);
    } else {
        container.appendChild(closeButton);
    }
    container.appendChild(content);
    el.appendChild(containerHeader);
    el.appendChild(container);
    el.appendChild(backdrop);

    /**
     * Init dropdown
     */
    obj.init = function() {
        if (obj.options.url) {
            jSuites.ajax({
                url: obj.options.url,
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data) {
                        // Set data
                        obj.setData(data);
                        // Set value
                        if (obj.options.value != null) {
                            obj.setValue(obj.options.value);
                        }
                        // Onload method
                        if (typeof(obj.options.onload) == 'function') {
                            obj.options.onload(el, obj, data);
                        }
                    }
                }
            });
        } else {
            // Set data
            obj.setData();
            // Set value
            if (obj.options.value != null) {
                obj.setValue(obj.options.value);
            }
            // Onload
            if (typeof(obj.options.onload) == 'function') {
                obj.options.onload(el, obj, data);
            }
        }

        // Open dropdown
        if (obj.options.opened == true) {
            obj.open();
        }
    }

    obj.getUrl = function() {
        return obj.options.url;
    }

    obj.setUrl = function(url) {
        obj.options.url = url;

        jSuites.ajax({
            url: obj.options.url,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                obj.setData(data);
            }
        });
    }

    /**
     * Create a new item
     */
    obj.createItem = function(data) {
        // Create item
        var item = {};
        item.element = document.createElement('div');
        item.element.className = 'jdropdown-item';
        item.value = data.id;
        item.text = data.name;
        item.textLowerCase = '' + data.name.toLowerCase();

        // Image
        if (data.image) {
            var image = document.createElement('img');
            image.className = 'jdropdown-image';
            image.src = data.image;
            if (! data.title) {
               image.classList.add('jdropdown-image-small');
            }
            item.element.appendChild(image);
        }

        // Set content
        var node = document.createElement('div');
        node.className = 'jdropdown-description';
        node.innerHTML = data.name;

        // Title
        if (data.title) {
            var title = document.createElement('div');
            title.className = 'jdropdown-title';
            title.innerHTML = data.title;
            node.appendChild(title);
        }

        // Add node to item
        item.element.appendChild(node);

        return item;
    }

    obj.setData = function(data) {
        // Update data
        if (data) {
            obj.options.data = data;
        }

        // Data
        var data = obj.options.data;

        // Remove content from the DOM
        container.removeChild(content);

        // Make sure the content container is blank
        content.innerHTML = '';

        // Reset
        obj.reset();

        // Reset items
        obj.items = [];

        // Helpers
        var items = [];
        var groups = [];

        // Create elements
        if (data.length) {
            // Prepare data
            for (var i = 0; i < data.length; i++) {
                // Compatibility
                if (typeof(data[i]) != 'object') {
                    // Correct format
                    obj.options.data[i] = data[i] = { id: data[i], name: data[i] };
                }

                // Process groups
                if (data[i].group) {
                    if (! groups[data[i].group]) {
                        groups[data[i].group] = [];
                    }
                    groups[data[i].group].push(i);
                } else {
                    items.push(i);
                }
            }

            // Groups
            var groupNames = Object.keys(groups);

            // Append groups in case exists
            if (groupNames.length > 0) {
                for (var i = 0; i < groupNames.length; i++) {
                    // Group container
                    var group = document.createElement('div');
                    group.className = 'jdropdown-group';
                    // Group name
                    var groupName = document.createElement('div');
                    groupName.className = 'jdropdown-group-name';
                    groupName.innerHTML = groupNames[i];
                    // Group arrow
                    var groupArrow = document.createElement('i');
                    groupArrow.className = 'jdropdown-group-arrow jdropdown-group-arrow-down';
                    groupName.appendChild(groupArrow);
                    // Group items
                    var groupContent = document.createElement('div');
                    groupContent.className = 'jdropdown-group-items';
                    for (var j = 0; j < groups[groupNames[i]].length; j++) {
                        var item = obj.createItem(data[groups[groupNames[i]][j]]);
                        groupContent.appendChild(item.element);
                        // Items
                        obj.items.push(item);
                    }
                    // Group itens
                    group.appendChild(groupName);
                    group.appendChild(groupArrow);
                    group.appendChild(groupContent);
                    content.appendChild(group);
                }
            }

            if (items.length) {
                for (var i = 0; i < items.length; i++) {
                    var item = obj.createItem(data[items[i]]);
                    obj.items.push(item);
                    content.appendChild(item.element);
                }
            }

            // Create the Indexes
            for (var i = 0; i < obj.items.length; i++) {
                obj.items[i].element.setAttribute('data-index', i);
            }
        }

        // Re-insert the content to the container
        container.appendChild(content);
    }

    obj.getText = function(asArray) {
        // Result
        var result = [];
        // Append options
        for (var i = 0; i < obj.selected.length; i++) {
            if (obj.items[obj.selected[i]]) {
                result.push(obj.items[obj.selected[i]].text);
            }
        }

        if (asArray) {
            return result;
        } else {
            return result.join('; ');
        }
    }

    obj.getValue = function(asArray) {
        // Result
        var result = [];
        // Append options
        for (var i = 0; i < obj.selected.length; i++) {
            if (obj.items[obj.selected[i]]) {
                result.push(obj.items[obj.selected[i]].value);
            }
        }

        if (asArray) {
            return result;
        } else {
            return result.join(';');
        }
    }

    obj.setValue = function(value) {
        // Remove values
        for (var i = 0; i < obj.selected.length; i++) {
            obj.items[obj.selected[i]].element.classList.remove('jdropdown-selected')
        } 

        // Reset selected
        obj.selected = [];

        // Set values
        if (value != null) {
            if (Array.isArray(value)) {
                for (var i = 0; i < obj.items.length; i++) {
                    for (var j = 0; j < value.length; j++) {
                        if (obj.items[i].value == value[j]) {
                            // Keep index of the selected item
                            obj.selected.push(i);
                            // Visual selection
                            obj.items[i].element.classList.add('jdropdown-selected');
                        }
                    }
                }
            } else {
                for (var i = 0; i < obj.items.length; i++) {
                    if (obj.items[i].value == value) {
                        // Keep index of the selected item
                        obj.selected.push(i);
                        // Visual selection
                        obj.items[i].element.classList.add('jdropdown-selected');
                    }
                }
            }
        }

        // Update labels
        obj.updateLabel();
    }

    obj.selectIndex = function(index) {
        // Only select those existing elements
        if (obj.items && obj.items[index]) {
            var index = index = parseInt(index);
            // Current selection
            var oldValue = obj.getValue();
            var oldLabel = obj.getText();

            // Remove cursor style
            if (obj.currentIndex != null) {
                obj.items[obj.currentIndex].element.classList.remove('jdropdown-cursor');
            }
            // Set cursor style
            obj.items[index].element.classList.add('jdropdown-cursor');

            // Update cursor position
            obj.currentIndex = index;

            // Focus behaviour
            if (! obj.options.multiple) {
                // Unselect option
                if (obj.items[index].element.classList.contains('jdropdown-selected')) {
                    // Reset selected
                    obj.resetSelected();
                } else {
                    // Reset selected
                    obj.resetSelected();
                    // Update selected item
                    obj.items[index].element.classList.add('jdropdown-selected');
                    // Add to the selected list
                    obj.selected.push(index);
                    // Close
                    obj.close();
                }
            } else {
                // Toggle option
                if (obj.items[index].element.classList.contains('jdropdown-selected')) {
                    obj.items[index].element.classList.remove('jdropdown-selected');
                    // Remove from selected list
                    var indexToRemove = obj.selected.indexOf(index);
                    // Remove select
                    obj.selected.splice(indexToRemove, 1);
                } else {
                    // Select element
                    obj.items[index].element.classList.add('jdropdown-selected');
                    // Add to the selected list
                    obj.selected.push(index);
                }

                // Update labels for multiple dropdown
                if (! obj.options.autocomplete) {
                    obj.updateLabel();
                }
            }

            // Current selection
            var newValue = obj.getValue();
            var newLabel = obj.getText();

            // Events
            if (typeof(obj.options.onchange) == 'function') {
                obj.options.onchange(el, index, oldValue, newValue, oldLabel, newLabel);
            }
        }
    }

    obj.selectItem = function(item) {
        if (jSuites.dropdown.current) {
            var index = item.getAttribute('data-index');
            if (index != null) {
                obj.selectIndex(index);
            }
        }
    }

    obj.find = function(str) {
        // Force lowercase
        var str = str ? str.toLowerCase() : null;

        // Append options
        for (var i = 0; i < obj.items.length; i++) {
            if (str == null || obj.items[i].textLowerCase.indexOf(str) != -1) {
                obj.items[i].element.style.display = '';
            } else {
                if (obj.selected.indexOf(i) == -1) {
                    obj.items[i].element.style.display = 'none';
                } else {
                    obj.items[i].element.style.display = '';
                }
            }
        }

        var numVisibleItems = function(items) {
            var visible = 0;
            for (var j = 0; j < items.length; j++) {
                if (items[j].style.display != 'none') {
                    visible++;
                }
            }
            return visible;
        }

        // Hide groups
        /*for (var i = 0; i < obj.groups.length; i++) {
            if (numVisibleItems(obj.groups[i].querySelectorAll('.jdropdown-item'))) {
                obj.groups[i].children[0].style.display = '';
            } else {
                obj.groups[i].children[0].style.display = 'none';
            }
        }*/
    }

    obj.updateLabel = function() {
        // Update label
        header.value = obj.getText();
    }

    obj.open = function() {
        if (jSuites.dropdown.current != el) {
            if (jSuites.dropdown.current) {
                jSuites.dropdown.current.dropdown.close();
            }
            jSuites.dropdown.current = el;
        }

        // Focus
        if (! el.classList.contains('jdropdown-focus')) {
            // Add focus
            el.classList.add('jdropdown-focus');

            // Animation
            if (jSuites.getWindowWidth() < 800) {
                if (obj.options.type == null || obj.options.type == 'picker') {
                    jSuites.slideBottom(container, 1);
                }
            }

            // Filter
            if (obj.options.autocomplete == true) {
                // Redo search
                obj.find();
                // Clear search field
                header.value = '';
                header.focus();
            }

            // Set cursor for the first or first selected element
            var cursor = (obj.selected && obj.selected[0]) ? obj.selected[0] : 0;
            obj.updateCursor(cursor);

            // Container Size
            if (! obj.options.type || obj.options.type == 'default') {
                const rect = el.getBoundingClientRect();
                const rectContainer = container.getBoundingClientRect();

                if (obj.options.position) {
                    container.style.position = 'fixed';
                    if (window.innerHeight < rect.bottom + rectContainer.height) {
                        container.style.top = '';
                        container.style.bottom = (window.innerHeight - rect.top ) + 1 + 'px';
                    } else {
                        container.style.top = rect.bottom + 'px';
                        container.style.bottom = '';
                    }
                    container.style.left = rect.left + 'px';
                } else {
                    if (window.innerHeight < rect.bottom + rectContainer.height) {
                        container.style.top = '';
                        container.style.bottom = rect.height + 1 + 'px';
                    } else {
                        container.style.top = '';
                        container.style.bottom = '';
                    }
                }

                container.style.minWidth = rect.width + 'px';
            }
        }

        // Events
        if (typeof(obj.options.onopen) == 'function') {
            obj.options.onopen(el);
        }
    }

    obj.close = function(ignoreEvents) {
        if (jSuites.dropdown.current) {
            // Remove controller
            jSuites.dropdown.current = null
            // Remove cursor
            obj.resetCursor();
            // Update labels
            obj.updateLabel();
            // Events
            if (! ignoreEvents && typeof(obj.options.onclose) == 'function') {
                obj.options.onclose(el);
            }
            // Blur
            if (header.blur) {
                header.blur();
            }
            // Remove focus
            el.classList.remove('jdropdown-focus');
        }

        return obj.getValue();
    }

    /**
     * Update position cursor
     */
    obj.updateCursor = function(index) {
        // Set new cursor
        if (obj.items && obj.items[index] && obj.items[index].element) {
            // Reset cursor
            obj.resetCursor();

            // Set new cursor
            obj.items[index].element.classList.add('jdropdown-cursor');

            // Update position
            obj.currentIndex = parseInt(index);
    
            // Update scroll to the cursor element
            var container = content.scrollTop;
            var element = obj.items[obj.currentIndex].element;
            content.scrollTop = element.offsetTop - element.scrollTop + element.clientTop - 95;
        }
    }

    /**
     * Reset cursor
     */
    obj.resetCursor = function() {
        // Remove current cursor
        if (obj.currentIndex != null) {
            // Remove visual cursor
            if (obj.items && obj.items[obj.currentIndex]) {
                obj.items[obj.currentIndex].element.classList.remove('jdropdown-cursor');
            }
            // Reset cursor
            obj.currentIndex = null;
        }
    }

    /**
     * Reset cursor
     */
    obj.resetSelected = function() {
        // Unselected all
        if (obj.selected) {
            // Remove visual selection
            for (var i = 0; i < obj.selected.length; i++) {
                if (obj.items[obj.selected[i]]) {
                    obj.items[obj.selected[i]].element.classList.remove('jdropdown-selected');
                }
            }
            // Reset current selected items
            obj.selected = [];
        }
    }

    /**
     * Reset cursor and selected items
     */
    obj.reset = function() {
        // Reset cursor
        obj.resetCursor();

        // Reset selected
        obj.resetSelected();

        // Update labels
        obj.updateLabel();
    }

    /**
     * First visible item
     */
    obj.firstVisible = function() {
        var newIndex = null;
        for (var i = 0; i < obj.items.length; i++) {
            if (obj.items[i].element.style.display != 'none') {
                newIndex = i;
                break;
            }
        }

        if (newIndex == null) {
            return false;
        }

        obj.updateCursor(newIndex);
    }

    /**
     * Navigation
     */
    obj.first = function() {
        var newIndex = null;
        for (var i = obj.currentIndex - 1; i >= 0; i--) {
            if (obj.items[i].element.style.display != 'none') {
                newIndex = i;
            }
        }

        if (newIndex == null) {
            return false;
        }

        obj.updateCursor(newIndex);
    }

    obj.last = function() {
        var newIndex = null;
        for (var i = obj.currentIndex + 1; i < obj.items.length; i++) {
            if (obj.items[i].element.style.display != 'none') {
                newIndex = i;
            }
        }

        if (newIndex == null) {
            return false;
        }

        obj.updateCursor(newIndex);
    }

    obj.next = function() {
        var newIndex = null;
        for (var i = obj.currentIndex + 1; i < obj.items.length; i++) {
            if (obj.items[i].element.style.display != 'none') {
                newIndex = i;
                break;
            }
        }

        if (newIndex == null) {
            return false;
        }

        obj.updateCursor(newIndex);
    }

    obj.prev = function() {
        var newIndex = null;
        for (var i = obj.currentIndex - 1; i >= 0; i--) {
            if (obj.items[i].element.style.display != 'none') {
                newIndex = i;
                break;
            }
        }

        if (newIndex == null) {
            return false;
        }

        obj.updateCursor(newIndex);
    }

    if (! jSuites.dropdown.hasEvents) {
        if ('ontouchsend' in document.documentElement === true) {
            document.addEventListener('touchsend', jSuites.dropdown.mouseup);
        } else {
            document.addEventListener('mouseup', jSuites.dropdown.mouseup);
        }
        document.addEventListener('keydown', jSuites.dropdown.onkeydown);

        jSuites.dropdown.hasEvents = true;
    }

    // Start dropdown
    obj.init();

    // Keep object available from the node
    el.dropdown = obj;

    return obj;
});

jSuites.dropdown.hasEvents = false;

jSuites.dropdown.mouseup = function(e) {
    var element = jSuites.getElement(e.target, 'jdropdown');
    if (element) {
        var dropdown = element.dropdown;
        if (e.target.classList.contains('jdropdown-header')) {
            if (element.classList.contains('jdropdown-focus') && element.classList.contains('jdropdown-default')) {
                dropdown.close();
            } else {
                dropdown.open();
            }
        } else if (e.target.classList.contains('jdropdown-group-name')) {
            var items = e.target.nextSibling.children;
            if (e.target.nextSibling.style.display != 'none') {
                for (var i = 0; i < items.length; i++) {
                    if (items[i].style.display != 'none') {
                        dropdown.selectItem(items[i]);
                    }
                }
            }
        } else if (e.target.classList.contains('jdropdown-group-arrow')) {
            if (e.target.classList.contains('jdropdown-group-arrow-down')) {
                e.target.classList.remove('jdropdown-group-arrow-down');
                e.target.classList.add('jdropdown-group-arrow-up');
                e.target.parentNode.nextSibling.style.display = 'none';
            } else {
                e.target.classList.remove('jdropdown-group-arrow-up');
                e.target.classList.add('jdropdown-group-arrow-down');
                e.target.parentNode.nextSibling.style.display = '';
            }
        } else if (e.target.classList.contains('jdropdown-item')) {
            dropdown.selectItem(e.target);
        } else if (e.target.classList.contains('jdropdown-image')) {
            dropdown.selectIndex(e.target.parentNode.getAttribute('data-index'));
        } else if (e.target.classList.contains('jdropdown-description')) {
            dropdown.selectIndex(e.target.parentNode.getAttribute('data-index'));
        } else if (e.target.classList.contains('jdropdown-title')) {
            dropdown.selectIndex(e.target.parentNode.parentNode.getAttribute('data-index'));
        } else if (e.target.classList.contains('jdropdown-close') || e.target.classList.contains('jdropdown-backdrop')) {
            // Close
            dropdown.close();
        }

        e.stopPropagation();
        e.preventDefault();
    } else {
        if (jSuites.dropdown.current) {
            jSuites.dropdown.current.dropdown.close();
        }
    }
}


// Keydown controls
jSuites.dropdown.onkeydown = function(e) {
    if (jSuites.dropdown.current) {
        // Element
        var element = jSuites.dropdown.current.dropdown;
        // Index
        var index = element.currentIndex;

        if (e.shiftKey) {

        } else {
            if (e.which == 13 || e.which == 27 || e.which == 35 || e.which == 36 || e.which == 38 || e.which == 40) {
                // Move cursor
                if (e.which == 13) {
                    element.selectIndex(index)
                } else if (e.which == 38) {
                    if (index == null) {
                        element.firstVisible();
                    } else if (index > 0) {
                        element.prev();
                    }
                } else if (e.which == 40) {
                    if (index == null) {
                        element.firstVisible();
                    } else if (index + 1 < element.options.data.length) {
                        element.next();
                    }
                } else if (e.which == 36) {
                    element.first();
                } else if (e.which == 35) {
                    element.last();
                } else if (e.which == 27) {
                    element.close();
                }

                e.stopPropagation();
                e.preventDefault();
            }
        }
    }
}

jSuites.dropdown.extractFromDom = function(el, options) {
    // Keep reference
    var select = el;
    if (! options) {
        options = {};
    }
    // Prepare configuration
    if (el.getAttribute('multiple') && (! options || options.multiple == undefined)) {
        options.multiple = true;
    }
    if (el.getAttribute('placeholder') && (! options || options.placeholder == undefined)) {
        options.placeholder = el.getAttribute('placeholder');
    }
    if (el.getAttribute('data-autocomplete') && (! options || options.autocomplete == undefined)) {
        options.autocomplete = true;
    }
    if (! options || options.width == undefined) {
        options.width = el.offsetWidth;
    }
    if (el.value && (! options || options.value == undefined)) {
        options.value = el.value;
    }
    if (! options || options.data == undefined) {
        options.data = [];
        for (var j = 0; j < el.children.length; j++) {
            if (el.children[j].tagName == 'OPTGROUP') {
                for (var i = 0; i < el.children[j].children.length; i++) {
                    options.data.push({
                        id: el.children[j].children[i].value,
                        name: el.children[j].children[i].innerHTML,
                        group: el.children[j].getAttribute('label'),
                    });
                }
            } else {
                options.data.push({
                    id: el.children[j].value,
                    name: el.children[j].innerHTML,
                });
            }
        }
    }
    if (! options || options.onchange == undefined) {
        options.onchange = function(a,b,c,d) {
            if (options.multiple == true) {
                if (obj.items[b].classList.contains('jdropdown-selected')) {
                    select.options[b].setAttribute('selected', 'selected');
                } else {
                    select.options[b].removeAttribute('selected');
                }
            } else {
                select.value = d;
            }
        }
    }
    // Create DIV
    var div = document.createElement('div');
    el.parentNode.insertBefore(div, el);
    el.style.display = 'none';
    el = div;

    return { el:el, options:options };
}

/**
 * (c) jTools Text Editor
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Inline richtext editor
 */

jSuites.editor = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        // Initial HTML content
        value: null,
        // Initial snippet
        snippet: null,
        // Add toolbar
        toolbar: null,
        // Max height
        maxHeight: null,
        // Website parser is to read websites and images from cross domain
        remoteParser: null,
        // Key from youtube to read properties from URL
        youtubeKey: null,
        // User list
        userSearch: null,
        // Parse URL
        parseURL: false,
        // Accept drop files
        dropZone: true,
        dropAsAttachment: false,
        acceptImages: true,
        acceptFiles: false,
        maxFileSize: 5000000, 
        // Border
        border: true,
        padding: true,
        focus: false,
        // Events
        onclick: null,
        onfocus: null,
        onblur: null,
        onload: null,
        onenter: null,
        onkeyup: null,
        onkeydown: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Private controllers
    var imageResize = 0;
    var editorTimer = null;
    var editorAction = null;

    // Make sure element is empty
    el.innerHTML = '';

    // Prepare container
    el.classList.add('jeditor-container');

    // Padding
    if (obj.options.padding == true) {
        el.classList.add('jeditor-padding');
    }

    // Border
    if (obj.options.border == false) {
        el.style.border = '0px';
    }

    // Snippet
    var snippet = document.createElement('div');
    snippet.className = 'snippet';
    snippet.setAttribute('contenteditable', false);

    // Toolbar
    var toolbar = document.createElement('div');
    toolbar.className = 'jeditor-toolbar';

    // Create editor
    var editor = document.createElement('div');
    editor.setAttribute('contenteditable', true);
    editor.setAttribute('spellcheck', false);
    editor.className = 'jeditor';

    // Max height
    if (obj.options.maxHeight) {
        editor.style.overflowY = 'auto';
        editor.style.maxHeight = obj.options.maxHeight;
    }

    // Set editor initial value
    if (obj.options.value) {
        var value = obj.options.value;
    } else {
        var value = el.innerHTML ? el.innerHTML : ''; 
    }

    if (! value) {
        var value = '<br>';
    }

    /**
     * Extract images from a HTML string
     */
    var extractImageFromHtml = function(html) {
        // Create temp element
        var div = document.createElement('div');
        div.innerHTML = html;

        // Extract images
        var img = div.querySelectorAll('img');

        if (img.length) {
            for (var i = 0; i < img.length; i++) {
                obj.addImage(img[i].src);
            }
        }
    }

    /**
     * Insert node at caret
     */
    var insertNodeAtCaret = function(newNode) {
        var sel, range;

        if (window.getSelection) {
            sel = window.getSelection();
            if (sel.rangeCount) {
                range = sel.getRangeAt(0);
                var selectedText = range.toString();
                range.deleteContents();
                range.insertNode(newNode); 
                // move the cursor after element
                range.setStartAfter(newNode);
                range.setEndAfter(newNode); 
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    }

    /**
     * Append snippet or thumbs in the editor
     * @Param object data
     */
    var appendElement = function(data) {
        // Reset snippet
        snippet.innerHTML = '';

        if (data.image) {
            var div = document.createElement('div');
            div.className = 'snippet-image';
            div.setAttribute('data-k', 'image');
            snippet.appendChild(div);

            var image = document.createElement('img');
            image.src = data.image;
            div.appendChild(image);
        }

        var div = document.createElement('div');
        div.className = 'snippet-title';
        div.setAttribute('data-k', 'title');
        div.innerHTML = data.title;
        snippet.appendChild(div);

        var div = document.createElement('div');
        div.className = 'snippet-description';
        div.setAttribute('data-k', 'description');
        div.innerHTML = data.description;
        snippet.appendChild(div);

        var div = document.createElement('div');
        div.className = 'snippet-host';
        div.setAttribute('data-k', 'host');
        div.innerHTML = data.host;
        snippet.appendChild(div);

        var div = document.createElement('div');
        div.className = 'snippet-url';
        div.setAttribute('data-k', 'url');
        div.innerHTML = data.url;
        snippet.appendChild(div);

        editor.appendChild(snippet);
    }

    var verifyEditor = function() {
        clearTimeout(editorTimer);
        editorTimer = setTimeout(function() {
            var snippet = editor.querySelector('.snippet');
            var thumbsContainer = el.querySelector('.jeditor-thumbs-container');

            if (! snippet && ! thumbsContainer) {
                var html = editor.innerHTML.replace(/\n/g, ' ');
                var container = document.createElement('div');
                container.innerHTML = html;
                var thumbsContainer = container.querySelector('.jeditor-thumbs-container');
                if (thumbsContainer) {
                    thumbsContainer.remove();
                }
                var text = container.innerText; 
                var url = jSuites.editor.detectUrl(text);

                if (url) {
                    if (url[0].substr(-3) == 'jpg' || url[0].substr(-3) == 'png' || url[0].substr(-3) == 'gif') {
                        if (jSuites.editor.getDomain(url[0]) == window.location.hostname) {
                            obj.importImage(url[0], '');
                        } else {
                            obj.importImage(obj.options.remoteParser + url[0], '');
                        }
                    } else {
                        var id = jSuites.editor.youtubeParser(url[0]);

                        if (id) {
                            obj.getYoutube(id);
                        } else {
                            obj.getWebsite(url[0]);
                        }
                    }
                }
            }
        }, 1000);
    }

    obj.parseContent = function() {
        verifyEditor();
    }

    /**
     * Get metadata from a youtube video
     */
    obj.getYoutube = function(id) {
        if (! obj.options.youtubeKey) {
            console.error('The youtubeKey is not defined');
        } else {
            jSuites.ajax({
                url: 'https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&key=' + obj.options.youtubeKey + '&id=' + id,
                method: 'GET',
                dataType: 'json',
                success: function(result) {
                    // Only valid elements to be appended
                    if (result.items && result.items[0]) {
                        var p = {
                            title: '',
                            description: '',
                            image: '',
                            host: 'www.youtube.com',
                            url: 'https://www.youtube.com?watch=' + id,
                        }
                        if (result.items[0].snippet.title) {
                            p.title = result.items[0].snippet.title;
                        }
                        if (result.items[0].snippet.description) {
                            p.description = result.items[0].snippet.description;

                            if (p.description.length > 150) {
                                p.description = p.description.substr(0, 150) + '...';
                            }
                        }
                        if (result.items[0].snippet.thumbnails.medium.url) {
                            p.image = result.items[0].snippet.thumbnails.medium.url;
                        }

                        appendElement(p);
                    }
                }
            });
        }
    }

    /**
     * Get meta information from a website
     */
    obj.getWebsite = function(url) {
        if (! obj.options.remoteParser) {
            console.log('The remoteParser is not defined');
        } else {
            jSuites.ajax({
                url: obj.options.remoteParser + encodeURI(url.trim()),
                method: 'GET',
                dataType: 'json',
                success: function(result) {
                    var p = {
                        title: '',
                        description: '',
                        image: '',
                        host: url,
                        url: url,
                    }

                    if (result.title) {
                        p.title = result.title;
                    }
                    if (result.description) {
                        p.description = result.description;
                    }
                    if (result.image) {
                        p.image = result.image;
                    } else if (result['og:image']) {
                        p.image = result['og:image'];
                    }
                    if (result.host) {
                        p.host = result.host;
                    }
                    if (result.url) {
                        p.url = result.url;
                    }

                    appendElement(p);
                }
            });
        }
    }

    /**
     * Set editor value
     */
    obj.setData = function(html) {
        editor.innerHTML = html;
        cursor();
    }

    /**
     * Get editor data
     */
    obj.getData = function(json) {
        if (! json) {
            var data = editor.innerHTML;
        } else {
            var data = {
                content : '',
            }

            // Get tag users
            var tagged = editor.querySelectorAll('.post-tag');
            if (tagged.length) {
                data.users = [];
                for (var i = 0; i < tagged.length; i++) {
                    var userId = tagged[i].getAttribute('data-user');
                    if (userId) {
                        data.users.push(userId);
                    }
                }
                data.users = data.users.join(',');
            }

            if (snippet.innerHTML) {
                var index = 0;
                data.snippet = {};
                for (var i = 0; i < snippet.children.length; i++) {
                    // Get key from element
                    var key = snippet.children[i].getAttribute('data-k');
                    if (key) {
                        if (key == 'image') {
                            data.snippet.image = snippet.children[i].children[0].getAttribute('src');
                        } else {
                            data.snippet[key] = snippet.children[i].innerHTML;
                        }
                    }
                }

                snippet.innerHTML = '';
                snippet.remove();
            }

            var text = editor.innerHTML;
            text = text.replace(/<br>/g, "\n");
            text = text.replace(/<\/div>/g, "<\/div>\n");
            text = text.replace(/<(?:.|\n)*?>/gm, "");
            data.content = text.trim();
            data = JSON.stringify(data);
        }

        return data;
    }

    // Reset
    obj.reset = function() {
        editor.innerHTML = '';
    }

    obj.addPdf = function(data) {
        if (data.result.substr(0,4) != 'data') {
            console.error('Invalid source');
        } else {
            var canvas = document.createElement('canvas');
            canvas.width = 60;
            canvas.height = 60;

            var img = new Image();
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

            canvas.toBlob(function(blob) {
                var newImage = document.createElement('img');
                newImage.src = window.URL.createObjectURL(blob);
                newImage.setAttribute('data-extension', 'pdf');
                if (data.name) {
                    newImage.setAttribute('data-name', data.name);
                }
                if (data.size) {
                    newImage.setAttribute('data-size', data.size);
                }
                if (data.date) {
                    newImage.setAttribute('data-date', data.date);
                }
                newImage.className = 'jfile pdf';

                insertNodeAtCaret(newImage);
                jSuites.files[newImage.src] = data.result.substr(data.result.indexOf(',') + 1);
            });
        }
    }

    obj.addImage = function(src, name, size, date) {
        if (src.substr(0,4) != 'data' && ! obj.options.remoteParser) {
            console.error('remoteParser not defined in your initialization');
        } else {
            // This is to process cross domain images
            if (src.substr(0,4) == 'data') {
                var extension = src.split(';')
                extension = extension[0].split('/');
                extension = extension[1];
            } else {
                var extension = src.substr(src.lastIndexOf('.') + 1);
                // Work for cross browsers
                src = obj.options.remoteParser + src;
            }

            var img = new Image();

            img.onload = function onload() {
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;

                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                canvas.toBlob(function(blob) {
                    var newImage = document.createElement('img');
                    newImage.src = window.URL.createObjectURL(blob);
                    newImage.setAttribute('tabindex', '900');
                    newImage.setAttribute('data-extension', extension);
                    if (name) {
                        newImage.setAttribute('data-name', name);
                    }
                    if (size) {
                        newImage.setAttribute('data-size', size);
                    }
                    if (date) {
                        newImage.setAttribute('data-date', date);
                    }
                    newImage.className = 'jfile';
                    var content = canvas.toDataURL();
                    insertNodeAtCaret(newImage);

                    jSuites.files[newImage.src] = content.substr(content.indexOf(',') + 1);
                });
            };

            img.src = src;
        }
    }

    obj.addFile = function(files) {
        var reader = [];

        for (var i = 0; i < files.length; i++) {
            if (files[i].size > obj.options.maxFileSize) {
                alert('The file is too big');
            } else {
                // Only PDF or Images
                var type = files[i].type.split('/');

                if (type[0] == 'image') {
                    type = 1;
                } else if (type[1] == 'pdf') {
                    type = 2;
                } else {
                    type = 0;
                }

                if (type) {
                    // Create file
                    reader[i] = new FileReader();
                    reader[i].index = i;
                    reader[i].type = type;
                    reader[i].name = files[i].name;
                    reader[i].date = files[i].lastModified;
                    reader[i].size = files[i].size;
                    reader[i].addEventListener("load", function (data) {
                        // Get result
                        if (data.target.type == 2) {
                            if (obj.options.acceptFiles == true) {
                                obj.addPdf(data.target);
                            }
                        } else {
                            obj.addImage(data.target.result, data.target.name, data.total, data.target.lastModified);
                        }
                    }, false);

                    reader[i].readAsDataURL(files[i])
                } else {
                    alert('The extension is not allowed');
                }
            }
        }
    }

    // Destroy
    obj.destroy = function() {
        editor.removeEventListener('mouseup', editorMouseUp);
        editor.removeEventListener('mousedown', editorMouseDown);
        editor.removeEventListener('mousemove', editorMouseMove);
        editor.removeEventListener('keyup', editorKeyUp);
        editor.removeEventListener('keydown', editorKeyDown);
        editor.removeEventListener('dragstart', editorDragStart);
        editor.removeEventListener('dragenter', editorDragEnter);
        editor.removeEventListener('dragover', editorDragOver);
        editor.removeEventListener('drop', editorDrop);
        editor.removeEventListener('paste', editorPaste);

        if (typeof(obj.options.onblur) == 'function') {
            editor.removeEventListener('blur', editorBlur);
        }
        if (typeof(obj.options.onfocus) == 'function') {
            editor.removeEventListener('focus', editorFocus);
        }

        el.editor = null;
        el.classList.remove('jeditor-container');

        toolbar.remove();
        snippet.remove();
        editor.remove();
    }

    var isLetter = function (str) {
        var regex = /([\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+)/g;
        return str.match(regex) ? 1 : 0;
    }

    // Event handlers
    var editorMouseUp = function(e) {
        editorAction = false;
    }

    var editorMouseDown = function(e) {
        var close = function(snippet) {
            var rect = snippet.getBoundingClientRect();
            if (rect.width - (e.clientX - rect.left) < 40 && e.clientY - rect.top < 40) {
                snippet.innerHTML = '';
                snippet.remove();
            }
        }

        if (e.target.tagName == 'IMG') {
            if (e.target.style.cursor) {
                var rect = e.target.getBoundingClientRect();
                editorAction = {
                    e: e.target,
                    x: e.clientX,
                    y: e.clientY,
                    w: rect.width,
                    h: rect.height,
                    d: e.target.style.cursor,
                }

                if (! e.target.style.width) {
                    e.target.style.width = rect.width + 'px';
                }

                if (! e.target.style.height) {
                    e.target.style.height = rect.height + 'px';
                }

                var s = window.getSelection();
                if (s.rangeCount) {
                    for (var i = 0; i < s.rangeCount; i++) {
                        s.removeRange(s.getRangeAt(i));
                    }
                }
            } else {
                editorAction = true;
            }
        } else { 
            if (e.target.classList.contains('snippet')) {
                close(e.target);
            } else if (e.target.parentNode.classList.contains('snippet')) {
                close(e.target.parentNode);
            }

            editorAction = true;
        }
    }

    var editorMouseMove = function(e) {
        if (e.target.tagName == 'IMG') {
            if (e.target.getAttribute('tabindex')) {
                var rect = e.target.getBoundingClientRect();
                if (e.clientY - rect.top < 5) {
                    if (rect.width - (e.clientX - rect.left) < 5) {
                        e.target.style.cursor = 'ne-resize';
                    } else if (e.clientX - rect.left < 5) {
                        e.target.style.cursor = 'nw-resize';
                    } else {
                        e.target.style.cursor = 'n-resize';
                    }
                } else if (rect.height - (e.clientY - rect.top) < 5) {
                    if (rect.width - (e.clientX - rect.left) < 5) {
                        e.target.style.cursor = 'se-resize';
                    } else if (e.clientX - rect.left < 5) {
                        e.target.style.cursor = 'sw-resize';
                    } else {
                        e.target.style.cursor = 's-resize';
                    }
                } else if (rect.width - (e.clientX - rect.left) < 5) {
                    e.target.style.cursor = 'e-resize';
                } else if (e.clientX - rect.left < 5) {
                    e.target.style.cursor = 'w-resize';
                } else {
                    e.target.style.cursor = '';
                }
            }
        }

        // Move
        if (e.which == 1 && editorAction && editorAction.d) {
            if (editorAction.d == 'e-resize' || editorAction.d == 'ne-resize' ||  editorAction.d == 'se-resize') {
                editorAction.e.style.width = (editorAction.w + (e.clientX - editorAction.x)) + 'px';

                if (e.shiftKey) {
                    var newHeight = (e.clientX - editorAction.x) * (editorAction.h / editorAction.w);
                    editorAction.e.style.height = editorAction.h + newHeight + 'px';
                } else {
                    var newHeight =  null;
                }
            }

            if (! newHeight) {
                if (editorAction.d == 's-resize' || editorAction.d == 'se-resize' || editorAction.d == 'sw-resize') {
                    if (! e.shiftKey) {
                        editorAction.e.style.height = editorAction.h + (e.clientY - editorAction.y);
                    }
                }
            }
        }
    }

    var editorKeyUp = function(e) {
        if (! editor.innerHTML) {
            editor.innerHTML = '<div><br></div>';
        }

        if (typeof(obj.options.onkeyup) == 'function') { 
            obj.options.onkeyup(e, el);
        }
    }


    var editorKeyDown = function(e) {
        // Check for URL
        if (obj.options.parseURL == true) {
            verifyEditor();
        }

        // Closable
        if (typeof(obj.options.onenter) == 'function' && e.which == 13) {
            var data = obj.getData();
            obj.options.onenter(obj, el, data, e);
        }

        if (typeof(obj.options.onkeydown) == 'function') { 
            obj.options.onkeydown(e, el);
        }
    }

    var editorPaste = function(e) {
        if (e.clipboardData || e.originalEvent.clipboardData) {
            var html = (e.originalEvent || e).clipboardData.getData('text/html');
            var text = (e.originalEvent || e).clipboardData.getData('text/plain');
            var file = (e.originalEvent || e).clipboardData.files
        } else if (window.clipboardData) {
            var html = window.clipboardData.getData('Html');
            var text = window.clipboardData.getData('Text');
            var file = window.clipboardData.files
        }

        if (file.length) {
            // Paste a image from the clipboard
            obj.addFile(file);
        } else {
            // Paste text
            text = text.split('\r\n');
            var str = '';
            if (e.target.nodeName == 'DIV' && ! e.target.classList.contains('jeditor')) {
                for (var i = 0; i < text.length; i++) {
                    if (text[i]) {
                        str += text[i] + "<br>\r\n";
                    }
                }
            } else {
                for (var i = 0; i < text.length; i++) {
                    if (text[i]) {
                        str += '<div>' + text[i] + '</div>';
                    } else {
                        str += '<div><br></div>';
                    }
                }
            }
            // Insert text
            document.execCommand('insertHtml', false, str);

            // Extra images from the paste
            if (obj.options.acceptImages == true) {
                extractImageFromHtml(html);
            }
        }

        e.preventDefault();
    }

    var editorDragStart = function(e) {
        if (editorAction && editorAction.e) {
            e.preventDefault();
        }
    }

    var editorDragEnter = function(e) {
        if (editorAction || obj.options.dropZone == false) {
            // Do nothing
        } else {
            el.classList.add('jeditor-dragging');
        }
    }

    var editorDragOver = function(e) {
        if (editorAction || obj.options.dropZone == false) {
            // Do nothing
        } else {
            if (editorTimer) {
                clearTimeout(editorTimer);
            }

            editorTimer = setTimeout(function() {
                el.classList.remove('jeditor-dragging');
            }, 100);
        }
    }

    var editorDrop = function(e) {
        if (editorAction || obj.options.dropZone == false) {
            // Do nothing
        } else {
            // Position caret on the drop
            var range = null;
            if (document.caretRangeFromPoint) {
                range=document.caretRangeFromPoint(e.clientX, e.clientY);
            } else if (e.rangeParent) {
                range=document.createRange();
                range.setStart(e.rangeParent,e.rangeOffset);
            }
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            sel.anchorNode.parentNode.focus();

            var html = (e.originalEvent || e).dataTransfer.getData('text/html');
            var text = (e.originalEvent || e).dataTransfer.getData('text/plain');
            var file = (e.originalEvent || e).dataTransfer.files;
    
            if (file.length) {
                obj.addFile(file);
            } else if (text) {
                extractImageFromHtml(html);
            }

            el.classList.remove('jeditor-dragging');
            e.preventDefault();
        }
    }

    var editorBlur = function() {
        obj.options.onblur(obj, el, obj.getData());
    }

    var editorFocus = function() {
        obj.options.onfocus(obj, el, obj.getData());
    }

    editor.addEventListener('mouseup', editorMouseUp);
    editor.addEventListener('mousedown', editorMouseDown);
    editor.addEventListener('mousemove', editorMouseMove);
    editor.addEventListener('keyup', editorKeyUp);
    editor.addEventListener('keydown', editorKeyDown);
    editor.addEventListener('dragstart', editorDragStart);
    editor.addEventListener('dragenter', editorDragEnter);
    editor.addEventListener('dragover', editorDragOver);
    editor.addEventListener('drop', editorDrop);
    editor.addEventListener('paste', editorPaste);

    // Blur
    if (typeof(obj.options.onblur) == 'function') {
        editor.addEventListener('blur', editorBlur);
    }

    // Focus
    if (typeof(obj.options.onfocus) == 'function') {
        editor.addEventListener('focus', editorFocus);
    }

    // Onload
    if (typeof(obj.options.onload) == 'function') {
        obj.options.onload(el, editor);
    }

    // Set value to the editor
    editor.innerHTML = value;

    // Append editor to the containre
    el.appendChild(editor);

    // Snippet
    if (obj.options.snippet) {
        appendElement(obj.options.snippet);
    }

    // Default toolbar
    if (obj.options.toolbar == null) {
        obj.options.toolbar = jSuites.editor.getDefaultToolbar();
    }

    // Add toolbar
    if (obj.options.toolbar) {
        for (var i = 0; i < obj.options.toolbar.length; i++) {
            if (obj.options.toolbar[i].icon) {
                var item = document.createElement('div');
                item.style.userSelect = 'none';
                var itemIcon = document.createElement('i');
                itemIcon.className = 'material-icons';
                itemIcon.innerHTML = obj.options.toolbar[i].icon;
                itemIcon.onclick = (function (a) {
                    var b = a;
                    return function () {
                        obj.options.toolbar[b].onclick(el, obj, this)
                    };
                })(i);
                item.appendChild(itemIcon);
                toolbar.appendChild(item);
            } else {
                if (obj.options.toolbar[i].type == 'divisor') {
                    var item = document.createElement('div');
                    item.className = 'jeditor-toolbar-divisor';
                    toolbar.appendChild(item);
                } else if (obj.options.toolbar[i].type == 'button') {
                    var item = document.createElement('div');
                    item.classList.add('jeditor-toolbar-button');
                    item.innerHTML = obj.options.toolbar[i].value;
                    toolbar.appendChild(item);
                }
            }
        }

        el.appendChild(toolbar);
    }

    // Focus to the editor
    if (obj.options.focus) {
        jSuites.editor.setCursor(editor, obj.options.focus == 'initial' ? true : false);
    }

    el.editor = obj;

    return obj;
});

jSuites.editor.setCursor = function(element, first) {
    element.focus();
    document.execCommand('selectAll');
    var sel = window.getSelection();
    var range = sel.getRangeAt(0);
    if (first == true) {
        var node = range.startContainer;
        var size = 0;
    } else {
        var node = range.endContainer;
        var size = node.length;
    }
    range.setStart(node, size);
    range.setEnd(node, size);
    sel.removeAllRanges();
    sel.addRange(range);
}

jSuites.editor.getDomain = function(url) {
    return url.replace('http://','').replace('https://','').replace('www.','').split(/[/?#]/)[0].split(/:/g)[0];
}

jSuites.editor.detectUrl = function(text) {
    var expression = /(((https?:\/\/)|(www\.))[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|]+)/ig;
    var links = text.match(expression);

    if (links) {
        if (links[0].substr(0,3) == 'www') {
            links[0] = 'http://' + links[0];
        }
    }

    return links;
}

jSuites.editor.youtubeParser = function(url) {
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = url.match(regExp);

    return (match && match[7].length == 11) ? match[7] : false;
}

jSuites.editor.getDefaultToolbar = function() { 
    return [
        {
            icon:'undo',
            onclick: function() {
                document.execCommand('undo');
            }
        },
        {
            icon:'redo',
            onclick: function() {
                document.execCommand('redo');
            }
        },
        {
            type:'divisor'
        },
        {
            icon:'format_bold',
            onclick: function(a,b,c) {
                document.execCommand('bold');

                if (document.queryCommandState("bold")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_italic',
            onclick: function(a,b,c) {
                document.execCommand('italic');

                if (document.queryCommandState("italic")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_underline',
            onclick: function(a,b,c) {
                document.execCommand('underline');

                if (document.queryCommandState("underline")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            type:'divisor'
        },
        {
            icon:'format_list_bulleted',
            onclick: function(a,b,c) {
                document.execCommand('insertUnorderedList');

                if (document.queryCommandState("insertUnorderedList")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_list_numbered',
            onclick: function(a,b,c) {
                document.execCommand('insertOrderedList');

                if (document.queryCommandState("insertOrderedList")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_indent_increase',
            onclick: function(a,b,c) {
                document.execCommand('indent', true, null);

                if (document.queryCommandState("indent")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_indent_decrease',
            onclick: function(a,b,c) {
                document.execCommand('outdent');

                if (document.queryCommandState("outdent")) {
                    c.classList.add('selected');
                } else {
                    c.classList.remove('selected');
                }
            }
        }
        /*{
            type:'select',
            items: ['Verdana','Arial','Courier New'],
            onchange: function() {
            }
        },
        {
            type:'select',
            items: ['10px','12px','14px','16px','18px','20px','22px'],
            onchange: function() {
            }
        },
        {
            icon:'format_align_left',
            onclick: function() {
                document.execCommand('JustifyLeft');

                if (document.queryCommandState("JustifyLeft")) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_align_center',
            onclick: function() {
                document.execCommand('justifyCenter');

                if (document.queryCommandState("justifyCenter")) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_align_right',
            onclick: function() {
                document.execCommand('justifyRight');

                if (document.queryCommandState("justifyRight")) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_align_justify',
            onclick: function() {
                document.execCommand('justifyFull');

                if (document.queryCommandState("justifyFull")) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            }
        },
        {
            icon:'format_list_bulleted',
            onclick: function() {
                document.execCommand('insertUnorderedList');

                if (document.queryCommandState("insertUnorderedList")) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            }
        }*/
    ];
}


jSuites.image = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        minWidth: false,
        onchange: null,
        singleFile: true,
        remoteParser: null,
        text:{
            extensionNotAllowed:'The extension is not allowed',
            imageTooSmall:'The resolution is too low, try a image with a better resolution. width > 800px',
        }
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Upload icon
    el.classList.add('jupload');

    // Add image
    obj.addImage = function(file) {
        if (! file.date) {
            file.date = '';
        }
        var img = document.createElement('img');
        img.setAttribute('data-date', file.lastmodified ? file.lastmodified : file.date);
        img.setAttribute('data-name', file.name);
        img.setAttribute('data-size', file.size);
        img.setAttribute('data-small', file.small ? file.small : '');
        img.setAttribute('data-cover', file.cover ? 1 : 0);
        img.setAttribute('data-extension', file.extension);
        img.setAttribute('src', file.file);
        img.className = 'jfile';
        img.style.width = '100%';

        return img;
    }

    // Add image
    obj.addImages = function(files) {
        if (obj.options.singleFile == true) {
            el.innerHTML = '';
        }

        for (var i = 0; i < files.length; i++) {
            el.appendChild(obj.addImage(files[i]));
        }
    }

    obj.addFromFile = function(file) {
        var type = file.type.split('/');
        if (type[0] == 'image') {
            if (obj.options.singleFile == true) {
                el.innerHTML = '';
            }

            var imageFile = new FileReader();
            imageFile.addEventListener("load", function (v) {

                var img = new Image();

                img.onload = function onload() {
                    var canvas = document.createElement('canvas');
                    canvas.width = img.width;
                    canvas.height = img.height;

                    var ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                    var data = {
                        file: canvas.toDataURL(),
                        extension: file.name.substr(file.name.lastIndexOf('.') + 1),
                        name: file.name,
                        size: file.size,
                        lastmodified: file.lastModified,
                    }
                    var newImage = obj.addImage(data);
                    el.appendChild(newImage);

                    // Onchange
                    if (typeof(obj.options.onchange) == 'function') {
                        obj.options.onchange(newImage);
                    }
                };

                img.src = v.srcElement.result;
            });

            imageFile.readAsDataURL(file);
        } else {
            alert(text.extentionNotAllowed);
        }
    }

    obj.addFromUrl = function(src) {
        if (src.substr(0,4) != 'data' && ! obj.options.remoteParser) {
            console.error('remoteParser not defined in your initialization');
        } else {
            // This is to process cross domain images
            if (src.substr(0,4) == 'data') {
                var extension = src.split(';')
                extension = extension[0].split('/');
                extension = extension[1];
            } else {
                var extension = src.substr(src.lastIndexOf('.') + 1);
                // Work for cross browsers
                src = obj.options.remoteParser + src;
            }

            var img = new Image();

            img.onload = function onload() {
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;

                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                canvas.toBlob(function(blob) {
                    var data = {
                        file: window.URL.createObjectURL(blob),
                        extension: extension
                    }
                    var newImage = obj.addImage(data);
                    el.appendChild(newImage);

                    // Keep base64 ready to go
                    var content = canvas.toDataURL();
                    jSuites.files[data.file] = content.substr(content.indexOf(',') + 1);

                    // Onchange
                    if (typeof(obj.options.onchange) == 'function') {
                        obj.options.onchange(newImage);
                    }
                });
            };

            img.src = src;
        }
    }

    var attachmentInput = document.createElement('input');
    attachmentInput.type = 'file';
    attachmentInput.setAttribute('accept', 'image/*');
    attachmentInput.onchange = function() {
        for (var i = 0; i < this.files.length; i++) {
            obj.addFromFile(this.files[i]);
        }
    }

    el.addEventListener("dblclick", function(e) {
        jSuites.click(attachmentInput);
    });

    el.addEventListener('dragenter', function(e) {
        el.style.border = '1px dashed #000';
    });

    el.addEventListener('dragleave', function(e) {
        el.style.border = '1px solid #eee';
    });

    el.addEventListener('dragstop', function(e) {
        el.style.border = '1px solid #eee';
    });

    el.addEventListener('dragover', function(e) {
        e.preventDefault();
    });

    el.addEventListener('drop', function(e) {
        e.preventDefault();  
        e.stopPropagation();


        var html = (e.originalEvent || e).dataTransfer.getData('text/html');
        var file = (e.originalEvent || e).dataTransfer.files;

        if (file.length) {
            for (var i = 0; i < e.dataTransfer.files.length; i++) {
                obj.addFromFile(e.dataTransfer.files[i]);
            }
        } else if (html) {
            if (obj.options.singleFile == true) {
                el.innerHTML = '';
            }

            // Create temp element
            var div = document.createElement('div');
            div.innerHTML = html;

            // Extract images
            var img = div.querySelectorAll('img');

            if (img.length) {
                for (var i = 0; i < img.length; i++) {
                    obj.addFromUrl(img[i].src);
                }
            }
        }

        el.style.border = '1px solid #eee';

        return false;
    });

    el.image = obj;

    return obj;
});

/**
 * (c) jLoading
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Page loading spin
 */

jSuites.loading = (function() {
    var obj = {};

    var loading = document.createElement('div');
    loading.className = 'jloading';

    obj.show = function() {
        document.body.appendChild(loading);
    };

    obj.hide = function() {
        document.body.removeChild(loading);
    };

    return obj;
})();

/**
 * (c) jLogin
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Login helper
 */

jSuites.login = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        url: window.location.href,
        prepareRequest: null,
        accessToken: null,
        deviceToken: null,
        facebookUrl: null,
        facebookAuthentication: null,
        maxHeight: null,
        onload: null,
        onsuccess: null,
        onerror: null,
        message: null,
        logo: null,
        newProfile: false,
        newProfileUrl: false,
        newProfileLogin: false,
        fullscreen: false,
        newPasswordValidation: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Message console container
    if (! obj.options.message) {
        var messageElement = document.querySelector('.message');
        if (messageElement) {
            obj.options.message = messageElement;
        }
    }

    // Action
    var action = null;

    // Container
    var container = document.createElement('form');
    el.appendChild(container);

    // Logo
    var divLogo = document.createElement('div');
    divLogo.className = 'jlogin-logo'
    container.appendChild(divLogo);

    if (obj.options.logo) {
        var logo = document.createElement('img');
        logo.src = obj.options.logo;
        divLogo.appendChild(logo);
    }

    // Code
    var labelCode = document.createElement('label');
    labelCode.innerHTML = 'Please enter here the code received';
    var inputCode = document.createElement('input');
    inputCode.type = 'number';
    inputCode.id = 'code';
    inputCode.setAttribute('maxlength', 6);
    var divCode = document.createElement('div');
    divCode.appendChild(labelCode);
    divCode.appendChild(inputCode);

    // Hash
    var inputHash = document.createElement('input');
    inputHash.type = 'hidden';
    inputHash.name = 'h';
    var divHash = document.createElement('div');
    divHash.appendChild(inputHash);

    // Recovery
    var inputRecovery = document.createElement('input');
    inputRecovery.type = 'hidden';
    inputRecovery.name = 'recovery';
    inputRecovery.value = '1';
    var divRecovery = document.createElement('div');
    divRecovery.appendChild(inputRecovery);

    // Login
    var labelLogin = document.createElement('label');
    labelLogin.innerHTML = 'Login';
    var inputLogin = document.createElement('input');
    inputLogin.type = 'text';
    inputLogin.name = 'login';
    inputLogin.setAttribute('autocomplete', 'off');
    inputLogin.onkeyup = function() {
        this.value = this.value.toLowerCase().replace(/[^a-zA-Z0-9_+]+/gi, '');
    } 
    var divLogin = document.createElement('div');
    divLogin.appendChild(labelLogin);
    divLogin.appendChild(inputLogin);

    // Name
    var labelName = document.createElement('label');
    labelName.innerHTML = 'Name';
    var inputName = document.createElement('input');
    inputName.type = 'text';
    inputName.name = 'name';
    var divName = document.createElement('div');
    divName.appendChild(labelName);
    divName.appendChild(inputName);

    // Email
    var labelUsername = document.createElement('label');
    labelUsername.innerHTML = 'E-mail';
    var inputUsername = document.createElement('input');
    inputUsername.type = 'text';
    inputUsername.name = 'username';
    inputUsername.setAttribute('autocomplete', 'new-username');
    var divUsername = document.createElement('div');
    divUsername.appendChild(labelUsername);
    divUsername.appendChild(inputUsername);

    // Password
    var labelPassword = document.createElement('label');
    labelPassword.innerHTML = 'New password';
    var inputPassword = document.createElement('input');
    inputPassword.type = 'password';
    inputPassword.name = 'password';
    inputPassword.setAttribute('autocomplete', 'new-password');
    var divPassword = document.createElement('div');
    divPassword.appendChild(labelPassword);
    divPassword.appendChild(inputPassword);
    divPassword.onkeydown = function(e) {
        if (e.keyCode == 13) {
            obj.execute();
        }
    }

    // Repeat password
    var labelRepeatPassword = document.createElement('label');
    labelRepeatPassword.innerHTML = 'Repeat the new password';
    var inputRepeatPassword = document.createElement('input');
    inputRepeatPassword.type = 'password';
    inputRepeatPassword.name = 'password';
    var divRepeatPassword = document.createElement('div');
    divRepeatPassword.appendChild(labelRepeatPassword);
    divRepeatPassword.appendChild(inputRepeatPassword);

    // Remember checkbox
    var labelRemember = document.createElement('label');
    labelRemember.innerHTML = 'Remember me on this device';
    var inputRemember = document.createElement('input');
    inputRemember.type = 'checkbox';
    inputRemember.name = 'remember';
    inputRemember.value = '1';
    labelRemember.appendChild(inputRemember);
    var divRememberButton = document.createElement('div');
    divRememberButton.className = 'rememberButton';
    divRememberButton.appendChild(labelRemember);

    // Login button
    var actionButton = document.createElement('input');
    actionButton.type = 'button';
    actionButton.value = 'Log In';
    actionButton.onclick = function() {
        obj.execute();
    }
    var divActionButton = document.createElement('div');
    divActionButton.appendChild(actionButton);

    // Cancel button
    var cancelButton = document.createElement('div');
    cancelButton.innerHTML = 'Cancel';
    cancelButton.className = 'cancelButton';
    cancelButton.onclick = function() {
        obj.requestAccess();
    }
    var divCancelButton = document.createElement('div');
    divCancelButton.appendChild(cancelButton);

    // Captcha
    var labelCaptcha = document.createElement('label');
    labelCaptcha.innerHTML = 'Please type here the code below';
    var inputCaptcha = document.createElement('input');
    inputCaptcha.type = 'text';
    inputCaptcha.name = 'captcha';
    var imageCaptcha = document.createElement('img');
    var divCaptcha = document.createElement('div');
    divCaptcha.className = 'jlogin-captcha';
    divCaptcha.appendChild(labelCaptcha);
    divCaptcha.appendChild(inputCaptcha);
    divCaptcha.appendChild(imageCaptcha);

    // Facebook
    var facebookButton = document.createElement('div');
    facebookButton.innerHTML = 'Login with Facebook';
    facebookButton.className = 'facebookButton';
    var divFacebookButton = document.createElement('div');
    divFacebookButton.appendChild(facebookButton);
    divFacebookButton.onclick = function() {
        obj.requestLoginViaFacebook();
    }
    // Forgot password
    var inputRequest = document.createElement('span');
    inputRequest.innerHTML = 'Request a new password';
    var divRequestButton = document.createElement('div');
    divRequestButton.className = 'requestButton';
    divRequestButton.appendChild(inputRequest);
    divRequestButton.onclick = function() {
        obj.requestNewPassword();
    }
    // Create a new Profile
    var inputNewProfile = document.createElement('span');
    inputNewProfile.innerHTML = 'Create a new profile';
    var divNewProfileButton = document.createElement('div');
    divNewProfileButton.className = 'newProfileButton';
    divNewProfileButton.appendChild(inputNewProfile);
    divNewProfileButton.onclick = function() {
        obj.newProfile();
    }

    el.className = 'jlogin';

    if (obj.options.fullscreen == true) {
        el.classList.add('jlogin-fullscreen');
    }

    /** 
     * Show message
     */
    obj.showMessage = function(data) {
        var message = (typeof(data) == 'object') ? data.message : data;

        if (typeof(obj.options.showMessage) == 'function') {
            obj.options.showMessage(data);
        } else {
            jSuites.alert(data);
        }
    }

    /**
     * New profile
     */
    obj.newProfile = function() {
        container.innerHTML = '';
        container.appendChild(divLogo);
        if (obj.options.newProfileLogin) {
            container.appendChild(divLogin);
        }
        container.appendChild(divName);
        container.appendChild(divUsername);
        container.appendChild(divActionButton);
        if (obj.options.facebookAuthentication == true) {
            container.appendChild(divFacebookButton);
        }
        container.appendChild(divCancelButton);

        // Reset inputs
        inputLogin.value = '';
        inputUsername.value = '';
        inputPassword.value = '';

        // Button
        actionButton.value = 'Create new profile';

        // Action
        action = 'newProfile';
    }

    /**
     * Request the email with the recovery instructions
     */
    obj.requestNewPassword = function() {
        if (Array.prototype.indexOf.call(container.children, divCaptcha) >= 0) {
            var captcha = true;
        }

        container.innerHTML = '';
        container.appendChild(divLogo);
        container.appendChild(divRecovery);
        container.appendChild(divUsername);
        if (captcha) {
            container.appendChild(divCaptcha);
        }
        container.appendChild(divActionButton);
        container.appendChild(divCancelButton);
        actionButton.value = 'Request a new password';
        inputRecovery.value = 1;

        // Action
        action = 'requestNewPassword';
    }

    /**
     * Confirm recovery code
     */
    obj.codeConfirmation = function() {
        container.innerHTML = '';
        container.appendChild(divLogo);
        container.appendChild(divHash);
        container.appendChild(divCode);
        container.appendChild(divActionButton);
        container.appendChild(divCancelButton);
        actionButton.value = 'Confirm code';
        inputRecovery.value = 2;

        // Action
        action = 'codeConfirmation';
    }

    /**
     * Update my password
     */
    obj.changeMyPassword = function(hash) {
        container.innerHTML = '';
        container.appendChild(divLogo);
        container.appendChild(divHash);
        container.appendChild(divPassword);
        container.appendChild(divRepeatPassword);
        container.appendChild(divActionButton);
        container.appendChild(divCancelButton);
        actionButton.value = 'Change my password';
        inputHash.value = hash;

        // Action
        action = 'changeMyPassword';
    }

    /**
     * Request access default method
     */
    obj.requestAccess = function() {
        container.innerHTML = '';
        container.appendChild(divLogo);
        container.appendChild(divUsername);
        container.appendChild(divPassword);
        container.appendChild(divActionButton);
        if (obj.options.facebookAuthentication == true) {
            container.appendChild(divFacebookButton);
        }
        container.appendChild(divRequestButton);
        container.appendChild(divRememberButton);
        container.appendChild(divRequestButton);
        if (obj.options.newProfile == true) {
            container.appendChild(divNewProfileButton);
        }

        // Button
        actionButton.value = 'Login';

        // Password
        inputPassword.value = '';

        // Email persistence
        if (window.localStorage.getItem('username')) {
            inputUsername.value = window.localStorage.getItem('username');
            inputPassword.focus();
        } else {
            inputUsername.focus();
        }

        // Action
        action = 'requestAccess';
    }

    /**
     * Request login via facebook
     */
    obj.requestLoginViaFacebook = function() {
        if (typeof(deviceNotificationToken) == 'undefined') {
            FB.getLoginStatus(function(response) {
                if (! response.status || response.status != 'connected') {
                    FB.login(function(response) {
                        if (response.authResponse) {
                            obj.execute({ f:response.authResponse.accessToken });
                        } else {
                            obj.showMessage('Not authorized by facebook');
                        }
                    }, {scope: 'public_profile,email'});
                } else {
                    obj.execute({ f:response.authResponse.accessToken });
                }
            }, true);
        } else {
            jDestroy = function() {
                fbLogin.removeEventListener('loadstart', jStart);
                fbLogin.removeEventListener('loaderror', jError);
                fbLogin.removeEventListener('exit', jExit);
                fbLogin.close();
                fbLogin = null;
            }

            jStart = function(event) {
                var url = event.url;
                if (url.indexOf("access_token") >= 0) {
                    setTimeout(function(){
                        var u = url.match(/=(.*?)&/);
                        if (u[1].length > 32) {
                            obj.execute({ f:u[1] });
                        }
                        jDestroy();
                   },500);
                }

                if (url.indexOf("error=access_denied") >= 0) {
                   setTimeout(jDestroy ,500);
                   // Not authorized by facebook
                   obj.showMessage('Not authorized by facebook');
                }
            }

            jError = function(event) {
                jDestroy();
            }
        
            jExit = function(event) {
                jDestroy();
            }

            fbLogin = window.open(obj.options.facebookUrl, "_blank", "location=no,closebuttoncaption=Exit,disallowoverscroll=yes,toolbar=no");
            fbLogin.addEventListener('loadstart', jStart);
            fbLogin.addEventListener('loaderror', jError);
            fbLogin.addEventListener('exit', jExit);
        }

        // Action
        action = 'requestLoginViaFacebook';
    }

    // Perform request
    obj.execute = function(data) {
        // New profile
        if (action == 'newProfile') {
            var pattern = new RegExp(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/);
            if (! inputUsername.value || ! pattern.test(inputUsername.value)) {
                var message = 'Invalid e-mail address'; 
            }

            var pattern = new RegExp(/^[a-zA-Z0-9\_\-\.\s+]+$/);
            if (! inputLogin.value || ! pattern.test(inputLogin.value)) {
                var message = 'Invalid username, please use only characters and numbers';
            }

            if (message) {
                obj.showMessage(message);
                return false;
            }
        } else if (action == 'changeMyPassword') {
            if (inputPassword.value.length < 3) {
                var message = 'Password is too short';
            } else  if (inputPassword.value != inputRepeatPassword.value) {
                var message = 'Password should match';
            } else {
                if (typeof(obj.options.newPasswordValidation) == 'function') {
                    var val = obj.options.newPasswordValidation(obj, inputPassword.value, inputPassword.value);
                    if (val != undefined) {
                        message = val;
                    }
                }
            }

            if (message) {
                obj.showMessage(message);
                return false;
            }
        }

        // Keep email
        if (inputUsername.value != '') {
            window.localStorage.setItem('username', inputUsername.value);
        }

        // Captcha
        if (Array.prototype.indexOf.call(container.children, divCaptcha) >= 0) {
            if (inputCaptcha.value == '') {
                obj.showMessage('Please enter the captch code below');
                return false;
            }
        }

        // Url
        var url = obj.options.url;

        // Device token
        if (obj.options.deviceToken) {
            url += '?token=' + obj.options.deviceToken;
        }

        // Callback
        var onsuccess = function(result) {
            if (result) {
                // Successfully response
                if (result.success == 1) {
                    // Recovery process
                    if (action == 'requestNewPassword') {
                        obj.codeConfirmation();
                    } else if (action == 'codeConfirmation') {
                        obj.requestAccess();
                    } else if (action == 'newProfile') {
                        obj.requestAccess();
                        // New profile
                        result.newProfile = true;
                    }

                    // Token
                    if (result.token) {
                        // Set token
                        obj.options.accessToken = result.token;
                        // Save token
                        window.localStorage.setItem('Access-Token', result.token);
                    }
                }

                // Show message
                if (result.message) {
                    // Show message
                    obj.showMessage(result.message)
                }

                // Request captcha code
                if (! result.data) {
                    if (Array.prototype.indexOf.call(container.children, divCaptcha) >= 0) {
                        divCaptcha.remove();
                    }
                } else {
                    container.insertBefore(divCaptcha, divActionButton);
                    imageCaptcha.setAttribute('src', 'data:image/png;base64,' + result.data);
                }

                // Give time to user see the message
                if (result.hash) {
                    // Change password
                    obj.changeMyPassword(result.hash);
                } else if (result.url) {
                    // App initialization
                    if (result.success == 1) {
                        if (typeof(obj.options.onsuccess) == 'function') {
                            obj.options.onsuccess(result);
                        } else {
                            if (result.message) {
                                setTimeout(function() { window.location.href = result.url; }, 2000);
                            } else {
                                window.location.href = result.url;
                            }
                        }
                    } else {
                        if (typeof(obj.options.onerror) == 'function') {
                            obj.options.onerror(result);
                        }
                    }
                }
            }
        }

        // Password
        if (! data) {
            var data = jSuites.getFormElements(el);
            // Encode passworfd
            if (data.password) {
                data.password = jSuites.login.sha512(data.password);
            }
            // Recovery code
            if (Array.prototype.indexOf.call(container.children, divCode) >= 0 && inputCode.value) {
                data.h = jSuites.login.sha512(inputCode.value);
            }
        }

        // Loading
        el.classList.add('jlogin-loading');

        // Url
        var url = (action == 'newProfile' && obj.options.newProfileUrl) ? obj.options.newProfileUrl : obj.options.url;

        // Remote call
        jSuites.ajax({
            url: url,
            method: 'POST',
            dataType: 'json',
            data: data,
            success: function(result) {
                // Remove loading
                el.classList.remove('jlogin-loading');
                // Callback
                onsuccess(result);
            },
            error: function(result) {
                // Error
                el.classList.remove('jlogin-loading');

                if (typeof(obj.options.onerror) == 'function') {
                    obj.options.onerror(result);
                }
            }
        });
    }

    var queryString = window.location.href.split('?');
    if (queryString[1] && queryString[1].length == 130 && queryString[1].substr(0,2) == 'h=') {
        obj.changeMyPassword(queryString[1].substr(2));
    } else {
        obj.requestAccess();
    }

    return obj;
});

jSuites.login.sha512 = (function(str) {
    function int64(msint_32, lsint_32) {
        this.highOrder = msint_32;
        this.lowOrder = lsint_32;
    }

    var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),
        new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),
        new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),
        new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];

    var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),
        new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),
        new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),
        new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),
        new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),
        new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),
        new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),
        new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),
        new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),
        new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),
        new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
        new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),
        new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),
        new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),
        new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),
        new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),
        new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
        new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),
        new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),
        new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),
        new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),
        new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),
        new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),
        new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
        new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),
        new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),
        new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),
        new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),
        new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
        new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),
        new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),
        new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),
        new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),
        new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),
        new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),
        new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),
        new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
        new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),
        new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),
        new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];

    var W = new Array(64);
    var a, b, c, d, e, f, g, h, i, j;
    var T1, T2;
    var charsize = 8;

    function utf8_encode(str) {
        return unescape(encodeURIComponent(str));
    }

    function str2binb(str) {
        var bin = [];
        var mask = (1 << charsize) - 1;
        var len = str.length * charsize;
    
        for (var i = 0; i < len; i += charsize) {
            bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));
        }
    
        return bin;
    }

    function binb2hex(binarray) {
        var hex_tab = "0123456789abcdef";
        var str = "";
        var length = binarray.length * 4;
        var srcByte;

        for (var i = 0; i < length; i += 1) {
            srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);
            str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);
        }

        return str;
    }

    function safe_add_2(x, y) {
        var lsw, msw, lowOrder, highOrder;

        lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);
        msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
        lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);
        msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
        highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        return new int64(highOrder, lowOrder);
    }

    function safe_add_4(a, b, c, d) {
        var lsw, msw, lowOrder, highOrder;

        lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);
        msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);
        lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);
        msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);
        highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        return new int64(highOrder, lowOrder);
    }

    function safe_add_5(a, b, c, d, e) {
        var lsw, msw, lowOrder, highOrder;

        lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);
        msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);
        lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);
        msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);
        highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

        return new int64(highOrder, lowOrder);
    }

    function maj(x, y, z) {
        return new int64(
            (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),
            (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)
        );
    }

    function ch(x, y, z) {
        return new int64(
            (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),
            (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)
        );
    }

    function rotr(x, n) {
        if (n <= 32) {
            return new int64(
             (x.highOrder >>> n) | (x.lowOrder << (32 - n)),
             (x.lowOrder >>> n) | (x.highOrder << (32 - n))
            );
        } else {
            return new int64(
             (x.lowOrder >>> n) | (x.highOrder << (32 - n)),
             (x.highOrder >>> n) | (x.lowOrder << (32 - n))
            );
        }
    }

    function sigma0(x) {
        var rotr28 = rotr(x, 28);
        var rotr34 = rotr(x, 34);
        var rotr39 = rotr(x, 39);

        return new int64(
            rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
            rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
        );
    }

    function sigma1(x) {
        var rotr14 = rotr(x, 14);
        var rotr18 = rotr(x, 18);
        var rotr41 = rotr(x, 41);

        return new int64(
            rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
            rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
        );
    }

    function gamma0(x) {
        var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);

        return new int64(
            rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
            rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
        );
    }

    function gamma1(x) {
        var rotr19 = rotr(x, 19);
        var rotr61 = rotr(x, 61);
        var shr6 = shr(x, 6);

        return new int64(
            rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
            rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
        );
    }

    function shr(x, n) {
        if (n <= 32) {
            return new int64(
                x.highOrder >>> n,
                x.lowOrder >>> n | (x.highOrder << (32 - n))
            );
        } else {
            return new int64(
                0,
                x.highOrder << (32 - n)
            );
        }
    }

    var str = utf8_encode(str);
    var strlen = str.length*charsize;
    str = str2binb(str);

    str[strlen >> 5] |= 0x80 << (24 - strlen % 32);
    str[(((strlen + 128) >> 10) << 5) + 31] = strlen;

    for (var i = 0; i < str.length; i += 32) {
        a = H[0];
        b = H[1];
        c = H[2];
        d = H[3];
        e = H[4];
        f = H[5];
        g = H[6];
        h = H[7];

        for (var j = 0; j < 80; j++) {
            if (j < 16) {
                W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);
            } else {
                W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);
            }

            T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);
            T2 = safe_add_2(sigma0(a), maj(a, b, c));
            h = g;
            g = f;
            f = e;
            e = safe_add_2(d, T1);
            d = c;
            c = b;
            b = a;
            a = safe_add_2(T1, T2);
        }

        H[0] = safe_add_2(a, H[0]);
        H[1] = safe_add_2(b, H[1]);
        H[2] = safe_add_2(c, H[2]);
        H[3] = safe_add_2(d, H[3]);
        H[4] = safe_add_2(e, H[4]);
        H[5] = safe_add_2(f, H[5]);
        H[6] = safe_add_2(g, H[6]);
        H[7] = safe_add_2(h, H[7]);
    }

    var binarray = [];
    for (var i = 0; i < H.length; i++) {
        binarray.push(H[i].highOrder);
        binarray.push(H[i].lowOrder);
    }

    return binb2hex(binarray);
});

/**
 * (c) jTools Input Mask
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Input mask
 */

jSuites.mask = (function() {
    var obj = {};
    var index = 0;
    var values = []
    var pieces = [];

    obj.run = function(value, mask, decimal) {
        if (value && mask) {
            if (! decimal) {
                decimal = '.';
            }
            if (value == Number(value)) {
                var number = (''+value).split('.');
                var value = number[0];
                var valueDecimal = number[1];
            } else {
                value = '' + value;
            }
            index = 0;
            values = [];
            // Create mask token
            obj.prepare(mask);
            // Current value
            var currentValue = value;
            if (currentValue) {
                // Checking current value
                for (var i = 0; i < currentValue.length; i++) {
                    if (currentValue[i] != null) {
                        obj.process(currentValue[i]);
                    }
                }
            }
            if (valueDecimal) {
                obj.process(decimal);
                var currentValue = valueDecimal;
                if (currentValue) {
                    // Checking current value
                    for (var i = 0; i < currentValue.length; i++) {
                        if (currentValue[i] != null) {
                            obj.process(currentValue[i]);
                        }
                    }
                }
            }
            // Formatted value
            return values.join('');
        } else {
            return '';
        }
    }

    obj.apply = function(e) {
        if (e.target && ! e.target.getAttribute('readonly')) {
            var mask = e.target.getAttribute('data-mask');
            if (mask && e.keyCode > 46) {
                index = 0;
                values = [];
                // Create mask token
                obj.prepare(mask);
                // Current value
                if (e.target.selectionStart < e.target.selectionEnd) {
                    var currentValue = e.target.value.substring(0, e.target.selectionStart); 
                } else {
                    var currentValue = e.target.value;
                }
                if (currentValue) {
                    // Checking current value
                    for (var i = 0; i < currentValue.length; i++) {
                        if (currentValue[i] != null) {
                            obj.process(currentValue[i]);
                        }
                    }
                }
                // New input
                obj.process(obj.fromKeyCode(e));
                // Update value to the element
                e.target.value = values.join('');
                if (pieces.length == values.length && pieces[pieces.length-1].length == values[values.length-1].length) {
                    e.target.setAttribute('data-completed', 'true');
                } else {
                    e.target.setAttribute('data-completed', 'false');
                }
                // Prevent default
                e.preventDefault();
            }
        }
    }

    /**
     * Process inputs and save to values
     */
    obj.process = function(input) {
        do {
            if (pieces[index] == 'mm') {
                if (values[index] == null || values[index] == '') {
                    if (parseInt(input) > 1 && parseInt(input) < 10) {
                        values[index] = '0' + input;
                        index++;
                        return true;
                    } else if (parseInt(input) < 10) {
                        values[index] = input;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (values[index] == 1 && values[index] < 2 && parseInt(input) < 3) {
                        values[index] += input;
                        index++;
                        return true;
                    } else if (values[index] == 0 && values[index] < 10) {
                        values[index] += input;
                        index++;
                        return true;
                    } else {
                        return false
                    }
                }
            } else if (pieces[index] == 'dd') {
                if (values[index] == null || values[index] == '') {
                    if (parseInt(input) > 3 && parseInt(input) < 10) {
                        values[index] = '0' + input;
                        index++;
                        return true;
                    } else if (parseInt(input) < 10) {
                        values[index] = input;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (values[index] == 3 && parseInt(input) < 2) {
                        values[index] += input;
                        index++;
                        return true;
                    } else if (values[index] < 3 && parseInt(input) < 10) {
                        values[index] += input;
                        index++;
                        return true;
                    } else {
                        return false
                    }
                }
            } else if (pieces[index] == 'hh24') {
                if (values[index] == null || values[index] == '') {
                    if (parseInt(input) > 2 && parseInt(input) < 10) {
                        values[index] = '0' + input;
                        index++;
                        return true;
                    } else if (parseInt(input) < 10) {
                        values[index] = input;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (values[index] == 2 && parseInt(input) < 4) {
                        values[index] += input;
                        index++;
                        return true;
                    } else if (values[index] < 2 && parseInt(input) < 10) {
                        values[index] += input;
                        index++;
                        return true;
                    } else {
                        return false
                    }
                }
            } else if (pieces[index] == 'hh') {
                if (values[index] == null || values[index] == '') {
                    if (parseInt(input) > 1 && parseInt(input) < 10) {
                        values[index] = '0' + input;
                        index++;
                        return true;
                    } else if (parseInt(input) < 10) {
                        values[index] = input;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (values[index] == 1 && parseInt(input) < 3) {
                        values[index] += input;
                        index++;
                        return true;
                    } else if (values[index] < 1 && parseInt(input) < 10) {
                        values[index] += input;
                        index++;
                        return true;
                    } else {
                        return false
                    }
                }
            } else if (pieces[index] == 'mi' || pieces[index] == 'ss') {
                if (values[index] == null || values[index] == '') {
                    if (parseInt(input) > 5 && parseInt(input) < 10) {
                        values[index] = '0' + input;
                        index++;
                        return true;
                    } else if (parseInt(input) < 10) {
                        values[index] = input;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (parseInt(input) < 10) {
                        values[index] += input;
                        index++;
                        return true;
                     } else {
                        return false
                    }
                }
            } else if (pieces[index] == 'yy' || pieces[index] == 'yyyy') {
                if (parseInt(input) < 10) {
                    if (values[index] == null || values[index] == '') {
                        values[index] = input;
                    } else {
                        values[index] += input;
                    }
                    
                    if (values[index].length == pieces[index].length) {
                        index++;
                    }
                    return true;
                } else {
                    return false;
                }
            } else if (pieces[index] == '#' || pieces[index] == '#.##' || pieces[index] == '#,##' || pieces[index] == '# ##') {
                if (input.match(/[0-9]/g)) {
                    if (pieces[index] == '#.##') {
                        var separator = '.';
                    } else if (pieces[index] == '#,##') {
                        var separator = ',';
                    } else if (pieces[index] == '# ##') {
                        var separator = ' ';
                    } else {
                        var separator = '';
                    }
                    if (values[index] == null || values[index] == '') {
                        values[index] = input;
                    } else {
                        values[index] += input;
                        if (separator) {
                            values[index] = values[index].match(/[0-9]/g).join('');
                            var t = [];
                            var s = 0;
                            for (var j = values[index].length - 1; j >= 0 ; j--) {
                                t.push(values[index][j]);
                                s++;
                                if (! (s % 3)) {
                                    t.push(separator);
                                }
                            }
                            t = t.reverse();
                            values[index] = t.join('');
                            if (values[index].substr(0,1) == separator) {
                                values[index] = values[index].substr(1);
                            } 
                        }
                    }
                    return true;
                } else {
                    if (pieces[index] == '#.##' && input == '.') {
                        // Do nothing
                    } else if (pieces[index] == '#,##' && input == ',') {
                        // Do nothing
                    } else if (pieces[index] == '# ##' && input == ' ') {
                        // Do nothing
                    } else {
                        if (values[index]) {
                            index++;
                            if (pieces[index]) {
                                if (pieces[index] == input) {
                                    values[index] = input;
                                    return true;
                                } else {
                                    if (pieces[index] == '0' && pieces[index+1] == input) {
                                        index++;
                                        values[index] = input;
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                }
            } else if (pieces[index] == '0') {
                if (input.match(/[0-9]/g)) {
                    values[index] = input;
                    index++;
                    return true;
                } else {
                    return false;
                }
            } else if (pieces[index] == 'a') {
                if (input.match(/[a-zA-Z]/g)) {
                    values[index] = input;
                    index++;
                    return true;
                } else {
                    return false;
                }
            } else {
                if (pieces[index] != null) {
                    if (pieces[index] == '\\a') {
                        var v = 'a';
                    } else if (pieces[index] == '\\0') {
                        var v = '0';
                    } else if (pieces[index] == '[-]') {
                        if (input == '-' || input == '+') {
                            var v = input;
                        } else {
                            var v = ' ';
                        }
                    } else {
                        var v = pieces[index];
                    }
                    values[index] = v;
                    if (input == v) {
                        index++;
                        return true;
                    }
                }
            }

            index++;
        } while (pieces[index]);
    }

    /**
     * Create tokens for the mask
     */
    obj.prepare = function(mask) {
        pieces = [];
        for (var i = 0; i < mask.length; i++) {
            if (mask[i].match(/[0-9]|[a-z]|\\/g)) {
                if (mask[i] == 'y' && mask[i+1] == 'y' && mask[i+2] == 'y' && mask[i+3] == 'y') {
                    pieces.push('yyyy');
                    i += 3;
                } else if (mask[i] == 'y' && mask[i+1] == 'y') {
                    pieces.push('yy');
                    i++;
                } else if (mask[i] == 'm' && mask[i+1] == 'm' && mask[i+2] == 'm' && mask[i+3] == 'm') {
                    pieces.push('mmmm');
                    i += 3;
                } else if (mask[i] == 'm' && mask[i+1] == 'm' && mask[i+2] == 'm') {
                    pieces.push('mmm');
                    i += 2;
                } else if (mask[i] == 'm' && mask[i+1] == 'm') {
                    pieces.push('mm');
                    i++;
                } else if (mask[i] == 'd' && mask[i+1] == 'd') {
                    pieces.push('dd');
                    i++;
                } else if (mask[i] == 'h' && mask[i+1] == 'h' && mask[i+2] == '2' && mask[i+3] == '4') {
                    pieces.push('hh24');
                    i += 3;
                } else if (mask[i] == 'h' && mask[i+1] == 'h') {
                    pieces.push('hh');
                    i++;
                } else if (mask[i] == 'm' && mask[i+1] == 'i') {
                    pieces.push('mi');
                    i++;
                } else if (mask[i] == 's' && mask[i+1] == 's') {
                    pieces.push('ss');
                    i++;
                } else if (mask[i] == 'a' && mask[i+1] == 'm') {
                    pieces.push('am');
                    i++;
                } else if (mask[i] == 'p' && mask[i+1] == 'm') {
                    pieces.push('pm');
                    i++;
                } else if (mask[i] == '\\' && mask[i+1] == '0') {
                    pieces.push('\\0');
                    i++;
                } else if (mask[i] == '\\' && mask[i+1] == 'a') {
                    pieces.push('\\a');
                    i++;
                } else {
                    pieces.push(mask[i]);
                }
            } else {
                if (mask[i] == '#' && mask[i+1] == '.' && mask[i+2] == '#' && mask[i+3] == '#') {
                    pieces.push('#.##');
                    i += 3;
                } else if (mask[i] == '#' && mask[i+1] == ',' && mask[i+2] == '#' && mask[i+3] == '#') {
                    pieces.push('#,##');
                    i += 3;
                } else if (mask[i] == '#' && mask[i+1] == ' ' && mask[i+2] == '#' && mask[i+3] == '#') {
                    pieces.push('# ##');
                    i += 3;
                } else if (mask[i] == '[' && mask[i+1] == '-' && mask[i+2] == ']') {
                    pieces.push('[-]');
                    i += 2;
                } else {
                    pieces.push(mask[i]);
                }
            }
        }
    }

    /** 
     * Thanks for the collaboration
     */
    obj.fromKeyCode = function(e) {
        var _to_ascii = {
            '188': '44',
            '109': '45',
            '190': '46',
            '191': '47',
            '192': '96',
            '220': '92',
            '222': '39',
            '221': '93',
            '219': '91',
            '173': '45',
            '187': '61', //IE Key codes
            '186': '59', //IE Key codes
            '189': '45'  //IE Key codes
        }

        var shiftUps = {
            "96": "~",
            "49": "!",
            "50": "@",
            "51": "#",
            "52": "$",
            "53": "%",
            "54": "^",
            "55": "&",
            "56": "*",
            "57": "(",
            "48": ")",
            "45": "_",
            "61": "+",
            "91": "{",
            "93": "}",
            "92": "|",
            "59": ":",
            "39": "\"",
            "44": "<",
            "46": ">",
            "47": "?"
        };

        var c = e.which;

        if (_to_ascii.hasOwnProperty(c)) {
            c = _to_ascii[c];
        }

        if (!e.shiftKey && (c >= 65 && c <= 90)) {
            c = String.fromCharCode(c + 32);
        } else if (e.shiftKey && shiftUps.hasOwnProperty(c)) {
            c = shiftUps[c];
        } else if (96 <= c && c <= 105) {
            c = String.fromCharCode(c - 48);
        } else {
            c = String.fromCharCode(c);
        }

        return c;
    }

    return obj;
})();

jSuites.mobile = (function(el, options) {
    var obj = {};
    obj.options = {};

    if (jSuites.el) {
        jSuites.el.addEventListener('mousedown', function(e) {
            if (e.target.classList.contains('option-title')) {
                if (e.target.classList.contains('selected')) {
                    e.target.classList.remove('selected');
                } else {
                    e.target.classList.add('selected');
                }
            }
        });
    }

    return obj;
})();

jSuites.pages = (function() {
    var container = null;
    var current = null;

    // Create a page
    var createPage = function(options, callback) {
        // Create page
        var page = document.createElement('div');
        page.classList.add('page');

        // Always hidden
        page.style.display = 'none';

        // Keep options
        page.options = options ? options : {};

        if (! current) {
            container.appendChild(page);
        } else {
            container.insertBefore(page, current.nextSibling);
        }

        jSuites.ajax({
            url: page.options.url,
            method: 'GET',
            success: function(result) {
                // Push to refresh controls
                jSuites.refresh(page, page.options.onpush);

                // Open page
                page.innerHTML = result;
                // Get javascript
                var script = page.getElementsByTagName('script');
                // Run possible inline scripts
                for (var i = 0; i < script.length; i++) {
                    // Get type
                    var type = script[i].getAttribute('type');
                    if (! type || type == 'text/javascript') {
                        eval(script[i].innerHTML);
                    }
                }
                // Set title
                page.setTitle = function(text) {
                    this.children[0].children[0].children[1].innerHTML = text;
                }
                // Show page
                if (! page.options.closed) {
                    showPage(page);
                }
                // Onload callback
                if (typeof(page.options.onload) == 'function') {
                    page.options.onload(page);
                }
                // Force callback
                if (typeof(callback) == 'function') {
                    callback(page);
                }
            }
        });

        return page;
    }

    var showPage = function(page, ignoreHistory, callback) {
        if (current) {
            if (current == page) {
                current = page;
            } else {
                // Keep scroll in the top
                window.scrollTo({ top: 0 });

                // Show page
                page.style.display = '';

                var a = Array.prototype.indexOf.call(container.children, current);
                var b = Array.prototype.indexOf.call(container.children, page);

                // Leave
                if (typeof(current.options.onleave) == 'function') {
                    current.options.onleave(current, page, ignoreHistory);
                }

                jSuites.slideLeft(container, (a < b ? 0 : 1), function() {
                    current.style.display = 'none';
                    current = page;
                });

                // Enter
                if (typeof(page.options.onenter) == 'function') {
                    page.options.onenter(page, current, ignoreHistory);
                }
            }
        } else {
            // Show
            page.style.display = '';

            // Keep current
            current = page;

            // Enter
            if (typeof(page.options.onenter) == 'function') {
                page.options.onenter(page);
            }
        }

        // Add history
        if (! ignoreHistory) {
            // Add history
            window.history.pushState({ route: page.options.route }, page.options.title, page.options.route);
        }

        // Callback
        if (typeof(callback) == 'function') {
            callback(page);
        }
    }

    // Init method
    var obj = function(route, mixed) {

        // Create page container
        if (! container) {
            container = document.querySelector('.pages');
            if (! container) {
                container = document.createElement('div');
                container.className = 'pages';
            }

            // Append container to the application
            if (jSuites.el) {
                jSuites.el.appendChild(container);
            } else {
                document.body.appendChild(container);
            }
        }

        if (! obj.pages[route]) {
            if (! route) {
                alert('Error, no route provided');
            } else {
                if (typeof(mixed) == 'function') {
                    var options = {};
                    var callback = mixed;
                } else {
                    // Page options
                    var options = mixed ? mixed : {};
                }

                // Closed
                options.closed = mixed && mixed.closed ? 1 : 0;
                // Keep Route
                options.route = route;

                // New page url
                if (! options.url) {
                    var routePath = route.split('#');
                    options.url = jSuites.pages.path + routePath[0] + '.html';
                }
                // Title
                if (! options.title) {
                    options.title = 'Untitled';
                }

                // Create new page
                obj.pages[route] = createPage(options, callback ? callback : null);
            }
        } else {
            // Update config
            if (mixed) {
                // History
                var ignoreHistory = 0;

                if (typeof(mixed) == 'function') {
                    var callback = mixed;
                } else {
                    if (typeof(mixed.onenter) == 'function') {
                        obj.pages[route].options.onenter = mixed.onenter;
                    }
                    if (typeof(mixed.onleave) == 'function') {
                        obj.pages[route].options.onleave = mixed.onleave;
                    }

                    // Ignore history
                    ignoreHistory = mixed.ignoreHistory ? 1 : 0; 
                }
            }

            showPage(obj.pages[route], ignoreHistory, callback ? callback : null);
        }
    }

    obj.pages = {};

    // Get page
    obj.get = function(route) {
        if (obj.pages[route]) {
            return obj.pages[route]; 
        }
    }

    obj.getContainer = function() {
        return container;
    }

    obj.destroy = function() {
        // Current is null
        current = null;
        // Destroy containers
        obj.pages = {};
        // Reset container
        if (container) {
            container.innerHTML = '';
        }
    }

    return obj;
})();

// Path
jSuites.pages.path = 'pages';

// Panel
jSuites.panel = (function() {
    // No initial panel declared
    var panel = null;

    var obj = function(route) {
        if (! panel) {
            obj.create(jSuites.pages.path + route + '.html');
        }

        // Show panel
        panel.style.display = '';

        // Add animation
        if (panel.classList.contains('panel-left')) {
            jSuites.slideLeft(panel, 1);
        } else {
            jSuites.slideRight(panel, 1);
        }
    }

    obj.create = function(route) {
        if (! panel) {
            // Create element
            panel = document.createElement('div');
            panel.classList.add('panel');
            panel.classList.add('panel-left');
            panel.style.display = 'none';

            // Bind to the app
            if (jSuites.el) {
                jSuites.el.appendChild(panel);
            } else {
                document.body.appendChild(panel);
            }
        }

        // Remote content
        if (route) {
	        var url = jSuites.pages.path + route + '.html';

            jSuites.ajax({
                url: url,
                method: 'GET',
                success: function(result) {
                    // Set content
                    panel.innerHTML = result;
                    // Get javascript
                    var script = panel.getElementsByTagName('script');
                    // Run possible inline scripts
                    for (var i = 0; i < script.length; i++) {
                        // Get type
                        var type = script[i].getAttribute('type');
                        if (! type || type == 'text/javascript') {
                            eval(script[i].innerHTML);
                        }
                    }
                }
            });
        }
    }

    obj.close = function() {
        if (panel) {
            // Animation
            if (panel.classList.contains('panel-left')) {
                jSuites.slideLeft(panel, 0, function() {
                    panel.style.display = 'none';
                });
            } else {
                jSuites.slideRight(panel, 0, function() {
                    panel.style.display = 'none';
                });
            }
        }
    }

    obj.get = function() {
        return panel;
    }

    obj.destroy = function() {
        panel.remove();
        panel = null;
    }

    return obj;
})();

jSuites.toolbar = (function(el, options) {
    var obj = {};
    obj.options = options;

    obj.selectItem = function(element) {
        var elements = toolbarContent.children;
        for (var i = 0; i < elements.length; i++) {
            elements[i].classList.remove('selected');
        }
        element.classList.add('selected');
    }

    obj.hide = function() {
        jSuites.slideBottom(toolbar, 0, function() {
            toolbar.style.display = 'none';
        });
    }

    obj.show = function() {
        toolbar.style.display = '';
        jSuites.slideBottom(toolbar, 1);
    }

    obj.get = function() {
        return toolbar;
    }

    obj.setBadge = function(index, value) {
        toolbarContent.children[index].children[1].firstChild.innerHTML = value;
    }

    obj.destroy = function() {
        toolbar.remove();
        toolbar = null;
    }

    var toolbar = document.createElement('div');
    toolbar.classList.add('jtoolbar');
    toolbar.onclick = function(e) {
        var element = jSuites.getElement(e.target, 'jtoolbar-item');
        if (element) {
            obj.selectItem(element);
        }
    }

    var toolbarContent = document.createElement('div');
    toolbar.appendChild(toolbarContent);

    for (var i = 0; i < options.items.length; i++) {
        var toolbarItem = document.createElement('div');
        toolbarItem.classList.add('jtoolbar-item');
        if (options.items[i].route) {
            toolbarItem.setAttribute('data-href', options.items[i].route);
            jSuites.pages(options.items[i].route, {
                closed: true,
                onenter: function() {
                    obj.selectItem(toolbarItem);
                }
            });
        }

        if (options.items[i].icon) {
            var toolbarIcon = document.createElement('i');
            toolbarIcon.classList.add('material-icons');
            toolbarIcon.innerHTML = options.items[i].icon;
            toolbarItem.appendChild(toolbarIcon);
        }

        var toolbarBadge = document.createElement('div');
        toolbarBadge.classList.add('jbadge');
        var toolbarBadgeContent = document.createElement('div');
        toolbarBadgeContent.innerHTML = options.items[i].badge ? options.items[i].badge : '';
        toolbarBadge.appendChild(toolbarBadgeContent);
        toolbarItem.appendChild(toolbarBadge);

        if (options.items[i].title) {
            var toolbarTitle = document.createElement('span');
            toolbarTitle.innerHTML = options.items[i].title;
            toolbarItem.appendChild(toolbarTitle);
        }

        toolbarContent.appendChild(toolbarItem);
    }

    el.toolbar = obj;

    el.appendChild(toolbar);

    return obj;
});

jSuites.actionsheet = (function() {
    var actionsheet = document.createElement('div');
    actionsheet.className = 'jactionsheet';
    actionsheet.style.display = 'none';

    var actionContent = document.createElement('div');
    actionContent.className = 'jactionsheet-content';
    actionsheet.appendChild(actionContent);

    var obj = function(options) {
        if (options) {
            obj.options = options;
        }

        // Reset container
        actionContent.innerHTML = '';

        // Create new elements
        for (var i = 0; i < obj.options.length; i++) {
            var actionGroup = document.createElement('div');
            actionGroup.className = 'jactionsheet-group';

            for (var j = 0; j < obj.options[i].length; j++) {
                var v = obj.options[i][j];
                var actionItem = document.createElement('div');
                var actionInput = document.createElement('input');
                actionInput.type = 'button';
                actionInput.value = v.title;
                if (v.className) {
                    actionInput.className = v.className; 
                }
                if (v.onclick) {
                    actionInput.onclick = v.onclick; 
                }
                if (v.action == 'cancel') {
                    actionInput.style.color = 'red';
                }
                actionItem.appendChild(actionInput);
                actionGroup.appendChild(actionItem);
            }

            actionContent.appendChild(actionGroup);
        }

        // Show
        actionsheet.style.display = '';

        // Append
        jSuites.el.appendChild(actionsheet);

        // Animation
        jSuites.slideBottom(actionContent, true);
    }

    obj.close = function() {
        if (actionsheet.style.display != 'none') {
            // Remove any existing actionsheet
            jSuites.slideBottom(actionContent, false, function() {
                actionsheet.remove();
                actionsheet.style.display = 'none';
            });
        }
    }

    var mouseUp = function(e) {
        obj.close();
    }

    actionsheet.addEventListener('mouseup', mouseUp);

    obj.options = {};

    return obj;
})();

/**
 * (c) jSuites modal
 * https://github.com/paulhodel/jsuites
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Modal
 */

jSuites.modal = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        url: null,
        onopen: null,
        onclose: null,
        closed: false,
        width: null,
        height: null,
        title: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Title
    if (! obj.options.title && el.getAttribute('title')) {
        obj.options.title = el.getAttribute('title');
    }

    var temp = document.createElement('div');
    for (var i = 0; i < el.children.length; i++) {
        temp.appendChild(el.children[i]);
    }

    obj.content = document.createElement('div');
    obj.content.className = 'jmodal_content';
    obj.content.innerHTML = el.innerHTML;

    for (var i = 0; i < temp.children.length; i++) {
        obj.content.appendChild(temp.children[i]);
    }

    obj.container = document.createElement('div');
    obj.container.className = 'jmodal';
    obj.container.appendChild(obj.content);

    if (obj.options.width) {
        obj.container.style.width = obj.options.width;
    }
    if (obj.options.height) {
        obj.container.style.height = obj.options.height;
    }
    if (obj.options.title) {
        obj.container.setAttribute('title', obj.options.title);
    } else {
        obj.container.classList.add('no-title');
    }
    el.innerHTML = '';
    el.style.display = 'none';
    el.appendChild(obj.container);

    // Backdrop
    var backdrop = document.createElement('div');
    backdrop.className = 'jmodal_backdrop';
    el.appendChild(backdrop);

    obj.open = function() {
        el.style.display = 'block';
        // Fullscreen
        const rect = obj.container.getBoundingClientRect();
        if (jSuites.getWindowWidth() < rect.width) {
            obj.container.style.top = '';
            obj.container.style.left = '';
            obj.container.classList.add('jmodal_fullscreen');
            jSuites.slideBottom(obj.container, 1);
        } else {
            backdrop.style.display = 'block';
        }
        // Current
        jSuites.modal.current = obj;
        // Event
        if (typeof(obj.options.onopen) == 'function') {
            obj.options.onopen(el, obj);
        }
    }

    obj.resetPosition = function() {
        obj.container.style.top = '';
        obj.container.style.left = '';
    }

    obj.isOpen = function() {
        return el.style.display != 'none' ? true : false;
    }

    obj.close = function() {
        el.style.display = 'none';
        // Backdrop
        backdrop.style.display = '';
        // Current
        jSuites.modal.current = null;
        // Remove fullscreen class
        obj.container.classList.remove('jmodal_fullscreen');
        // Event
        if (typeof(obj.options.onclose) == 'function') {
            obj.options.onclose(el, obj);
        }
    }

    if (! jSuites.modal.hasEvents) {
        jSuites.modal.current = obj;

        if ('ontouchstart' in document.documentElement === true) {
            document.addEventListener("touchstart", jSuites.modal.mouseDownControls);
        } else {
            document.addEventListener('mousedown', jSuites.modal.mouseDownControls);
            document.addEventListener('mousemove', jSuites.modal.mouseMoveControls);
            document.addEventListener('mouseup', jSuites.modal.mouseUpControls);
        }

        document.addEventListener('keydown', jSuites.modal.keyDownControls);

        jSuites.modal.hasEvents = true;
    }

    if (obj.options.url) {
        jSuites.ajax({
            url: obj.options.url,
            method: 'GET',
            success: function(data) {
                obj.content.innerHTML = data;

                if (! obj.options.closed) {
                    obj.open();
                }
            }
        });
    } else {
        if (! obj.options.closed) {
            obj.open();
        }
    }

    // Keep object available from the node
    el.modal = obj;

    return obj;
});

jSuites.modal.current = null;
jSuites.modal.position = null;

jSuites.modal.keyDownControls = function(e) {
    if (e.which == 27) {
        if (jSuites.modal.current) {
            jSuites.modal.current.close();
        }
    }
}

jSuites.modal.mouseUpControls = function(e) {
    if (jSuites.modal.current) {
        jSuites.modal.current.container.style.cursor = 'auto';
    }
    jSuites.modal.position = null;
}

jSuites.modal.mouseMoveControls = function(e) {
    if (jSuites.modal.current && jSuites.modal.position) {
        if (e.which == 1 || e.which == 3) {
            var position = jSuites.modal.position;
            jSuites.modal.current.container.style.top = (position[1] + (e.clientY - position[3]) + (position[5] / 2)) + 'px';
            jSuites.modal.current.container.style.left = (position[0] + (e.clientX - position[2]) + (position[4] / 2)) + 'px';
            jSuites.modal.current.container.style.cursor = 'move';
        } else {
            jSuites.modal.current.container.style.cursor = 'auto';
        }
    }
}

jSuites.modal.mouseDownControls = function(e) {
    jSuites.modal.position = [];

    if (e.target.classList.contains('jmodal')) {
        setTimeout(function() {
            // Get target info
            var rect = e.target.getBoundingClientRect();

            if (e.changedTouches && e.changedTouches[0]) {
                var x = e.changedTouches[0].clientX;
                var y = e.changedTouches[0].clientY;
            } else {
                var x = e.clientX;
                var y = e.clientY;
            }

            if (rect.width - (x - rect.left) < 50 && (y - rect.top) < 50) {
                setTimeout(function() {
                    jSuites.modal.current.close();
                }, 100);
            } else {
                if (e.target.getAttribute('title') && (y - rect.top) < 50) {
                    if (document.selection) {
                        document.selection.empty();
                    } else if ( window.getSelection ) {
                        window.getSelection().removeAllRanges();
                    }

                    jSuites.modal.position = [
                        rect.left,
                        rect.top,
                        e.clientX,
                        e.clientY,
                        rect.width,
                        rect.height,
                    ];
                }
            }
        }, 100);
    }
}


jSuites.notification = (function(options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        icon: null,
        name: 'Notification',
        date: null,
        title: null,
        message: null,
        timeout: 4000,
        autoHide: true,
        closeable: true,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    var notification = document.createElement('div');
    notification.className = 'jnotification';

    var notificationContainer = document.createElement('div');
    notificationContainer.className = 'jnotification-container';
    notification.appendChild(notificationContainer);

    var notificationHeader = document.createElement('div');
    notificationHeader.className = 'jnotification-header';
    notificationContainer.appendChild(notificationHeader);

    var notificationImage = document.createElement('div');
    notificationImage.className = 'jnotification-image';
    notificationHeader.appendChild(notificationImage);

    if (obj.options.icon) {
        var notificationIcon = document.createElement('img');
        notificationIcon.src = obj.options.icon;
        notificationImage.appendChild(notificationIcon);
    }

    var notificationName = document.createElement('div');
    notificationName.className = 'jnotification-name';
    notificationName.innerHTML = obj.options.name;
    notificationHeader.appendChild(notificationName);

    if (obj.options.closeable == true) {
        var notificationClose = document.createElement('div');
        notificationClose.className = 'jnotification-close';
        notificationClose.onclick = function() {
            obj.hide();
        }
        notificationHeader.appendChild(notificationClose);
    }

    var notificationDate = document.createElement('div');
    notificationDate.className = 'jnotification-date';
    notificationHeader.appendChild(notificationDate);

    var notificationContent = document.createElement('div');
    notificationContent.className = 'jnotification-content';
    notificationContainer.appendChild(notificationContent);

    if (obj.options.title) {
        var notificationTitle = document.createElement('div');
        notificationTitle.className = 'jnotification-title';
        notificationTitle.innerHTML = obj.options.title;
        notificationContent.appendChild(notificationTitle);
    }

    var notificationMessage = document.createElement('div');
    notificationMessage.className = 'jnotification-message';
    notificationMessage.innerHTML = obj.options.message;
    notificationContent.appendChild(notificationMessage);

    obj.show = function() {
        document.body.appendChild(notification);
        if (jSuites.getWindowWidth() > 800) { 
            jSuites.fadeIn(notification);
        } else {
            jSuites.slideTop(notification, 1);
        }
    }

    obj.hide = function() {
        if (jSuites.getWindowWidth() > 800) { 
            jSuites.fadeOut(notification, function() {
                notification.parentNode.removeChild(notification);
            });
        } else {
            jSuites.slideTop(notification, 0, function() {
                notification.parentNode.removeChild(notification);
            });
        }
    };

    obj.show();

    if (obj.options.autoHide == true) {
        setTimeout(function() {
            obj.hide();
        }, obj.options.timeout);
    }

    if (jSuites.getWindowWidth() < 800) {
        notification.addEventListener("swipeup", function(e) {
            obj.hide();
            e.preventDefault();
            e.stopPropagation();
        });
    }

    return obj;
});

jSuites.rating = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        number: 5,
        value: 0,
        tooltip: [ 'Very bad', 'Bad', 'Average', 'Good', 'Very good' ],
        onchange: null,
    };

    // Loop through the initial configuration
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Class
    el.classList.add('jrating');

    // Add elements
    for (var i = 0; i < obj.options.number; i++) {
        var div = document.createElement('div');
        div.setAttribute('data-index', (i + 1))
        div.setAttribute('title', obj.options.tooltip[i])
        el.appendChild(div);
    }

    // Set value
    obj.setValue = function(index) {
        for (var i = 0; i < obj.options.number; i++) {
            if (i < index) {
                el.children[i].classList.add('jrating-selected');
            } else {
                el.children[i].classList.remove('jrating-over');
                el.children[i].classList.remove('jrating-selected');
            }
        }

        obj.options.value = index;

        if (typeof(obj.options.onchange) == 'function') {
            obj.options.onchange(el, index);
        }
    }

    obj.getValue = function() {
        return obj.options.value;
    }

    if (obj.options.value) {
        for (var i = 0; i < obj.options.number; i++) {
            if (i < obj.options.value) {
                el.children[i].classList.add('jrating-selected');
            }
        }
    }

    // Events
    el.addEventListener("click", function(e) {
        var index = e.target.getAttribute('data-index');
        if (index != undefined) {
            if (index == obj.options.value) {
                obj.setValue(0);
            } else {
                obj.setValue(index);
            }
        }
    });

    el.addEventListener("mouseover", function(e) {
        var index = e.target.getAttribute('data-index');
        for (var i = 0; i < obj.options.number; i++) {
            if (i < index) {
                el.children[i].classList.add('jrating-over');
            } else {
                el.children[i].classList.remove('jrating-over');
            }
        }
    });

    el.addEventListener("mouseout", function(e) {
        for (var i = 0; i < obj.options.number; i++) {
            el.children[i].classList.remove('jrating-over');
        }
    });

    el.rating = obj;

    return obj;
});


/**
 * (c) Image slider
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Image Slider
 */

jSuites.slider = (function(el, options) {
    var obj = {};
    obj.options = {};
    obj.currentImage = null;

    if (options) {
        obj.options = options;
    }

    // Items
    obj.options.items = [];

    if (! el.classList.contains('jslider')) {
        el.classList.add('jslider');

        // Create container
        var container = document.createElement('div');
        container.className = 'jslider-container';

        // Move children inside
        if (el.children.length > 0) {
            // Keep children items
            for (var i = 0; i < el.children.length; i++) {
                obj.options.items.push(el.children[i]);
            }
        }
        if (obj.options.items.length > 0) {
            for (var i = 0; i < obj.options.items.length; i++) {
                obj.options.items[i].classList.add('jfile');
                var index = obj.options.items[i].src.lastIndexOf('/');
                if (index < 0) {
                    obj.options.items[i].setAttribute('data-name', obj.options.items[i].src);
                } else {
                    obj.options.items[i].setAttribute('data-name', obj.options.items[i].src.substr(index + 1));
                }
                var index = obj.options.items[i].src.lastIndexOf('/');

                container.appendChild(obj.options.items[i]);
            }
        }
        el.appendChild(container);
        // Add close buttom
        var close = document.createElement('div');
        close.className = 'jslider-close';
        close.innerHTML = '';
        close.onclick =  function() {
            obj.close();
        }
        el.appendChild(close);
    } else {
        var container = el.querySelector('slider-container');
    }

    obj.show = function(target) {
        if (! target) {
            var target = container.children[0];
        }

        if (! container.classList.contains('jslider-preview')) {
            container.classList.add('jslider-preview');
            close.style.display = 'block';
        }

        // Hide all images
        for (var i = 0; i < container.children.length; i++) {
            container.children[i].style.display = 'none';
        }

        // Show clicked only
        target.style.display = 'block';

        // Is there any previous
        if (target.previousSibling) {
            container.classList.add('jslider-left');
        } else {
            container.classList.remove('jslider-left');
        }

        // Is there any next
        if (target.nextSibling) {
            container.classList.add('jslider-right');
        } else {
            container.classList.remove('jslider-right');
        }

        obj.currentImage = target;
    }

    obj.open = function() {
        obj.show();

        // Event
        if (typeof(obj.options.onopen) == 'function') {
            obj.options.onopen(el);
        }
    }

    obj.close = function() {
        container.classList.remove('jslider-preview');
        container.classList.remove('jslider-left');
        container.classList.remove('jslider-right');

        for (var i = 0; i < container.children.length; i++) {
            container.children[i].style.display = '';
        }

        close.style.display = '';

        obj.currentImage = null;

        // Event
        if (typeof(obj.options.onclose) == 'function') {
            obj.options.onclose(el);
        }
    }

    obj.reset = function() {
        container.innerHTML = '';
    }

    obj.addFile = function(v, ignoreEvents) {
        var img = document.createElement('img');
        img.setAttribute('data-lastmodified', v.lastmodified);
        img.setAttribute('data-name', v.name);
        img.setAttribute('data-size', v.size);
        img.setAttribute('data-extension', v.extension);
        img.setAttribute('data-cover', v.cover);
        img.setAttribute('src', v.file);
        img.className = 'jfile';
        container.appendChild(img);
        obj.options.items.push(img);

        // Onchange
        if (! ignoreEvents) {
            if (typeof(obj.options.onchange) == 'function') {
                obj.options.onchange(el, v);
            }
        }
    }

    obj.addFiles = function(files) {
        for (var i = 0; i < files.length; i++) {
            obj.addFile(files[i]);
        }
    }

    obj.next = function() {
        if (obj.currentImage.nextSibling) {
            obj.show(obj.currentImage.nextSibling);
        }
    }
    
    obj.prev = function() {
        if (obj.currentImage.previousSibling) {
            obj.show(obj.currentImage.previousSibling);
        }
    }

    obj.getData = function() {
        return jSuites.getFiles(container);
    }

    // Append data
    if (obj.options.data && obj.options.data.length) {
        for (var i = 0; i < obj.options.data.length; i++) {
            if (obj.options.data[i]) {
                obj.addFile(obj.options.data[i]);
            }
        }
    }

    // Allow insert
    if (obj.options.allowAttachment) {
        var attachmentInput = document.createElement('input');
        attachmentInput.type = 'file';
        attachmentInput.className = 'slider-attachment';
        attachmentInput.setAttribute('accept', 'image/*');
        attachmentInput.style.display = 'none';
        attachmentInput.onchange = function() {
            var reader = [];

            for (var i = 0; i < this.files.length; i++) {
                var type = this.files[i].type.split('/');

                if (type[0] == 'image') {
                    var extension = this.files[i].name;
                    extension = extension.split('.');
                    extension = extension[extension.length-1];

                    var file = {
                        size: this.files[i].size,
                        name: this.files[i].name,
                        extension: extension,
                        cover: 0,
                        lastmodified: this.files[i].lastModified,
                    }

                    reader[i] = new FileReader();
                    reader[i].addEventListener("load", function (e) {
                        file.file = e.target.result;
                        obj.addFile(file);
                    }, false);

                    reader[i].readAsDataURL(this.files[i]);
                } else {
                    alert('The extension is not allowed');
                }
            };
        }

        var attachmentIcon = document.createElement('i');
        attachmentIcon.innerHTML = 'attachment';
        attachmentIcon.className = 'jslider-attach material-icons';
        attachmentIcon.onclick = function() {
            jSuites.click(attachmentInput);
        }

        el.appendChild(attachmentInput);
        el.appendChild(attachmentIcon);
    }

    // Push to refresh
    var longTouchTimer = null;

    var mouseDown = function(e) {
        if (e.target.tagName == 'IMG') {
            // Remove
            var targetImage = e.target;
            longTouchTimer = setTimeout(function() {
                if (e.target.src.substr(0,4) == 'data') {
                    e.target.remove();
                } else {
                    if (e.target.classList.contains('jremove')) {
                        e.target.classList.remove('jremove');
                    } else {
                        e.target.classList.add('jremove');
                    }
                }

                // Onchange
                if (typeof(obj.options.onchange) == 'function') {
                    obj.options.onchange(el, e.target);
                }
            }, 1000);
        }
    }

    var mouseUp = function(e) {
        if (longTouchTimer) {
            clearTimeout(longTouchTimer);
        }

        // Open slider
        if (e.target.tagName == 'IMG') {
            if (! e.target.classList.contains('jremove')) {
                obj.show(e.target);
            }
        } else {
            // Arrow controls
            if (e.target.clientWidth - e.offsetX < 40) {
                // Show next image
                obj.next();
            } else if (e.offsetX < 40) {
                // Show previous image
                obj.prev();
            }
        }
    }

    container.addEventListener('mousedown', mouseDown);
    container.addEventListener('touchstart', mouseDown);
    container.addEventListener('mouseup', mouseUp);
    container.addEventListener('touchend', mouseUp);

    // Add global events
    el.addEventListener("swipeleft", function(e) {
        obj.next();
        e.preventDefault();
        e.stopPropagation();
    });

    el.addEventListener("swiperight", function(e) {
        obj.prev();
        e.preventDefault();
        e.stopPropagation();
    });


    el.slider = obj;

    return obj;
});

/**
 * (c) jTools v1.0.1 - Element sorting
 * https://github.com/paulhodel/jtools
 *
 * @author: Paul Hodel <paul.hodel@gmail.com>
 * @description: Element drag and drop sorting
 */

jSuites.sorting = (function(el, options) {
    el.classList.add('jsorting');

    el.addEventListener('dragstart', function(e) {
        e.target.classList.add('dragging');
    });

    el.addEventListener('dragover', function(e) {
        e.preventDefault();

        if (e.target.clientHeight / 2 > e.offsetY) {
            e.path[0].style.borderTop = '1px dotted #ccc';
            e.path[0].style.borderBottom = '';
        } else {
            e.path[0].style.borderTop = '';
            e.path[0].style.borderBottom = '1px dotted #ccc';
        }
    });

    el.addEventListener('dragleave', function(e) {
        e.path[0].style.borderTop = '';
        e.path[0].style.borderBottom = '';
    });

    el.addEventListener('dragend', function(e) {
        e.path[1].querySelector('.dragging').classList.remove('dragging');
    });

    el.addEventListener('drop', function(e) {
        var element = e.path[1].querySelector('.dragging');

        if (e.target.clientHeight / 2 > e.offsetY) {
            e.path[1].insertBefore(element, e.path[0]);
        } else {
            e.path[1].insertBefore(element, e.path[0].nextSibling);
        }

        e.path[0].style.borderTop = '';
        e.path[0].style.borderBottom = '';
    });

    for (var i = 0; i < el.children.length; i++) {
        el.children[i].setAttribute('draggable', 'true');
    };

    return el;
});

jSuites.tabs = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        data: null,
        allowCreate: false,
        onload: null,
        onchange: null,
        oncreate: null,
        animation: false,
        create: null,
        autoName: false,
        prefixName: '',
        hideHeaders: false,
    };

    // Loop through the initial configuration
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Class
    el.classList.add('jtabs');

    if (obj.options.animation == true) {
        // Border
        var border = document.createElement('div');
        border.className = 'jtabs-border';
        el.appendChild(border);

        var setBorder = function(index) {
            var rect = headers.children[index].getBoundingClientRect();
            var rectContent = content.children[index].getBoundingClientRect();
            border.style.width = rect.width + 'px';
            border.style.left = (rect.left - rectContent.left) + 'px';
            border.style.top = rect.height + 'px';
        }
    }

    // Set value
    obj.open = function(index) {
        for (var i = 0; i < headers.children.length; i++) {
            headers.children[i].classList.remove('jtabs-selected');
            if (content.children[i]) {
                content.children[i].classList.remove('jtabs-selected');
            }
        }

        headers.children[index].classList.add('jtabs-selected');
        if (content.children[index]) {
            content.children[index].classList.add('jtabs-selected');
        }

        // Hide
        if (obj.options.hideHeaders == true && (headers.children.length < 2 && obj.options.allowCreate == false)) {
            headers.style.display = 'none';
        } else {
            headers.style.display = '';
            // Set border
            if (obj.options.animation == true) {
                setTimeout(function() {
                    setBorder(index);
                }, 100);
            }
        }
    }

    obj.selectIndex = function(a) {
        var index = Array.prototype.indexOf.call(headers.children, a);
        if (index >= 0) {
            obj.open(index);
        }
    }

    obj.create = function(title, div) {
        if (typeof(obj.options.create) == 'function') {
            obj.options.create();
        } else {
            obj.appendElement(title, div);

            if (typeof(obj.options.oncreate) == 'function') {
                obj.options.oncreate(el, div)
            }
        }
    }

    obj.appendElement = function(title, div) {
        if (! title) {
            if (obj.options.autoName == true) {
                var title = obj.options.prefixName;
                title += ' ' + (parseInt(content.children.length) + 1);
            } else {
                var title = prompt('Title?', '');
            }
        }

        if (title) {
            // Add headers
            var header = document.createElement('div');
            header.innerHTML = title;
            if (obj.options.allowCreate) {
                headers.insertBefore(header, headers.lastChild);
            } else {
                headers.appendChild(header);
            }

            // Add content
            if (! div) {
                var div = document.createElement('div');
            }
            content.appendChild(div);

            // Open new tab
            obj.selectIndex(header);
        }
    }

    // Create from data
    if (obj.options.data) {
        // Make sure the component is blank
        el.innerHTML = '';
        var headers = document.createElement('div');
        var content = document.createElement('div');
        headers.classList.add('jtabs-headers');
        content.classList.add('jtabs-content');
        el.appendChild(headers);
        el.appendChild(content);

        for (var i = 0; i < obj.options.data.length; i++) {
            var headersItem = document.createElement('div');
            headers.appendChild(headersItem);
            var contentItem = document.createElement('div');
            content.appendChild(contentItem);

            headersItem.innerHTML = obj.options.data[i].title;
            if (obj.options.data[i].content) {
                contentItem.innerHTML = obj.options.data[i].content;
            } else if (obj.options.data[i].url) {
                jSuites.ajax({
                    url: obj.options.data[i].url,
                    type: 'GET',
                    success: function(result) {
                        contentItem.innerHTML = result;
                    },
                    complete: function() {
                        if (typeof(obj.options.onload) == 'function') {
                            obj.options.onload(el);

                            obj.open(0);
                        }
                    }
                });
            }
        }
    } else if (el.children[0] && el.children[1]) {
        // Create from existing elements
        var headers = el.children[0];
        var content = el.children[1];
        headers.classList.add('jtabs-headers');
        content.classList.add('jtabs-content');
    } else {
        el.innerHTML = '';
        var headers = document.createElement('div');
        var content = document.createElement('div');
        headers.classList.add('jtabs-headers');
        content.classList.add('jtabs-content');
        el.appendChild(headers);
        el.appendChild(content);
    }

    // New
    if (obj.options.allowCreate == true) {
        var add = document.createElement('i');
        add.className = 'jtabs-add';
        headers.appendChild(add);
    }

    // Events
    headers.addEventListener("click", function(e) {
        if (e.target.tagName == 'DIV') {
            obj.selectIndex(e.target);
        } else {
            obj.create();
        }
    });

    if (headers.children.length) {
        obj.open(0);
    }

    el.tabs = obj;

    return obj;
});

jSuites.tags = (function(el, options) {
    var obj = {};
    obj.options = {};

    /**
     * @typedef {Object} defaults
     * @property {(string|Array)} value - Initial value of the compontent
     * @property {number} limit - Max number of tags inside the element
     * @property {string} search - The URL for suggestions
     * @property {string} placeholder - The default instruction text on the element
     * @property {validation} validation - Method to validate the tags
     * @property {requestCallback} onbeforechange - Method to be execute before any changes on the element
     * @property {requestCallback} onchange - Method to be execute after any changes on the element
     * @property {requestCallback} onfocus - Method to be execute when on focus
     * @property {requestCallback} onblur - Method to be execute when on blur
     * @property {requestCallback} onload - Method to be execute when the element is loaded
     */
    var defaults = {
        value: null,
        limit: null,
        limitMessage: 'The limit of entries is: ',
        search: null,
        placeholder: null,
        validation: null,
        onbeforechange: null,
        onchange: null,
        onfocus: null,
        onblur: null,
        onload: null,
        colors: null,
    };

    // Loop through though the default configuration
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    // Search helpers
    var searchContainer = null;
    var searchTerms = null;
    var searchIndex = 0;
    var searchTimer = 0;

    /**
     * Add a new tag to the element
     * @param {(?string|Array)} value - The value of the new element
     */
    obj.add = function(value, focus) {
        if (typeof(obj.options.onbeforechange) == 'function') {
            var v = obj.options.onbeforechange(el, obj, value);
            if (v != null) {
                value = v;
            }
        }

        // Close search
        if (searchContainer) {
            searchContainer.style.display = '';
        }

        if (obj.options.limit > 0 && el.children.length >= obj.options.limit) {
            alert(obj.options.limitMessage + ' ' + obj.options.limit);
        } else {
            // Get node
            var node = getSelectionStart();

            // Mix argument string or array
            if (! value || typeof(value) == 'string') {
                var div = document.createElement('div');
                div.innerHTML = value ? value : '<br>';
                if (node && node.parentNode.classList.contains('jtags')) {
                    el.insertBefore(div, node.nextSibling);
                } else {
                    el.appendChild(div);
                }
            } else {
                if (node && node.parentNode.classList.contains('jtags')) {
                    if (! node.innerText.replace("\n", "")) {
                        el.removeChild(node);
                    }
                }

                for (var i = 0; i <= value.length; i++) {
                    if (! obj.options.limit || el.children.length < obj.options.limit) {
                        var div = document.createElement('div');
                        div.innerHTML = value[i] ? value[i] : '<br>';
                        el.appendChild(div);
                    }
                }
            }

            // Place caret
            if (focus) {
                setTimeout(function() {
                    caret(div);
                }, 0);
            }

            // Filter
            filter();

            if (typeof(obj.options.onchange) == 'function') {
                obj.options.onchange(el, obj, value ? value : '');
            }
        }
    }

    /**
     * Get all tags in the element
     * @return {Array} data - All tags as an array
     */
    obj.getData = function() {
        var data = [];
        for (var i = 0; i < el.children.length; i++) {
            var value = obj.getValue(i);
            if (value) {
                var id = el.children[i].getAttribute('data-id');
                if (! id) {
                    id = value;
                }
                data.push({ id: id, value: value });
            }
        }
        return data;
    }

    /**
     * Get the value of one tag. Null for all tags
     * @param {?number} index - Tag index number. Null for all tags.
     * @return {string} value - All tags separated by comma
     */
    obj.getValue = function(index) {
        var value = null;

        if (index != null) {
            // Get one individual value
            value = el.children[index].innerText.replace("\n", "");
        } else {
            // Get all
            var data = [];
            for (var i = 0; i < el.children.length; i++) {
                value = el.children[i].innerText.replace("\n", "");
                if (value) {
                    data.push(obj.getValue(i));
                }
            }
            value = data.join(',');
        }

        return value;
    }

    /**
     * Set the value of the element based on a string separeted by (,|;|\r\n)
     * @param {string} value - A string with the tags
     */
    obj.setValue = function(text) {
        // Remove whitespaces
        text = text.trim();

        if (text) {
            // Tags
            var data = extractTags(text);
            // Add tags to the element
            obj.add(data);
        }
    }

    obj.reset = function() {
        el.innerHTML = '<div><br></div>';
    }

    /**
     * Verify if all tags in the element are valid
     * @return {boolean}
     */
    obj.isValid = function() {
        var test = 0;
        for (var i = 0; i < el.children.length; i++) {
            if (el.children[i].classList.contains('jtags_error')) {
                test++;
            }
        }
        return test == 0 ? true : false;
    }

    /**
     * Add one element from the suggestions to the element
     * @param {object} item - Node element in the suggestions container
     */ 
    obj.selectIndex = function(item) {
        // Reset terms
        searchTerms = '';
        var node = getSelectionStart();
        // Append text to the caret
        node.innerText = item.children[1].innerText;
        // Set node id
        if (item.children[1].getAttribute('data-id')) {
            node.setAttribute('data-id', item.children[1].getAttribute('data-id'));
        }
        // Close container
        if (searchContainer) {
            searchContainer.style.display = '';
            searchContainer.innerHTML = '';
        }
        // Remove any error
        node.classList.remove('jtags_error');
        // Add new item
        obj.add();
    }

    /**
     * Search for suggestions
     * @param {object} node - Target node for any suggestions
     */
    obj.search = function(node) {
        // Create and append search container to the DOM
        if (! searchContainer) {
            var div = document.createElement('div');
            div.style.position = 'relative';
            el.parentNode.insertBefore(div, el.nextSibling);

            // Create container
            searchContainer = document.createElement('div');
            searchContainer.classList.add('jtags_search');
            div.appendChild(searchContainer);
        }

        // Search for
        var terms = node.anchorNode.nodeValue;

        // Search
        if (node.anchorNode.nodeValue && terms != searchTerms) {
            // Terms
            searchTerms = node.anchorNode.nodeValue;
            // Reset index
            searchIndex = 0;
            // Get remove results
            jSuites.ajax({
                url: obj.options.search + searchTerms,
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    // Reset container
                    searchContainer.innerHTML = '';

                    // Print results
                    if (! data.length) {
                        // Show container
                        searchContainer.style.display = '';
                    } else {
                        // Show container
                        searchContainer.style.display = 'block';

                        // Show items
                        var len = data.length < 11 ? data.length : 10;
                        for (var i = 0; i < len; i++) {
                            var div = document.createElement('div');
                            if (i == 0) {
                                div.classList.add('selected');
                            }
                            var img = document.createElement('img');
                            if (data[i].image) {
                                img.src = data[i].image;
                            } else {
                                img.style.display = 'none';
                            }
                            div.appendChild(img);

                            var item = document.createElement('div');
                            item.setAttribute('data-id', data[i].id);
                            item.innerHTML = data[i].name;
                            div.onclick = function() {
                                // Add item
                                obj.selectIndex(this);
                            }
                            div.appendChild(item);
                            // Append item to the container
                            searchContainer.appendChild(div);
                        }
                    }
                }
            });
        }
    }

    // Destroy tags element
    obj.destroy = function() {
        // Bind events
        el.removeEventListener('mouseup', tagsMouseUp);
        el.removeEventListener('keydown', tagsKeyDown);
        el.removeEventListener('keyup', tagsKeyUp);
        el.removeEventListener('paste', tagsPaste);
        el.removeEventListener('focus', tagsFocus);
        el.removeEventListener('blur', tagsBlur);
        // Remove element
        el.parentNode.removeChild(el);
    }

    var getRandomColor = function(index) {
        var rand = function(min, max) {
            return min + Math.random() * (max - min);
        }
        return 'hsl(' + rand(1, 360) + ',' + rand(40, 70) + '%,' + rand(65, 72) + '%)';
    }

    /**
     * Filter tags
     */
    var filter = function() {
        for (var i = 0; i < el.children.length; i++) {
            // Create label design
            if (! obj.getValue(i)) {
                el.children[i].classList.remove('jtags_label');
            } else {
                el.children[i].classList.add('jtags_label');

                // Validation in place
                if (typeof(obj.options.validation) == 'function') {
                    if (obj.getValue(i)) {
                        if (! obj.options.validation(el.children[i], el.children[i].innerText, el.children[i].getAttribute('data-id'))) {
                            el.children[i].classList.add('jtags_error');
                        } else {
                            el.children[i].classList.remove('jtags_error');
                        }
                    } else {
                        el.children[i].classList.remove('jtags_error');
                    }
                }
            }
        }
    }

    /**
     * Place caret in the element node
     */
    var caret = function(e) {
        var range = document.createRange();
        var sel = window.getSelection();
        range.setStart(e, e.innerText.length);
        range.collapse(true);
        sel.removeAllRanges();
        sel.addRange(range);
    }

    /**
     * Selection
     */
    var getSelectionStart = function() {
        var node = document.getSelection().anchorNode;
        if (node) {
            return (node.nodeType == 3 ? node.parentNode : node);
        } else {
            return null;
        }
    }

    /**
     * Extract tags from a string
     * @param {string} text - Raw string
     * @return {Array} data - Array with extracted tags
     */
    var extractTags = function(text) {
        /** @type {Array} */
        var data = [];

        /** @type {string} */
        var word = '';

        // Remove whitespaces
        text = text.trim();

        if (text) {
            for (var i = 0; i < text.length; i++) {
                if (text[i] == ',' || text[i] == ';' || text[i] == '\r\n') {
                    if (word) {
                        data.push(word);
                        word = '';
                    }
                } else {
                    word += text[i];
                }
            }

            if (word) {
                data.push(word);
            }
        }

        return data;
    }

    /** @type {number} */
    var anchorOffset = 0;

    /**
     * Processing event keydown on the element
     * @param e {object}
     */
    var tagsKeyDown = function(e) {
        // Anchoroffset
        anchorOffset = window.getSelection().anchorOffset;

        // Verify content
        if (! el.children.length) {
            var div = document.createElement('div');
            div.innerHTML = '<br>';
            el.appendChild(div);
        }
        // Comma
        if (e.which == 9 || e.which == 186 || e.which == 188) {
            var n = window.getSelection().anchorOffset;
            if (n > 1) {
                if (! obj.options.limit || el.children.length < obj.options.limit) {
                    obj.add('', true);
                }
            }
            e.preventDefault();
        } else if (e.which == 13) {
            // Enter
            if (searchContainer && searchContainer.style.display != '') {
                obj.selectIndex(searchContainer.children[searchIndex]);
            } else {
                var n = window.getSelection().anchorOffset;
                if (n > 1) {
                    if (! obj.options.limit || el.children.length < obj.options.limit) {
                        obj.add('', true);
                    }
                }
            }
            e.preventDefault();
        } else if (e.which == 38) {
            // Up
            if (searchContainer && searchContainer.style.display != '') {
                searchContainer.children[searchIndex].classList.remove('selected');
                if (searchIndex > 0) {
                    searchIndex--;
                }
                searchContainer.children[searchIndex].classList.add('selected');
                e.preventDefault();
            }
        } else if (e.which == 40) {
            // Down
            if (searchContainer && searchContainer.style.display != '') {
                searchContainer.children[searchIndex].classList.remove('selected');
                if (searchIndex < 9) {
                    searchIndex++;
                }
                searchContainer.children[searchIndex].classList.add('selected');
                e.preventDefault();
            }
        }
    }

    /**
     * Processing event keyup on the element
     * @param e {object}
     */
    var tagsKeyUp = function(e) {
        if (e.which == 39) {
            var n = window.getSelection().anchorOffset;
            if (n > 1 && n == anchorOffset) {
                obj.add();
            }
        } else if (e.which == 13 || e.which == 38 || e.which == 40) {
            e.preventDefault();
        } else {
            if (searchTimer) {
                clearTimeout(searchTimer);
            }

            searchTimer = setTimeout(function() {
                // Current node
                var node = window.getSelection();
                // Search
                if (obj.options.search) {
                    obj.search(node);
                }
                searchTimer = null;
            }, 300);
        }

        filter();
    }

    /**
     * Processing event paste on the element
     * @param e {object}
     */
    var tagsPaste =  function(e) {
        if (e.clipboardData || e.originalEvent.clipboardData) {
            var html = (e.originalEvent || e).clipboardData.getData('text/html');
            var text = (e.originalEvent || e).clipboardData.getData('text/plain');
        } else if (window.clipboardData) {
            var html = window.clipboardData.getData('Html');
            var text = window.clipboardData.getData('Text');
        }

        obj.setValue(text);
        e.preventDefault();
    }

    /**
     * Processing event mouseup on the element
     * @param e {object}
     */
    var tagsMouseUp = function(e) {
        if (e.target.parentNode && e.target.parentNode.classList.contains('jtags')) {
            if (e.target.classList.contains('jtags_label') || e.target.classList.contains('jtags_error')) {
                const rect = e.target.getBoundingClientRect();
                if (rect.width - (e.clientX - rect.left) < 16) {
                    el.removeChild(e.target);
                    el.focus();
                }
            }
        }

        if (searchContainer) {
            searchContainer.style.display = '';
        }
    }

    /**
     * Processing event focus on the element
     * @param e {object}
     */
    var tagsFocus = function(e) {
        if (! el.children.length || obj.getValue(el.children.length - 1)) {
            if (! obj.options.limit || el.children.length < obj.options.limit) {
                var div = document.createElement('div');
                div.innerHTML = '<br>';
                el.appendChild(div);
            }
        }

        if (typeof(obj.options.onfocus) == 'function') {
            obj.options.onfocus(el, obj, obj.getValue());
        }
    }

    /**
     * Processing event blur on the element
     * @param e {object}
     */
    var tagsBlur = function(e) {
        if (searchContainer) {
            setTimeout(function() {
                searchContainer.style.display = '';
            }, 200);
        }

        for (var i = 0; i < el.children.length - 1; i++) {
            // Create label design
            if (! obj.getValue(i)) {
                el.removeChild(el.children[i]);
            }
        }

        if (typeof(obj.options.onblur) == 'function') {
            obj.options.onblur(el, obj, obj.getValue());
        }
    }

    // Bind events
    el.addEventListener('mouseup', tagsMouseUp);
    el.addEventListener('keydown', tagsKeyDown);
    el.addEventListener('keyup', tagsKeyUp);
    el.addEventListener('paste', tagsPaste);
    el.addEventListener('focus', tagsFocus);
    el.addEventListener('blur', tagsBlur);

    // Prepare container
    el.classList.add('jtags');
    el.setAttribute('contenteditable', true);
    el.setAttribute('spellcheck', false);

    if (obj.options.placeholder) {
        el.placeholder = obj.options.placeholder;
    }

    // Make sure element is empty
    if (obj.options.value) {
        obj.setValue(obj.options.value);
    } else {
        el.innerHTML = '<div><br></div>';
    }

    if (typeof(obj.options.onload) == 'function') {
        obj.options.onload(el, obj);
    }

    el.tags = obj;

    return obj;
});

jSuites.tracker = (function(el, options) {
    var obj = {};
    obj.options = {};

    // Default configuration
    var defaults = {
        url: null,
        message: 'Are you sure? There are unsaved information in your form',
        ignore: false,
        currentHash: null,
        submitButton:null,
        onload: null,
        onbeforesave: null,
        onsave: null,
    };

    // Loop through our object
    for (var property in defaults) {
        if (options && options.hasOwnProperty(property)) {
            obj.options[property] = options[property];
        } else {
            obj.options[property] = defaults[property];
        }
    }

    obj.setUrl = function(url) {
        obj.options.url = url;
    }

    obj.load = function() {
        jSuites.ajax({
            url: obj.options.url,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                var elements = el.querySelectorAll("input, select, textarea");
 
                for (var i = 0; i < elements.length; i++) {
                    var name = elements[i].getAttribute('name');
                    if (data[name]) {
                        elements[i].value = data[name];
                    }
                }

                if (typeof(obj.options.onload) == 'function') {
                    obj.options.onload(el, data);
                }
            }
        });
    }

    obj.save = function() {
        var test = obj.validate();

        if (test) {
            jSuites.alert(test);
        } else {
            var data = obj.getElements(true);

            if (typeof(obj.options.onbeforesave) == 'function') {
                var data = obj.options.onbeforesave(el, data);

                if (data === false) {
                    console.log('Onbeforesave returned false');
                    return; 
                }
            }

            jSuites.ajax({
                url: obj.options.url,
                method: 'POST',
                dataType: 'json',
                data: data,
                success: function(result) {
                    jSuites.alert(result.message);

                    if (typeof(obj.options.onsave) == 'function') {
                        var data = obj.options.onsave(el, result);
                    }

                    obj.reset();
                }
            });
        }
    }

    obj.validateElement = function(element) {
        var emailChecker = function(data) {
            var pattern = new RegExp(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/);
            return pattern.test(data) ? true : false; 
        }

        var passwordChecker = function(data) {
            return (data.length > 5) ? true : false;
        }

        var addError = function(element) {
            // Add error in the element
            element.classList.add('error');
            // Submit button
            if (obj.options.submitButton) {
                obj.options.submitButton.setAttribute('disabled', true);
            }
            // Return error message
            return element.getAttribute('data-error') || 'There is an error in the form';
        }

        var delError = function(element) {
            var error = false;
            // Remove class from this element
            element.classList.remove('error');
            // Get elements in the form
            var elements = el.querySelectorAll("input, select, textarea");
            // Run all elements 
            for (var i = 0; i < elements.length; i++) {
                if (elements[i].getAttribute('data-validation')) {
                    if (elements[i].classList.contains('error')) {
                        error = true;
                    }
                }
            }

            if (obj.options.submitButton) {
                if (error) {
                    obj.options.submitButton.setAttribute('disabled', true);
                } else {
                    obj.options.submitButton.removeAttribute('disabled');
                }
            }
        }

        // Blank
        var test = '';
        if (! element.value) {
            test = addError(element);
        } else if (element.getAttribute('data-email') && ! emailChecker(element.value)) {
            test = addError(element);
        } else if (element.getAttribute('data-password') && ! emailChecker(element.value)) {
            test = addError(element);
        } else {
            if (element.classList.contains('error')) {
                delError(element);
            }
        }

        return test;
    }

    // Run form validation
    obj.validate = function() {
        var test = '';
        // Get elements in the form
        var elements = el.querySelectorAll("input, select, textarea");
        // Run all elements 
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].getAttribute('data-validation')) {
                if (test) {
                    test += "<br>\r\n";
                }
                test += obj.validateElement(elements[i]);
            }
        }
        return test;
    }

    // Check the form
    obj.getError = function() {
        // Validation
        return obj.validation() ? true : false;
    }

    // Return the form hash
    obj.setHash = function() {
        return obj.getHash(obj.getElements());
    }

    // Get the form hash
    obj.getHash = function(str) {
        var hash = 0, i, chr;

        if (str.length === 0) {
            return hash;
        } else {
            for (i = 0; i < str.length; i++) {
              chr = str.charCodeAt(i);
              hash = ((hash << 5) - hash) + chr;
              hash |= 0;
            }
        }

        return hash;
    }

    // Is there any change in the form since start tracking?
    obj.isChanged = function() {
        var hash = obj.setHash();
        return (obj.options.currentHash != hash);
    }

    // Restart tracking
    obj.resetTracker = function() {
        obj.options.currentHash = obj.setHash();
        obj.options.ignore = false;
    }

    obj.reset = function() {
        obj.options.currentHash = obj.setHash();
        obj.options.ignore = false;
    }

    // Ignore flag
    obj.setIgnore = function(ignoreFlag) {
        obj.options.ignore = ignoreFlag ? true : false;
    }

    // Get form elements
    obj.getElements = function(asArray) {
        var data = {};
        var elements = el.querySelectorAll("input, select, textarea");

        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            var name = element.name;
            var value = element.value;

            if (name) {
                data[name] = value;
            }
        }

        return asArray == true ? data : JSON.stringify(data);
    }

    // Start tracking in one second
    setTimeout(function() {
        obj.options.currentHash = obj.setHash();
    }, 1000);

    // Alert
    window.addEventListener("beforeunload", function (e) {
        if (obj.isChanged() && obj.options.ignore == false) {
            var confirmationMessage =  obj.options.message? obj.options.message : "\o/";

            if (confirmationMessage) {
                if (typeof e == 'undefined') {
                    e = window.event;
                }

                if (e) {
                    e.returnValue = confirmationMessage;
                }

                return confirmationMessage;
            } else {
                return void(0);
            }
        }
    });

    // Validations
    el.addEventListener("keyup", function(e) {
        if (e.target.getAttribute('data-validation')) {
            obj.validateElement(e.target);
        }
    });

    el.tracker = obj;

    return obj;
});



    return jSuites;

})));

/***/ }),

/***/ 72860:
/*!*********************************************!*\
  !*** ./node_modules/jexcel/dist/jexcel.css ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 41892:
/*!***********************************************!*\
  !*** ./node_modules/jsuites/dist/jsuites.css ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfamV4Y2VsX2Rpc3RfamV4Y2VsX2pzLW5vZGVfbW9kdWxlc19qZXhjZWxfZGlzdF9qZXhjZWxfY3NzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsVUFBZTtBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyxvQkFBUztBQUNuQyxJQUFJLG1CQUFPLENBQUMscUNBQTBCO0FBQ3RDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsSUFBSSxLQUE0RDtBQUNoRSxJQUFJLENBQ3lCO0FBQzdCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLEdBQUcsSUFBSSxHQUFHO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsMkJBQTJCO0FBQzdFLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QiwwQ0FBMEM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msc0NBQXNDO0FBQ3RFO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLGdDQUFnQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0EsZ0NBQWdDLGdDQUFnQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsV0FBVztBQUMvQix3QkFBd0IsV0FBVztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsNkJBQTZCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0EsNEJBQTRCLE9BQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkJBQTZCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEsd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlCQUF5QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxrQ0FBa0MsdUJBQXVCO0FBQ3pELHNDQUFzQyx1QkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx1QkFBdUI7QUFDekQsc0NBQXNDLHVCQUF1QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsYUFBYTtBQUN6QyxnQ0FBZ0MsYUFBYTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxvQ0FBb0MsaUJBQWlCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDZCQUE2QjtBQUNyRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0RBQXdELHVCQUF1QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQSw0QkFBNEIsNEJBQTRCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsU0FBUztBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxTQUFTO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDLGlDQUFpQyxTQUFTO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLFNBQVM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsU0FBUztBQUN0QyxpQ0FBaUMsU0FBUztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsa0JBQWtCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwwQkFBMEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsU0FBUztBQUN0QyxpQ0FBaUMsU0FBUztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix3QkFBd0I7QUFDcEQ7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxQkFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DLGdDQUFnQyxPQUFPO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsY0FBYztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6Qyx5REFBeUQ7QUFDekQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pELGdDQUFnQyxnQ0FBZ0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsNkJBQTZCO0FBQzdEO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsZ0NBQWdDLDZCQUE2QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkLGdDQUFnQyxxQkFBcUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLDhCQUE4QjtBQUNuRTtBQUNBO0FBQ0Esa0NBQWtDLGtDQUFrQztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCw2QkFBNkI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDhDQUE4Qyw2QkFBNkI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLGtCQUFrQjtBQUM5QztBQUNBLHNDQUFzQztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxvQ0FBb0M7QUFDNUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QiwrQkFBK0I7QUFDN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEMsb0NBQW9DO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msc0NBQXNDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsbUNBQW1DO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaURBQWlELG1DQUFtQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQywrQkFBK0I7QUFDckUscURBQXFELG1DQUFtQztBQUN4RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQywrQkFBK0I7QUFDckU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxzQ0FBc0M7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3Qix3QkFBd0I7QUFDaEQsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0Msb0RBQW9EO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBLGdDQUFnQyx3QkFBd0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaURBQWlELFNBQVM7QUFDMUQ7QUFDQSxnQ0FBZ0MscUJBQXFCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIscUJBQXFCO0FBQ2pELGdDQUFnQyx3QkFBd0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkJBQTZCO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBLGdDQUFnQyxnQ0FBZ0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkJBQTZCO0FBQ3JELDRCQUE0QixnQ0FBZ0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsd0JBQXdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0MsdUJBQXVCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUMsU0FBUztBQUM5Qyx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUUsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxpR0FBaUc7QUFDakcsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGO0FBQzlGLHNDQUFzQztBQUN0QztBQUNBLCtGQUErRjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCwyQkFBMkIsaUJBQWlCLDJCQUEyQixrQkFBa0IsbUJBQW1COztBQUVuSztBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxPQUFPO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFCQUFxQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsd0JBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLGNBQWM7QUFDN0M7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsU0FBUztBQUN6QztBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGlCQUFpQjtBQUN6RDtBQUNBLDRDQUE0Qyx3Q0FBd0M7QUFDcEY7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLGNBQWM7QUFDN0M7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxrQkFBa0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsTUFBTTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRCxnQkFBZ0IsY0FBYyxFQUFFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBOztBQUVBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsNEJBQTRCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMENBQTBDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0Msa0NBQWtDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0JBQStCO0FBQzNELDBDQUEwQyxrQ0FBa0M7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyxnREFBZ0Q7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLCtCQUErQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsZ0RBQWdEO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msc0NBQXNDO0FBQ3RFO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsZ0NBQWdDLCtCQUErQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGdDQUFnQyxrQ0FBa0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsZ0NBQWdDLGtDQUFrQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEM7O0FBRTFDLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxrREFBa0Q7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQscUJBQXFCLEtBQUs7O0FBRTdFO0FBQ0EsNkJBQTZCLGdCQUFnQjs7QUFFN0M7QUFDQSw2Q0FBNkMsT0FBTzs7QUFFcEQ7QUFDQSxzREFBc0QsT0FBTyxTQUFTLEtBQUs7O0FBRTNFO0FBQ0Esd0NBQXdDLE9BQU8sU0FBUztBQUN4RCx3Q0FBd0MsT0FBTyxTQUFTOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVix3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0JBQW9CO0FBQzNEO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsYUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0EscUNBQXFDLGFBQWE7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixhQUFhOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxtQ0FBbUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxtQ0FBbUM7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsbUNBQW1DO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxnQ0FBZ0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbUNBQW1DO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiw0Q0FBNEMsbUNBQW1DO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHdCQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUJBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixZQUFZO0FBQ3hDLGdDQUFnQyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsaURBQWlEO0FBQ3ZGO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQSxvQ0FBb0Msa0RBQWtEO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0MsNEJBQTRCLHdCQUF3QjtBQUNwRDtBQUNBO0FBQ0EsZ0NBQWdDLHNCQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQ7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMEJBQTBCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMEJBQTBCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDBCQUEwQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwwQkFBMEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDBCQUEwQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEtBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsS0FBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEtBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsS0FBSztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsS0FBSztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixLQUFLO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixVQUFVO0FBQ3RDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixhQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsS0FBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MscUJBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0EsOERBQThELGlCQUFpQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUMsa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUMsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGtCQUFrQjtBQUM5QztBQUNBLDBFQUEwRTtBQUMxRSxrQkFBa0I7QUFDbEIsc0ZBQXNGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EsNEJBQTRCLE9BQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQix3Q0FBd0M7QUFDeEQ7QUFDQSxvQkFBb0IsaUNBQWlDO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7OztBQzMyWkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxJQUFJLEtBQTREO0FBQ2hFLElBQUksQ0FDMEI7QUFDOUIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEsd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsaUJBQWlCO0FBQ2pEO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsZ0RBQWdELGlCQUFpQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLG9CQUFvQjtBQUNuRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0IseUJBQXlCLEVBQUU7QUFDM0Isd0JBQXdCLEVBQUU7QUFDMUIseUJBQXlCLEVBQUU7QUFDM0IsMEJBQTBCLEdBQUc7QUFDN0IseUJBQXlCLEVBQUU7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTSx5QkFBeUI7QUFDL0I7QUFDQSxNQUFNLDBCQUEwQjtBQUNoQztBQUNBLE1BQU0sMEJBQTBCO0FBQ2hDO0FBQ0EsTUFBTSw0QkFBNEI7QUFDbEM7QUFDQSxNQUFNLE9BQU87QUFDYjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsa0JBQWtCLGdCQUFnQjtBQUNsQyxrQkFBa0IsUUFBUTtBQUMxQixrQkFBa0IsaUJBQWlCO0FBQ25DLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixnQkFBZ0I7QUFDcEMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyx1QkFBdUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxrQ0FBa0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLGtCQUFrQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLGtDQUFrQztBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLGlDQUFpQztBQUNqQztBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msc0JBQXNCO0FBQ3RELG9DQUFvQyxrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxnQ0FBZ0Msc0JBQXNCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQix1QkFBdUI7QUFDakQ7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5QkFBeUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxzQkFBc0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxzQkFBc0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBLGdDQUFnQyxvQ0FBb0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsbUJBQW1CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2QkFBNkI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0NBQW9DLGtCQUFrQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUJBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGdDQUFnQyxpQkFBaUI7QUFDakQ7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1RUFBdUU7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUNBQWlDO0FBQzdEO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMscUNBQXFDO0FBQy9FLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EscUJBQXFCLEdBQUcsOEJBQThCO0FBQ3RELGtCQUFrQjtBQUNsQixrQ0FBa0MscUNBQXFDO0FBQ3ZFO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsUUFBUTtBQUNsRDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxJQUFJO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EscUVBQXFFO0FBQ3JFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esd0RBQXdELG9DQUFvQztBQUM1Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx5QkFBeUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLFNBQVM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxtQkFBbUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkJBQTJCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbUJBQW1CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHdCQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4QkFBOEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrQkFBK0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLCtCQUErQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUwsb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QixrQkFBa0IsZ0JBQWdCO0FBQ2xDLGtCQUFrQixRQUFRO0FBQzFCLGtCQUFrQixRQUFRO0FBQzFCLGtCQUFrQixRQUFRO0FBQzFCLGtCQUFrQixZQUFZO0FBQzlCLGtCQUFrQixpQkFBaUI7QUFDbkMsa0JBQWtCLGlCQUFpQjtBQUNuQyxrQkFBa0IsaUJBQWlCO0FBQ25DLGtCQUFrQixpQkFBaUI7QUFDbkMsa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxtQkFBbUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0JBQXNCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSw0QkFBNEIsd0JBQXdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QyxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx3QkFBd0IsNEJBQTRCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxxQkFBcUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxJQUFJO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7O0FDcndRRDs7Ozs7Ozs7Ozs7OztBQ0FBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vV2ViQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9qZXhjZWwvZGlzdC9qZXhjZWwuanMiLCJ3ZWJwYWNrOi8vV2ViQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9qc3VpdGVzL2Rpc3QvanN1aXRlcy5qcyIsIndlYnBhY2s6Ly9XZWJDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2pleGNlbC9kaXN0L2pleGNlbC5jc3M/OGFmMyIsIndlYnBhY2s6Ly9XZWJDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2pzdWl0ZXMvZGlzdC9qc3VpdGVzLmNzcz82OTdiIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogakV4Y2VsIHYzLjkuMVxyXG4gKlxyXG4gKiBBdXRob3I6IFBhdWwgSG9kZWwgPHBhdWwuaG9kZWxAZ21haWwuY29tPlxyXG4gKiBXZWJzaXRlOiBodHRwczovL2Jvc3Nhbm92YS51ay9qZXhjZWwvXHJcbiAqIERlc2NyaXB0aW9uOiBDcmVhdGUgYW1hemluZyB3ZWIgYmFzZWQgc3ByZWFkc2hlZXRzLlxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGUgdW5kZXIgTUlUIExpY2Vuc2VcclxuICovXHJcblxyXG4gaWYgKCEgalN1aXRlcyAmJiB0eXBlb2YocmVxdWlyZSkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHZhciBqU3VpdGVzID0gcmVxdWlyZSgnanN1aXRlcycpO1xyXG4gICAgcmVxdWlyZSgnanN1aXRlcy9kaXN0L2pzdWl0ZXMuY3NzJyk7XHJcbn1cclxuXHJcbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxyXG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcclxuICAgIGdsb2JhbC5qZXhjZWwgPSBmYWN0b3J5KCk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4vLyBKZXhjZWwgY29yZSBvYmplY3RcblxudmFyIGpleGNlbCA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIC8vIENyZWF0ZSBqZXhjZWwgb2JqZWN0XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIG9iai5vcHRpb25zID0ge307XG5cbiAgICBpZiAoISAoZWwgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGVsIGluc3RhbmNlb2YgSFRNTERvY3VtZW50KSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0pFWENFTDogZWwgaXMgbm90IGEgdmFsaWQgRE9NIGVsZW1lbnQnKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxuICAgIC8vIExvYWRpbmcgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAvLyBFeHRlcm5hbCBkYXRhXG4gICAgICAgIHVybDpudWxsLFxuICAgICAgICAvLyBEYXRhXG4gICAgICAgIGRhdGE6bnVsbCxcbiAgICAgICAgLy8gQ29weSBiZWhhdmlvclxuICAgICAgICBjb3B5Q29tcGF0aWJpbGl0eTpmYWxzZSxcbiAgICAgICAgLy8gUm93cyBhbmQgY29sdW1ucyBkZWZpbml0aW9uc1xuICAgICAgICByb3dzOltdLFxuICAgICAgICBjb2x1bW5zOltdLFxuICAgICAgICAvLyBEZXByZWN0ZWQgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgY29sSGVhZGVyczpbXSxcbiAgICAgICAgY29sV2lkdGhzOltdLFxuICAgICAgICBjb2xBbGlnbm1lbnRzOltdLFxuICAgICAgICBuZXN0ZWRIZWFkZXJzOm51bGwsXG4gICAgICAgIC8vIENvbHVtbiB3aWR0aCB0aGF0IGlzIHVzZWQgYnkgZGVmYXVsdFxuICAgICAgICBkZWZhdWx0Q29sV2lkdGg6NTAsXG4gICAgICAgIGRlZmF1bHRDb2xBbGlnbjonY2VudGVyJyxcbiAgICAgICAgLy8gU3BhcmUgcm93cyBhbmQgY29sdW1uc1xuICAgICAgICBtaW5TcGFyZVJvd3M6MCxcbiAgICAgICAgbWluU3BhcmVDb2xzOjAsXG4gICAgICAgIC8vIE1pbmltYWwgdGFibGUgZGltZW5zaW9uc1xuICAgICAgICBtaW5EaW1lbnNpb25zOlswLDBdLFxuICAgICAgICAvLyBBbGxvdyBFeHBvcnRcbiAgICAgICAgYWxsb3dFeHBvcnQ6dHJ1ZSxcclxuICAgICAgICAvLyBAdHlwZSB7Ym9vbGVhbn0gLSBJbmNsdWRlIHRoZSBoZWFkZXIgdGl0bGVzIG9uIGRvd25sb2FkXG4gICAgICAgIGluY2x1ZGVIZWFkZXJzT25Eb3dubG9hZDpmYWxzZSxcbiAgICAgICAgLy8gQWxsb3cgY29sdW1uIHNvcnRpbmdcbiAgICAgICAgY29sdW1uU29ydGluZzp0cnVlLFxuICAgICAgICAvLyBBbGxvdyBjb2x1bW4gZHJhZ2dpbmdcbiAgICAgICAgY29sdW1uRHJhZzpmYWxzZSxcbiAgICAgICAgLy8gQWxsb3cgY29sdW1uIHJlc2l6aW5nXG4gICAgICAgIGNvbHVtblJlc2l6ZTp0cnVlLFxuICAgICAgICAvLyBBbGxvdyByb3cgcmVzaXppbmdcbiAgICAgICAgcm93UmVzaXplOmZhbHNlLFxuICAgICAgICAvLyBBbGxvdyByb3cgZHJhZ2dpbmdcbiAgICAgICAgcm93RHJhZzp0cnVlLFxuICAgICAgICAvLyBBbGxvdyB0YWJsZSBlZGl0aW9uXG4gICAgICAgIGVkaXRhYmxlOnRydWUsXG4gICAgICAgIC8vIEFsbG93IG5ldyByb3dzXG4gICAgICAgIGFsbG93SW5zZXJ0Um93OnRydWUsXG4gICAgICAgIC8vIEFsbG93IG5ldyByb3dzXG4gICAgICAgIGFsbG93TWFudWFsSW5zZXJ0Um93OnRydWUsXG4gICAgICAgIC8vIEFsbG93IG5ldyBjb2x1bW5zXG4gICAgICAgIGFsbG93SW5zZXJ0Q29sdW1uOnRydWUsXG4gICAgICAgIC8vIEFsbG93IG5ldyByb3dzXG4gICAgICAgIGFsbG93TWFudWFsSW5zZXJ0Q29sdW1uOnRydWUsXG4gICAgICAgIC8vIEFsbG93IHJvdyBkZWxldGVcbiAgICAgICAgYWxsb3dEZWxldGVSb3c6dHJ1ZSxcbiAgICAgICAgLy8gQWxsb3cgZGVsZXRpbmcgb2YgYWxsIHJvd3NcbiAgICAgICAgYWxsb3dEZWxldGluZ0FsbFJvd3M6ZmFsc2UsXG4gICAgICAgIC8vIEFsbG93IGNvbHVtbiBkZWxldGVcbiAgICAgICAgYWxsb3dEZWxldGVDb2x1bW46dHJ1ZSxcbiAgICAgICAgLy8gQWxsb3cgcmVuYW1lIGNvbHVtblxuICAgICAgICBhbGxvd1JlbmFtZUNvbHVtbjp0cnVlLFxuICAgICAgICAvLyBBbGxvdyBjb21tZW50c1xuICAgICAgICBhbGxvd0NvbW1lbnRzOmZhbHNlLFxuICAgICAgICAvLyBHbG9iYWwgd3JhcFxuICAgICAgICB3b3JkV3JhcDpmYWxzZSxcbiAgICAgICAgLy8gSW1hZ2Ugb3B0aW9uc1xuICAgICAgICBpbWFnZU9wdGlvbnM6IG51bGwsXG4gICAgICAgIC8vIENTViBzb3VyY2VcbiAgICAgICAgY3N2Om51bGwsXG4gICAgICAgIC8vIEZpbGVuYW1lXG4gICAgICAgIGNzdkZpbGVOYW1lOidqZXhjZWwnLFxuICAgICAgICAvLyBDb25zaWRlciBmaXJzdCBsaW5lIGFzIGhlYWRlclxuICAgICAgICBjc3ZIZWFkZXJzOnRydWUsXG4gICAgICAgIC8vIERlbGltaXRlcnNcbiAgICAgICAgY3N2RGVsaW1pdGVyOicsJyxcbiAgICAgICAgLy8gRGlzYWJsZSBjb3JuZXIgc2VsZWN0aW9uXG4gICAgICAgIHNlbGVjdGlvbkNvcHk6dHJ1ZSxcbiAgICAgICAgLy8gTWVyZ2VkIGNlbGxzXG4gICAgICAgIG1lcmdlQ2VsbHM6e30sXG4gICAgICAgIC8vIENyZWF0ZSB0b29sYmFyXG4gICAgICAgIHRvb2xiYXI6bnVsbCxcbiAgICAgICAgLy8gQWxsb3cgc2VhcmNoXG4gICAgICAgIHNlYXJjaDpmYWxzZSxcbiAgICAgICAgLy8gQ3JlYXRlIHBhZ2luYXRpb25cbiAgICAgICAgcGFnaW5hdGlvbjpmYWxzZSxcbiAgICAgICAgcGFnaW5hdGlvbk9wdGlvbnM6bnVsbCxcbiAgICAgICAgLy8gRnVsbCBzY3JlZW5cbiAgICAgICAgZnVsbHNjcmVlbjpmYWxzZSxcbiAgICAgICAgLy8gTGF6eSBsb2FkaW5nXG4gICAgICAgIGxhenlMb2FkaW5nOmZhbHNlLFxuICAgICAgICBsb2FkaW5nU3BpbjpmYWxzZSxcbiAgICAgICAgLy8gVGFibGUgb3ZlcmZsb3dcbiAgICAgICAgdGFibGVPdmVyZmxvdzpmYWxzZSxcbiAgICAgICAgdGFibGVIZWlnaHQ6JzMwMHB4JyxcbiAgICAgICAgdGFibGVXaWR0aDpudWxsLFxuICAgICAgICAvLyBNZXRhXG4gICAgICAgIG1ldGE6IG51bGwsXG4gICAgICAgIC8vIFN0eWxlXG4gICAgICAgIHN0eWxlOm51bGwsXG4gICAgICAgIC8vIEV4ZWN1dGUgZm9ybXVsYXNcbiAgICAgICAgcGFyc2VGb3JtdWxhczp0cnVlLFxuICAgICAgICBhdXRvSW5jcmVtZW50OnRydWUsXG4gICAgICAgIGF1dG9DYXN0aW5nOnRydWUsXG4gICAgICAgIC8vIEV2ZW50IGhhbmRsZXNcbiAgICAgICAgb251bmRvOm51bGwsXG4gICAgICAgIG9ucmVkbzpudWxsLFxuICAgICAgICBvbmxvYWQ6bnVsbCxcbiAgICAgICAgb25jaGFuZ2U6bnVsbCxcbiAgICAgICAgb25iZWZvcmVjaGFuZ2U6bnVsbCxcbiAgICAgICAgb25hZnRlcmNoYW5nZXM6bnVsbCxcbiAgICAgICAgb25iZWZvcmVpbnNlcnRyb3c6IG51bGwsXG4gICAgICAgIG9uaW5zZXJ0cm93Om51bGwsXG4gICAgICAgIG9uYmVmb3JlaW5zZXJ0Y29sdW1uOiBudWxsLFxuICAgICAgICBvbmluc2VydGNvbHVtbjpudWxsLFxuICAgICAgICBvbmJlZm9yZWRlbGV0ZXJvdzpudWxsLFxuICAgICAgICBvbmRlbGV0ZXJvdzpudWxsLFxuICAgICAgICBvbmJlZm9yZWRlbGV0ZWNvbHVtbjpudWxsLFxuICAgICAgICBvbmRlbGV0ZWNvbHVtbjpudWxsLFxuICAgICAgICBvbm1vdmVyb3c6bnVsbCxcbiAgICAgICAgb25tb3ZlY29sdW1uOm51bGwsXG4gICAgICAgIG9ucmVzaXplcm93Om51bGwsXG4gICAgICAgIG9ucmVzaXplY29sdW1uOm51bGwsXG4gICAgICAgIG9uc29ydDpudWxsLFxuICAgICAgICBvbnNlbGVjdGlvbjpudWxsLFxuICAgICAgICBvbnBhc3RlOm51bGwsXG4gICAgICAgIG9uYmVmb3JlcGFzdGU6bnVsbCxcbiAgICAgICAgb25tZXJnZTpudWxsLFxuICAgICAgICBvbmZvY3VzOm51bGwsXG4gICAgICAgIG9uYmx1cjpudWxsLFxuICAgICAgICBvbmNoYW5nZWhlYWRlcjpudWxsLFxuICAgICAgICBvbmVkaXRpb25zdGFydDpudWxsLFxuICAgICAgICBvbmVkaXRpb25lbmQ6bnVsbCxcbiAgICAgICAgb25jaGFuZ2VzdHlsZTpudWxsLFxuICAgICAgICBvbmNoYW5nZW1ldGE6bnVsbCxcbiAgICAgICAgb25jaGFuZ2VwYWdlOm51bGwsXG4gICAgICAgIC8vIEN1c3RvbWl6ZSBhbnkgY2VsbCBiZWhhdmlvclxuICAgICAgICB1cGRhdGVUYWJsZTpudWxsLFxuICAgICAgICAvLyBEZXRhY2ggdGhlIEhUTUwgdGFibGUgd2hlbiBjYWxsaW5nIHVwZGF0ZVRhYmxlXHJcbiAgICAgICAgZGV0YWNoRm9yVXBkYXRlczogZmFsc2UsXG4gICAgICAgIC8vIFRleHRzXG4gICAgICAgIHRleHQ6e1xuICAgICAgICAgICAgbm9SZWNvcmRzRm91bmQ6ICdObyByZWNvcmRzIGZvdW5kJyxcbiAgICAgICAgICAgIHNob3dpbmdQYWdlOiAnU2hvd2luZyBwYWdlIHswfSBvZiB7MX0gZW50cmllcycsXG4gICAgICAgICAgICBzaG93OiAnU2hvdyAnLFxuICAgICAgICAgICAgc2VhcmNoOiAnU2VhcmNoJyxcbiAgICAgICAgICAgIGVudHJpZXM6ICcgZW50cmllcycsXG4gICAgICAgICAgICBjb2x1bW5OYW1lOiAnQ29sdW1uIG5hbWUnLFxuICAgICAgICAgICAgaW5zZXJ0QU5ld0NvbHVtbkJlZm9yZTogJ0luc2VydCBhIG5ldyBjb2x1bW4gYmVmb3JlJyxcbiAgICAgICAgICAgIGluc2VydEFOZXdDb2x1bW5BZnRlcjogJ0luc2VydCBhIG5ldyBjb2x1bW4gYWZ0ZXInLFxuICAgICAgICAgICAgZGVsZXRlU2VsZWN0ZWRDb2x1bW5zOiAnRGVsZXRlIHNlbGVjdGVkIGNvbHVtbnMnLFxuICAgICAgICAgICAgcmVuYW1lVGhpc0NvbHVtbjogJ1JlbmFtZSB0aGlzIGNvbHVtbicsXG4gICAgICAgICAgICBvcmRlckFzY2VuZGluZzogJ09yZGVyIGFzY2VuZGluZycsXG4gICAgICAgICAgICBvcmRlckRlc2NlbmRpbmc6ICdPcmRlciBkZXNjZW5kaW5nJyxcbiAgICAgICAgICAgIGluc2VydEFOZXdSb3dCZWZvcmU6ICdJbnNlcnQgYSBuZXcgcm93IGJlZm9yZScsXG4gICAgICAgICAgICBpbnNlcnRBTmV3Um93QWZ0ZXI6ICdJbnNlcnQgYSBuZXcgcm93IGFmdGVyJyxcbiAgICAgICAgICAgIGRlbGV0ZVNlbGVjdGVkUm93czogJ0RlbGV0ZSBzZWxlY3RlZCByb3dzJyxcbiAgICAgICAgICAgIGVkaXRDb21tZW50czogJ0VkaXQgY29tbWVudHMnLFxuICAgICAgICAgICAgYWRkQ29tbWVudHM6ICdBZGQgY29tbWVudHMnLFxuICAgICAgICAgICAgY29tbWVudHM6ICdDb21tZW50cycsXG4gICAgICAgICAgICBjbGVhckNvbW1lbnRzOiAnQ2xlYXIgY29tbWVudHMnLFxuICAgICAgICAgICAgY29weTogJ0NvcHkuLi4nLFxuICAgICAgICAgICAgcGFzdGU6ICdQYXN0ZS4uLicsXG4gICAgICAgICAgICBzYXZlQXM6ICdTYXZlIGFzLi4uJyxcbiAgICAgICAgICAgIGFib3V0OiAnQWJvdXQnLFxuICAgICAgICAgICAgYXJlWW91U3VyZVRvRGVsZXRlVGhlU2VsZWN0ZWRSb3dzOiAnQXJlIHlvdSBzdXJlIHRvIGRlbGV0ZSB0aGUgc2VsZWN0ZWQgcm93cz8nLFxuICAgICAgICAgICAgYXJlWW91U3VyZVRvRGVsZXRlVGhlU2VsZWN0ZWRDb2x1bW5zOiAnQXJlIHlvdSBzdXJlIHRvIGRlbGV0ZSB0aGUgc2VsZWN0ZWQgY29sdW1ucz8nLFxuICAgICAgICAgICAgdGhpc0FjdGlvbldpbGxEZXN0cm95QW55RXhpc3RpbmdNZXJnZWRDZWxsc0FyZVlvdVN1cmU6ICdUaGlzIGFjdGlvbiB3aWxsIGRlc3Ryb3kgYW55IGV4aXN0aW5nIG1lcmdlZCBjZWxscy4gQXJlIHlvdSBzdXJlPycsXG4gICAgICAgICAgICB0aGlzQWN0aW9uV2lsbENsZWFyWW91clNlYXJjaFJlc3VsdHNBcmVZb3VTdXJlOiAnVGhpcyBhY3Rpb24gd2lsbCBjbGVhciB5b3VyIHNlYXJjaCByZXN1bHRzLiBBcmUgeW91IHN1cmU/JyxcbiAgICAgICAgICAgIHRoZXJlSXNBQ29uZmxpY3RXaXRoQW5vdGhlck1lcmdlZENlbGw6ICdUaGVyZSBpcyBhIGNvbmZsaWN0IHdpdGggYW5vdGhlciBtZXJnZWQgY2VsbCcsXG4gICAgICAgICAgICBpbnZhbGlkTWVyZ2VQcm9wZXJ0aWVzOiAnSW52YWxpZCBtZXJnZWQgcHJvcGVydGllcycsXG4gICAgICAgICAgICBjZWxsQWxyZWFkeU1lcmdlZDogJ0NlbGwgYWxyZWFkeSBtZXJnZWQnLFxuICAgICAgICAgICAgbm9DZWxsc1NlbGVjdGVkOiAnTm8gY2VsbHMgc2VsZWN0ZWQnLFxuICAgICAgICB9LFxuICAgICAgICAvLyBBYm91dCBtZXNzYWdlXG4gICAgICAgIGFib3V0OlwiakV4Y2VsIENFIFNwcmVhZHNoZWV0XFxuVmVyc2lvbiAzLjkuMVxcbkF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XFxuV2Vic2l0ZTogaHR0cHM6Ly9ib3NzYW5vdmEudWsvamV4Y2VsL3YzXCIsXG4gICAgfTtcblxuICAgIC8vIExvYWRpbmcgaW5pdGlhbCBjb25maWd1cmF0aW9uIGZyb20gdXNlclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdGV4dEtleSBpbiBvcHRpb25zW3Byb3BlcnR5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW3Byb3BlcnR5XS5oYXNPd25Qcm9wZXJ0eSh0ZXh0S2V5KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XVt0ZXh0S2V5XSA9IG9wdGlvbnNbcHJvcGVydHldW3RleHRLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IG9wdGlvbnNbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2xvYmFsIGVsZW1lbnRzXG4gICAgb2JqLmVsID0gZWw7XG4gICAgb2JqLmNvcm5lciA9IG51bGw7XG4gICAgb2JqLmNvbnRleHRNZW51ID0gbnVsbDtcbiAgICBvYmoudGV4dGFyZWEgPSBudWxsO1xuICAgIG9iai5hZHMgPSBudWxsO1xuICAgIG9iai5jb250ZW50ID0gbnVsbDtcbiAgICBvYmoudGFibGUgPSBudWxsO1xuICAgIG9iai50aGVhZCA9IG51bGw7XG4gICAgb2JqLnRib2R5ID0gbnVsbDtcbiAgICBvYmoucm93cyA9IFtdO1xuICAgIG9iai5yZXN1bHRzID0gbnVsbDtcbiAgICBvYmouc2VhcmNoSW5wdXQgPSBudWxsO1xuICAgIG9iai50b29sYmFyID0gbnVsbDtcbiAgICBvYmoucGFnaW5hdGlvbiA9IG51bGw7XG4gICAgb2JqLnBhZ2VOdW1iZXIgPSBudWxsO1xuICAgIG9iai5oZWFkZXJDb250YWluZXIgPSBudWxsO1xuICAgIG9iai5jb2xncm91cENvbnRhaW5lciA9IG51bGw7XG5cbiAgICAvLyBDb250YWluZXJzXG4gICAgb2JqLmhlYWRlcnMgPSBbXTtcbiAgICBvYmoucmVjb3JkcyA9IFtdO1xuICAgIG9iai5oaXN0b3J5ID0gW107XG4gICAgb2JqLmZvcm11bGEgPSBbXTtcbiAgICBvYmouY29sZ3JvdXAgPSBbXTtcbiAgICBvYmouc2VsZWN0aW9uID0gW107XG4gICAgb2JqLmhpZ2hsaWdodGVkICA9IFtdO1xuICAgIG9iai5zZWxlY3RlZENlbGwgPSBudWxsO1xuICAgIG9iai5zZWxlY3RlZENvbnRhaW5lciA9IG51bGw7XG4gICAgb2JqLnN0eWxlID0gW107XG4gICAgb2JqLmRhdGEgPSBudWxsO1xuXG4gICAgLy8gSW50ZXJuYWwgY29udHJvbGxlcnNcbiAgICBvYmouY3Vyc29yID0gbnVsbDtcbiAgICBvYmouaGlzdG9yeUluZGV4ID0gLTE7XG4gICAgb2JqLmlnbm9yZUV2ZW50cyA9IGZhbHNlO1xuICAgIG9iai5pZ25vcmVIaXN0b3J5ID0gZmFsc2U7XG4gICAgb2JqLmVkaXRpb24gPSBudWxsO1xuICAgIG9iai5oYXNoU3RyaW5nID0gbnVsbDtcbiAgICBvYmoucmVzaXppbmcgPSBudWxsO1xuICAgIG9iai5kcmFnZ2luZyA9IG51bGw7XG5cbiAgICAvLyBMYXp5IGxvYWRpbmdcbiAgICBpZiAob2JqLm9wdGlvbnMubGF6eUxvYWRpbmcgPT0gdHJ1ZSAmJiAob2JqLm9wdGlvbnMudGFibGVPdmVyZmxvdyA9PSBmYWxzZSAmJiBvYmoub3B0aW9ucy5mdWxsc2NyZWVuID09IGZhbHNlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdKRVhDRUw6IFRoZSBsYXp5bG9hZGluZyBvbmx5IHdvcmtzIHdoZW4gdGFibGVPdmVyZmxvdyA9IHllcyBvciBmdWxsc2NyZWVuID0geWVzJyk7XG4gICAgICAgIG9iai5vcHRpb25zLmxhenlMb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlL0Rpc2FibGUgZnVsbHNjcmVlbiBcbiAgICAgKiB1c2UgcHJvZ3JhbW1hdGljYWxseSA6IHRhYmxlLmZ1bGxzY3JlZW4oKTsgb3IgdGFibGUuZnVsbHNjcmVlbih0cnVlKTsgb3IgdGFibGUuZnVsbHNjcmVlbihmYWxzZSk7XG4gICAgICogQFBhcmFtIHtib29sZWFufSBhY3RpdmF0ZVxuICAgICAqL1xuICAgIG9iai5mdWxsc2NyZWVuID0gZnVuY3Rpb24oYWN0aXZhdGUpIHtcbiAgICAgICAgLy8gSWYgYWN0aXZhdGUgbm90IGRlZmluZWQsIGdldCByZXZlcnNlIG9wdGlvbnMuZnVsbHNjcmVlblxuICAgICAgICBpZiAoYWN0aXZhdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWN0aXZhdGUgPSAhIG9iai5vcHRpb25zLmZ1bGxzY3JlZW47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjaGFuZ2VcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmZ1bGxzY3JlZW4gIT0gYWN0aXZhdGUpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmZ1bGxzY3JlZW4gPSBhY3RpdmF0ZTtcblxuICAgICAgICAgICAgLy8gVGVzdCBMYXp5TG9hZGluZyBjb25mbGljdFxuICAgICAgICAgICAgaWYgKGFjdGl2YXRlID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Z1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSBqZXhjZWwgdGFibGVcbiAgICAgKiBcbiAgICAgKiBAUGFyYW0gY29uZmlnXG4gICAgICovXG4gICAgb2JqLnByZXBhcmVUYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBMb2FkaW5nIGluaXRpYWwgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2VzXG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAgICAgLy8gTnVtYmVyIG9mIGNvbHVtbnNcbiAgICAgICAgdmFyIHNpemUgPSBvYmoub3B0aW9ucy5jb2x1bW5zLmxlbmd0aDtcblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuZGF0YSAmJiB0eXBlb2Yob2JqLm9wdGlvbnMuZGF0YVswXSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBEYXRhIGtleXNcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLm9wdGlvbnMuZGF0YVswXSk7XG5cbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IHNpemUpIHtcbiAgICAgICAgICAgICAgICBzaXplID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNaW5pbWFsIGRpbWVuc2lvbnNcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLm1pbkRpbWVuc2lvbnNbMF0gPiBzaXplKSB7XG4gICAgICAgICAgICBzaXplID0gb2JqLm9wdGlvbnMubWluRGltZW5zaW9uc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcXVlc3RzXG4gICAgICAgIHZhciBtdWx0aXBsZSA9IFtdO1xuXG4gICAgICAgIC8vIFByZXBhcmF0aW9uc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgLy8gRGVwcmVjdGVkIG9wdGlvbnMuIFlvdSBzaG91bGQgdXNlIG9ubHkgY29sdW1uc1xuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY29sSGVhZGVyc1tpXSkge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbEhlYWRlcnNbaV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbFdpZHRoc1tpXSkge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbFdpZHRoc1tpXSA9IG9iai5vcHRpb25zLmRlZmF1bHRDb2xXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbEFsaWdubWVudHNbaV0pIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2xBbGlnbm1lbnRzW2ldID0gb2JqLm9wdGlvbnMuZGVmYXVsdENvbEFsaWduO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IGNvbHVtbiBkZXNjcmlwdGlvblxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY29sdW1uc1tpXSkge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbaV0gPSB7IHR5cGU6J3RleHQnIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5uYW1lID0ga2V5cyAmJiBrZXlzW2ldID8ga2V5c1tpXSA6IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnNvdXJjZSkge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbaV0uc291cmNlID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLm9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbHVtbnNbaV0uZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5lZGl0b3IgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5hbGxvd0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50aXRsZSA9IG9iai5vcHRpb25zLmNvbEhlYWRlcnNbaV0gPyBvYmoub3B0aW9ucy5jb2xIZWFkZXJzW2ldIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS53aWR0aCA9IG9iai5vcHRpb25zLmNvbFdpZHRoc1tpXSA/IG9iai5vcHRpb25zLmNvbFdpZHRoc1tpXSA6IG9iai5vcHRpb25zLmRlZmF1bHRDb2xXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbHVtbnNbaV0uYWxpZ24pIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLmFsaWduID0gb2JqLm9wdGlvbnMuY29sQWxpZ25tZW50c1tpXSA/IG9iai5vcHRpb25zLmNvbEFsaWdubWVudHNbaV0gOiAnY2VudGVyJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJlLWxvYWQgaW5pdGlhbCBzb3VyY2UgZm9yIGpzb24gYXV0b2NvbXBsZXRlXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdhdXRvY29tcGxldGUnIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnZHJvcGRvd24nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgcmVtb3RlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUucHVzaChqU3VpdGVzLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZTogbXVsdGlwbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW3RoaXMuaW5kZXhdLnNvdXJjZS5wdXNoKGRhdGFbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmNyZWF0ZVRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnY2FsZW5kYXInKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBmb3JtYXQgZm9yIGRhdGUgY29sdW1uc1xuICAgICAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbHVtbnNbaV0ub3B0aW9ucy5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5vcHRpb25zLmZvcm1hdCA9ICdERC9NTS9ZWVlZJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbiBjb21wbGV0ZVxuICAgICAgICBpZiAoISBtdWx0aXBsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iai5jcmVhdGVUYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmNyZWF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEVsZW1lbnRzXG4gICAgICAgIG9iai50YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgICAgIG9iai50aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgICAgIG9iai50Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGhlYWRlcnMgY29udHJvbGxlcnNcbiAgICAgICAgb2JqLmhlYWRlcnMgPSBbXTtcbiAgICAgICAgb2JqLmNvbGdyb3VwID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRhYmxlIGNvbnRhaW5lclxuICAgICAgICBvYmouY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBvYmouY29udGVudC5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfY29udGVudCcpO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0b29sYmFyIG9iamVjdFxuICAgICAgICBvYmoudG9vbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBvYmoudG9vbGJhci5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfdG9vbGJhcicpO1xuXG4gICAgICAgIC8vIFNlYXJjaFxuICAgICAgICB2YXIgc2VhcmNoQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHZhciBzZWFyY2hUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoKG9iai5vcHRpb25zLnRleHQuc2VhcmNoKSArICc6ICcpO1xuICAgICAgICBvYmouc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBvYmouc2VhcmNoSW5wdXQuY2xhc3NMaXN0LmFkZCgnamV4Y2VsX3NlYXJjaCcpO1xuICAgICAgICBzZWFyY2hDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VhcmNoVGV4dCk7XG4gICAgICAgIHNlYXJjaENvbnRhaW5lci5hcHBlbmRDaGlsZChvYmouc2VhcmNoSW5wdXQpO1xuICAgICAgICBvYmouc2VhcmNoSW5wdXQub25mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb2JqLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYWdpbmF0aW9uIHNlbGVjdCBvcHRpb25cbiAgICAgICAgdmFyIHBhZ2luYXRpb25VcGRhdGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMucGFnaW5hdGlvbiA+IDAgJiYgb2JqLm9wdGlvbnMucGFnaW5hdGlvbk9wdGlvbnMgJiYgb2JqLm9wdGlvbnMucGFnaW5hdGlvbk9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgb2JqLnBhZ2luYXRpb25Ecm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgb2JqLnBhZ2luYXRpb25Ecm9wZG93bi5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfcGFnaW5hdGlvbl9kcm9wZG93bicpO1xuICAgICAgICAgICAgb2JqLnBhZ2luYXRpb25Ecm9wZG93bi5vbmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLnBhZ2luYXRpb24gPSBwYXJzZUludCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBvYmoucGFnZSgwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoub3B0aW9ucy5wYWdpbmF0aW9uT3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICAgICAgdGVtcC52YWx1ZSA9IG9iai5vcHRpb25zLnBhZ2luYXRpb25PcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgIHRlbXAuaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMucGFnaW5hdGlvbk9wdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgb2JqLnBhZ2luYXRpb25Ecm9wZG93bi5hcHBlbmRDaGlsZCh0ZW1wKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFnaW5hdGlvblVwZGF0ZUNvbnRhaW5lci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvYmoub3B0aW9ucy50ZXh0LnNob3cpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25VcGRhdGVDb250YWluZXIuYXBwZW5kQ2hpbGQob2JqLnBhZ2luYXRpb25Ecm9wZG93bik7XG4gICAgICAgICAgICBwYWdpbmF0aW9uVXBkYXRlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG9iai5vcHRpb25zLnRleHQuZW50cmllcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlsdGVyIGFuZCBwYWdpbmF0aW9uIGNvbnRhaW5lclxuICAgICAgICBvYmouZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9iai5maWx0ZXIuY2xhc3NMaXN0LmFkZCgnamV4Y2VsX2ZpbHRlcicpO1xuICAgICAgICBvYmouZmlsdGVyLmFwcGVuZENoaWxkKHBhZ2luYXRpb25VcGRhdGVDb250YWluZXIpO1xuICAgICAgICBvYmouZmlsdGVyLmFwcGVuZENoaWxkKHNlYXJjaENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gQ29sc2dyb3VwXG4gICAgICAgIG9iai5jb2xncm91cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvbGdyb3VwJyk7XG4gICAgICAgIHZhciB0ZW1wQ29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29sJyk7XG4gICAgICAgIHRlbXBDb2wuc2V0QXR0cmlidXRlKCd3aWR0aCcsICc1MCcpO1xuICAgICAgICBvYmouY29sZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQodGVtcENvbCk7XG5cbiAgICAgICAgLy8gTmVzdGVkXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzICYmIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRmxleGlibGUgd2F5IHRvIGhhbmRsZSBuZXN0ZWRoZWFkZXJzXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1swXSAmJiBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzWzBdWzBdKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai50aGVhZC5hcHBlbmRDaGlsZChvYmouY3JlYXRlTmVzdGVkSGVhZGVyKG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbal0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iai50aGVhZC5hcHBlbmRDaGlsZChvYmouY3JlYXRlTmVzdGVkSGVhZGVyKG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJvd1xuICAgICAgICBvYmouaGVhZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgdmFyIHRlbXBDb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICB0ZW1wQ29sLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF9zZWxlY3RhbGwnKTtcbiAgICAgICAgb2JqLmhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZW1wQ29sKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5vcHRpb25zLmNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBoZWFkZXJcbiAgICAgICAgICAgIG9iai5jcmVhdGVDZWxsSGVhZGVyKGkpO1xuICAgICAgICAgICAgLy8gQXBwZW5kIGNlbGwgdG8gdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgb2JqLmhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChvYmouaGVhZGVyc1tpXSk7XG4gICAgICAgICAgICBvYmouY29sZ3JvdXBDb250YWluZXIuYXBwZW5kQ2hpbGQob2JqLmNvbGdyb3VwW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai50aGVhZC5hcHBlbmRDaGlsZChvYmouaGVhZGVyQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBDb250ZW50IHRhYmxlXG4gICAgICAgIG9iai50YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgICAgIG9iai50YWJsZS5jbGFzc0xpc3QuYWRkKCdqZXhjZWwnKTtcbiAgICAgICAgb2JqLnRhYmxlLnNldEF0dHJpYnV0ZSgnY2VsbHBhZGRpbmcnLCAnMCcpO1xuICAgICAgICBvYmoudGFibGUuc2V0QXR0cmlidXRlKCdjZWxsc3BhY2luZycsICcwJyk7XG4gICAgICAgIG9iai50YWJsZS5zZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScsICd5ZXMnKTtcbiAgICAgICAgb2JqLnRhYmxlLnNldEF0dHJpYnV0ZSgnb25zZWxlY3RzdGFydCcsICdyZXR1cm4gZmFsc2UnKTtcbiAgICAgICAgb2JqLnRhYmxlLmFwcGVuZENoaWxkKG9iai5jb2xncm91cENvbnRhaW5lcik7XG4gICAgICAgIG9iai50YWJsZS5hcHBlbmRDaGlsZChvYmoudGhlYWQpO1xuICAgICAgICBvYmoudGFibGUuYXBwZW5kQ2hpbGQob2JqLnRib2R5KTtcblxuICAgICAgICAvLyBTcHJlYWRzaGVldCBjb3JuZXJcbiAgICAgICAgb2JqLmNvcm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBvYmouY29ybmVyLmNsYXNzTmFtZSA9ICdqZXhjZWxfY29ybmVyJztcbiAgICAgICAgb2JqLmNvcm5lci5zZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScsICdvbicpO1xuICAgICAgICBvYmouY29ybmVyLnNldEF0dHJpYnV0ZSgnb25zZWxlY3RzdGFydCcsICdyZXR1cm4gZmFsc2UnKTtcblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2VsZWN0aW9uQ29weSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgb2JqLmNvcm5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGV4dGFyZWEgaGVscGVyXG4gICAgICAgIG9iai50ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIG9iai50ZXh0YXJlYS5jbGFzc05hbWUgPSAnamV4Y2VsX3RleHRhcmVhJztcbiAgICAgICAgb2JqLnRleHRhcmVhLmlkID0gJ2pleGNlbF90ZXh0YXJlYSc7XG4gICAgICAgIG9iai50ZXh0YXJlYS50YWJJbmRleCA9ICctMSc7XHJcblxuICAgICAgICAvLyBDb250ZXh0bWVudSBjb250YWluZXJcbiAgICAgICAgb2JqLmNvbnRleHRNZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9iai5jb250ZXh0TWVudS5jbGFzc05hbWUgPSAnamV4Y2VsX2NvbnRleHRtZW51JztcblxuICAgICAgICAvLyBDcmVhdGUgZWxlbWVudFxuICAgICAgICBqU3VpdGVzLmNvbnRleHRtZW51KG9iai5jb250ZXh0TWVudSwge1xuICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvYmouY29udGV4dE1lbnUuY29udGV4dG1lbnUuY2xvc2UoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQb3dlcmVkIGJ5IGpFeGNlbFxyXG4gICAgICAgIHZhciBhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgYWRzLnNldEF0dHJpYnV0ZSgnaHJlZicsICdodHRwczovL2Jvc3Nhbm92YS51ay9qZXhjZWwvJyk7XHJcbiAgICAgICAgb2JqLmFkcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIG9iai5hZHMuY2xhc3NOYW1lID0gJ2pleGNlbF9hYm91dCc7XHJcbiAgICAgICAgaWYgKHR5cGVvZihzZXNzaW9uU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgISBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdqZXhjZWwnKSkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdqZXhjZWwnLCB0cnVlKTtcclxuICAgICAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICBpbWcuc3JjID0gJy8vYm9zc2Fub3ZhLnVrL2pleGNlbC9sb2dvLnBuZyc7XHJcbiAgICAgICAgICAgIGFkcy5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBzcGFuLmlubmVySFRNTCA9ICdKZXhjZWwgc3ByZWFkc2hlZXQnO1xyXG4gICAgICAgIGFkcy5hcHBlbmRDaGlsZChzcGFuKTtcclxuICAgICAgICBvYmouYWRzLmFwcGVuZENoaWxkKGFkcyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRhYmxlIGNvbnRhaW5lciBUT0RPOiBmcm96ZW4gY29sdW1uc1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfdGFibGUnKTtcblxuICAgICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICAgIG9iai5wYWdpbmF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9iai5wYWdpbmF0aW9uLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF9wYWdpbmF0aW9uJyk7XG4gICAgICAgIHZhciBwYWdpbmF0aW9uSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2YXIgcGFnaW5hdGlvblBhZ2VzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9iai5wYWdpbmF0aW9uLmFwcGVuZENoaWxkKHBhZ2luYXRpb25JbmZvKTtcbiAgICAgICAgb2JqLnBhZ2luYXRpb24uYXBwZW5kQ2hpbGQocGFnaW5hdGlvblBhZ2VzKTtcblxuICAgICAgICAvLyBIaWRlIHBhZ2luYXRpb24gaWYgbm90IGluIHVzZVxyXG4gICAgICAgIGlmICghIG9iai5vcHRpb25zLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgb2JqLnBhZ2luYXRpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcblxuICAgICAgICAvLyBBcHBlbmQgY29udGFpbmVycyB0byB0aGUgdGFibGVcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlKSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChvYmouZmlsdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVsZW1lbnRzXG4gICAgICAgIG9iai5jb250ZW50LmFwcGVuZENoaWxkKG9iai50YWJsZSk7XG4gICAgICAgIG9iai5jb250ZW50LmFwcGVuZENoaWxkKG9iai5jb3JuZXIpO1xuICAgICAgICBvYmouY29udGVudC5hcHBlbmRDaGlsZChvYmoudGV4dGFyZWEpO1xuXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKG9iai50b29sYmFyKTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQob2JqLmNvbnRlbnQpO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChvYmoucGFnaW5hdGlvbik7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKG9iai5jb250ZXh0TWVudSk7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKG9iai5hZHMpO1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfY29udGFpbmVyJyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRvb2xiYXJcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnRvb2xiYXIgJiYgb2JqLm9wdGlvbnMudG9vbGJhci5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iai5jcmVhdGVUb29sYmFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGdWxsc2NyZWVuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5mdWxsc2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2Z1bGxzY3JlZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE92ZXJmbG93XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudGFibGVPdmVyZmxvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnRhYmxlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jb250ZW50LnN0eWxlWydvdmVyZmxvdy15J10gPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jb250ZW50LnN0eWxlLm1heEhlaWdodCA9IG9iai5vcHRpb25zLnRhYmxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudGFibGVXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYmouY29udGVudC5zdHlsZVsnb3ZlcmZsb3cteCddID0gJ2F1dG8nO1xuICAgICAgICAgICAgICAgICAgICBvYmouY29udGVudC5zdHlsZS53aWR0aCA9IG9iai5vcHRpb25zLnRhYmxlV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2l0aCB0b29sYmFyc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMudGFibGVPdmVyZmxvdyAhPSB0cnVlICYmIG9iai5vcHRpb25zLnRvb2xiYXIpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3dpdGgtdG9vbGJhcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWN0aW9uc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uRHJhZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICBvYmoudGhlYWQuY2xhc3NMaXN0LmFkZCgnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtblJlc2l6ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBvYmoudGhlYWQuY2xhc3NMaXN0LmFkZCgncmVzaXphYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnJvd0RyYWcgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgb2JqLnRib2R5LmNsYXNzTGlzdC5hZGQoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5yb3dSZXNpemUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgb2JqLnRib2R5LmNsYXNzTGlzdC5hZGQoJ3Jlc2l6YWJsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9hZCBkYXRhXG4gICAgICAgIG9iai5zZXREYXRhKCk7XG5cbiAgICAgICAgLy8gU3R5bGVcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnN0eWxlKSB7XG4gICAgICAgICAgICBvYmouc2V0U3R5bGUob2JqLm9wdGlvbnMuc3R5bGUsIG51bGwsIG51bGwsIDEsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZnJlc2ggdGhlIGRhdGFcclxuICAgICAqIFxyXG4gICAgICogQHJldHVybiB2b2lkXHJcbiAgICAgKi9cclxuICAgIG9iai5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnVybCkge1xyXG4gICAgICAgICAgICAvLyBMb2FkaW5nXHJcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5sb2FkaW5nU3BpbiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBqU3VpdGVzLmxvYWRpbmcuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBqU3VpdGVzLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERhdGFcclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhID0gKHJlc3VsdC5kYXRhKSA/IHJlc3VsdC5kYXRhIDogcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXBhcmUgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBvYmouc2V0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgc3BpblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5sb2FkaW5nU3BpbiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpTdWl0ZXMubG9hZGluZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmouc2V0RGF0YSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXG4gICAgLyoqXG4gICAgICogU2V0IGRhdGFcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYXJyYXkgZGF0YSBJbiBjYXNlIG5vIGRhdGEgaXMgc2VudCwgZGVmYXVsdCBpcyByZWxvYWRlZFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIG9iai5zZXREYXRhID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAvLyBVcGRhdGUgZGF0YVxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZihkYXRhKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERhdGFcbiAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuZGF0YSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJlcGFyZSBkYXRhXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICByb3dbaV0gPSBvYmoub3B0aW9ucy5kYXRhW2pdW29iai5vcHRpb25zLmNvbHVtbnNbaV0ubmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChyb3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkanVzdCBtaW5pbWFsIGRpbWVuc2lvbnNcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBzaXplX2kgPSBvYmoub3B0aW9ucy5jb2x1bW5zLmxlbmd0aDtcbiAgICAgICAgdmFyIHNpemVfaiA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoO1xuICAgICAgICB2YXIgbWluX2kgPSBvYmoub3B0aW9ucy5taW5EaW1lbnNpb25zWzBdO1xuICAgICAgICB2YXIgbWluX2ogPSBvYmoub3B0aW9ucy5taW5EaW1lbnNpb25zWzFdO1xuICAgICAgICB2YXIgbWF4X2kgPSBtaW5faSA+IHNpemVfaSA/IG1pbl9pIDogc2l6ZV9pO1xuICAgICAgICB2YXIgbWF4X2ogPSBtaW5faiA+IHNpemVfaiA/IG1pbl9qIDogc2l6ZV9qO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtYXhfajsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF4X2k7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5kYXRhW2pdID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW2pdID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbal1baV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbal1baV0gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBjb250YWluZXJzXG4gICAgICAgIG9iai5yb3dzID0gW107XG4gICAgICAgIG9iai5yZXN1bHRzID0gbnVsbDtcbiAgICAgICAgb2JqLnJlY29yZHMgPSBbXTtcbiAgICAgICAgb2JqLmhpc3RvcnkgPSBbXTtcblxuICAgICAgICAvLyBSZXNldCBpbnRlcm5hbCBjb250cm9sbGVyc1xuICAgICAgICBvYmouaGlzdG9yeUluZGV4ID0gLTE7XG5cbiAgICAgICAgLy8gUmVzZXQgZGF0YVxuICAgICAgICBvYmoudGJvZHkuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgLy8gTGF6eSBsb2FkaW5nXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5sYXp5TG9hZGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBMb2FkIG9ubHkgMTAwIHJlY29yZHNcbiAgICAgICAgICAgIHZhciBzdGFydE51bWJlciA9IDBcbiAgICAgICAgICAgIHZhciBmaW5hbE51bWJlciA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoIDwgMTAwID8gb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGggOiAxMDA7XG5cbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMucGFnaW5hdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0pFWENFTDogUGFnaW5hdGlvbiB3aWxsIGJlIGRpc2FibGUgZHVlIHRoZSBsYXp5TG9hZGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIC8vIFBhZ2luYXRpb25cbiAgICAgICAgICAgIGlmICghIG9iai5wYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgb2JqLnBhZ2VOdW1iZXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHF1YW50aXR5UGVyUGFnZSA9IG9iai5vcHRpb25zLnBhZ2luYXRpb247XG4gICAgICAgICAgICBzdGFydE51bWJlciA9IChvYmoub3B0aW9ucy5wYWdpbmF0aW9uICogb2JqLnBhZ2VOdW1iZXIpO1xuICAgICAgICAgICAgZmluYWxOdW1iZXIgPSAob2JqLm9wdGlvbnMucGFnaW5hdGlvbiAqIG9iai5wYWdlTnVtYmVyKSArIG9iai5vcHRpb25zLnBhZ2luYXRpb247XG5cbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5kYXRhLmxlbmd0aCA8IGZpbmFsTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmluYWxOdW1iZXIgPSBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzdGFydE51bWJlciA9IDA7XG4gICAgICAgICAgICB2YXIgZmluYWxOdW1iZXIgPSBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGVuZCBub2RlcyB0byB0aGUgSFRNTFxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHJvd1xuICAgICAgICAgICAgdmFyIHRyID0gb2JqLmNyZWF0ZVJvdyhqLCBvYmoub3B0aW9ucy5kYXRhW2pdKTtcbiAgICAgICAgICAgIC8vIEFwcGVuZCBsaW5lIHRvIHRoZSB0YWJsZVxuICAgICAgICAgICAgaWYgKGogPj0gc3RhcnROdW1iZXIgJiYgaiA8IGZpbmFsTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5sYXp5TG9hZGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgY3JlYXRlIHBhZ2luYXRpb24gd2l0aCBsYXp5bG9hZGluZyBhY3RpdmF0ZWRcbiAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICBvYmoudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWVyZ2UgY2VsbHNcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLm1lcmdlQ2VsbHMpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbnVtID0gb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1trZXlzW2ldXTtcbiAgICAgICAgICAgICAgICBvYmouc2V0TWVyZ2Uoa2V5c1tpXSwgbnVtWzBdLCBudW1bMV0sIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRhIHRhYmxlIHdpdGggY3VzdG9tIGNvbmZpZ3VyYXRpb25zIGlmIGFwcGxpY2FibGVcbiAgICAgICAgb2JqLnVwZGF0ZVRhYmxlKCk7XG5cbiAgICAgICAgLy8gT25sb2FkXG4gICAgICAgIGlmICghIG9iai5pZ25vcmVFdmVudHMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25sb2FkKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25sb2FkKGVsLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3aG9sZSB0YWJsZSBkYXRhXG4gICAgICogXG4gICAgICogQHBhcmFtIGJvb2wgZ2V0IGhpZ2hsaWdodGVkIGNlbGxzIG9ubHlcbiAgICAgKiBAcmV0dXJuIGFycmF5IGRhdGFcbiAgICAgKi9cbiAgICAgICAgb2JqLmdldERhdGEgPSBmdW5jdGlvbihoaWdobGlnaHRlZCwgZGF0YU9ubHkpIHtcbiAgICAgICAgLy8gQ29udHJvbCB2YXJzXG4gICAgICAgIHZhciBkYXRhc2V0ID0gW107XG4gICAgICAgIHZhciBweCA9IDA7XG4gICAgICAgIHZhciBweSA9IDA7XG5cbiAgICAgICAgLy8gRGF0YSB0eXBlXHJcbiAgICAgICAgdmFyIGRhdGFUeXBlID0gZGF0YU9ubHkgPT0gdHJ1ZSB8fCBvYmoub3B0aW9ucy5jb3B5Q29tcGF0aWJpbGl0eSA9PSBmYWxzZSA/IHRydWUgOiBmYWxzZTtcclxuXG4gICAgICAgIC8vIENvbHVtbiBhbmQgcm93IGxlbmd0aFxuICAgICAgICB2YXIgeCA9IG9iai5vcHRpb25zLmNvbHVtbnMubGVuZ3RoXG4gICAgICAgIHZhciB5ID0gb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGhcblxuICAgICAgICAvLyBHbyB0aHJvdWdoIHRoZSBjb2x1bW5zIHRvIGdldCB0aGUgZGF0YVxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHk7IGorKykge1xuICAgICAgICAgICAgcHggPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBDZWxsIHNlbGVjdGVkIG9yIGZ1bGxzZXRcbiAgICAgICAgICAgICAgICBpZiAoISBoaWdobGlnaHRlZCB8fCBvYmoucmVjb3Jkc1tqXVtpXS5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZ2hsaWdodCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoISBkYXRhc2V0W3B5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldFtweV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoISBkYXRhVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldFtweV1bcHhdID0gb2JqLnJlY29yZHNbal1baV0uaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldFtweV1bcHhdID0gb2JqLm9wdGlvbnMuZGF0YVtqXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBweCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChweCA+IDApIHtcbiAgICAgICAgICAgICAgICBweSsrO1xuICAgICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIHJldHVybiBkYXRhc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2hvbGUgdGFibGUgZGF0YVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbnRlZ2VyIHJvdyBudW1iZXJcbiAgICAgKiBAcmV0dXJuIHN0cmluZyB2YWx1ZVxuICAgICAqL1xuICAgIG9iai5nZXRKc29uID0gZnVuY3Rpb24oaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgLy8gQ29udHJvbCB2YXJzXG4gICAgICAgIHZhciBkYXRhID0gW107XG5cbiAgICAgICAgLy8gQ29sdW1uIGFuZCByb3cgbGVuZ3RoXG4gICAgICAgIHZhciB4ID0gb2JqLm9wdGlvbnMuY29sdW1ucy5sZW5ndGhcbiAgICAgICAgdmFyIHkgPSBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aFxuXG4gICAgICAgIC8vIEdvIHRocm91Z2ggdGhlIGNvbHVtbnMgdG8gZ2V0IHRoZSBkYXRhXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgeTsgaisrKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgaGlnaGxpZ2h0ZWQgfHwgb2JqLnJlY29yZHNbal1baV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdobGlnaHQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvd1tvYmoub3B0aW9ucy5jb2x1bW5zW2ldLm5hbWVdID0gb2JqLm9wdGlvbnMuZGF0YVtqXVtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaChyb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHJvdyBkYXRhIGJ5IHJvd051bWJlclxuICAgICAqL1xuICAgIG9iai5nZXRSb3dEYXRhID0gZnVuY3Rpb24ocm93TnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBvYmoub3B0aW9ucy5kYXRhW3Jvd051bWJlcl07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGEgcm93IGRhdGEgYnkgcm93TnVtYmVyXG4gICAgICovXG4gICAgb2JqLnNldFJvd0RhdGEgPSBmdW5jdGlvbihyb3dOdW1iZXIsIGRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGNlbGxcbiAgICAgICAgICAgIHZhciBjb2x1bW5OYW1lID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoWyBpLCByb3dOdW1iZXIgXSk7XG4gICAgICAgICAgICAvLyBTZXQgdmFsdWVcbiAgICAgICAgICAgIGlmIChkYXRhW2ldICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmouc2V0VmFsdWUoY29sdW1uTmFtZSwgZGF0YVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBjb2x1bW4gZGF0YSBieSBjb2x1bW5OdW1iZXJcbiAgICAgKi9cbiAgICBvYmouZ2V0Q29sdW1uRGF0YSA9IGZ1bmN0aW9uKGNvbHVtbk51bWJlcikge1xuICAgICAgICB2YXIgZGF0YXNldCA9IFtdO1xuICAgICAgICAvLyBHbyB0aHJvdWdoIHRoZSByb3dzIHRvIGdldCB0aGUgZGF0YVxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGRhdGFzZXQucHVzaChvYmoub3B0aW9ucy5kYXRhW2pdW2NvbHVtbk51bWJlcl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBhIGNvbHVtbiBkYXRhIGJ5IGNvbE51bWJlclxuICAgICAqL1xuICAgIG9iai5zZXRDb2x1bW5EYXRhID0gZnVuY3Rpb24oY29sTnVtYmVyLCBkYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjZWxsXG4gICAgICAgICAgICB2YXIgY29sdW1uTmFtZSA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFsgY29sTnVtYmVyLCBqIF0pO1xuICAgICAgICAgICAgLy8gU2V0IHZhbHVlXG4gICAgICAgICAgICBpZiAoZGF0YVtqXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldFZhbHVlKGNvbHVtbk5hbWUsIGRhdGFbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHJvd1xuICAgICAqL1xuICAgIG9iai5jcmVhdGVSb3cgPSBmdW5jdGlvbihqLCBkYXRhKSB7XG4gICAgICAgIC8vIENyZWF0ZSBjb250YWluZXJcbiAgICAgICAgaWYgKCEgb2JqLnJlY29yZHNbal0pIHtcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmYXVsdCBkYXRhXG4gICAgICAgIGlmICghIGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gb2JqLm9wdGlvbnMuZGF0YVtqXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOZXcgbGluZSBvZiBkYXRhIHRvIGJlIGFwcGVuZCBpbiB0aGUgdGFibGVcbiAgICAgICAgb2JqLnJvd3Nbal0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICBvYmoucm93c1tqXS5zZXRBdHRyaWJ1dGUoJ2RhdGEteScsIGopO1xuICAgICAgICAvLyBEZWZpbml0aW9uc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMucm93c1tqXSkge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnJvd3Nbal0uaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgb2JqLnJvd3Nbal0uc3R5bGUuaGVpZ2h0ID0gb2JqLm9wdGlvbnMucm93c1tqXS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUm93IG51bWJlciBsYWJlbFxuICAgICAgICB2YXIgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICB0ZC5pbm5lckhUTUwgPSBwYXJzZUludChqICsgMSk7XG4gICAgICAgIHRkLnNldEF0dHJpYnV0ZSgnZGF0YS15Jywgaik7XG4gICAgICAgIHRkLmNsYXNzTmFtZSA9ICdqZXhjZWxfcm93JztcbiAgICAgICAgb2JqLnJvd3Nbal0uYXBwZW5kQ2hpbGQodGQpO1xuXG4gICAgICAgIC8vIERhdGEgY29sdW1uc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gTmV3IGNvbHVtbiBvZiBkYXRhIHRvIGJlIGFwcGVuZCBpbiB0aGUgbGluZVxuICAgICAgICAgICAgb2JqLnJlY29yZHNbal1baV0gPSBvYmouY3JlYXRlQ2VsbChpLCBqLCBkYXRhW2ldKTtcbiAgICAgICAgICAgIC8vIEFkZCBjb2x1bW4gdG8gdGhlIHJvd1xuICAgICAgICAgICAgb2JqLnJvd3Nbal0uYXBwZW5kQ2hpbGQob2JqLnJlY29yZHNbal1baV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHJvdyB0byB0aGUgdGFibGUgYm9keVxuICAgICAgICByZXR1cm4gb2JqLnJvd3Nbal07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGNlbGxcbiAgICAgKi9cbiAgICBvYmouY3JlYXRlQ2VsbCA9IGZ1bmN0aW9uKGksIGosIHZhbHVlKSB7XG4gICAgICAgIC8vIENyZWF0ZSBjZWxsIGFuZCBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRkLnNldEF0dHJpYnV0ZSgnZGF0YS14JywgaSk7XG4gICAgICAgIHRkLnNldEF0dHJpYnV0ZSgnZGF0YS15Jywgaik7XG4gICAgICAgIC8vIEhpZGRlbiBjb2x1bW5cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgdGQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnY2hlY2tib3gnIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgaW5wdXRcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGVsZW1lbnQudHlwZSA9IG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZTtcbiAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9ICdjJyArIGk7XG4gICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSAodmFsdWUgPT0gMSB8fCB2YWx1ZSA9PSB0cnVlIHx8IHZhbHVlID09ICd0cnVlJykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBlbGVtZW50Lm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvYmouc2V0VmFsdWUodGQsIHRoaXMuY2hlY2tlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnJlYWRPbmx5ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwZW5kIHRvIHRoZSB0YWJsZVxuICAgICAgICAgICAgdGQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHZhbHVlcyBhcmUgY29ycmVjdFxuICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVtqXVtpXSA9IGVsZW1lbnQuY2hlY2tlZDtcbiAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnR5cGUgPT0gJ2NhbGVuZGFyJykge1xuICAgICAgICAgICAgLy8gVHJ5IGZvcm1hdHRlZCBkYXRlXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkID0galN1aXRlcy5jYWxlbmRhci5leHRyYWN0RGF0ZUZyb21TdHJpbmcodmFsdWUsIG9iai5vcHRpb25zLmNvbHVtbnNbaV0ub3B0aW9ucy5mb3JtYXQpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGNhbGVuZGFyIGNlbGxcbiAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IGpTdWl0ZXMuY2FsZW5kYXIuZ2V0RGF0ZVN0cmluZyhmb3JtYXR0ZWQgPyBmb3JtYXR0ZWQgOiB2YWx1ZSwgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS5vcHRpb25zLmZvcm1hdCk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdkcm9wZG93bicgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdhdXRvY29tcGxldGUnKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgZHJvcGRvd24gY2VsbFxuICAgICAgICAgICAgdGQuY2xhc3NMaXN0LmFkZCgnamV4Y2VsX2Ryb3Bkb3duJyk7XG4gICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBvYmouZ2V0RHJvcERvd25WYWx1ZShpLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdjb2xvcicpIHtcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnJlbmRlciA9PSAnc3F1YXJlJykge1xuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNvbG9yLmNsYXNzTmFtZSA9ICdjb2xvcic7XG4gICAgICAgICAgICAgICAgY29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGQuYXBwZW5kQ2hpbGQoY29sb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZC5zdHlsZS5jb2xvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuc3Vic3RyKDAsIDEwKSA9PSAnZGF0YTppbWFnZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKCcnK3ZhbHVlKS5zdWJzdHIoMCwxKSA9PSAnPScgJiYgb2JqLm9wdGlvbnMucGFyc2VGb3JtdWxhcyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBvYmouZXhlY3V0ZUZvcm11bGEodmFsdWUsIGksIGopXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS5tYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY2ltYWwgPSBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLmRlY2ltYWwgfHwgJy4nO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gJycgKyBqU3VpdGVzLm1hc2sucnVuKHZhbHVlLCBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLm1hc2ssIGRlY2ltYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlYWRvbmx5XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnJlYWRPbmx5ID09IHRydWUpIHtcbiAgICAgICAgICAgIHRkLmNsYXNzTmFtZSA9ICdyZWFkb25seSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXh0IGFsaWduXG4gICAgICAgIHZhciBjb2xBbGlnbiA9IG9iai5vcHRpb25zLmNvbHVtbnNbaV0uYWxpZ24gPyBvYmoub3B0aW9ucy5jb2x1bW5zW2ldLmFsaWduIDogJ2NlbnRlcic7XG4gICAgICAgIHRkLnN0eWxlLnRleHRBbGlnbiA9IGNvbEFsaWduO1xuXG4gICAgICAgIC8vIFdyYXAgb3B0aW9uXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLndvcmRXcmFwICE9IGZhbHNlICYmIChvYmoub3B0aW9ucy53b3JkV3JhcCA9PSB0cnVlIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbaV0ud29yZFdyYXAgPT0gdHJ1ZSB8fCB0ZC5pbm5lckhUTUwubGVuZ3RoID4gMjAwKSkge1xuICAgICAgICAgICAgdGQuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdmVyZmxvd1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB0ZC5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tqXVtpLTFdLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpID09IG9iai5vcHRpb25zLmNvbHVtbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0ZC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZDtcbiAgICB9XG5cbiAgICBvYmouY3JlYXRlQ2VsbEhlYWRlciA9IGZ1bmN0aW9uKGNvbE51bWJlcikge1xuICAgICAgICAvLyBDcmVhdGUgY29sIGdsb2JhbCBjb250cm9sXG4gICAgICAgIHZhciBjb2xXaWR0aCA9IG9iai5vcHRpb25zLmNvbHVtbnNbY29sTnVtYmVyXS53aWR0aCA/IG9iai5vcHRpb25zLmNvbHVtbnNbY29sTnVtYmVyXS53aWR0aCA6IG9iai5vcHRpb25zLmRlZmF1bHRDb2xXaWR0aDtcbiAgICAgICAgdmFyIGNvbEFsaWduID0gb2JqLm9wdGlvbnMuY29sdW1uc1tjb2xOdW1iZXJdLmFsaWduID8gb2JqLm9wdGlvbnMuY29sdW1uc1tjb2xOdW1iZXJdLmFsaWduIDogb2JqLm9wdGlvbnMuZGVmYXVsdENvbEFsaWduO1xuXG4gICAgICAgIC8vIENyZWF0ZSBoZWFkZXIgY2VsbFxuICAgICAgICBvYmouaGVhZGVyc1tjb2xOdW1iZXJdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgb2JqLmhlYWRlcnNbY29sTnVtYmVyXS5pbm5lckhUTUwgPSBvYmoub3B0aW9ucy5jb2x1bW5zW2NvbE51bWJlcl0udGl0bGUgPyBvYmoub3B0aW9ucy5jb2x1bW5zW2NvbE51bWJlcl0udGl0bGUgOiBqZXhjZWwuZ2V0Q29sdW1uTmFtZShjb2xOdW1iZXIpO1xuICAgICAgICBvYmouaGVhZGVyc1tjb2xOdW1iZXJdLnNldEF0dHJpYnV0ZSgnZGF0YS14JywgY29sTnVtYmVyKTtcbiAgICAgICAgb2JqLmhlYWRlcnNbY29sTnVtYmVyXS5zdHlsZS50ZXh0QWxpZ24gPSBjb2xBbGlnbjtcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbY29sTnVtYmVyXS50aXRsZSkge1xuICAgICAgICAgICAgb2JqLmhlYWRlcnNbY29sTnVtYmVyXS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgb2JqLm9wdGlvbnMuY29sdW1uc1tjb2xOdW1iZXJdLnRpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdpZHRoIGNvbnRyb2xcbiAgICAgICAgb2JqLmNvbGdyb3VwW2NvbE51bWJlcl0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2wnKTtcbiAgICAgICAgb2JqLmNvbGdyb3VwW2NvbE51bWJlcl0uc2V0QXR0cmlidXRlKCd3aWR0aCcsIGNvbFdpZHRoKTtcblxuICAgICAgICAvLyBIaWRkZW4gY29sdW1uXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2NvbE51bWJlcl0udHlwZSA9PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgb2JqLmhlYWRlcnNbY29sTnVtYmVyXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgb2JqLmNvbGdyb3VwW2NvbE51bWJlcl0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9iai5jcmVhdGVOZXN0ZWRIZWFkZXIgPSBmdW5jdGlvbihuZXN0ZWRJbmZvcm1hdGlvbikge1xuICAgICAgICB2YXIgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICB0ci5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfbmVzdGVkJyk7XG4gICAgICAgIHZhciB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcblxuICAgICAgICB2YXIgaGVhZGVySW5kZXggPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5lc3RlZEluZm9ybWF0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBEZWZhdWx0IHZhbHVlc1xuICAgICAgICAgICAgaWYgKCEgbmVzdGVkSW5mb3JtYXRpb25baV0uY29sc3Bhbikge1xuICAgICAgICAgICAgICAgIG5lc3RlZEluZm9ybWF0aW9uW2ldLmNvbHNwYW4gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEgbmVzdGVkSW5mb3JtYXRpb25baV0uYWxpZ24pIHtcbiAgICAgICAgICAgICAgICBuZXN0ZWRJbmZvcm1hdGlvbltpXS5hbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEgbmVzdGVkSW5mb3JtYXRpb25baV0udGl0bGUpIHtcbiAgICAgICAgICAgICAgICBuZXN0ZWRJbmZvcm1hdGlvbltpXS50aXRsZSA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOdW1iZXIgb2YgY29sdW1uc1xuICAgICAgICAgICAgdmFyIG51bWJlck9mQ29sdW1ucyA9IG5lc3RlZEluZm9ybWF0aW9uW2ldLmNvbHNwYW47XG5cbiAgICAgICAgICAgIC8vIENsYXNzZXMgY29udGFpbmVyXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gW107XG4gICAgICAgICAgICAvLyBIZWFkZXIgY2xhc3NlcyBmb3IgdGhpcyBjZWxsXG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IG51bWJlck9mQ29sdW1uczsgeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbaGVhZGVySW5kZXhdICYmIG9iai5vcHRpb25zLmNvbHVtbnNbaGVhZGVySW5kZXhdLnR5cGUgPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZDb2x1bW5zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKGhlYWRlckluZGV4KTtcbiAgICAgICAgICAgICAgICBoZWFkZXJJbmRleCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGVkIHRoZSBuZXN0ZWQgY2VsbFxuICAgICAgICAgICAgdmFyIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIHRkLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2x1bW4nLCBjb2x1bW4uam9pbignLCcpKTtcbiAgICAgICAgICAgIHRkLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsIG5lc3RlZEluZm9ybWF0aW9uW2ldLmNvbHNwYW4pO1xuICAgICAgICAgICAgdGQuc2V0QXR0cmlidXRlKCdhbGlnbicsIG5lc3RlZEluZm9ybWF0aW9uW2ldLmFsaWduKTtcbiAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IG5lc3RlZEluZm9ybWF0aW9uW2ldLnRpdGxlO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0b29sYmFyXG4gICAgICovXG4gICAgb2JqLmNyZWF0ZVRvb2xiYXIgPSBmdW5jdGlvbih0b29sYmFyKSB7XG4gICAgICAgIGlmICh0b29sYmFyKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy50b29sYmFyID0gdG9vbGJhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0b29sYmFyID0gb2JqLm9wdGlvbnMudG9vbGJhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbGJhci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRvb2xiYXJbaV0udHlwZSA9PSAnaScpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uY2xhc3NMaXN0LmFkZCgnamV4Y2VsX3Rvb2xiYXJfaXRlbScpO1xuICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLmNsYXNzTGlzdC5hZGQoJ21hdGVyaWFsLWljb25zJyk7XG4gICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLWsnLCB0b29sYmFyW2ldLmspO1xuICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS12JywgdG9vbGJhcltpXS52KTtcbiAgICAgICAgICAgICAgICAvLyBUb29sdGlwXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJbaV0udG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdG9vbGJhcltpXS50b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIGNsaWNrXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJbaV0ub25jbGljayAmJiB0eXBlb2YodG9vbGJhcltpXS5vbmNsaWNrKSkge1xuICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbS5vbmNsaWNrID0gdG9vbGJhcltpXS5vbmNsaWNrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS12Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0U3R5bGUob2JqLmhpZ2hsaWdodGVkLCBrLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgZWxlbWVudFxuICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLmlubmVySFRNTCA9IHRvb2xiYXJbaV0uY29udGVudDtcbiAgICAgICAgICAgICAgICBvYmoudG9vbGJhci5hcHBlbmRDaGlsZCh0b29sYmFySXRlbSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvb2xiYXJbaV0udHlwZSA9PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICAgICB0b29sYmFySXRlbS5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfdG9vbGJhcl9pdGVtJyk7XG4gICAgICAgICAgICAgICB0b29sYmFySXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaycsIHRvb2xiYXJbaV0uayk7XG4gICAgICAgICAgICAgICAvLyBUb29sdGlwXG4gICAgICAgICAgICAgICBpZiAodG9vbGJhcltpXS50b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uc2V0QXR0cmlidXRlKCd0aXRsZScsIHRvb2xiYXJbaV0udG9vbHRpcCk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAvLyBIYW5kbGUgb25jaGFuZ2VcbiAgICAgICAgICAgICAgIGlmICh0b29sYmFyW2ldLm9uY2hhbmdlICYmIHR5cGVvZih0b29sYmFyW2ldLm9uY2hhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLm9uY2hhbmdlID0gdG9vbGJhcltpXS5vbmNoYW5nZTtcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0ub25jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXRTdHlsZShvYmouaGlnaGxpZ2h0ZWQsIGssIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIC8vIEFkZCBvcHRpb25zIHRvIHRoZSBkcm9wZG93blxuICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IHRvb2xiYXJbaV0udi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckRyb3Bkb3duT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXJEcm9wZG93bk9wdGlvbi52YWx1ZSA9IHRvb2xiYXJbaV0udltqXTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhckRyb3Bkb3duT3B0aW9uLmlubmVySFRNTCA9IHRvb2xiYXJbaV0udltqXTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uYXBwZW5kQ2hpbGQodG9vbGJhckRyb3Bkb3duT3B0aW9uKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIG9iai50b29sYmFyLmFwcGVuZENoaWxkKHRvb2xiYXJJdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbGJhcltpXS50eXBlID09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgICAgICB0b29sYmFySXRlbS5jbGFzc0xpc3QuYWRkKCdqZXhjZWxfdG9vbGJhcl9pdGVtJyk7XG4gICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLmNsYXNzTGlzdC5hZGQoJ21hdGVyaWFsLWljb25zJyk7XG4gICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1rJywgdG9vbGJhcltpXS5rKTtcbiAgICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXYnLCAnJyk7XG4gICAgICAgICAgICAgICAgIC8vIFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJbaV0udG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckl0ZW0uc2V0QXR0cmlidXRlKCd0aXRsZScsIHRvb2xiYXJbaV0udG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgb2JqLnRvb2xiYXIuYXBwZW5kQ2hpbGQodG9vbGJhckl0ZW0pO1xuICAgICAgICAgICAgICAgICB0b29sYmFySXRlbS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0b29sYmFySXRlbS5pbm5lckhUTUwgPSB0b29sYmFyW2ldLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgIGpTdWl0ZXMuY29sb3IodG9vbGJhckl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlOmZ1bmN0aW9uKG8sIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgayA9IG8uZ2V0QXR0cmlidXRlKCdkYXRhLWsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0U3R5bGUob2JqLmhpZ2hsaWdodGVkLCBrLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBjZWxsc1xuICAgICAqIEBwYXJhbSBjZWxsTmFtZVxuICAgICAqIEBwYXJhbSBjb2xzcGFuXG4gICAgICogQHBhcmFtIHJvd3NwYW5cbiAgICAgKiBAcGFyYW0gaWdub3JlSGlzdG9yeUFuZEV2ZW50c1xuICAgICAqL1xuICAgIG9iai5zZXRNZXJnZSA9IGZ1bmN0aW9uKGNlbGxOYW1lLCBjb2xzcGFuLCByb3dzcGFuLCBpZ25vcmVIaXN0b3J5QW5kRXZlbnRzKSB7XG4gICAgICAgIHZhciB0ZXN0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCEgY2VsbE5hbWUpIHtcbiAgICAgICAgICAgIGlmICghIG9iai5oaWdobGlnaHRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbGVydChvYmoub3B0aW9ucy50ZXh0Lm5vQ2VsbHNTZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB4MSA9IHBhcnNlSW50KG9iai5oaWdobGlnaHRlZFswXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpKTtcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBwYXJzZUludChvYmouaGlnaGxpZ2h0ZWRbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgICAgICAgICAgdmFyIHgyID0gcGFyc2VJbnQob2JqLmhpZ2hsaWdodGVkW29iai5oaWdobGlnaHRlZC5sZW5ndGgtMV0uZ2V0QXR0cmlidXRlKCdkYXRhLXgnKSk7XG4gICAgICAgICAgICAgICAgdmFyIHkyID0gcGFyc2VJbnQob2JqLmhpZ2hsaWdodGVkW29iai5oaWdobGlnaHRlZC5sZW5ndGgtMV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGxOYW1lID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoWyB4MSwgeTEgXSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbHNwYW4gPSAoeDIgLSB4MSkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciByb3dzcGFuID0gKHkyIC0geTEpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbE5hbWUsIHRydWUpO1xuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5tZXJnZUNlbGxzW2NlbGxOYW1lXSkge1xuICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW2NlbGxbMV1dW2NlbGxbMF1dLmdldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZWQnKSkge1xuICAgICAgICAgICAgICAgIHRlc3QgPSBvYmoub3B0aW9ucy50ZXh0LmNlbGxBbHJlYWR5TWVyZ2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCghIGNvbHNwYW4gfHwgY29sc3BhbiA8IDIpICYmICghIHJvd3NwYW4gfHwgcm93c3BhbiA8IDIpKSB7XG4gICAgICAgICAgICB0ZXN0ID0gb2JqLm9wdGlvbnMudGV4dC5pbnZhbGlkTWVyZ2VQcm9wZXJ0aWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gY2VsbFsxXTsgaiA8IGNlbGxbMV0gKyByb3dzcGFuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gY2VsbFswXTsgaSA8IGNlbGxbMF0gKyBjb2xzcGFuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbk5hbWUgPSBqZXhjZWwuZ2V0Q29sdW1uTmFtZUZyb21JZChbaSwgal0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1baV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gb2JqLm9wdGlvbnMudGV4dC50aGVyZUlzQUNvbmZsaWN0V2l0aEFub3RoZXJNZXJnZWRDZWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRlc3QpIHtcbiAgICAgICAgICAgIGFsZXJ0KHRlc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQWRkIHByb3BlcnR5XG4gICAgICAgICAgICBpZiAoY29sc3BhbiA+IDEpIHtcbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xzcGFuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sc3BhbiA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm93c3BhbiA+IDEpIHtcbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nLCByb3dzcGFuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm93c3BhbiA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBLZWVwIGxpbmtzIHRvIHRoZSBleGlzdGluZyBub2Rlc1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjZWxsTmFtZV0gPSBbIGNvbHNwYW4sIHJvd3NwYW4sIFtdIF07XG4gICAgICAgICAgICAvLyBNYXJrIGNlbGwgYXMgbWVyZ2VkXG4gICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2VkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIC8vIE92ZXJmbG93XG4gICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgLy8gSGlzdG9yeSBkYXRhXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgICAgICAgLy8gQWRqdXN0IHRoZSBub2Rlc1xuICAgICAgICAgICAgZm9yICh2YXIgeSA9IGNlbGxbMV07IHkgPCBjZWxsWzFdICsgcm93c3BhbjsgeSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IGNlbGxbMF07IHggPCBjZWxsWzBdICsgY29sc3BhbjsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIChjZWxsWzBdID09IHggJiYgY2VsbFsxXSA9PSB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG9iai5vcHRpb25zLmRhdGFbeV1beF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUNlbGwoeCwgeSwgJycsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjZWxsTmFtZV1bMl0ucHVzaChvYmoucmVjb3Jkc1t5XVt4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0gPSBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEluIHRoZSBpbml0aWFsaXphdGlvbiBpcyBub3QgbmVjZXNzYXJ5IGtlZXAgdGhlIGhpc3RvcnlcbiAgICAgICAgICAgIG9iai51cGRhdGVTZWxlY3Rpb24ob2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0pO1xuXG4gICAgICAgICAgICBpZiAoISBpZ25vcmVIaXN0b3J5QW5kRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246J3NldE1lcmdlJyxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOmNlbGxOYW1lLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOmNvbHNwYW4sXG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46cm93c3BhbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTpkYXRhLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbm1lcmdlKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9ubWVyZ2UoZWwsIGNlbGxOYW1lLCBjb2xzcGFuLCByb3dzcGFuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBjZWxsc1xuICAgICAqIEBwYXJhbSBjZWxsTmFtZVxuICAgICAqIEBwYXJhbSBjb2xzcGFuXG4gICAgICogQHBhcmFtIHJvd3NwYW5cbiAgICAgKiBAcGFyYW0gaWdub3JlSGlzdG9yeUFuZEV2ZW50c1xuICAgICAqL1xuICAgIG9iai5nZXRNZXJnZSA9IGZ1bmN0aW9uKGNlbGxOYW1lKSB7XG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIGlmIChjZWxsTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY2VsbE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IFsgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjZWxsTmFtZV1bMF0sIG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY2VsbE5hbWVdWzFdIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLm1lcmdlQ2VsbHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkQ2VsbHMgPSBvYmoub3B0aW9ucy5tZXJnZUNlbGxzO1xuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFba2V5c1tpXV0gPSBbIG9iai5vcHRpb25zLm1lcmdlQ2VsbHNba2V5c1tpXV1bMF0sIG9iai5vcHRpb25zLm1lcmdlQ2VsbHNba2V5c1tpXV1bMV0gXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgbWVyZ2UgYnkgY2VsbG5hbWVcbiAgICAgKiBAcGFyYW0gY2VsbE5hbWVcbiAgICAgKi9cbiAgICBvYmoucmVtb3ZlTWVyZ2UgPSBmdW5jdGlvbihjZWxsTmFtZSwgZGF0YSwga2VlcE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY2VsbE5hbWVdKSB7XG4gICAgICAgICAgICB2YXIgY2VsbCA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKGNlbGxOYW1lLCB0cnVlKTtcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2NlbGxbMV1dW2NlbGxbMF1dLnJlbW92ZUF0dHJpYnV0ZSgnY29sc3BhbicpO1xuICAgICAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0ucmVtb3ZlQXR0cmlidXRlKCdyb3dzcGFuJyk7XG4gICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2VkJyk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY2VsbE5hbWVdO1xuXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbmZvWzFdOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZm9bMF07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDAgfHwgaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW2NlbGxbMV0ral1bY2VsbFswXStpXSA9IGluZm9bMl1baW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXStqXVtjZWxsWzBdK2ldLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY292ZXIgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YVtpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlQ2VsbChjZWxsWzBdK2ksIGNlbGxbMV0raiwgZGF0YVtpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbihvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXSwgb2JqLnJlY29yZHNbY2VsbFsxXStqLTFdW2NlbGxbMF0raS0xXSk7XG5cbiAgICAgICAgICAgIGlmICghIGtlZXBPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlKG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY2VsbE5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgbWVyZ2VkIGNlbGxzXG4gICAgICovXG4gICAgb2JqLmRlc3Ryb3lNZXJnZWQgPSBmdW5jdGlvbihrZWVwT3B0aW9ucykge1xuICAgICAgICAvLyBSZW1vdmUgYW55IG1lcmdlZCBjZWxsc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMubWVyZ2VDZWxscykge1xuICAgICAgICAgICAgdmFyIG1lcmdlZENlbGxzID0gb2JqLm9wdGlvbnMubWVyZ2VDZWxscztcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvYmoucmVtb3ZlTWVyZ2Uoa2V5c1tpXSwgbnVsbCwga2VlcE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgY29sdW1uIG1lcmdlZFxuICAgICAqL1xuICAgIG9iai5pc0NvbE1lcmdlZCA9IGZ1bmN0aW9uKHgsIGluc2VydEJlZm9yZSkge1xuICAgICAgICB2YXIgY29scyA9IFtdO1xuICAgICAgICAvLyBSZW1vdmUgYW55IG1lcmdlZCBjZWxsc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMubWVyZ2VDZWxscykge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmoub3B0aW9ucy5tZXJnZUNlbGxzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpbmZvID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoa2V5c1tpXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbHNwYW4gPSBvYmoub3B0aW9ucy5tZXJnZUNlbGxzW2tleXNbaV1dWzBdO1xuICAgICAgICAgICAgICAgIHZhciB4MSA9IGluZm9bMF07XG4gICAgICAgICAgICAgICAgdmFyIHgyID0gaW5mb1swXSArIChjb2xzcGFuID4gMSA/IGNvbHNwYW4gLSAxIDogMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0QmVmb3JlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh4MSA8PSB4ICYmIHgyID49IHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzLnB1c2goa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHgxIDwgeCAmJiB4MiA+PSB4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHMucHVzaChrZXlzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoeDEgPD0geCAmJiB4MiA+IHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29scy5wdXNoKGtleXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgcm93cyBtZXJnZWRcbiAgICAgKi9cbiAgICBvYmouaXNSb3dNZXJnZWQgPSBmdW5jdGlvbih5LCBpbnNlcnRCZWZvcmUpIHtcbiAgICAgICAgdmFyIHJvd3MgPSBbXTtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBtZXJnZWQgY2VsbHNcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLm1lcmdlQ2VsbHMpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKGtleXNbaV0sIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciByb3dzcGFuID0gb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1trZXlzW2ldXVsxXTtcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBpbmZvWzFdO1xuICAgICAgICAgICAgICAgIHZhciB5MiA9IGluZm9bMV0gKyAocm93c3BhbiA+IDEgPyByb3dzcGFuIC0gMSA6IDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydEJlZm9yZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoeTEgPD0geSAmJiB5MiA+PSB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5wdXNoKGtleXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydEJlZm9yZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh5MSA8IHkgJiYgeTIgPj0geSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHkxIDw9IHkgJiYgeTIgPiB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChrZXlzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIGVkaXRvclxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmplY3QgY2VsbFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIG9iai5vcGVuRWRpdG9yID0gZnVuY3Rpb24oY2VsbCwgZW1wdHksIGUpIHtcbiAgICAgICAgLy8gR2V0IGNlbGwgcG9zaXRpb25cbiAgICAgICAgdmFyIHkgPSBjZWxsLmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG4gICAgICAgIHZhciB4ID0gY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuXG4gICAgICAgIC8vIE9uIGVkaXRpb24gc3RhcnRcbiAgICAgICAgaWYgKCEgb2JqLmlnbm9yZUV2ZW50cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmVkaXRpb25zdGFydCkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uZWRpdGlvbnN0YXJ0KGVsLCBjZWxsLCB4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE92ZXJmbG93XG4gICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beC0xXS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGVkaXRvclxuICAgICAgICB2YXIgY3JlYXRlRWRpdG9yID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAgICAgLy8gQ2VsbCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgdmFyIGluZm8gPSBjZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgZHJvcGRvd25cbiAgICAgICAgICAgIHZhciBlZGl0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgICAgICAgZWRpdG9yLnN0eWxlLndpZHRoID0gKGluZm8ud2lkdGgpICsgJ3B4JztcbiAgICAgICAgICAgIGVkaXRvci5zdHlsZS5oZWlnaHQgPSAoaW5mby5oZWlnaHQgLSAyKSArICdweCc7XG4gICAgICAgICAgICBlZGl0b3Iuc3R5bGUubWluSGVpZ2h0ID0gKGluZm8uaGVpZ2h0IC0gMikgKyAncHgnO1xuXG4gICAgICAgICAgICAvLyBFZGl0IGNlbGxcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnZWRpdG9yJyk7XG4gICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChlZGl0b3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gZWRpdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVhZG9ubHlcbiAgICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZWFkb25seScpID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEhvbGRlclxuICAgICAgICAgICAgb2JqLmVkaXRpb24gPSBbIG9iai5yZWNvcmRzW3ldW3hdLCBvYmoucmVjb3Jkc1t5XVt4XS5pbm5lckhUTUwsIHgsIHkgXTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBjdXN0b20gZWRpdG9yIGZvciBpdFxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0uZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3VzdG9tIGVkaXRvcnNcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmVkaXRvci5vcGVuRWRpdG9yKGNlbGwsIGVsLCBlbXB0eSwgZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5hdGl2ZSBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnY2hlY2tib3gnIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjZWxsLmNoaWxkcmVuWzBdLmNoZWNrZWQgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvb2dsZSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBvYmouc2V0VmFsdWUoY2VsbCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qga2VlcCBlZGl0aW9uIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgb2JqLmVkaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdkcm9wZG93bicgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdhdXRvY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9iai5vcHRpb25zLmRhdGFbeV1beF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMuY29sdW1uc1t4XS5maWx0ZXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmZpbHRlcihlbCwgY2VsbCwgeCwgeSwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG9iai5vcHRpb25zLmNvbHVtbnNbeF0uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGVkaXRvclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWRpdG9yID0gY3JlYXRlRWRpdG9yKCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZTogb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5tdWx0aXBsZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5hdXRvY29tcGxldGUgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdhdXRvY29tcGxldGUnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkOnRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5tdWx0aXBsZSA/IHZhbHVlLnNwbGl0KCc7JykgOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOicxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDplZGl0b3Iuc3R5bGUubWluSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IChvYmoub3B0aW9ucy50YWJsZU92ZXJmbG93ID09IHRydWUgfHwgb2JqLm9wdGlvbnMuZnVsbHNjcmVlbiA9PSB0cnVlKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xvc2U6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmNsb3NlRWRpdG9yKGNlbGwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS5vcHRpb25zICYmIG9iai5vcHRpb25zLmNvbHVtbnNbeF0ub3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnR5cGUgPSBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm9wdGlvbnMudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqU3VpdGVzLmRyb3Bkb3duKGVkaXRvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ2NhbGVuZGFyJyB8fCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmoub3B0aW9ucy5kYXRhW3ldW3hdO1xuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgIHZhciBlZGl0b3IgPSBjcmVhdGVFZGl0b3IoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy50YWJsZU92ZXJmbG93ID09IHRydWUgfHwgb2JqLm9wdGlvbnMuZnVsbHNjcmVlbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm9wdGlvbnMucG9zaXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbeF0ub3B0aW9ucy52YWx1ZSA9IG9iai5vcHRpb25zLmRhdGFbeV1beF07XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbeF0ub3B0aW9ucy5vcGVuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm9wdGlvbnMub25jbG9zZSA9IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmNsb3NlRWRpdG9yKGNlbGwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqU3VpdGVzLmNvbG9yKGVkaXRvciwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IGpTdWl0ZXMuY2FsZW5kYXIoZWRpdG9yLCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvY3VzIG9uIGVkaXRvclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBjZWxsLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgIHZhciBlZGl0b3IgPSBjcmVhdGVFZGl0b3IoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdqY2xvc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltZyAmJiBpbWcuc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5pbWFnZShkaXYsIG9iai5vcHRpb25zLmltYWdlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0Q29udGVudCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCA8IHJlY3QuYm90dG9tICsgcmVjdENvbnRlbnQuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXYuc3R5bGUudG9wID0gKHJlY3QudG9wIC0gKHJlY3RDb250ZW50LmhlaWdodCArIDIpKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXYuc3R5bGUudG9wID0gKHJlY3QudG9wKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBlbXB0eSA9PSB0cnVlID8gJycgOiBvYmoub3B0aW9ucy5kYXRhW3ldW3hdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhc2ljIGVkaXRvclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS53b3JkV3JhcCAhPSBmYWxzZSAmJiAob2JqLm9wdGlvbnMud29yZFdyYXAgPT0gdHJ1ZSB8fCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLndvcmRXcmFwID09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWRpdG9yID0gY3JlYXRlRWRpdG9yKCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkaXRvciA9IGNyZWF0ZUVkaXRvcignaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hc2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0QXR0cmlidXRlKCdkYXRhLW1hc2snLCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm1hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5vbmJsdXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jbG9zZUVkaXRvcihjZWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGVkaXRvciBhbmQgc2F2ZSB0aGUgaW5mb3JtYXRpb25cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqZWN0IGNlbGxcbiAgICAgKiBAcGFyYW0gYm9vbGVhbiBzYXZlXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLmNsb3NlRWRpdG9yID0gZnVuY3Rpb24oY2VsbCwgc2F2ZSkge1xuICAgICAgICB2YXIgeCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKSk7XG4gICAgICAgIHZhciB5ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpKTtcblxuICAgICAgICAvLyBHZXQgY2VsbCBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChzYXZlID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIElmIGN1c3RvbSBlZGl0b3JcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmVkaXRvcikge1xuICAgICAgICAgICAgICAgIC8vIEN1c3RvbSBlZGl0b3JcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmVkaXRvci5jbG9zZUVkaXRvcihjZWxsLCBzYXZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTmF0aXZlIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ2NoZWNrYm94JyB8fCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ3JhZGlvJyB8fCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdkcm9wZG93bicgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdhdXRvY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNlbGwuY2hpbGRyZW5bMF0uZHJvcGRvd24uY2xvc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ2NhbGVuZGFyJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjZWxsLmNoaWxkcmVuWzBdLmNhbGVuZGFyLmNsb3NlKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY2VsbC5jaGlsZHJlblsxXS5jb2xvci5jbG9zZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBjZWxsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpbWcgJiYgaW1nLnRhZ05hbWUgPT0gJ0lNRycgPyBpbWcuc3JjIDogJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ251bWVyaWMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNlbGwuY2hpbGRyZW5bMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zdWJzdHIoMCwxKSAhPSAnPScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5hbGxvd0VtcHR5ID8gJycgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2hpbGRyZW5bMF0ub25ibHVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjZWxsLmNoaWxkcmVuWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNoaWxkcmVuWzBdLm9uYmx1ciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZ25vcmUgY2hhbmdlcyBpZiB0aGUgdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5kYXRhW3ldW3hdID09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBvYmouZWRpdGlvblsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldFZhbHVlKGNlbGwsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmVkaXRvcikge1xuICAgICAgICAgICAgICAgIC8vIEN1c3RvbSBlZGl0b3JcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmVkaXRvci5jbG9zZUVkaXRvcihjZWxsLCBzYXZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnZHJvcGRvd24nIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnYXV0b2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNoaWxkcmVuWzBdLmRyb3Bkb3duLmNsb3NlKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdjYWxlbmRhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jaGlsZHJlblswXS5jYWxlbmRhci5jbG9zZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2hpbGRyZW5bMV0uY29sb3IuY2xvc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jaGlsZHJlblswXS5vbmJsdXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzdG9yZSB2YWx1ZVxuICAgICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBvYmouZWRpdGlvbiAmJiBvYmouZWRpdGlvblsxXSA/IG9iai5lZGl0aW9uWzFdIDogJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbiBlZGl0aW9uIGVuZFxuICAgICAgICBpZiAoISBvYmouaWdub3JlRXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uZWRpdGlvbmVuZCkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uZWRpdGlvbmVuZChlbCwgY2VsbCwgeCwgeSwgdmFsdWUsIHNhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGVkaXRvciBjbGFzc1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXRvcicpO1xuXG4gICAgICAgIC8vIEZpbmlzaCBlZGl0aW9uXG4gICAgICAgIG9iai5lZGl0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNlbGwgb2JqZWN0XG4gICAgICogXG4gICAgICogQHBhcmFtIG9iamVjdCBjZWxsXG4gICAgICogQHJldHVybiBzdHJpbmcgdmFsdWVcbiAgICAgKi9cbiAgICBvYmouZ2V0Q2VsbCA9IGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgICAgLy8gQ29udmVydCBpbiBjYXNlIG5hbWUgaXMgZXhjZWwgbGlrZWQgZXguIEExMCwgQkI5MlxuICAgICAgICBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbCwgdHJ1ZSk7XG4gICAgICAgIHZhciB4ID0gY2VsbFswXTtcbiAgICAgICAgdmFyIHkgPSBjZWxsWzFdO1xuXG4gICAgICAgIHJldHVybiBvYmoucmVjb3Jkc1t5XVt4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNlbGwgb2JqZWN0IGZyb20gY29vcmRzXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iamVjdCBjZWxsXG4gICAgICogQHJldHVybiBzdHJpbmcgdmFsdWVcbiAgICAgKi9cbiAgICBvYmouZ2V0Q2VsbEZyb21Db29yZHMgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiBvYmoucmVjb3Jkc1t5XVt4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGFiZWxcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqZWN0IGNlbGxcbiAgICAgKiBAcmV0dXJuIHN0cmluZyB2YWx1ZVxuICAgICAqL1xuICAgIG9iai5nZXRMYWJlbCA9IGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgICAgLy8gQ29udmVydCBpbiBjYXNlIG5hbWUgaXMgZXhjZWwgbGlrZWQgZXguIEExMCwgQkI5MlxuICAgICAgICBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbCwgdHJ1ZSk7XG4gICAgICAgIHZhciB4ID0gY2VsbFswXTtcbiAgICAgICAgdmFyIHkgPSBjZWxsWzFdO1xuXG4gICAgICAgIHJldHVybiBvYmoucmVjb3Jkc1t5XVt4XS5pbm5lckhUTUw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxhYmVsZnJvbSBjb29yZHNcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqZWN0IGNlbGxcbiAgICAgKiBAcmV0dXJuIHN0cmluZyB2YWx1ZVxuICAgICAqL1xuICAgIG9iai5nZXRMYWJlbEZyb21Db29yZHMgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiBvYmoucmVjb3Jkc1t5XVt4XS5pbm5lckhUTUw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBmcm9tIGEgY2VsbFxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmplY3QgY2VsbFxuICAgICAqIEByZXR1cm4gc3RyaW5nIHZhbHVlXG4gICAgICovXG4gICAgb2JqLmdldFZhbHVlID0gZnVuY3Rpb24oY2VsbCwgcHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZihjZWxsKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIHggPSBjZWxsLmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICB2YXIgeSA9IGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbGwgPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZShjZWxsLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciB4ID0gY2VsbFswXTtcbiAgICAgICAgICAgIHZhciB5ID0gY2VsbFsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHggIT0gbnVsbCAmJiB5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1t5XSAmJiBvYmoucmVjb3Jkc1t5XVt4XSAmJiAocHJvY2Vzc2VkVmFsdWUgfHwgb2JqLm9wdGlvbnMuY29weUNvbXBhdGliaWxpdHkgPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iai5yZWNvcmRzW3ldW3hdLmlubmVySFRNTDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbeV0gJiYgb2JqLm9wdGlvbnMuZGF0YVt5XVt4XSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iai5vcHRpb25zLmRhdGFbeV1beF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgZnJvbSBhIGNvb3Jkc1xuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbnQgeFxuICAgICAqIEBwYXJhbSBpbnQgeVxuICAgICAqIEByZXR1cm4gc3RyaW5nIHZhbHVlXG4gICAgICovXG4gICAgb2JqLmdldFZhbHVlRnJvbUNvb3JkcyA9IGZ1bmN0aW9uKHgsIHksIHByb2Nlc3NlZFZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHggIT0gbnVsbCAmJiB5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICgob2JqLnJlY29yZHNbeV0gJiYgb2JqLnJlY29yZHNbeV1beF0pICYmIHByb2Nlc3NlZFZhbHVlIHx8IG9iai5vcHRpb25zLmNvcHlDb21wYXRpYmlsaXR5ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iai5yZWNvcmRzW3ldW3hdLmlubmVySFRNTDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbeV0gJiYgb2JqLm9wdGlvbnMuZGF0YVt5XVt4XSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iai5vcHRpb25zLmRhdGFbeV1beF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBhIGNlbGwgdmFsdWVcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gbWl4ZWQgY2VsbCBkZXN0aW5hdGlvbiBjZWxsXG4gICAgICogQHBhcmFtIHN0cmluZyB2YWx1ZSB2YWx1ZVxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIG9iai5zZXRWYWx1ZSA9IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBmb3JjZSkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuXG4gICAgICAgIGlmICh0eXBlb2YoY2VsbCkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBjb2x1bW5JZCA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKGNlbGwsIHRydWUpO1xuICAgICAgICAgICAgdmFyIHggPSBjb2x1bW5JZFswXTtcbiAgICAgICAgICAgIHZhciB5ID0gY29sdW1uSWRbMV07XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjZWxsXG4gICAgICAgICAgICByZWNvcmRzLnB1c2gob2JqLnVwZGF0ZUNlbGwoeCwgeSwgdmFsdWUsIGZvcmNlKSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgZm9ybXVsYXMgaW4gdGhlIGNoYWluXG4gICAgICAgICAgICBvYmoudXBkYXRlRm9ybXVsYUNoYWluKHgsIHksIHJlY29yZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSBudWxsO1xuICAgICAgICAgICAgdmFyIHkgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNlbGxcbiAgICAgICAgICAgIGlmICh4ICE9IG51bGwgJiYgeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKG9iai51cGRhdGVDZWxsKHgsIHksIHZhbHVlLCBmb3JjZSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGFsbCBmb3JtdWxhcyBpbiB0aGUgY2hhaW5cbiAgICAgICAgICAgICAgICBvYmoudXBkYXRlRm9ybXVsYUNoYWluKHgsIHksIHJlY29yZHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNlbGwpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGNlbGxbaV0pID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbklkID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbFtpXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBjb2x1bW5JZFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGNvbHVtbklkWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGNlbGxbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGNlbGxbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCAhPSBudWxsICYmIHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHMucHVzaChvYmoudXBkYXRlQ2VsbCh4LCB5LCB2YWx1ZSwgZm9yY2UpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgZm9ybXVsYXMgaW4gdGhlIGNoYWluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUZvcm11bGFDaGFpbih4LCB5LCByZWNvcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBoaXN0b3J5XG4gICAgICAgIG9iai5zZXRIaXN0b3J5KHtcbiAgICAgICAgICAgIGFjdGlvbjonc2V0VmFsdWUnLFxuICAgICAgICAgICAgcmVjb3JkczpyZWNvcmRzLFxuICAgICAgICAgICAgc2VsZWN0aW9uOm9iai5zZWxlY3RlZENlbGwsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0YWJsZSB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9ucyBpZiBhcHBsaWNhYmxlXG4gICAgICAgIG9iai51cGRhdGVUYWJsZSgpO1xuXG4gICAgICAgIC8vIE9uIGFmdGVyIGNoYW5nZXNcbiAgICAgICAgb2JqLm9uYWZ0ZXJjaGFuZ2VzKGVsLCByZWNvcmRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSBjZWxsIHZhbHVlIGJhc2VkIG9uIGNvb3JkaW5hdGVzXG4gICAgICogXG4gICAgICogQHBhcmFtIGludCB4IGRlc3RpbmF0aW9uIGNlbGxcbiAgICAgKiBAcGFyYW0gaW50IHkgZGVzdGluYXRpb24gY2VsbFxuICAgICAqIEBwYXJhbSBzdHJpbmcgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvYmouc2V0VmFsdWVGcm9tQ29vcmRzID0gZnVuY3Rpb24oeCwgeSwgdmFsdWUsIGZvcmNlKSB7XG4gICAgICAgIHZhciByZWNvcmRzID0gW107XG4gICAgICAgIHJlY29yZHMucHVzaChvYmoudXBkYXRlQ2VsbCh4LCB5LCB2YWx1ZSwgZm9yY2UpKTtcblxuICAgICAgICAvLyBVcGRhdGUgYWxsIGZvcm11bGFzIGluIHRoZSBjaGFpblxuICAgICAgICBvYmoudXBkYXRlRm9ybXVsYUNoYWluKHgsIHksIHJlY29yZHMpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBoaXN0b3J5XG4gICAgICAgIG9iai5zZXRIaXN0b3J5KHtcbiAgICAgICAgICAgIGFjdGlvbjonc2V0VmFsdWUnLFxuICAgICAgICAgICAgcmVjb3JkczpyZWNvcmRzLFxuICAgICAgICAgICAgc2VsZWN0aW9uOm9iai5zZWxlY3RlZENlbGwsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0YWJsZSB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9ucyBpZiBhcHBsaWNhYmxlXG4gICAgICAgIG9iai51cGRhdGVUYWJsZSgpO1xuXG4gICAgICAgIC8vIE9uIGFmdGVyIGNoYW5nZXNcbiAgICAgICAgb2JqLm9uYWZ0ZXJjaGFuZ2VzKGVsLCByZWNvcmRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb29nbGVcbiAgICAgKi9cbiAgICBvYmouc2V0Q2hlY2tSYWRpb1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWNvcmRzID0gW107XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqLmhpZ2hsaWdodGVkKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgeCA9IG9iai5oaWdobGlnaHRlZFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgdmFyIHkgPSBvYmouaGlnaGxpZ2h0ZWRbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcblxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnY2hlY2tib3gnIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNlbGxcbiAgICAgICAgICAgICAgICByZWNvcmRzLnB1c2gob2JqLnVwZGF0ZUNlbGwoeCwgeSwgISBvYmoub3B0aW9ucy5kYXRhW3ldW3hdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBoaXN0b3J5XG4gICAgICAgICAgICBvYmouc2V0SGlzdG9yeSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOidzZXRWYWx1ZScsXG4gICAgICAgICAgICAgICAgcmVjb3JkczpyZWNvcmRzLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjpvYmouc2VsZWN0ZWRDZWxsLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE9uIGFmdGVyIGNoYW5nZXNcbiAgICAgICAgICAgIG9iai5vbmFmdGVyY2hhbmdlcyhlbCwgcmVjb3Jkcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY2VsbCBjb250ZW50XG4gICAgICogXG4gICAgICogQHBhcmFtIG9iamVjdCBjZWxsXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZUNlbGwgPSBmdW5jdGlvbih4LCB5LCB2YWx1ZSwgZm9yY2UpIHtcbiAgICAgICAgLy8gQ2hhbmdpbmcgdmFsdWUgZGVwZW5kaW5nIG9uIHRoZSBjb2x1bW4gdHlwZVxuICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1beF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdyZWFkb25seScpID09IHRydWUgJiYgISBmb3JjZSkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgICAgICBjb2w6IHgsXHJcbiAgICAgICAgICAgICAgICByb3c6IHlcclxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT24gY2hhbmdlXG4gICAgICAgICAgICBpZiAoISBvYmouaWdub3JlRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJlZm9yZWNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBPdmVyd3JpdGUgYSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gb2JqLm9wdGlvbnMub25iZWZvcmVjaGFuZ2UoZWwsIG9iai5yZWNvcmRzW3ldW3hdLCB4LCB5LCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgeW91IHJldHVybiBzb21ldGhpbmcgdGhpcyB3aWxsIG92ZXJ3cml0ZSB0aGUgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIaXN0b3J5IGZvcm1hdFxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHtcbiAgICAgICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICBjb2w6IHgsXG4gICAgICAgICAgICAgICAgcm93OiB5LFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2JqLm9wdGlvbnMuZGF0YVt5XVt4XSxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0uZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGRhdGEgYW5kIGNlbGxcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW3ldW3hdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5lZGl0b3Iuc2V0VmFsdWUob2JqLnJlY29yZHNbeV1beF0sIHZhbHVlLCBmb3JjZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5hdGl2ZSBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdjaGVja2JveCcgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5jaGVja2VkIGFsbCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW3hdLnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVtqXVt4XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGRhdGEgYW5kIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0uY2hpbGRyZW5bMF0uY2hlY2tlZCA9ICh2YWx1ZSA9PSAxIHx8IHZhbHVlID09IHRydWUgfHwgdmFsdWUgPT0gJ3RydWUnIHx8IHZhbHVlID09ICdUUlVFJykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbeV1beF0gPSBvYmoucmVjb3Jkc1t5XVt4XS5jaGlsZHJlblswXS5jaGVja2VkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdkcm9wZG93bicgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdhdXRvY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkYXRhIGFuZCBjZWxsXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbeV1beF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0uaW5uZXJIVE1MID0gb2JqLmdldERyb3BEb3duVmFsdWUoeCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdjYWxlbmRhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWQgPSBqU3VpdGVzLmNhbGVuZGFyLmV4dHJhY3REYXRlRnJvbVN0cmluZyh2YWx1ZSwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS5vcHRpb25zLmZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkYXRhIGFuZCBjZWxsXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbeV1beF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0uaW5uZXJIVE1MID0galN1aXRlcy5jYWxlbmRhci5nZXREYXRlU3RyaW5nKGZvcm1hdHRlZCA/IGZvcm1hdHRlZCA6IHZhbHVlLCBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLm9wdGlvbnMuZm9ybWF0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0udHlwZSA9PSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb2xvclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW3ldW3hdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS5yZW5kZXIgPT0gJ3NxdWFyZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IuY2xhc3NOYW1lID0gJ2NvbG9yJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0uaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5hcHBlbmRDaGlsZChjb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3ldW3hdLnN0eWxlLmNvbG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1t4XS50eXBlID09ICdpbWFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJyt2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVt5XVt4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnN1YnN0cigwLCAxMCkgPT0gJ2RhdGE6aW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGRhdGEgYW5kIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVt5XVt4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBMYWJlbFxuICAgICAgICAgICAgICAgICAgICBpZiAoKCcnICsgdmFsdWUpLnN1YnN0cigwLDEpID09ICc9JyAgJiYgb2JqLm9wdGlvbnMucGFyc2VGb3JtdWxhcyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iai5leGVjdXRlRm9ybXVsYSh2YWx1ZSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0ubWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2ltYWwgPSBvYmoub3B0aW9ucy5jb2x1bW5zW3hdLmRlY2ltYWwgfHwgJy4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJyArIGpTdWl0ZXMubWFzay5ydW4odmFsdWUsIG9iai5vcHRpb25zLmNvbHVtbnNbeF0ubWFzaywgZGVjaW1hbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beF0uaW5uZXJIVE1MID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGJpZyB0ZXh0IGluc2lkZSBhIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvbHVtbnNbeF0ud29yZFdyYXAgIT0gZmFsc2UgJiYgKG9iai5vcHRpb25zLndvcmRXcmFwID09IHRydWUgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1t4XS53b3JkV3JhcCA9PSB0cnVlIHx8IG9iai5yZWNvcmRzW3ldW3hdLmlubmVySFRNTC5sZW5ndGggPiAyMDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4XS5zdHlsZS53aGl0ZVNwYWNlID0gJ3ByZS13cmFwJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3ldW3hdLnN0eWxlLndoaXRlU3BhY2UgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT3ZlcmZsb3dcbiAgICAgICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5XVt4LTFdLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbeV1beC0xXS5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT24gY2hhbmdlXG4gICAgICAgICAgICBpZiAoISBvYmouaWdub3JlRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmNoYW5nZShlbCwgKG9iai5yZWNvcmRzW3ldICYmIG9iai5yZWNvcmRzW3ldW3hdID8gb2JqLnJlY29yZHNbeV1beF0gOiBudWxsKSwgeCwgeSwgdmFsdWUsIHJlY29yZC5vbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gY29weSBkYXRhIHVzaW5nIHRoZSBjb3JuZXIgaWNvblxuICAgICAqL1xuICAgIG9iai5jb3B5RGF0YSA9IGZ1bmN0aW9uKG8sIGQpIHtcbiAgICAgICAgLy8gR2V0IGRhdGEgZnJvbSBhbGwgc2VsZWN0ZWQgY2VsbHNcbiAgICAgICAgdmFyIGRhdGEgPSBvYmouZ2V0RGF0YSh0cnVlLCB0cnVlKTtcblxuICAgICAgICAvLyBTZWxlY3RlZCBjZWxsc1xyXG4gICAgICAgIHZhciBoID0gb2JqLnNlbGVjdGVkQ29udGFpbmVyO1xuXG4gICAgICAgIC8vIENlbGxzXG4gICAgICAgIHZhciB4MSA9IHBhcnNlSW50KG8uZ2V0QXR0cmlidXRlKCdkYXRhLXgnKSk7XG4gICAgICAgIHZhciB5MSA9IHBhcnNlSW50KG8uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgIHZhciB4MiA9IHBhcnNlSW50KGQuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKSk7XG4gICAgICAgIHZhciB5MiA9IHBhcnNlSW50KGQuZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG5cbiAgICAgICAgLy8gUmVjb3Jkc1xuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuICAgICAgICB2YXIgYnJlYWtDb250cm9sID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGhbMF0gPT0geDEpIHtcclxuICAgICAgICAgICAgLy8gVmVydGljYWwgY29weVxyXG4gICAgICAgICAgICBpZiAoeTEgPCBoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93TnVtYmVyID0geTEgLSBoWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJvd051bWJlciA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbE51bWJlciA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHgxIDwgaFswXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbE51bWJlciA9IHgxIC0gaFswXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2xOdW1iZXIgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByb3dOdW1iZXIgPSAwO1xyXG4gICAgICAgIH1cclxuXG4gICAgICAgIC8vIENvcHkgZGF0YSBwcm9jZWR1cmVcbiAgICAgICAgdmFyIHBvc3ggPSAwO1xuICAgICAgICB2YXIgcG9zeSA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IHkxOyBqIDw9IHkyOyBqKyspIHtcbiAgICAgICAgICAgIC8vIFNraXAgaGlkZGVuIHJvd3NcbiAgICAgICAgICAgIGlmIChvYmoucm93c1tqXSAmJiBvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ID09ICdub25lJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb250cm9sc1xuICAgICAgICAgICAgaWYgKGRhdGFbcG9zeV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcG9zeSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3N4ID0gMDtcblxuICAgICAgICAgICAgLy8gRGF0YSBjb2x1bW5zXG4gICAgICAgICAgICBpZiAoaFswXSAhPSB4MSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHgxIDwgaFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xOdW1iZXIgPSB4MSAtIGhbMF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xOdW1iZXIgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEYXRhIGNvbHVtbnNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB4MTsgaSA8PSB4MjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIG5vbi1yZWFkb25seVxuICAgICAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1tqXVtpXSAmJiAhIG9iai5yZWNvcmRzW2pdW2ldLmNsYXNzTGlzdC5jb250YWlucygncmVhZG9ubHknKSAmJiBvYmoucmVjb3Jkc1tqXVtpXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJyAmJiBicmVha0NvbnRyb2wgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBjb250YWlucyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmouc2VsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbal1baV0gIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha0NvbnRyb2wgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW3Bvc3ldID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVtwb3N5XVtwb3N4XSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3ggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtwb3N5XVtwb3N4XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICEgZGF0YVsxXSAmJiBvYmoub3B0aW9ucy5hdXRvSW5jcmVtZW50ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnR5cGUgPT0gJ3RleHQnIHx8IG9iai5vcHRpb25zLmNvbHVtbnNbaV0udHlwZSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJycrdmFsdWUpLnN1YnN0cigwLDEpID09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goLyhbQS1aXStbMC05XSspL2cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZmZlY3RlZFRva2VucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZSh0b2tlbnNbaW5kZXhdLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblswXSArPSBjb2xOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblsxXSArPSByb3dOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25bMV0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25bMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFtwb3NpdGlvblswXSwgcG9zaXRpb25bMV1dKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAhPSB0b2tlbnNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkVG9rZW5zW3Rva2Vuc1tpbmRleF1dID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGZvcm11bGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZmZlY3RlZFRva2Vucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqLnVwZGF0ZUZvcm11bGEodmFsdWUsIGFmZmVjdGVkVG9rZW5zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IE51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyKHZhbHVlKSArIHJvd051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdjYWxlbmRhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyByb3dOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0ZS5nZXRGdWxsWWVhcigpICsgJy0nICsgamV4Y2VsLmRvdWJsZURpZ2l0Rm9ybWF0KHBhcnNlSW50KGRhdGUuZ2V0TW9udGgoKSArIDEpKSArICctJyArIGpleGNlbC5kb3VibGVEaWdpdEZvcm1hdChkYXRlLmdldERhdGUoKSkgKyAnICcgKyAnMDA6MDA6MDAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKG9iai51cGRhdGVDZWxsKGksIGosIHZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGFsbCBmb3JtdWxhcyBpbiB0aGUgY2hhaW5cbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUZvcm11bGFDaGFpbihpLCBqLCByZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zeCsrO1xuICAgICAgICAgICAgICAgIGlmIChoWzBdICE9IHgxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sTnVtYmVyKys7XHJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3N5Kys7XG4gICAgICAgICAgICByb3dOdW1iZXIrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBoaXN0b3J5XG4gICAgICAgIG9iai5zZXRIaXN0b3J5KHtcbiAgICAgICAgICAgIGFjdGlvbjonc2V0VmFsdWUnLFxuICAgICAgICAgICAgcmVjb3JkczpyZWNvcmRzLFxuICAgICAgICAgICAgc2VsZWN0aW9uOm9iai5zZWxlY3RlZENlbGwsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0YWJsZSB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9uIGlmIGFwcGxpY2FibGVcbiAgICAgICAgb2JqLnVwZGF0ZVRhYmxlKCk7XG5cbiAgICAgICAgLy8gT24gYWZ0ZXIgY2hhbmdlc1xuICAgICAgICBvYmoub25hZnRlcmNoYW5nZXMoZWwsIHJlY29yZHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggY3VycmVudCBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICBvYmoucmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbCkge1xuICAgICAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMob2JqLnNlbGVjdGVkQ2VsbFswXSwgb2JqLnNlbGVjdGVkQ2VsbFsxXSwgb2JqLnNlbGVjdGVkQ2VsbFsyXSwgb2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIGNvb3JkcyB0byBBMSBpbiBjYXNlIG92ZWxhcHMgd2l0aCBhbiBleGNsdWRlZCBjZWxsXG4gICAgICovXG4gICAgb2JqLmNvbmRpdGlvbmFsU2VsZWN0aW9uVXBkYXRlID0gZnVuY3Rpb24odHlwZSwgbywgZCkge1xuICAgICAgICBpZiAodHlwZSA9PSAxKSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbCAmJiAoKG8gPj0gb2JqLnNlbGVjdGVkQ2VsbFsxXSAmJiBvIDw9IG9iai5zZWxlY3RlZENlbGxbM10pIHx8IChkID49IG9iai5zZWxlY3RlZENlbGxbMV0gJiYgZCA8PSBvYmouc2VsZWN0ZWRDZWxsWzNdKSkpIHtcbiAgICAgICAgICAgICAgICBvYmoucmVzZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbCAmJiAoKG8gPj0gb2JqLnNlbGVjdGVkQ2VsbFswXSAmJiBvIDw9IG9iai5zZWxlY3RlZENlbGxbMl0pIHx8IChkID49IG9iai5zZWxlY3RlZENlbGxbMF0gJiYgZCA8PSBvYmouc2VsZWN0ZWRDZWxsWzJdKSkpIHtcbiAgICAgICAgICAgICAgICBvYmoucmVzZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciB0YWJsZSBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICBvYmoucmVzZXRTZWxlY3Rpb24gPSBmdW5jdGlvbihibHVyKSB7XG4gICAgICAgIC8vIFJlbW92ZSBzdHlsZVxuICAgICAgICBpZiAoISBvYmouaGlnaGxpZ2h0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdHVzID0gMTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaGlnaGxpZ2h0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvYmouaGlnaGxpZ2h0ZWRbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgb2JqLmhpZ2hsaWdodGVkW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodC1sZWZ0Jyk7XG4gICAgICAgICAgICAgICAgb2JqLmhpZ2hsaWdodGVkW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodC1yaWdodCcpO1xuICAgICAgICAgICAgICAgIG9iai5oaWdobGlnaHRlZFtpXS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQtdG9wJyk7XG4gICAgICAgICAgICAgICAgb2JqLmhpZ2hsaWdodGVkW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodC1ib3R0b20nKTtcbiAgICAgICAgICAgICAgICBvYmouaGlnaGxpZ2h0ZWRbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0LXNlbGVjdGVkJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHggPSBwYXJzZUludChvYmouaGlnaGxpZ2h0ZWRbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXgnKSk7XG4gICAgICAgICAgICAgICAgdmFyIHB5ID0gcGFyc2VJbnQob2JqLmhpZ2hsaWdodGVkW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS15JykpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG1lcmdlZCBjZWxsc1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGlnaGxpZ2h0ZWRbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xzcGFuID0gcGFyc2VJbnQob2JqLmhpZ2hsaWdodGVkW2ldLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3NwYW4gPSBwYXJzZUludChvYmouaGlnaGxpZ2h0ZWRbaV0uZ2V0QXR0cmlidXRlKCdyb3dzcGFuJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXggPSBjb2xzcGFuID4gMCA/IHB4ICsgKGNvbHNwYW4gLSAxKSA6IHB4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXkgPSByb3dzcGFuID4gMCA/IHB5ICsgKHJvd3NwYW4gLSAxKTogcHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV4ID0gcHg7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1eSA9IHB5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzZWxlY3RlZCBmcm9tIGhlYWRlcnNcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcHg7IGogPD0gdXg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhlYWRlcnNbal0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5oZWFkZXJzW2pdLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc2VsZWN0ZWQgZnJvbSByb3dzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IHB5OyBqIDw9IHV5OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5yb3dzW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucm93c1tqXS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgaGlnaGxpZ2hlZCBjZWxsc1xuICAgICAgICBvYmouaGlnaGxpZ2h0ZWQgPSBbXTtcblxuICAgICAgICAvLyBSZXNldFxuICAgICAgICBvYmouc2VsZWN0ZWRDZWxsID0gbnVsbDtcblxuICAgICAgICAvLyBIaWRlIGNvcm5lclxuICAgICAgICBvYmouY29ybmVyLnN0eWxlLnRvcCA9ICctMjAwMHB4JztcbiAgICAgICAgb2JqLmNvcm5lci5zdHlsZS5sZWZ0ID0gJy0yMDAwcHgnO1xuXG4gICAgICAgIGlmIChvYmouaWdub3JlRXZlbnRzICE9IHRydWUgJiYgYmx1ciA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMub25ibHVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJsdXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU3RhdHVzID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uYmx1cihlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0dXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHNlbGVjdGlvbiBiYXNlZCBvbiB0d28gY2VsbHNcbiAgICAgKi9cbiAgICBvYmoudXBkYXRlU2VsZWN0aW9uID0gZnVuY3Rpb24oZWwxLCBlbDIsIG9yaWdpbikge1xuICAgICAgICB2YXIgeDEgPSBlbDEuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgdmFyIHkxID0gZWwxLmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG4gICAgICAgIGlmIChlbDIpIHtcbiAgICAgICAgICAgIHZhciB4MiA9IGVsMi5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgdmFyIHkyID0gZWwyLmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgeDIgPSB4MTtcbiAgICAgICAgICAgIHZhciB5MiA9IHkxO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMoeDEsIHkxLCB4MiwgeTIsIG9yaWdpbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHNlbGVjdGlvbiBmcm9tIGNvb3Jkc1xuICAgICAqL1xuICAgIG9iai51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIG9yaWdpbikge1xuICAgICAgICAvLyBSZXNldCBTZWxlY3Rpb25cbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBudWxsO1xuICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IG9iai5yZXNldFNlbGVjdGlvbigpO1xuXG4gICAgICAgIC8vIFNhbWUgZWxlbWVudFxuICAgICAgICBpZiAoeDIgPT0gbnVsbCkge1xuICAgICAgICAgICAgeDIgPSB4MTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeTIgPT0gbnVsbCkge1xuICAgICAgICAgICAgeTIgPSB5MTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbGVjdGlvbiBtdXN0IGJlIHdpdGhpbiB0aGUgZXhpc3RpbmcgZGF0YVxuICAgICAgICBpZiAoeDEgPj0gb2JqLmhlYWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB4MSA9IG9iai5oZWFkZXJzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkxID49IG9iai5yb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgeTEgPSBvYmoucm93cy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4MiA+PSBvYmouaGVhZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHgyID0gb2JqLmhlYWRlcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeTIgPj0gb2JqLnJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB5MiA9IG9iai5yb3dzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBLZWVwIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbCA9IFt4MSwgeTEsIHgyLCB5Ml07XG5cbiAgICAgICAgLy8gU2VsZWN0IGNlbGxzXG4gICAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBBZGQgc2VsZWN0ZWQgY2VsbFxuICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW3kxXVt4MV0pIHtcbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1t5MV1beDFdLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodC1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPcmlnaW4gJiBEZXN0aW5hdGlvblxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KHgxKSA8IHBhcnNlSW50KHgyKSkge1xuICAgICAgICAgICAgICAgIHZhciBweCA9IHBhcnNlSW50KHgxKTtcbiAgICAgICAgICAgICAgICB2YXIgdXggPSBwYXJzZUludCh4Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBweCA9IHBhcnNlSW50KHgyKTtcbiAgICAgICAgICAgICAgICB2YXIgdXggPSBwYXJzZUludCh4MSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYXJzZUludCh5MSkgPCBwYXJzZUludCh5MikpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHkgPSBwYXJzZUludCh5MSk7XG4gICAgICAgICAgICAgICAgdmFyIHV5ID0gcGFyc2VJbnQoeTIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHkgPSBwYXJzZUludCh5Mik7XG4gICAgICAgICAgICAgICAgdmFyIHV5ID0gcGFyc2VJbnQoeTEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWZXJpZnkgbWVyZ2VkIGNvbHVtbnNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBweDsgaSA8PSB1eDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IHB5OyBqIDw9IHV5OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW2pdW2ldICYmIG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChvYmoucmVjb3Jkc1tqXVtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLnJlY29yZHNbal1baV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dzcGFuID0gcGFyc2VJbnQob2JqLnJlY29yZHNbal1baV0uZ2V0QXR0cmlidXRlKCdyb3dzcGFuJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sc3BhbiA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCA8IHB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB4ID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggKyBjb2xzcGFuID4gdXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXggPSB4ICsgY29sc3BhbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93c3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5IDwgcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHkgPSB5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ICsgcm93c3BhbiA+IHV5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV5ID0geSArIHJvd3NwYW4gLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGltaXRzXG4gICAgICAgICAgICB2YXIgYm9yZGVyTGVmdCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgYm9yZGVyUmlnaHQgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGJvcmRlclRvcCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgYm9yZGVyQm90dG9tID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gVmVydGljYWwgbGltaXRzXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gcHk7IGogPD0gdXk7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9yZGVyVG9wID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclRvcCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tID0gajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlZGVmaW5pbmcgc3R5bGVzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcHg7IGkgPD0gdXg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBweTsgaiA8PSB1eTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJyAmJiBvYmoucmVjb3Jkc1tqXVtpXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbal1baV0uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouaGlnaGxpZ2h0ZWQucHVzaChvYmoucmVjb3Jkc1tqXVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIb3Jpem9udGFsIGxpbWl0c1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnR5cGUgIT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvcmRlckxlZnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyTGVmdCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGJvcmRlcnNcbiAgICAgICAgICAgIGlmICghIGJvcmRlckxlZnQpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJMZWZ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIGJvcmRlclJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmlnaHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGJvcmRlckxlZnQ7IGkgPD0gYm9yZGVyUmlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLnR5cGUgIT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9wIGJvcmRlclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbYm9yZGVyVG9wXVtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbYm9yZGVyVG9wXVtpXS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQtdG9wJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQm90dG9tIGJvcmRlclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbYm9yZGVyQm90dG9tXVtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbYm9yZGVyQm90dG9tXVtpXS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQtYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHNlbGVjdGVkIGZyb20gaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICBvYmouaGVhZGVyc1tpXS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGJvcmRlclRvcDsgaiA8PSBib3JkZXJCb3R0b207IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBMZWZ0IGJvcmRlclxuICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tqXVtib3JkZXJMZWZ0XS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQtbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSaWdodCBib3JkZXJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbal1bYm9yZGVyUmlnaHRdLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodC1yaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc2VsZWN0ZWQgZnJvbSByb3dzXG4gICAgICAgICAgICAgICAgICAgIG9iai5yb3dzW2pdLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDb250YWluZXIgPSBbIGJvcmRlckxlZnQsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGV2ZW50c1xuICAgICAgICBpZiAob2JqLmlnbm9yZUV2ZW50cyAhPSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMub25mb2N1cykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25mb2N1cykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmZvY3VzKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbnNlbGVjdGlvbikgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uc2VsZWN0aW9uKGVsLCBib3JkZXJMZWZ0LCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIG9yaWdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGNvcm5lciBjZWxsXG4gICAgICAgIG9iai51cGRhdGVDb3JuZXJQb3NpdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjb3B5IHNlbGVjdGlvblxuICAgICAqIFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIG9iai5yZW1vdmVDb3B5U2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5zZWxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9iai5zZWxlY3Rpb25baV0uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0aW9uJyk7XG4gICAgICAgICAgICBvYmouc2VsZWN0aW9uW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGlvbi1sZWZ0Jyk7XG4gICAgICAgICAgICBvYmouc2VsZWN0aW9uW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGlvbi1yaWdodCcpO1xuICAgICAgICAgICAgb2JqLnNlbGVjdGlvbltpXS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3Rpb24tdG9wJyk7XG4gICAgICAgICAgICBvYmouc2VsZWN0aW9uW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGlvbi1ib3R0b20nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai5zZWxlY3Rpb24gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY29weSBzZWxlY3Rpb25cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaW50IHgsIHlcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvYmoudXBkYXRlQ29weVNlbGVjdGlvbiA9IGZ1bmN0aW9uKHgzLCB5Mykge1xuICAgICAgICAvLyBSZW1vdmUgc2VsZWN0aW9uXG4gICAgICAgIG9iai5yZW1vdmVDb3B5U2VsZWN0aW9uKCk7XG5cbiAgICAgICAgLy8gR2V0IGVsZW1lbnRzIGZpcnN0IGFuZCBsYXN0XG4gICAgICAgIHZhciB4MSA9IG9iai5zZWxlY3RlZENvbnRhaW5lclswXTtcbiAgICAgICAgdmFyIHkxID0gb2JqLnNlbGVjdGVkQ29udGFpbmVyWzFdO1xuICAgICAgICB2YXIgeDIgPSBvYmouc2VsZWN0ZWRDb250YWluZXJbMl07XG4gICAgICAgIHZhciB5MiA9IG9iai5zZWxlY3RlZENvbnRhaW5lclszXTtcblxuICAgICAgICBpZiAoeDMgIT0gbnVsbCAmJiB5MyAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoeDMgLSB4MiA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcHggPSBwYXJzZUludCh4MikgKyAxO1xuICAgICAgICAgICAgICAgIHZhciB1eCA9IHBhcnNlSW50KHgzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHB4ID0gcGFyc2VJbnQoeDMpO1xuICAgICAgICAgICAgICAgIHZhciB1eCA9IHBhcnNlSW50KHgxKSAtIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh5MyAtIHkyID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBweSA9IHBhcnNlSW50KHkyKSArIDE7XG4gICAgICAgICAgICAgICAgdmFyIHV5ID0gcGFyc2VJbnQoeTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHkgPSBwYXJzZUludCh5Myk7XG4gICAgICAgICAgICAgICAgdmFyIHV5ID0gcGFyc2VJbnQoeTEpIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHV4IC0gcHggPCB1eSAtIHB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHB4ID0gcGFyc2VJbnQoeDEpO1xuICAgICAgICAgICAgICAgIHZhciB1eCA9IHBhcnNlSW50KHgyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHB5ID0gcGFyc2VJbnQoeTEpO1xuICAgICAgICAgICAgICAgIHZhciB1eSA9IHBhcnNlSW50KHkyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IHB5OyBqIDw9IHV5OyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gcHg7IGkgPD0gdXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1baV0gJiYgb2JqLnJvd3Nbal0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScgJiYgb2JqLnJlY29yZHNbal1baV0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdW2ldLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbcHldW2ldLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGlvbi10b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3V5XVtpXS5jbGFzc0xpc3QuYWRkKCdzZWxlY3Rpb24tYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tqXVtweF0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0aW9uLWxlZnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdW3V4XS5jbGFzc0xpc3QuYWRkKCdzZWxlY3Rpb24tcmlnaHQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGVyc2lzdCBzZWxlY3RlZCBlbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlbGVjdGlvbi5wdXNoKG9iai5yZWNvcmRzW2pdW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjb3JuZXIgcG9zaXRpb25cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvYmoudXBkYXRlQ29ybmVyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSWYgYW55IHNlbGVjdGVkIGNlbGxzXG4gICAgICAgIGlmICghIG9iai5oaWdobGlnaHRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iai5jb3JuZXIuc3R5bGUudG9wID0gJy0yMDAwcHgnO1xuICAgICAgICAgICAgb2JqLmNvcm5lci5zdHlsZS5sZWZ0ID0gJy0yMDAwcHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gR2V0IGxhc3QgY2VsbFxuICAgICAgICAgICAgdmFyIGxhc3QgPSBvYmouaGlnaGxpZ2h0ZWRbb2JqLmhpZ2hsaWdodGVkLmxlbmd0aC0xXTtcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50UmVjdCA9IG9iai5jb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB2YXIgeDEgPSBjb250ZW50UmVjdC5sZWZ0O1xyXG4gICAgICAgICAgICB2YXIgeTEgPSBjb250ZW50UmVjdC50b3A7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYXN0UmVjdCA9IGxhc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIHZhciB4MiA9IGxhc3RSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgIHZhciB5MiA9IGxhc3RSZWN0LnRvcDtcclxuICAgICAgICAgICAgdmFyIHcyID0gbGFzdFJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBoMiA9IGxhc3RSZWN0LmhlaWdodDtcclxuXG4gICAgICAgICAgICB2YXIgeCA9ICh4MiAtIHgxKSArIG9iai5jb250ZW50LnNjcm9sbExlZnQgKyB3MiAtIDQ7XG4gICAgICAgICAgICB2YXIgeSA9ICh5MiAtIHkxKSArIG9iai5jb250ZW50LnNjcm9sbFRvcCArIGgyIC0gNDtcblxuICAgICAgICAgICAgLy8gUGxhY2UgdGhlIGNvcm5lciBpbiB0aGUgY29ycmVjdCBwbGFjZVxuICAgICAgICAgICAgb2JqLmNvcm5lci5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgICAgIG9iai5jb3JuZXIuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHNjcm9sbCBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgc2VsZWN0aW9uXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZVNjcm9sbCA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgICAvLyBqRXhjZWwgQ29udGFpbmVyIGluZm9ybWF0aW9uXG4gICAgICAgIGNvbnN0IGNvbnRlbnRSZWN0ID0gb2JqLmNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIHgxID0gY29udGVudFJlY3QubGVmdDtcclxuICAgICAgICB2YXIgeTEgPSBjb250ZW50UmVjdC50b3A7XHJcbiAgICAgICAgdmFyIHcxID0gY29udGVudFJlY3Qud2lkdGg7XHJcbiAgICAgICAgdmFyIGgxID0gY29udGVudFJlY3QuaGVpZ2h0O1xyXG5cbiAgICAgICAgLy8gRGlyZWN0aW9uIExlZnQgb3IgVXBcbiAgICAgICAgdmFyIHJlZmVyZW5jZSA9IG9iai5yZWNvcmRzW29iai5zZWxlY3RlZENlbGxbM11dW29iai5zZWxlY3RlZENlbGxbMl1dO1xuXG4gICAgICAgICAgICAvLyBSZWZlcmVuY2VcclxuICAgICAgICBjb25zdCByZWZlcmVuY2VSZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHZhciB4MiA9IHJlZmVyZW5jZVJlY3QubGVmdDtcclxuICAgICAgICB2YXIgeTIgPSByZWZlcmVuY2VSZWN0LnRvcDtcclxuICAgICAgICB2YXIgdzIgPSByZWZlcmVuY2VSZWN0LndpZHRoO1xyXG4gICAgICAgIHZhciBoMiA9IHJlZmVyZW5jZVJlY3QuaGVpZ2h0O1xuXG4gICAgICAgIC8vIERpcmVjdGlvblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09IDAgfHwgZGlyZWN0aW9uID09IDEpIHtcbiAgICAgICAgICAgIHZhciB4ID0gKHgyIC0geDEpICsgb2JqLmNvbnRlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIHZhciB5ID0gKHkyIC0geTEpICsgb2JqLmNvbnRlbnQuc2Nyb2xsVG9wIC0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB4ID0gKHgyIC0geDEpICsgb2JqLmNvbnRlbnQuc2Nyb2xsTGVmdCArIHcyO1xuICAgICAgICAgICAgdmFyIHkgPSAoeTIgLSB5MSkgKyBvYmouY29udGVudC5zY3JvbGxUb3AgKyBoMjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvcCBwb3NpdGlvbiBjaGVja1xuICAgICAgICBpZiAoeSA+IChvYmouY29udGVudC5zY3JvbGxUb3AgKyAzMCkgJiYgeSA8IChvYmouY29udGVudC5zY3JvbGxUb3AgKyBoMSkpIHtcbiAgICAgICAgICAgIC8vIEluIHRoZSB2aWV3cG9ydFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3V0IG9mIHZpZXdwb3J0XG4gICAgICAgICAgICBpZiAoeSA8IG9iai5jb250ZW50LnNjcm9sbFRvcCArIDMwKSB7XG4gICAgICAgICAgICAgICAgb2JqLmNvbnRlbnQuc2Nyb2xsVG9wID0geSAtIGgyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmouY29udGVudC5zY3JvbGxUb3AgPSB5IC0gKGgxIC0gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMZWZ0IHBvc2l0aW9uIGNoZWNrIC0gVE9ETzogY2hhbmdlIHRoYXQgdG8gdGhlIGJvdHRvbSBib3JkZXIgb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgaWYgKHggPiAob2JqLmNvbnRlbnQuc2Nyb2xsTGVmdCkgJiYgeCA8IChvYmouY29udGVudC5zY3JvbGxMZWZ0ICsgdzEpKSB7XG4gICAgICAgICAgICAvLyBJbiB0aGUgdmlld3BvcnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE91dCBvZiB2aWV3cG9ydFxuICAgICAgICAgICAgaWYgKHggPCBvYmouY29udGVudC5zY3JvbGxMZWZ0ICsgMzApIHtcbiAgICAgICAgICAgICAgICBvYmouY29udGVudC5zY3JvbGxMZWZ0ID0geDtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmNvbnRlbnQuc2Nyb2xsTGVmdCA8IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jb250ZW50LnNjcm9sbExlZnQgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLmNvbnRlbnQuc2Nyb2xsTGVmdCA9IHggLSAodzEgLSAyMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbHVtbiB3aWR0aFxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbnQgY29sdW1uIGNvbHVtbiBudW1iZXIgKGZpcnN0IGNvbHVtbiBpczogMClcbiAgICAgKiBAcmV0dXJuIGludCBjdXJyZW50IHdpZHRoXG4gICAgICovXG4gICAgb2JqLmdldFdpZHRoID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIGlmICghIGNvbHVtbikge1xuICAgICAgICAgICAgLy8gR2V0IGFsbCBoZWFkZXJzXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaChvYmoub3B0aW9ucy5jb2x1bW5zW2ldLndpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIGNvbHVtbiBpcyBhbiBvYmplY3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YoY29sdW1uKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbHVtbiA9ICQoY29sdW1uKS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhID0gb2JqLmNvbGdyb3VwW2NvbHVtbl0uZ2V0QXR0cmlidXRlKCd3aWR0aCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbHVtbiB3aWR0aFxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbnQgY29sdW1uIG51bWJlciAoZmlyc3QgY29sdW1uIGlzOiAwKVxuICAgICAqIEBwYXJhbSBpbnQgbmV3IGNvbHVtbiB3aWR0aFxuICAgICAqIEBwYXJhbSBpbnQgb2xkIGNvbHVtbiB3aWR0aFxuICAgICAqL1xuICAgIG9iai5zZXRXaWR0aCA9IGZ1bmN0aW9uIChjb2x1bW4sIHdpZHRoLCBvbGRXaWR0aCkge1xuICAgICAgICBpZiAod2lkdGggPiAwKSB7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBjb2x1bW4gaXMgYW4gb2JqZWN0XG4gICAgICAgICAgICBpZiAodHlwZW9mKGNvbHVtbikgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBjb2x1bW4uZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT2xkd2lkdGhcbiAgICAgICAgICAgIGlmICghIG9sZFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgb2xkV2lkdGggPSBvYmouY29sZ3JvdXBbY29sdW1uXS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB3aWR0aFxuICAgICAgICAgICAgb2JqLmNvbGdyb3VwW2NvbHVtbl0uc2V0QXR0cmlidXRlKCd3aWR0aCcsIHdpZHRoKTtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbY29sdW1uXS53aWR0aCA9IHdpZHRoO1xuXG4gICAgICAgICAgICAvLyBLZWVwaW5nIGhpc3Rvcnkgb2YgY2hhbmdlc1xuICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjonc2V0V2lkdGgnLFxuICAgICAgICAgICAgICAgIGNvbHVtbjpjb2x1bW4sXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6b2xkV2lkdGgsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6d2lkdGgsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gT24gcmVzaXplIGNvbHVtblxuICAgICAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25yZXNpemVjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25yZXNpemVjb2x1bW4oZWwsIGNvbHVtbiwgd2lkdGgsIG9sZFdpZHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjb3JuZXIgcG9zaXRpb25cbiAgICAgICAgICAgIG9iai51cGRhdGVDb3JuZXJQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSByb3cgaGVpZ2h0XG4gICAgICogXG4gICAgICogQHBhcmFtIHJvdyAtIHJvdyBudW1iZXIgKGZpcnN0IHJvdyBpczogMClcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gbmV3IHJvdyBoZWlnaHRcbiAgICAgKiBAcGFyYW0gb2xkSGVpZ2h0IC0gb2xkIHJvdyBoZWlnaHRcbiAgICAgKi9cbiAgICBvYmouc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKHJvdywgaGVpZ2h0LCBvbGRIZWlnaHQpIHtcbiAgICAgICAgaWYgKGhlaWdodCA+IDApIHtcbiAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIGNvbHVtbiBpcyBhbiBvYmplY3RcbiAgICAgICAgICAgIGlmICh0eXBlb2Yocm93KSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJvdyA9IHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPbGR3aWR0aFxuICAgICAgICAgICAgaWYgKCEgb2xkSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgb2xkSGVpZ2h0ID0gb2JqLnJvd3Nbcm93XS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghIG9sZEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gb2JqLnJvd3Nbcm93XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRIZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW50ZWdlclxyXG4gICAgICAgICAgICBoZWlnaHQgPSBwYXJzZUludChoZWlnaHQpO1xyXG5cbiAgICAgICAgICAgIC8vIFNldCB3aWR0aFxuICAgICAgICAgICAgb2JqLnJvd3Nbcm93XS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG4gICAgICAgICAgICAvLyBLZWVwIG9wdGlvbnMgdXBkYXRlZFxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMucm93c1tyb3ddKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMucm93c1tyb3ddID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5yb3dzW3Jvd10uaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBLZWVwaW5nIGhpc3Rvcnkgb2YgY2hhbmdlc1xuICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjonc2V0SGVpZ2h0JyxcbiAgICAgICAgICAgICAgICByb3c6cm93LFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOm9sZEhlaWdodCxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTpoZWlnaHQsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gT24gcmVzaXplIGNvbHVtblxuICAgICAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25yZXNpemVyb3cpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25yZXNpemVyb3coZWwsIHJvdywgaGVpZ2h0LCBvbGRIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNvcm5lciBwb3NpdGlvblxuICAgICAgICAgICAgb2JqLnVwZGF0ZUNvcm5lclBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJvdyBoZWlnaHRcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcm93IC0gcm93IG51bWJlciAoZmlyc3Qgcm93IGlzOiAwKVxuICAgICAqIEByZXR1cm4gaGVpZ2h0IC0gY3VycmVudCByb3cgaGVpZ2h0XG4gICAgICovXG4gICAgb2JqLmdldEhlaWdodCA9IGZ1bmN0aW9uKHJvdykge1xuICAgICAgICBpZiAoISByb3cpIHtcbiAgICAgICAgICAgIC8vIEdldCBoZWlnaHQgb2YgYWxsIHJvd3NcbiAgICAgICAgICAgIHZhciBkYXRhID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBvYmoucm93c1tqXS5zdHlsZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtqXSA9IGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSB0aGUgcm93IGlzIGFuIG9iamVjdFxuICAgICAgICAgICAgaWYgKHR5cGVvZihyb3cpID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcm93ID0gJChyb3cpLmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0gb2JqLnJvd3Nbcm93XS5zdHlsZS5oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbHVtbiB0aXRsZVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBjb2x1bW4gbnVtYmVyIChmaXJzdCBjb2x1bW4gaXM6IDApXG4gICAgICogQHBhcmFtIHRpdGxlIC0gbmV3IGNvbHVtbiB0aXRsZVxuICAgICAqL1xuICAgIG9iai5nZXRIZWFkZXIgPSBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIG9iai5oZWFkZXJzW2NvbHVtbl0uaW5uZXJUZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY29sdW1uIHRpdGxlXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIGNvbHVtbiBudW1iZXIgKGZpcnN0IGNvbHVtbiBpczogMClcbiAgICAgKiBAcGFyYW0gdGl0bGUgLSBuZXcgY29sdW1uIHRpdGxlXG4gICAgICovXG4gICAgb2JqLnNldEhlYWRlciA9IGZ1bmN0aW9uKGNvbHVtbiwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG9iai5oZWFkZXJzW2NvbHVtbl0pIHtcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IG9iai5oZWFkZXJzW2NvbHVtbl0uaW5uZXJUZXh0O1xuXG4gICAgICAgICAgICBpZiAoISBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gcHJvbXB0KG9iai5vcHRpb25zLnRleHQuY29sdW1uTmFtZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbHVtbl0uaW5uZXJIVE1MID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgdGl0bGUgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbHVtbl0uc2V0QXR0cmlidXRlKCd0aXRsZScsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NldEhlYWRlcicsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbHVlLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE9uIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCEgb2JqLmlnbm9yZUV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2VoZWFkZXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2VoZWFkZXIoZWwsIGNvbHVtbiwgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGhlYWRlcnNcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYXNBcnJheVxuICAgICAqIEByZXR1cm4gbWl4ZWRcbiAgICAgKi9cbiAgICBvYmouZ2V0SGVhZGVycyA9IGZ1bmN0aW9uIChhc0FycmF5KSB7XG4gICAgICAgIHZhciB0aXRsZSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmhlYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRpdGxlLnB1c2gob2JqLmdldEhlYWRlcihpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNBcnJheSA/IHRpdGxlIDogdGl0bGUuam9pbihvYmoub3B0aW9ucy5jc3ZEZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBtZXRhIGluZm9ybWF0aW9uIGZyb20gY2VsbChzKVxuICAgICAqIFxuICAgICAqIEByZXR1cm4gaW50ZWdlclxuICAgICAqL1xuICAgIG9iai5nZXRNZXRhID0gZnVuY3Rpb24oY2VsbCwga2V5KSB7XG4gICAgICAgIGlmICghIGNlbGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoub3B0aW9ucy5tZXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmoub3B0aW9ucy5tZXRhW2NlbGxdICYmIG9iai5vcHRpb25zLm1ldGFbY2VsbF1ba2V5XSA/IG9iai5vcHRpb25zLm1ldGFbY2VsbF1ba2V5XSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmoub3B0aW9ucy5tZXRhW2NlbGxdID8gb2JqLm9wdGlvbnMubWV0YVtjZWxsXSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbWV0YSBpbmZvcm1hdGlvbiB0byBjZWxsKHMpXG4gICAgICogXG4gICAgICogQHJldHVybiBpbnRlZ2VyXG4gICAgICovXG4gICAgb2JqLnNldE1ldGEgPSBmdW5jdGlvbihvLCBrLCB2KSB7XG4gICAgICAgIGlmICghIG9iai5vcHRpb25zLm1ldGEpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm1ldGEgPSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGsgJiYgdikge1xuICAgICAgICAgICAgLy8gU2V0IGRhdGEgdmFsdWVcbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLm1ldGFbb10pIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5tZXRhW29dID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5tZXRhW29dW2tdID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoYXQgZm9yIGFsbCBjZWxsc1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLm1ldGFba2V5c1tpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubWV0YVtrZXlzW2ldXSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcm9wID0gT2JqZWN0LmtleXMob1trZXlzW2ldXSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwcm9wLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm1ldGFba2V5c1tpXV1bcHJvcFtqXV0gPSBvW2tleXNbaV1dW3Byb3Bbal1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmouaWdub3JlRXZlbnRzICE9IHRydWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2VtZXRhKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2VtZXRhKGVsLCBvLCBrLCB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBtZXRhIGluZm9ybWF0aW9uXG4gICAgICogXG4gICAgICogQHJldHVybiBpbnRlZ2VyXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZU1ldGEgPSBmdW5jdGlvbihhZmZlY3RlZENlbGxzKSB7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5tZXRhKSB7XG4gICAgICAgICAgICB2YXIgbmV3TWV0YSA9IHt9O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmoub3B0aW9ucy5tZXRhKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChhZmZlY3RlZENlbGxzW2tleXNbaV1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld01ldGFbYWZmZWN0ZWRDZWxsc1trZXlzW2ldXV0gPSBvYmoub3B0aW9ucy5tZXRhW2tleXNbaV1dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld01ldGFba2V5c1tpXV0gPSBvYmoub3B0aW9ucy5tZXRhW2tleXNbaV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBtZXRhIGluZm9ybWF0aW9uXG4gICAgICAgICAgICBvYmoub3B0aW9ucy5tZXRhID0gbmV3TWV0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzdHlsZSBpbmZvcm1hdGlvbiBmcm9tIGNlbGwocylcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIGludGVnZXJcbiAgICAgKi9cbiAgICBvYmouZ2V0U3R5bGUgPSBmdW5jdGlvbihjZWxsLCBrZXkpIHtcbiAgICAgICAgLy8gQ2VsbFxuICAgICAgICBpZiAoISBjZWxsKSB7XG4gICAgICAgICAgICAvLyBDb250cm9sIHZhcnNcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgICAgIC8vIENvbHVtbiBhbmQgcm93IGxlbmd0aFxuICAgICAgICAgICAgdmFyIHggPSBvYmoub3B0aW9ucy5kYXRhWzBdLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB5ID0gb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIEdvIHRocm91Z2ggdGhlIGNvbHVtbnMgdG8gZ2V0IHRoZSBkYXRhXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHk7IGorKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0ga2V5ID8gb2JqLnJlY29yZHNbal1baV0uc3R5bGVba2V5XSA6IG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBbnkgbWV0YSBkYXRhIGZvciB0aGlzIGNvbHVtbj9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbHVtbiBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgayA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFtpLCBqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtrXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBrZXkgPyBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zdHlsZVtrZXldIDogb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9iai5yZXNldFN0eWxlID0gZnVuY3Rpb24obywgaWdub3JlSGlzdG9yeUFuZEV2ZW50cykge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG8pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIFBvc2l0aW9uXG4gICAgICAgICAgICB2YXIgY2VsbCA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKGtleXNbaV0sIHRydWUpO1xuICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW2NlbGxbMV1dICYmIG9iai5yZWNvcmRzW2NlbGxbMV1dW2NlbGxbMF1dKSB7XG4gICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uc2V0QXR0cmlidXRlKCdzdHlsZScsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmouc2V0U3R5bGUobywgbnVsbCwgbnVsbCwgbnVsbCwgaWdub3JlSGlzdG9yeUFuZEV2ZW50cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG1ldGEgaW5mb3JtYXRpb24gdG8gY2VsbChzKVxuICAgICAqIFxuICAgICAqIEByZXR1cm4gaW50ZWdlclxuICAgICAqL1xuICAgIG9iai5zZXRTdHlsZSA9IGZ1bmN0aW9uKG8sIGssIHYsIGZvcmNlLCBpZ25vcmVIaXN0b3J5QW5kRXZlbnRzKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHt9O1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB7fTtcblxuICAgICAgICAvLyBBcHBseSBzdHlsZVxuICAgICAgICB2YXIgYXBwbHlTdHlsZSA9IGZ1bmN0aW9uKGNlbGxJZCwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gUG9zaXRpb25cbiAgICAgICAgICAgIHZhciBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbElkLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW2NlbGxbMV1dICYmIG9iai5yZWNvcmRzW2NlbGxbMV1dW2NlbGxbMF1dKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zdHlsZVtrZXldO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIGxheW91dFxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gdmFsdWUgJiYgISBmb3JjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zdHlsZVtrZXldID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhpc3RvcnlcbiAgICAgICAgICAgICAgICBpZiAoISBvbGRWYWx1ZVtjZWxsSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2NlbGxJZF0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCEgbmV3VmFsdWVbY2VsbElkXSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVtjZWxsSWRdID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb2xkVmFsdWVbY2VsbElkXS5wdXNoKFtrZXkgKyAnOicgKyBjdXJyZW50VmFsdWVdKTtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVtjZWxsSWRdLnB1c2goW2tleSArICc6JyArIHZhbHVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoayAmJiB2KSB7XG4gICAgICAgICAgICAvLyBHZXQgb2JqZWN0IGZyb20gc3RyaW5nXG4gICAgICAgICAgICBpZiAodHlwZW9mKG8pID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlTdHlsZShvLCBrLCB2KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgZHVwbGljYXRpb25zXG4gICAgICAgICAgICAgICAgdmFyIG9uZUFwcGxpY2F0aW9uID0gW107XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhhdCBmb3IgYWxsIGNlbGxzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gb1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG9baV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxOYW1lID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoW3gsIHldKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIHdoZW4gaXMgYSBtZXJnZWQgY2VsbFxuICAgICAgICAgICAgICAgICAgICBpZiAoISBvbmVBcHBsaWNhdGlvbltjZWxsTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5U3R5bGUoY2VsbE5hbWUsIGssIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lQXBwbGljYXRpb25bY2VsbE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBvW2tleXNbaV1dO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yoc3R5bGUpID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gc3R5bGUuc3BsaXQoJzsnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdHlsZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHN0eWxlW2pdKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbal0gPSBzdHlsZVtqXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZVtqXVswXS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5U3R5bGUoa2V5c1tpXSwgc3R5bGVbal1bMF0udHJpbSgpLCBzdHlsZVtqXVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9sZFZhbHVlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvbGRWYWx1ZVtrZXlzW2ldXSA9IG9sZFZhbHVlW2tleXNbaV1dLmpvaW4oJzsnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5ld1ZhbHVlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZVtrZXlzW2ldXSA9IG5ld1ZhbHVlW2tleXNbaV1dLmpvaW4oJzsnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghIGlnbm9yZUhpc3RvcnlBbmRFdmVudHMpIHtcbiAgICAgICAgICAgIC8vIEtlZXBpbmcgaGlzdG9yeSBvZiBjaGFuZ2VzXG4gICAgICAgICAgICBvYmouc2V0SGlzdG9yeSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnc2V0U3R5bGUnLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmouaWdub3JlRXZlbnRzICE9IHRydWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2VzdHlsZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2hhbmdlc3R5bGUoZWwsIG8sIGssIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNlbGwgY29tbWVudHMsIG51bGwgY2VsbCBmb3IgYWxsXG4gICAgICovXG4gICAgb2JqLmdldENvbW1lbnRzID0gZnVuY3Rpb24oY2VsbCwgd2l0aEF1dGhvcikge1xuICAgICAgICBpZiAoY2VsbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNlbGwpID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNlbGwgPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZShjZWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdpdGhBdXRob3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uZ2V0QXR0cmlidXRlKCd0aXRsZScpLCBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5nZXRBdHRyaWJ1dGUoJ2F1dGhvcicpXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuY29sdW1ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50cyA9IG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGwgPSBqZXhjZWwuZ2V0Q29sdW1uTmFtZUZyb21JZChbaSwgal0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2NlbGxdID0gY29tbWVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgY2VsbCBjb21tZW50c1xuICAgICAqL1xuICAgIG9iai5zZXRDb21tZW50cyA9IGZ1bmN0aW9uKGNlbGxJZCwgY29tbWVudHMsIGF1dGhvcikge1xuICAgICAgICBpZiAodHlwZW9mKGNlbGxJZCkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBjZWxsID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUoY2VsbElkLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjZWxsID0gY2VsbElkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcCBvbGQgdmFsdWVcbiAgICAgICAgdmFyIHRpdGxlID0gb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xuICAgICAgICB2YXIgYXV0aG9yID0gb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uZ2V0QXR0cmlidXRlKCdkYXRhLWF1dGhvcicpO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBbIHRpdGxlLCBhdXRob3IgXTtcblxuICAgICAgICAvLyBTZXQgbmV3IHZhbHVlc1xuICAgICAgICBvYmoucmVjb3Jkc1tjZWxsWzFdXVtjZWxsWzBdXS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY29tbWVudHMgPyBjb21tZW50cyA6ICcnKTtcbiAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uc2V0QXR0cmlidXRlKCdkYXRhLWF1dGhvcicsIGF1dGhvciA/IGF1dGhvciA6ICcnKTtcblxuICAgICAgICAvLyBSZW1vdmUgY2xhc3MgaWYgdGhlcmUgaXMgbm8gY29tbWVudFxuICAgICAgICBpZiAoY29tbWVudHMpIHtcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2NlbGxbMV1dW2NlbGxbMF1dLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF9jb21tZW50cycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlY29yZHNbY2VsbFsxXV1bY2VsbFswXV0uY2xhc3NMaXN0LnJlbW92ZSgnamV4Y2VsX2NvbW1lbnRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIGhpc3RvcnlcbiAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgYWN0aW9uOidzZXRDb21tZW50cycsXG4gICAgICAgICAgICBjb2x1bW46IGNlbGxJZCxcbiAgICAgICAgICAgIG5ld1ZhbHVlOiBbIGNvbW1lbnRzLCBhdXRob3IgXSxcbiAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRhYmxlIGNvbmZpZyBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIG9iai5nZXRDb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBvYmoub3B0aW9ucztcbiAgICAgICAgb3B0aW9ucy5zdHlsZSA9IG9iai5nZXRTdHlsZSgpO1xuICAgICAgICBvcHRpb25zLm1lcmdlQ2VsbHMgPSBvYmouZ2V0TWVyZ2UoKTtcclxuICAgICAgICBvcHRpb25zLmNvbW1lbnRzID0gb2JqLmdldENvbW1lbnRzKCk7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU29ydCBkYXRhIGFuZCByZWxvYWQgdGFibGVcbiAgICAgKi9cbiAgICBvYmoub3JkZXJCeSA9IGZ1bmN0aW9uKGNvbHVtbiwgb3JkZXIpIHtcbiAgICAgICAgaWYgKGNvbHVtbiA+PSAwKSB7XG4gICAgICAgICAgICAvLyBNZXJnZWQgY2VsbHNcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmoub3B0aW9ucy5tZXJnZUNlbGxzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgY29uZmlybShvYmoub3B0aW9ucy50ZXh0LnRoaXNBY3Rpb25XaWxsRGVzdHJveUFueUV4aXN0aW5nTWVyZ2VkQ2VsbHNBcmVZb3VTdXJlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG1lcmdlZCBjZWxsc1xuICAgICAgICAgICAgICAgICAgICBvYmouZGVzdHJveU1lcmdlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGlyZWN0aW9uXG4gICAgICAgICAgICBpZiAob3JkZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9yZGVyID0gb2JqLmhlYWRlcnNbY29sdW1uXS5jbGFzc0xpc3QuY29udGFpbnMoJ2Fycm93LWRvd24nKSA/IDEgOiAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcmRlciA9IG9yZGVyID8gMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpbHRlclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLm9yZGVyQnkgPSBmdW5jdGlvbihwLCBvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMCkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUEgPSBhW3BdID09ICcnID8gJycgOiBOdW1iZXIoYVtwXSkgPT0gYVtwXSA/IE51bWJlcihhW3BdKSA6IGFbcF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlQiA9IGJbcF0gPT0gJycgPyAnJyA6IE51bWJlcihiW3BdKSA9PSBiW3BdID8gTnVtYmVyKGJbcF0pIDogYltwXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWVBID09ICcnICYmIHZhbHVlQiAhPSAnJykgPyAxIDogKHZhbHVlQSAhPSAnJyAmJiB2YWx1ZUIgPT0gJycpID8gLTEgOiAodmFsdWVBID4gdmFsdWVCKSA/IDEgOiAodmFsdWVBIDwgdmFsdWVCKSA/IC0xIDogIDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlQSA9PSAnJyAmJiB2YWx1ZUIgIT0gJycpID8gMSA6ICh2YWx1ZUEgIT0gJycgJiYgdmFsdWVCID09ICcnKSA/IC0xIDogKHZhbHVlQSA+IHZhbHVlQikgPyAtMSA6ICh2YWx1ZUEgPCB2YWx1ZUIpID8gMSA6ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRlc3Qgb3JkZXJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gW107XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tjb2x1bW5dLnR5cGUgPT0gJ2NhbGVuZGFyJyB8fFxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbY29sdW1uXS50eXBlID09ICdjaGVja2JveCcgfHxcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zW2NvbHVtbl0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBbal0gPSBbIGosIG9iai5vcHRpb25zLmRhdGFbal1bY29sdW1uXSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBbal0gPSBbIGosIG9iai5yZWNvcmRzW2pdW2NvbHVtbl0uaW5uZXJIVE1MIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcCA9IHRlbXAub3JkZXJCeSgxLCBvcmRlcik7XG5cbiAgICAgICAgICAgIC8vIFNhdmUgaGlzdG9yeVxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVtqXSA9IHRlbXBbal1bMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNhdmUgaGlzdG9yeVxuICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29yZGVyQnknLFxuICAgICAgICAgICAgICAgIHJvd3M6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgIG9yZGVyOiBvcmRlcixcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgb3JkZXJcbiAgICAgICAgICAgIG9iai51cGRhdGVPcmRlckFycm93KGNvbHVtbiwgb3JkZXIpO1xuICAgICAgICAgICAgb2JqLnVwZGF0ZU9yZGVyKG5ld1ZhbHVlKTtcblxuICAgICAgICAgICAgLy8gT24gc29ydCBldmVudFxuICAgICAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25zb3J0KSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uc29ydChlbCwgY29sdW1uLCBvcmRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBvcmRlciBhcnJvd1xuICAgICAqL1xuICAgIG9iai51cGRhdGVPcmRlckFycm93ID0gZnVuY3Rpb24oY29sdW1uLCBvcmRlcikge1xuICAgICAgICAvLyBSZW1vdmUgb3JkZXJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb2JqLmhlYWRlcnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnYXJyb3ctdXAnKTtcbiAgICAgICAgICAgIG9iai5oZWFkZXJzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93LWRvd24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIG9yZGVyIHNwZWNpZmllZCB0aGVuIHRvZ2dsZSBvcmRlclxuICAgICAgICBpZiAob3JkZXIpIHtcbiAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbHVtbl0uY2xhc3NMaXN0LmFkZCgnYXJyb3ctdXAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbHVtbl0uY2xhc3NMaXN0LmFkZCgnYXJyb3ctZG93bicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHJvd3MgcG9zaXRpb25cbiAgICAgKi9cbiAgICBvYmoudXBkYXRlT3JkZXIgPSBmdW5jdGlvbihyb3dzKSB7XG4gICAgICAgIC8vIEhpc3RvcnlcbiAgICAgICAgdmFyIGRhdGEgPSBbXVxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGRhdGFbal0gPSBvYmoub3B0aW9ucy5kYXRhW3Jvd3Nbal1dO1xuICAgICAgICB9XG4gICAgICAgIG9iai5vcHRpb25zLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHZhciBkYXRhID0gW11cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBkYXRhW2pdID0gb2JqLnJlY29yZHNbcm93c1tqXV07XG4gICAgICAgIH1cbiAgICAgICAgb2JqLnJlY29yZHMgPSBkYXRhO1xuXG4gICAgICAgIHZhciBkYXRhID0gW11cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBkYXRhW2pdID0gb2JqLnJvd3Nbcm93c1tqXV07XG4gICAgICAgIH1cbiAgICAgICAgb2JqLnJvd3MgPSBkYXRhO1xuXG4gICAgICAgIC8vIFVwZGF0ZSByZWZlcmVuY2VzXG4gICAgICAgIG9iai51cGRhdGVUYWJsZVJlZmVyZW5jZXMoKTtcblxuICAgICAgICAvLyBSZWRvIHNlYXJjaFxuICAgICAgICBpZiAob2JqLnNlYXJjaElucHV0LnZhbHVlKSB7XG4gICAgICAgICAgICBvYmouc2VhcmNoKG9iai5zZWFyY2hJbnB1dC52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgcGFnZVxuICAgICAgICAgICAgb2JqLnJlc3VsdHMgPSBudWxsO1xuICAgICAgICAgICAgb2JqLnBhZ2VOdW1iZXIgPSAwO1xuXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMucGFnaW5hdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmoucGFnZSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMubGF6eUxvYWRpbmcgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG9iai5sb2FkUGFnZSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoucm93cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBvYmoudGJvZHkuYXBwZW5kQ2hpbGQob2JqLnJvd3Nbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmUgcm93XG4gICAgICogXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLm1vdmVSb3cgPSBmdW5jdGlvbihvLCBkLCBpZ25vcmVEb20pIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9iai5vcHRpb25zLm1lcmdlQ2VsbHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgaWYgKG8gPiBkKSB7XHJcbiAgICAgICAgICAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSAxO1xyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSAwO1xyXG4gICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgaWYgKG9iai5pc1Jvd01lcmdlZChvKS5sZW5ndGggfHwgb2JqLmlzUm93TWVyZ2VkKGQsIGluc2VydEJlZm9yZSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgY29uZmlybShvYmoub3B0aW9ucy50ZXh0LnRoaXNBY3Rpb25XaWxsRGVzdHJveUFueUV4aXN0aW5nTWVyZ2VkQ2VsbHNBcmVZb3VTdXJlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmRlc3Ryb3lNZXJnZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2VhcmNoID09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChvYmoucmVzdWx0cyAmJiBvYmoucmVzdWx0cy5sZW5ndGggIT0gb2JqLnJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0ob2JqLm9wdGlvbnMudGV4dC50aGlzQWN0aW9uV2lsbENsZWFyWW91clNlYXJjaFJlc3VsdHNBcmVZb3VTdXJlKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmoucmVzZXRTZWFyY2goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmoucmVzdWx0cyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISBpZ25vcmVEb20pIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG9iai50Ym9keS5jaGlsZHJlbiwgb2JqLnJvd3NbZF0pID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAobyA+IGQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5Lmluc2VydEJlZm9yZShvYmoucm93c1tvXSwgb2JqLnJvd3NbZF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai50Ym9keS5pbnNlcnRCZWZvcmUob2JqLnJvd3Nbb10sIG9iai5yb3dzW2RdLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iai50Ym9keS5yZW1vdmVDaGlsZChvYmoucm93c1tvXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQbGFjZSByZWZlcmVuY2VzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIG9iai5yb3dzLnNwbGljZShkLCAwLCBvYmoucm93cy5zcGxpY2UobywgMSlbMF0pO1xuICAgICAgICBvYmoucmVjb3Jkcy5zcGxpY2UoZCwgMCwgb2JqLnJlY29yZHMuc3BsaWNlKG8sIDEpWzBdKTtcbiAgICAgICAgb2JqLm9wdGlvbnMuZGF0YS5zcGxpY2UoZCwgMCwgb2JqLm9wdGlvbnMuZGF0YS5zcGxpY2UobywgMSlbMF0pO1xuXG4gICAgICAgIC8vIFJlc3BlY3QgcGFnaW5hdGlvblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMucGFnaW5hdGlvbiA+IDAgJiYgb2JqLnRib2R5LmNoaWxkcmVuLmxlbmd0aCAhPSBvYmoub3B0aW9ucy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICBvYmoucGFnZShvYmoucGFnZU51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBLZWVwaW5nIGhpc3Rvcnkgb2YgY2hhbmdlc1xuICAgICAgICBvYmouc2V0SGlzdG9yeSh7XG4gICAgICAgICAgICBhY3Rpb246J21vdmVSb3cnLFxuICAgICAgICAgICAgb2xkVmFsdWU6IG8sXG4gICAgICAgICAgICBuZXdWYWx1ZTogZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHRhYmxlIHJlZmVyZW5jZXNcbiAgICAgICAgb2JqLnVwZGF0ZVRhYmxlUmVmZXJlbmNlcygpO1xuXG4gICAgICAgIC8vIEV2ZW50c1xuICAgICAgICBpZiAob2JqLmlnbm9yZUV2ZW50cyAhPSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9ubW92ZXJvdykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9ubW92ZXJvdyhlbCwgbywgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSBuZXcgcm93XG4gICAgICogXG4gICAgICogQHBhcmFtIG1peGVkIC0gbnVtYmVyIG9mIGJsYW5rIGxpbmVzIHRvIGJlIGluc2VydCBvciBhIHNpbmdsZSBhcnJheSB3aXRoIHRoZSBkYXRhIG9mIHRoZSBuZXcgcm93XG4gICAgICogQHBhcmFtIHJvd051bWJlclxuICAgICAqIEBwYXJhbSBpbnNlcnRCZWZvcmVcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvYmouaW5zZXJ0Um93ID0gZnVuY3Rpb24obWl4ZWQsIHJvd051bWJlciwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgIC8vIENvbmZpZ3VyYXRpb25cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93SW5zZXJ0Um93ID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIFJlY29yZHNcbiAgICAgICAgICAgIHZhciByZWNvcmRzID0gW107XG5cbiAgICAgICAgICAgIC8vIERhdGEgdG8gYmUgaW5zZXJ0XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuXG4gICAgICAgICAgICAvLyBUaGUgaW5zZXJ0IGNvdWxkIGJlIGxlYWQgYnkgbnVtYmVyIG9mIHJvd3Mgb3IgdGhlIGFycmF5IG9mIGRhdGFcbiAgICAgICAgICAgIGlmIChtaXhlZCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbnVtT2ZSb3dzID0gbWl4ZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBudW1PZlJvd3MgPSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1peGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBtaXhlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERpcmVjdGlvblxuICAgICAgICAgICAgdmFyIGluc2VydEJlZm9yZSA9IGluc2VydEJlZm9yZSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAgICAgLy8gQ3VycmVudCBjb2x1bW4gbnVtYmVyXG4gICAgICAgICAgICB2YXIgbGFzdFJvdyA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgaWYgKHJvd051bWJlciA9PSB1bmRlZmluZWQgfHwgcm93TnVtYmVyID49IHBhcnNlSW50KGxhc3RSb3cpIHx8IHJvd051bWJlciA8IDApIHtcbiAgICAgICAgICAgICAgICByb3dOdW1iZXIgPSBsYXN0Um93O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPbmJlZm9yZWluc2VydHJvd1xuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJlZm9yZWluc2VydHJvdykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLm9uYmVmb3JlaW5zZXJ0cm93KGVsLCByb3dOdW1iZXIsIG51bU9mUm93cywgaW5zZXJ0QmVmb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb25iZWZvcmVpbnNlcnRyb3cgcmV0dXJuZWQgZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZXJnZWQgY2VsbHNcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmoub3B0aW9ucy5tZXJnZUNlbGxzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5pc1Jvd01lcmdlZChyb3dOdW1iZXIsIGluc2VydEJlZm9yZSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIGNvbmZpcm0ob2JqLm9wdGlvbnMudGV4dC50aGlzQWN0aW9uV2lsbERlc3Ryb3lBbnlFeGlzdGluZ01lcmdlZENlbGxzQXJlWW91U3VyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kZXN0cm95TWVyZ2VkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsZWFyIGFueSBzZWFyY2hcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvYmoucmVzdWx0cyAmJiBvYmoucmVzdWx0cy5sZW5ndGggIT0gb2JqLnJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKG9iai5vcHRpb25zLnRleHQudGhpc0FjdGlvbldpbGxDbGVhcllvdXJTZWFyY2hSZXN1bHRzQXJlWW91U3VyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZXNldFNlYXJjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb2JqLnJlc3VsdHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNlcnRiZWZvcmVcbiAgICAgICAgICAgIHZhciByb3dJbmRleCA9ICghIGluc2VydEJlZm9yZSkgPyByb3dOdW1iZXIgKyAxIDogcm93TnVtYmVyO1xuXG4gICAgICAgICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGFcbiAgICAgICAgICAgIHZhciBjdXJyZW50UmVjb3JkcyA9IG9iai5yZWNvcmRzLnNwbGljZShyb3dJbmRleCk7XG4gICAgICAgICAgICB2YXIgY3VycmVudERhdGEgPSBvYmoub3B0aW9ucy5kYXRhLnNwbGljZShyb3dJbmRleCk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJvd3MgPSBvYmoucm93cy5zcGxpY2Uocm93SW5kZXgpO1xuXG4gICAgICAgICAgICAvLyBBZGRpbmcgbGluZXNcbiAgICAgICAgICAgIHZhciByb3dSZWNvcmRzID0gW107XG4gICAgICAgICAgICB2YXIgcm93RGF0YSA9IFtdO1xuICAgICAgICAgICAgdmFyIHJvd05vZGUgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gcm93SW5kZXg7IHJvdyA8IChudW1PZlJvd3MgKyByb3dJbmRleCk7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCBkYXRhIHRvIHRoZSBkYXRhIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbcm93XSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG9iai5vcHRpb25zLmNvbHVtbnMubGVuZ3RoOyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW3Jvd11bY29sXSAgPSBkYXRhW2NvbF0gPyBkYXRhW2NvbF0gOiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHJvd1xuICAgICAgICAgICAgICAgIHZhciB0ciA9IG9iai5jcmVhdGVSb3cocm93LCBvYmoub3B0aW9ucy5kYXRhW3Jvd10pO1xuICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBub2RlXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3dzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwob2JqLnRib2R5LmNoaWxkcmVuLCBjdXJyZW50Um93c1swXSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoudGJvZHkuaW5zZXJ0QmVmb3JlKHRyLCBjdXJyZW50Um93c1swXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG9iai50Ym9keS5jaGlsZHJlbiwgb2JqLnJvd3Nbcm93TnVtYmVyXSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoudGJvZHkuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZWNvcmQgSGlzdG9yeVxuICAgICAgICAgICAgICAgIHJvd1JlY29yZHMucHVzaChvYmoucmVjb3Jkc1tyb3ddKTtcbiAgICAgICAgICAgICAgICByb3dEYXRhLnB1c2gob2JqLm9wdGlvbnMuZGF0YVtyb3ddKTtcbiAgICAgICAgICAgICAgICByb3dOb2RlLnB1c2godHIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb3B5IHRoZSBkYXRhIGJhY2sgdG8gdGhlIG1haW4gZGF0YVxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkob2JqLnJlY29yZHMsIGN1cnJlbnRSZWNvcmRzKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KG9iai5vcHRpb25zLmRhdGEsIGN1cnJlbnREYXRhKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KG9iai5yb3dzLCBjdXJyZW50Um93cyk7XG5cbiAgICAgICAgICAgIC8vIFJlc3BlY3QgcGFnaW5hdGlvblxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgb2JqLnBhZ2Uob2JqLnBhZ2VOdW1iZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLZWVwIGhpc3RvcnlcbiAgICAgICAgICAgIG9iai5zZXRIaXN0b3J5KHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdpbnNlcnRSb3cnLFxuICAgICAgICAgICAgICAgIHJvd051bWJlcjogcm93TnVtYmVyLFxuICAgICAgICAgICAgICAgIG51bU9mUm93czogbnVtT2ZSb3dzLFxuICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICAgICAgICAgICAgICAgIHJvd1JlY29yZHM6IHJvd1JlY29yZHMsXG4gICAgICAgICAgICAgICAgcm93RGF0YTogcm93RGF0YSxcbiAgICAgICAgICAgICAgICByb3dOb2RlOiByb3dOb2RlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0YWJsZSByZWZlcmVuY2VzXG4gICAgICAgICAgICBvYmoudXBkYXRlVGFibGVSZWZlcmVuY2VzKCk7XG5cbiAgICAgICAgICAgIC8vIEV2ZW50c1xuICAgICAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25pbnNlcnRyb3cpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25pbnNlcnRyb3coZWwsIHJvd051bWJlciwgbnVtT2ZSb3dzLCByb3dSZWNvcmRzLCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHJvdyBieSBudW1iZXJcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaW50ZWdlciByb3dOdW1iZXIgLSByb3cgbnVtYmVyIHRvIGJlIGV4Y2x1ZGVkXG4gICAgICogQHBhcmFtIGludGVnZXIgbnVtT2ZSb3dzIC0gbnVtYmVyIG9mIGxpbmVzXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLmRlbGV0ZVJvdyA9IGZ1bmN0aW9uKHJvd051bWJlciwgbnVtT2ZSb3dzKSB7XG4gICAgICAgIC8vIEdsb2JhbCBDb25maWd1cmF0aW9uXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5hbGxvd0RlbGV0ZVJvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuYWxsb3dEZWxldGluZ0FsbFJvd3MgPT0gdHJ1ZSB8fCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWxldGUgcm93IGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgaWYgKHJvd051bWJlciA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlciA9IG9iai5nZXRTZWxlY3RlZFJvd3MoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoISBudW1iZXJbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd051bWJlciA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bU9mUm93cyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dOdW1iZXIgPSBwYXJzZUludChudW1iZXJbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1PZlJvd3MgPSBudW1iZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTGFzdCBjb2x1bW5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdFJvdyA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChyb3dOdW1iZXIgPT0gdW5kZWZpbmVkIHx8IHJvd051bWJlciA+IGxhc3RSb3cgfHwgcm93TnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByb3dOdW1iZXIgPSBsYXN0Um93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghIG51bU9mUm93cykge1xuICAgICAgICAgICAgICAgICAgICBudW1PZlJvd3MgPSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBkZWxldGUgbW9yZSB0aGFuIHRoZSBudW1iZXIgb2YgcmVjb3JlZHNcbiAgICAgICAgICAgICAgICBpZiAocm93TnVtYmVyICsgbnVtT2ZSb3dzID49IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bU9mUm93cyA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoIC0gcm93TnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE9uYmVmb3JlZGVsZXRlcm93XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJlZm9yZWRlbGV0ZXJvdykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5vbmJlZm9yZWRlbGV0ZXJvdyhlbCwgcm93TnVtYmVyLCBudW1PZlJvd3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb25iZWZvcmVkZWxldGVyb3cgcmV0dXJuZWQgZmFsc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChyb3dOdW1iZXIpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2VkIGNlbGxzXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXJnZUV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gcm93TnVtYmVyOyByb3cgPCByb3dOdW1iZXIgKyBudW1PZlJvd3M7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5pc1Jvd01lcmdlZChyb3csIGZhbHNlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VFeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWVyZ2VFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIGNvbmZpcm0ob2JqLm9wdGlvbnMudGV4dC50aGlzQWN0aW9uV2lsbERlc3Ryb3lBbnlFeGlzdGluZ01lcmdlZENlbGxzQXJlWW91U3VyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kZXN0cm95TWVyZ2VkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBhbnkgc2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5yZXN1bHRzICYmIG9iai5yZXN1bHRzLmxlbmd0aCAhPSBvYmoucm93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybShvYmoub3B0aW9ucy50ZXh0LnRoaXNBY3Rpb25XaWxsQ2xlYXJZb3VyU2VhcmNoUmVzdWx0c0FyZVlvdVN1cmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZXNldFNlYXJjaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZXN1bHRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBub2RlXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IHJvd051bWJlcjsgcm93IDwgcm93TnVtYmVyICsgbnVtT2ZSb3dzOyByb3crKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwob2JqLnRib2R5LmNoaWxkcmVuLCBvYmoucm93c1tyb3ddKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJvd3Nbcm93XS5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoucm93c1tyb3ddLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2JqLnJvd3Nbcm93XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZGF0YVxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93UmVjb3JkcyA9IG9iai5yZWNvcmRzLnNwbGljZShyb3dOdW1iZXIsIG51bU9mUm93cyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dEYXRhID0gb2JqLm9wdGlvbnMuZGF0YS5zcGxpY2Uocm93TnVtYmVyLCBudW1PZlJvd3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93Tm9kZSA9IG9iai5yb3dzLnNwbGljZShyb3dOdW1iZXIsIG51bU9mUm93cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzcGVjdCBwYWdpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uID4gMCAmJiBvYmoudGJvZHkuY2hpbGRyZW4ubGVuZ3RoICE9IG9iai5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5wYWdlKG9iai5wYWdlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgb2JqLmNvbmRpdGlvbmFsU2VsZWN0aW9uVXBkYXRlKDEsIHJvd051bWJlciwgKHJvd051bWJlciArIG51bU9mUm93cykgLSAxKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIGhpc3RvcnlcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZGVsZXRlUm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd051bWJlcjogcm93TnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtT2ZSb3dzOiBudW1PZlJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRCZWZvcmU6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dSZWNvcmRzOiByb3dSZWNvcmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93RGF0YTogcm93RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd05vZGU6IHJvd05vZGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRhYmxlIHJlZmVyZW5jZXNcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVRhYmxlUmVmZXJlbmNlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50c1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmlnbm9yZUV2ZW50cyAhPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uZGVsZXRlcm93KSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25kZWxldGVyb3coZWwsIHJvd051bWJlciwgbnVtT2ZSb3dzLCByb3dSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMLiBJdCBpcyBub3QgcG9zc2libGUgdG8gZGVsZXRlIHRoZSBsYXN0IHJvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIGNvbHVtblxuICAgICAqIFxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIG9iai5tb3ZlQ29sdW1uID0gZnVuY3Rpb24obywgZCkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKG8gPiBkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0QmVmb3JlID0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob2JqLmlzQ29sTWVyZ2VkKG8pLmxlbmd0aCB8fCBvYmouaXNDb2xNZXJnZWQoZCwgaW5zZXJ0QmVmb3JlKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghIGNvbmZpcm0ob2JqLm9wdGlvbnMudGV4dC50aGlzQWN0aW9uV2lsbERlc3Ryb3lBbnlFeGlzdGluZ01lcmdlZENlbGxzQXJlWW91U3VyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5kZXN0cm95TWVyZ2VkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG8gPSBwYXJzZUludChvKTtcbiAgICAgICAgdmFyIGQgPSBwYXJzZUludChkKTtcblxuICAgICAgICBpZiAobyA+IGQpIHtcbiAgICAgICAgICAgIG9iai5oZWFkZXJDb250YWluZXIuaW5zZXJ0QmVmb3JlKG9iai5oZWFkZXJzW29dLCBvYmouaGVhZGVyc1tkXSk7XG4gICAgICAgICAgICBvYmouY29sZ3JvdXBDb250YWluZXIuaW5zZXJ0QmVmb3JlKG9iai5jb2xncm91cFtvXSwgb2JqLmNvbGdyb3VwW2RdKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoucm93cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIG9iai5yb3dzW2pdLmluc2VydEJlZm9yZShvYmoucmVjb3Jkc1tqXVtvXSwgb2JqLnJlY29yZHNbal1bZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLmhlYWRlckNvbnRhaW5lci5pbnNlcnRCZWZvcmUob2JqLmhlYWRlcnNbb10sIG9iai5oZWFkZXJzW2RdLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIG9iai5jb2xncm91cENvbnRhaW5lci5pbnNlcnRCZWZvcmUob2JqLmNvbGdyb3VwW29dLCBvYmouY29sZ3JvdXBbZF0ubmV4dFNpYmxpbmcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgb2JqLnJvd3Nbal0uaW5zZXJ0QmVmb3JlKG9iai5yZWNvcmRzW2pdW29dLCBvYmoucmVjb3Jkc1tqXVtkXS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zLnNwbGljZShkLCAwLCBvYmoub3B0aW9ucy5jb2x1bW5zLnNwbGljZShvLCAxKVswXSk7XG4gICAgICAgIG9iai5oZWFkZXJzLnNwbGljZShkLCAwLCBvYmouaGVhZGVycy5zcGxpY2UobywgMSlbMF0pO1xuICAgICAgICBvYmouY29sZ3JvdXAuc3BsaWNlKGQsIDAsIG9iai5jb2xncm91cC5zcGxpY2UobywgMSlbMF0pO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbal0uc3BsaWNlKGQsIDAsIG9iai5vcHRpb25zLmRhdGFbal0uc3BsaWNlKG8sIDEpWzBdKTtcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdLnNwbGljZShkLCAwLCBvYmoucmVjb3Jkc1tqXS5zcGxpY2UobywgMSlbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcGluZyBoaXN0b3J5IG9mIGNoYW5nZXNcbiAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgYWN0aW9uOidtb3ZlQ29sdW1uJyxcbiAgICAgICAgICAgIG9sZFZhbHVlOiBvLFxuICAgICAgICAgICAgbmV3VmFsdWU6IGQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0YWJsZSByZWZlcmVuY2VzXG4gICAgICAgIG9iai51cGRhdGVUYWJsZVJlZmVyZW5jZXMoKTtcblxuICAgICAgICAvLyBFdmVudHNcbiAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbm1vdmVjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbm1vdmVjb2x1bW4oZWwsIG8sIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSBuZXcgY29sdW1uXG4gICAgICogXG4gICAgICogQHBhcmFtIG1peGVkIC0gbnVtIG9mIGNvbHVtbnMgdG8gYmUgYWRkZWQgb3IgZGF0YSB0byBiZSBhZGRlZCBpbiBvbmUgc2luZ2xlIGNvbHVtblxuICAgICAqIEBwYXJhbSBpbnQgY29sdW1uTnVtYmVyIC0gbnVtYmVyIG9mIGNvbHVtbnMgdG8gYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBib29sIGluc2VydEJlZm9yZVxuICAgICAqIEBwYXJhbSBvYmplY3QgcHJvcGVydGllcyAtIGNvbHVtbiBwcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLmluc2VydENvbHVtbiA9IGZ1bmN0aW9uKG1peGVkLCBjb2x1bW5OdW1iZXIsIGluc2VydEJlZm9yZSwgcHJvcGVydGllcykge1xuICAgICAgICAvLyBDb25maWd1cmF0aW9uXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5hbGxvd0luc2VydENvbHVtbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBSZWNvcmRzXG4gICAgICAgICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBEYXRhIHRvIGJlIGluc2VydFxuICAgICAgICAgICAgdmFyIGRhdGEgPSBbXTtcblxuICAgICAgICAgICAgLy8gVGhlIGluc2VydCBjb3VsZCBiZSBsZWFkIGJ5IG51bWJlciBvZiByb3dzIG9yIHRoZSBhcnJheSBvZiBkYXRhXG4gICAgICAgICAgICBpZiAobWl4ZWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG51bU9mQ29sdW1ucyA9IG1peGVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbnVtT2ZDb2x1bW5zID0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChtaXhlZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gbWl4ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEaXJlY3Rpb25cbiAgICAgICAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmUgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIEN1cnJlbnQgY29sdW1uIG51bWJlclxuICAgICAgICAgICAgdmFyIGxhc3RDb2x1bW4gPSBvYmoub3B0aW9ucy5jb2x1bW5zLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIC8vIENvbmZpcm0gcG9zaXRpb25cbiAgICAgICAgICAgIGlmIChjb2x1bW5OdW1iZXIgPT0gdW5kZWZpbmVkIHx8IGNvbHVtbk51bWJlciA+PSBwYXJzZUludChsYXN0Q29sdW1uKSB8fCBjb2x1bW5OdW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyID0gbGFzdENvbHVtbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT25iZWZvcmVpbnNlcnRjb2x1bW5cbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25iZWZvcmVpbnNlcnRjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5vbmJlZm9yZWluc2VydGNvbHVtbihlbCwgY29sdW1uTnVtYmVyLCBudW1PZkNvbHVtbnMsIGluc2VydEJlZm9yZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uYmVmb3JlaW5zZXJ0Y29sdW1uIHJldHVybmVkIGZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVyZ2VkIGNlbGxzXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqLm9wdGlvbnMubWVyZ2VDZWxscykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaXNDb2xNZXJnZWQoY29sdW1uTnVtYmVyLCBpbnNlcnRCZWZvcmUpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISBjb25maXJtKG9iai5vcHRpb25zLnRleHQudGhpc0FjdGlvbldpbGxEZXN0cm95QW55RXhpc3RpbmdNZXJnZWRDZWxsc0FyZVlvdVN1cmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZGVzdHJveU1lcmdlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgZGVmYXVsdCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAoISBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU9mQ29sdW1uczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgcHJvcGVydGllc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW2ldID0geyB0eXBlOid0ZXh0Jywgc291cmNlOltdLCBvcHRpb25zOltdLCB3aWR0aDpvYmoub3B0aW9ucy5kZWZhdWx0Q29sV2lkdGgsIGFsaWduOm9iai5vcHRpb25zLmRlZmF1bHRDb2xBbGlnbiB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5zZXJ0IGJlZm9yZVxuICAgICAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gKCEgaW5zZXJ0QmVmb3JlKSA/IGNvbHVtbk51bWJlciArIDEgOiBjb2x1bW5OdW1iZXI7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5jb2x1bW5zID0gamV4Y2VsLmluamVjdEFycmF5KG9iai5vcHRpb25zLmNvbHVtbnMsIGNvbHVtbkluZGV4LCBwcm9wZXJ0aWVzKTtcblxuICAgICAgICAgICAgLy8gT3BlbiBzcGFjZSBpbiB0aGUgY29udGFpbmVyc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIZWFkZXJzID0gb2JqLmhlYWRlcnMuc3BsaWNlKGNvbHVtbkluZGV4KTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q29sZ3JvdXAgPSBvYmouY29sZ3JvdXAuc3BsaWNlKGNvbHVtbkluZGV4KTtcblxuICAgICAgICAgICAgLy8gSGlzdG9yeVxuICAgICAgICAgICAgdmFyIGhpc3RvcnlIZWFkZXJzID0gW107XG4gICAgICAgICAgICB2YXIgaGlzdG9yeUNvbGdyb3VwID0gW107XG4gICAgICAgICAgICB2YXIgaGlzdG9yeVJlY29yZHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBoaXN0b3J5RGF0YSA9IFtdO1xuXG4gICAgICAgICAgICAvLyBBZGQgbmV3IGhlYWRlcnNcbiAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IGNvbHVtbkluZGV4OyBjb2wgPCAobnVtT2ZDb2x1bW5zICsgY29sdW1uSW5kZXgpOyBjb2wrKykge1xuICAgICAgICAgICAgICAgIG9iai5jcmVhdGVDZWxsSGVhZGVyKGNvbCk7XG4gICAgICAgICAgICAgICAgb2JqLmhlYWRlckNvbnRhaW5lci5pbnNlcnRCZWZvcmUob2JqLmhlYWRlcnNbY29sXSwgb2JqLmhlYWRlckNvbnRhaW5lci5jaGlsZHJlbltjb2wrMV0pO1xuICAgICAgICAgICAgICAgIG9iai5jb2xncm91cENvbnRhaW5lci5pbnNlcnRCZWZvcmUob2JqLmNvbGdyb3VwW2NvbF0sIG9iai5jb2xncm91cENvbnRhaW5lci5jaGlsZHJlbltjb2wrMV0pO1xuXG4gICAgICAgICAgICAgICAgaGlzdG9yeUhlYWRlcnMucHVzaChvYmouaGVhZGVyc1tjb2xdKTtcbiAgICAgICAgICAgICAgICBoaXN0b3J5Q29sZ3JvdXAucHVzaChvYmouY29sZ3JvdXBbY29sXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZGluZyB2aXN1YWwgY29sdW1uc1xuICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGg7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRhID0gb2JqLm9wdGlvbnMuZGF0YVtyb3ddLnNwbGljZShjb2x1bW5JbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWNvcmQgPSBvYmoucmVjb3Jkc1tyb3ddLnNwbGljZShjb2x1bW5JbmRleCk7XG5cbiAgICAgICAgICAgICAgICAvLyBIaXN0b3J5XG4gICAgICAgICAgICAgICAgaGlzdG9yeURhdGFbcm93XSA9IFtdO1xuICAgICAgICAgICAgICAgIGhpc3RvcnlSZWNvcmRzW3Jvd10gPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IGNvbHVtbkluZGV4OyBjb2wgPCAobnVtT2ZDb2x1bW5zICsgY29sdW1uSW5kZXgpOyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyBOZXcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtyb3ddID8gZGF0YVtyb3ddIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGFbcm93XVtjb2xdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5ldyBjZWxsXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZCA9IG9iai5jcmVhdGVDZWxsKGNvbCwgcm93LCBvYmoub3B0aW9ucy5kYXRhW3Jvd11bY29sXSk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3Jvd11bY29sXSA9IHRkO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY2VsbCB0byB0aGUgcm93XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoucm93c1tyb3ddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucm93c1tyb3ddLmluc2VydEJlZm9yZSh0ZCwgb2JqLnJvd3Nbcm93XS5jaGlsZHJlbltjb2wrMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIEhpc3RvcnlcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeURhdGFbcm93XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeVJlY29yZHNbcm93XS5wdXNoKHRkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDb3B5IHRoZSBkYXRhIGJhY2sgdG8gdGhlIG1haW4gZGF0YVxuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KG9iai5vcHRpb25zLmRhdGFbcm93XSwgY3VycmVudERhdGEpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KG9iai5yZWNvcmRzW3Jvd10sIGN1cnJlbnRSZWNvcmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvYmouaGVhZGVycywgY3VycmVudEhlYWRlcnMpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkob2JqLmNvbGdyb3VwLCBjdXJyZW50Q29sZ3JvdXApO1xuXG4gICAgICAgICAgICAvLyBBZGp1c3QgbmVzdGVkIGhlYWRlcnNcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzICYmIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIEZsZXhpYmxlIHdheSB0byBoYW5kbGUgbmVzdGVkaGVhZGVyc1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzWzBdICYmIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF1bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbal1bb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXS5sZW5ndGgtMV0uY29sc3BhbikgKyBudW1PZkNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzW2pdW29iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbal0ubGVuZ3RoLTFdLmNvbHNwYW4gPSBjb2xzcGFuO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRoZWFkLmNoaWxkcmVuW2pdLmNoaWxkcmVuW29iai50aGVhZC5jaGlsZHJlbltqXS5jaGlsZHJlbi5sZW5ndGgtMV0uc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgY29sc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0uY29sc3BhbikgKyBudW1PZkNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0uY29sc3BhbiA9IGNvbHNwYW47XG4gICAgICAgICAgICAgICAgICAgIG9iai50aGVhZC5jaGlsZHJlblswXS5jaGlsZHJlbltvYmoudGhlYWQuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoLTFdLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsIGNvbHNwYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2VlcCBoaXN0b3J5XG4gICAgICAgICAgICBvYmouc2V0SGlzdG9yeSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnaW5zZXJ0Q29sdW1uJyxcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6Y29sdW1uTnVtYmVyLFxuICAgICAgICAgICAgICAgIG51bU9mQ29sdW1uczpudW1PZkNvbHVtbnMsXG4gICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlOmluc2VydEJlZm9yZSxcbiAgICAgICAgICAgICAgICBjb2x1bW5zOnByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczpoaXN0b3J5SGVhZGVycyxcbiAgICAgICAgICAgICAgICBjb2xncm91cDpoaXN0b3J5Q29sZ3JvdXAsXG4gICAgICAgICAgICAgICAgcmVjb3JkczpoaXN0b3J5UmVjb3JkcyxcbiAgICAgICAgICAgICAgICBkYXRhOmhpc3RvcnlEYXRhLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0YWJsZSByZWZlcmVuY2VzXG4gICAgICAgICAgICBvYmoudXBkYXRlVGFibGVSZWZlcmVuY2VzKCk7XG5cbiAgICAgICAgICAgIC8vIEV2ZW50c1xuICAgICAgICAgICAgaWYgKG9iai5pZ25vcmVFdmVudHMgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25pbnNlcnRjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25pbnNlcnRjb2x1bW4oZWwsIGNvbHVtbk51bWJlciwgbnVtT2ZDb2x1bW5zLCBoaXN0b3J5UmVjb3JkcywgaW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBjb2x1bW4gYnkgbnVtYmVyXG4gICAgICogXG4gICAgICogQHBhcmFtIGludGVnZXIgY29sdW1uTnVtYmVyIC0gcmVmZXJlbmNlIGNvbHVtbiB0byBiZSBleGNsdWRlZFxuICAgICAqIEBwYXJhbSBpbnRlZ2VyIG51bU9mQ29sdW1ucyAtIG51bWJlciBvZiBjb2x1bW5zIHRvIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlZmVyZW5jZSBjb2x1bW5cbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvYmouZGVsZXRlQ29sdW1uID0gZnVuY3Rpb24oY29sdW1uTnVtYmVyLCBudW1PZkNvbHVtbnMpIHtcbiAgICAgICAgLy8gR2xvYmFsIENvbmZpZ3VyYXRpb25cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93RGVsZXRlQ29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChvYmouaGVhZGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGNvbHVtbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5OdW1iZXIgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1iZXIgPSBvYmouZ2V0U2VsZWN0ZWRDb2x1bW5zKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIG51bWJlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsYXN0IGNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyID0gb2JqLmhlYWRlcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bU9mQ29sdW1ucyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlciA9IHBhcnNlSW50KG51bWJlclswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1PZkNvbHVtbnMgPSBwYXJzZUludChudW1iZXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExhc2F0IGNvbHVtblxuICAgICAgICAgICAgICAgIHZhciBsYXN0Q29sdW1uID0gb2JqLm9wdGlvbnMuZGF0YVswXS5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk51bWJlciA9PSB1bmRlZmluZWQgfHwgY29sdW1uTnVtYmVyID4gbGFzdENvbHVtbiB8fCBjb2x1bW5OdW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlciA9IGxhc3RDb2x1bW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTWluaW11bSBvZiBjb2x1bW5zIHRvIGJlIGRlbGV0ZSBpcyAxXG4gICAgICAgICAgICAgICAgaWYgKCEgbnVtT2ZDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bU9mQ29sdW1ucyA9IDE7XG4gICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgICAgIC8vIENhbid0IGRlbGV0ZSBtb3JlIHRoYW4gdGhlIGxpbWl0IG9mIHRoZSB0YWJsZVxuICAgICAgICAgICAgICAgIGlmIChudW1PZkNvbHVtbnMgPiBvYmoub3B0aW9ucy5kYXRhWzBdLmxlbmd0aCAtIGNvbHVtbk51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBudW1PZkNvbHVtbnMgPSBvYmoub3B0aW9ucy5kYXRhWzBdLmxlbmd0aCAtIGNvbHVtbk51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBvbmJlZm9yZWRlbGV0ZWNvbHVtblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25iZWZvcmVkZWxldGVjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5vbmJlZm9yZWRlbGV0ZWNvbHVtbihlbCwgY29sdW1uTnVtYmVyLCBudW1PZkNvbHVtbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uYmVmb3JlZGVsZXRlY29sdW1uIHJldHVybmVkIGZhbHNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDYW4ndCByZW1vdmUgdGhlIGxhc3QgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGNvbHVtbk51bWJlcikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNZXJnZWQgY2VsbHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlRXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmoub3B0aW9ucy5tZXJnZUNlbGxzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSBjb2x1bW5OdW1iZXI7IGNvbCA8IGNvbHVtbk51bWJlciArIG51bU9mQ29sdW1uczsgY29sKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmlzQ29sTWVyZ2VkKGNvbCwgZmFsc2UpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZUV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgY29uZmlybShvYmoub3B0aW9ucy50ZXh0LnRoaXNBY3Rpb25XaWxsRGVzdHJveUFueUV4aXN0aW5nTWVyZ2VkQ2VsbHNBcmVZb3VTdXJlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRlc3Ryb3lNZXJnZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgY29sdW1uIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSBvYmoub3B0aW9ucy5jb2x1bW5zLnNwbGljZShjb2x1bW5OdW1iZXIsIG51bU9mQ29sdW1ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gY29sdW1uTnVtYmVyOyBjb2wgPCBjb2x1bW5OdW1iZXIgKyBudW1PZkNvbHVtbnM7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY29sZ3JvdXBbY29sXS5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbF0uY2xhc3NOYW1lID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY29sZ3JvdXBbY29sXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iai5jb2xncm91cFtjb2xdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5oZWFkZXJzW2NvbF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvYmouaGVhZGVyc1tjb2xdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXN0b3J5SGVhZGVycyA9IG9iai5oZWFkZXJzLnNwbGljZShjb2x1bW5OdW1iZXIsIG51bU9mQ29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXN0b3J5Q29sZ3JvdXAgPSBvYmouY29sZ3JvdXAuc3BsaWNlKGNvbHVtbk51bWJlciwgbnVtT2ZDb2x1bW5zKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhpc3RvcnlSZWNvcmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXN0b3J5RGF0YSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoOyByb3crKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gY29sdW1uTnVtYmVyOyBjb2wgPCBjb2x1bW5OdW1iZXIgKyBudW1PZkNvbHVtbnM7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbcm93XVtjb2xdLmNsYXNzTmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3Jvd11bY29sXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iai5yZWNvcmRzW3Jvd11bY29sXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgcm93KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhpc3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnlEYXRhW3Jvd10gPSBvYmoub3B0aW9ucy5kYXRhW3Jvd10uc3BsaWNlKGNvbHVtbk51bWJlciwgbnVtT2ZDb2x1bW5zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnlSZWNvcmRzW3Jvd10gPSBvYmoucmVjb3Jkc1tyb3ddLnNwbGljZShjb2x1bW5OdW1iZXIsIG51bU9mQ29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIG9iai5jb25kaXRpb25hbFNlbGVjdGlvblVwZGF0ZSgwLCBjb2x1bW5OdW1iZXIsIChjb2x1bW5OdW1iZXIgKyBudW1PZkNvbHVtbnMpIC0gMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRqdXN0IG5lc3RlZCBoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzICYmIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxleGlibGUgd2F5IHRvIGhhbmRsZSBuZXN0ZWRoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1swXSAmJiBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzWzBdWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xzcGFuID0gcGFyc2VJbnQob2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXVtvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzW2pdLmxlbmd0aC0xXS5jb2xzcGFuKSAtIG51bU9mQ29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXVtvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzW2pdLmxlbmd0aC0xXS5jb2xzcGFuID0gY29sc3BhbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRoZWFkLmNoaWxkcmVuW2pdLmNoaWxkcmVuW29iai50aGVhZC5jaGlsZHJlbltqXS5jaGlsZHJlbi5sZW5ndGgtMV0uc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgY29sc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0uY29sc3BhbikgLSBudW1PZkNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1swXS5jb2xzcGFuID0gY29sc3BhbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudGhlYWQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bb2JqLnRoZWFkLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aC0xXS5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xzcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEtlZXBpbmcgaGlzdG9yeSBvZiBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIG9iai5zZXRIaXN0b3J5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjonZGVsZXRlQ29sdW1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjpjb2x1bW5OdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1PZkNvbHVtbnM6bnVtT2ZDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczpjb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczpoaXN0b3J5SGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGdyb3VwOmhpc3RvcnlDb2xncm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHM6aGlzdG9yeVJlY29yZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOmhpc3RvcnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGFibGUgcmVmZXJlbmNlc1xuICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlVGFibGVSZWZlcmVuY2VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouaWdub3JlRXZlbnRzICE9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25kZWxldGVjb2x1bW4pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmRlbGV0ZWNvbHVtbihlbCwgY29sdW1uTnVtYmVyLCBudW1PZkNvbHVtbnMsIGhpc3RvcnlSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMLiBJdCBpcyBub3QgcG9zc2libGUgdG8gZGVsZXRlIHRoZSBsYXN0IGNvbHVtbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHNlbGV0ZWQgcm93cyBudW1iZXJzXG4gICAgICogXG4gICAgICogQHJldHVybiBhcnJheVxuICAgICAqL1xuICAgIG9iai5nZXRTZWxlY3RlZFJvd3MgPSBmdW5jdGlvbihhc0lkcykge1xuICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICAvLyBHZXQgYWxsIHNlbGVjdGVkIHJvd3NcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoucm93cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKG9iai5yb3dzW2pdLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChhc0lkcykge1xuICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goaik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm93cy5wdXNoKG9iai5yb3dzW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcm93cztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHNlbGV0ZWQgY29sdW1uIG51bWJlcnNcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIGFycmF5XG4gICAgICovXG4gICAgb2JqLmdldFNlbGVjdGVkQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29scyA9IFtdO1xuICAgICAgICAvLyBHZXQgYWxsIHNlbGVjdGVkIGNvbHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9iai5oZWFkZXJzW2ldLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgIGNvbHMucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2xzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBoaWdobGlnaHRlZFxuICAgICAqIFxuICAgICAqIEByZXR1cm4gYXJyYXlcbiAgICAgKi9cbiAgICBvYmouZ2V0SGlnaGxpZ2h0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG9iai5oaWdobGlnaHRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY2VsbCByZWZlcmVuY2VzXG4gICAgICogXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZVRhYmxlUmVmZXJlbmNlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVcGRhdGUgaGVhZGVyc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgeCA9IG9iai5oZWFkZXJzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG5cbiAgICAgICAgICAgIGlmICh4ICE9IGkpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY29vcmRzXG4gICAgICAgICAgICAgICAgb2JqLmhlYWRlcnNbaV0uc2V0QXR0cmlidXRlKCdkYXRhLXgnLCBpKTtcbiAgICAgICAgICAgICAgICAvLyBUaXRsZVxuICAgICAgICAgICAgICAgIGlmICghIG9iai5oZWFkZXJzW2ldLmdldEF0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmouaGVhZGVyc1tpXS5pbm5lckhUTUwgPSBqZXhjZWwuZ2V0Q29sdW1uTmFtZShpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgYWxsIHJvd3NcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoucm93cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKG9iai5yb3dzW2pdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBvYmoucm93c1tqXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHkgIT0gaikge1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY29vcmRzXG4gICAgICAgICAgICAgICAgICAgIG9iai5yb3dzW2pdLnNldEF0dHJpYnV0ZSgnZGF0YS15Jywgaik7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yb3dzW2pdLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS15Jywgaik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdyBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJvd3Nbal0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gaiArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVndWxhciBjZWxscyBhZmZlY3RlZCBieSB0aGlzIGNoYW5nZVxuICAgICAgICB2YXIgYWZmZWN0ZWRUb2tlbnMgPSBbXTtcbiAgICAgICAgdmFyIG1lcmdlQ2VsbFVwZGF0ZXMgPSBbXTtcblxuICAgICAgICAvLyBVcGRhdGUgY2VsbFxuICAgICAgICB2YXIgdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbih4LHksaSxqKSB7XG4gICAgICAgICAgICBpZiAoeCAhPSBpKSB7XG4gICAgICAgICAgICAgICAgb2JqLnJlY29yZHNbal1baV0uc2V0QXR0cmlidXRlKCdkYXRhLXgnLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5ICE9IGopIHtcbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tqXVtpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEteScsIGopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPdGhlciB1cGRhdGVzXG4gICAgICAgICAgICBpZiAoeCAhPSBpIHx8IHkgIT0gaikge1xuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5JZEZyb20gPSBqZXhjZWwuZ2V0Q29sdW1uTmFtZUZyb21JZChbeCwgeV0pO1xuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5JZFRvID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoW2ksIGpdKTtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZFRva2Vuc1tjb2x1bW5JZEZyb21dID0gY29sdW1uSWRUbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLnJlY29yZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLnJlY29yZHNbMF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1baV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3VycmVudCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBvYmoucmVjb3Jkc1tqXVtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbHVtblxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1baV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uSWRGcm9tID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoW3gsIHldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5JZFRvID0gamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQoW2ksIGpdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZUNlbGxVcGRhdGVzW2NvbHVtbklkRnJvbV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5JZEZyb20gPT0gY29sdW1uSWRUbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUNlbGxVcGRhdGVzW2NvbHVtbklkRnJvbV0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWxYID0gcGFyc2VJbnQoaSAtIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWxZID0gcGFyc2VJbnQoaiAtIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUNlbGxVcGRhdGVzW2NvbHVtbklkRnJvbV0gPSBbIGNvbHVtbklkVG8sIHRvdGFsWCwgdG90YWxZIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oeCx5LGksaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgbWVyZ2VkIGlmIGFwcGxpY2FibGVcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtZXJnZUNlbGxVcGRhdGVzKTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VDZWxsVXBkYXRlc1trZXlzW2ldXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKGtleXNbaV0sIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gaW5mb1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBpbmZvWzFdO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb3NpdGlvbih4LHkseCArIG1lcmdlQ2VsbFVwZGF0ZXNba2V5c1tpXV1bMV0seSArIG1lcmdlQ2VsbFVwZGF0ZXNba2V5c1tpXV1bMl0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5JZEZyb20gPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uSWRUbyA9IG1lcmdlQ2VsbFVwZGF0ZXNba2V5c1tpXV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjb2x1bW5JZEZyb21dWzJdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY29sdW1uSWRGcm9tXVsyXVtqXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjb2x1bW5JZEZyb21dWzJdW2pdLmdldEF0dHJpYnV0ZSgnZGF0YS15JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjb2x1bW5JZEZyb21dWzJdW2pdLnNldEF0dHJpYnV0ZSgnZGF0YS14JywgeCArIG1lcmdlQ2VsbFVwZGF0ZXNba2V5c1tpXV1bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjb2x1bW5JZEZyb21dWzJdW2pdLnNldEF0dHJpYnV0ZSgnZGF0YS15JywgeSArIG1lcmdlQ2VsbFVwZGF0ZXNba2V5c1tpXV1bMl0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubWVyZ2VDZWxsc1tjb2x1bW5JZFRvXSA9IG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY29sdW1uSWRGcm9tXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlKG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbY29sdW1uSWRGcm9tXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGZvcm11bGFzXG4gICAgICAgIG9iai51cGRhdGVGb3JtdWxhcyhhZmZlY3RlZFRva2Vucyk7XG5cbiAgICAgICAgLy8gVXBkYXRlIG1ldGEgZGF0YVxuICAgICAgICBvYmoudXBkYXRlTWV0YShhZmZlY3RlZFRva2Vucyk7XG5cbiAgICAgICAgLy8gUmVmcmVzaCBzZWxlY3Rpb25cbiAgICAgICAgb2JqLnJlZnJlc2hTZWxlY3Rpb24oKTtcblxuICAgICAgICAvLyBVcGRhdGUgdGFibGUgd2l0aCBjdXN0b20gY29uZmlndXJhdGlvbiBpZiBhcHBsaWNhYmxlXG4gICAgICAgIG9iai51cGRhdGVUYWJsZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBzZXR0aW5ncyBmb3IgdGhlIGNlbGxzXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIENoZWNrIGZvciBzcGFyZVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMubWluU3BhcmVSb3dzID4gMCkge1xuICAgICAgICAgICAgdmFyIG51bUJsYW5rUm93cyA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gb2JqLnJvd3MubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmhlYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbal1baV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG51bUJsYW5rUm93cysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLm1pblNwYXJlUm93cyAtIG51bUJsYW5rUm93cyA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmouaW5zZXJ0Um93KG9iai5vcHRpb25zLm1pblNwYXJlUm93cyAtIG51bUJsYW5rUm93cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5taW5TcGFyZUNvbHMgPiAwKSB7XG4gICAgICAgICAgICB2YXIgbnVtQmxhbmtDb2xzID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBvYmouaGVhZGVycy5sZW5ndGggLSAxOyBpID49IDAgOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbal1baV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG51bUJsYW5rQ29scysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLm1pblNwYXJlQ29scyAtIG51bUJsYW5rQ29scyA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmouaW5zZXJ0Q29sdW1uKG9iai5vcHRpb25zLm1pblNwYXJlQ29scyAtIG51bUJsYW5rQ29scylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEN1c3RvbWl6YXRpb25zIGJ5IHRoZSBkZXZlbG9wZXJcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy51cGRhdGVUYWJsZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRldGFjaEZvclVwZGF0ZXMpIHtcclxuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUNoaWxkKG9iai5jb250ZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLnVwZGF0ZVRhYmxlKGVsLCBvYmoucmVjb3Jkc1tqXVtpXSwgaSwgaiwgb2JqLm9wdGlvbnMuZGF0YVtqXVtpXSwgb2JqLnJlY29yZHNbal1baV0uaW5uZXJUZXh0LCBqZXhjZWwuZ2V0Q29sdW1uTmFtZUZyb21JZChbaSwgal0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRldGFjaEZvclVwZGF0ZXMpIHtcclxuICAgICAgICAgICAgICAgIGVsLmluc2VydEJlZm9yZShvYmouY29udGVudCwgb2JqLnBhZ2luYXRpb24pO1xyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgY29ybmVyIHBvc2l0aW9uXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvYmoudXBkYXRlQ29ybmVyUG9zaXRpb24oKTtcbiAgICAgICAgfSwwKTtcbiAgICB9XG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvdyBjb2x1bW5cclxuICAgICAqL1xyXG4gICAgb2JqLnNob3dDb2x1bW4gPSBmdW5jdGlvbihjb2xOdW1iZXIpIHtcclxuICAgICAgICBvYmouaGVhZGVyc1tjb2xOdW1iZXJdLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICBvYmouY29sZ3JvdXBbY29sTnVtYmVyXS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdW2NvbE51bWJlcl0uc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgY29sdW1uXHJcbiAgICAgKi9cclxuICAgIG9iai5oaWRlQ29sdW1uID0gZnVuY3Rpb24oY29sTnVtYmVyKSB7XHJcbiAgICAgICAgb2JqLmhlYWRlcnNbY29sTnVtYmVyXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIG9iai5jb2xncm91cFtjb2xOdW1iZXJdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoub3B0aW9ucy5kYXRhLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdW2NvbE51bWJlcl0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxuICAgIC8qKlxuICAgICAqIFNob3cgaW5kZXggY29sdW1uXG4gICAgICovXG4gICAgb2JqLnNob3dJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmoudGFibGUuY2xhc3NMaXN0LnJlbW92ZSgnamV4Y2VsX2hpZGRlbl9pbmRleCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgaW5kZXggY29sdW1uXG4gICAgICovXG4gICAgb2JqLmhpZGVJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmoudGFibGUuY2xhc3NMaXN0LmFkZCgnamV4Y2VsX2hpZGRlbl9pbmRleCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbGwgcmVsYXRlZCBjZWxscyBpbiB0aGUgY2hhaW5cbiAgICAgKi9cbiAgICB2YXIgY2hhaW5Mb29wUHJvdGVjdGlvbiA9IFtdO1xuXG4gICAgb2JqLnVwZGF0ZUZvcm11bGFDaGFpbiA9IGZ1bmN0aW9uKHgsIHksIHJlY29yZHMpIHtcbiAgICAgICAgdmFyIGNlbGxJZCA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFt4LCB5XSk7XG4gICAgICAgIGlmIChvYmouZm9ybXVsYVtjZWxsSWRdICYmIG9iai5mb3JtdWxhW2NlbGxJZF0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGNoYWluTG9vcFByb3RlY3Rpb25bY2VsbElkXSkge1xuICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3ldW3hdLmlubmVySFRNTCA9ICcjRVJST1InO1xuICAgICAgICAgICAgICAgIG9iai5mb3JtdWxhW2NlbGxJZF0gPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUHJvdGVjdGlvblxuICAgICAgICAgICAgICAgIGNoYWluTG9vcFByb3RlY3Rpb25bY2VsbElkXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5mb3JtdWxhW2NlbGxJZF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGwgPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZShvYmouZm9ybXVsYVtjZWxsSWRdW2ldLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJycrb2JqLm9wdGlvbnMuZGF0YVtjZWxsWzFdXVtjZWxsWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnN1YnN0cigwLDEpID09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKG9iai51cGRhdGVDZWxsKGNlbGxbMF0sIGNlbGxbMV0sIHZhbHVlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBsb25nZXIgYSBmb3JtdWxhLCByZW1vdmUgZnJvbSB0aGUgY2hhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iai5mb3JtdWxhKVtpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUZvcm11bGFDaGFpbihjZWxsWzBdLCBjZWxsWzFdLCByZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGFpbkxvb3BQcm90ZWN0aW9uID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGZvcm11bGFzXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZUZvcm11bGFzID0gZnVuY3Rpb24ocmVmZXJlbmNlc1RvVXBkYXRlKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBmb3JtdWxhc1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuZGF0YVswXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9ICcnICsgb2JqLm9wdGlvbnMuZGF0YVtqXVtpXTtcbiAgICAgICAgICAgICAgICAvLyBJcyBmb3JtdWxhXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnN1YnN0cigwLDEpID09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRva2Vuc1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Rm9ybXVsYSA9IG9iai51cGRhdGVGb3JtdWxhKHZhbHVlLCByZWZlcmVuY2VzVG9VcGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3Rm9ybXVsYSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVtqXVtpXSA9IG5ld0Zvcm11bGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgZm9ybXVsYSBjaGFpblxuICAgICAgICB2YXIgZm9ybXVsYSA9IFtdO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iai5mb3JtdWxhKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAvLyBDdXJyZW50IGtleSBhbmQgdmFsdWVzXG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9iai5mb3JtdWxhW2tleV07XG4gICAgICAgICAgICAvLyBVcGRhdGUga2V5XG4gICAgICAgICAgICBpZiAocmVmZXJlbmNlc1RvVXBkYXRlW2tleV0pIHtcbiAgICAgICAgICAgICAgICBrZXkgPSByZWZlcmVuY2VzVG9VcGRhdGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB2YWx1ZXNcbiAgICAgICAgICAgIGZvcm11bGFba2V5XSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBsZXR0ZXIgPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAocmVmZXJlbmNlc1RvVXBkYXRlW2xldHRlcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyID0gcmVmZXJlbmNlc1RvVXBkYXRlW2xldHRlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcm11bGFba2V5XS5wdXNoKGxldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmZvcm11bGEgPSBmb3JtdWxhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBmb3JtdWxhXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZUZvcm11bGEgPSBmdW5jdGlvbihmb3JtdWxhLCByZWZlcmVuY2VzVG9VcGRhdGUpIHtcbiAgICAgICAgdmFyIHRlc3RMZXR0ZXIgPSAvW0EtWl0vO1xuICAgICAgICB2YXIgdGVzdE51bWJlciA9IC9bMC05XS87XG5cbiAgICAgICAgdmFyIG5ld0Zvcm11bGEgPSAnJztcbiAgICAgICAgdmFyIGxldHRlciA9IG51bGw7XG4gICAgICAgIHZhciBudW1iZXIgPSBudWxsO1xuICAgICAgICB2YXIgdG9rZW4gPSAnJztcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZm9ybXVsYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGlmICh0ZXN0TGV0dGVyLmV4ZWMoZm9ybXVsYVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgbGV0dGVyID0gMTtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRva2VuICs9IGZvcm11bGFbaW5kZXhdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0TnVtYmVyLmV4ZWMoZm9ybXVsYVtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gbGV0dGVyID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgdG9rZW4gKz0gZm9ybXVsYVtpbmRleF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsZXR0ZXIgJiYgbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gcmVmZXJlbmNlc1RvVXBkYXRlW3Rva2VuXSA/IHJlZmVyZW5jZXNUb1VwZGF0ZVt0b2tlbl0gOiB0b2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3Rm9ybXVsYSArPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBuZXdGb3JtdWxhICs9IGZvcm11bGFbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGxldHRlciA9IDA7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICB0b2tlbiA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBpZiAobGV0dGVyICYmIG51bWJlcikge1xuICAgICAgICAgICAgICAgIHRva2VuID0gcmVmZXJlbmNlc1RvVXBkYXRlW3Rva2VuXSA/IHJlZmVyZW5jZXNUb1VwZGF0ZVt0b2tlbl0gOiB0b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0Zvcm11bGEgKz0gdG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3Rm9ybXVsYTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBmb3JtdWxhc1xuICAgICAqL1xuICAgIG9iai5leGVjdXRlRm9ybXVsYSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIHgsIHkpIHtcblxuICAgICAgICB2YXIgZm9ybXVsYVJlc3VsdHMgPSBbXTtcbiAgICAgICAgdmFyIGZvcm11bGFMb29wUHJvdGVjdGlvbiA9IFtdO1xuXG4gICAgICAgIC8vIEV4ZWN1dGUgZm9ybXVsYSB3aXRoIGxvb3AgcHJvdGVjdGlvblxuICAgICAgICB2YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIHgsIHkpIHtcbiAgICAgICAgIC8vIFBhcmVudCBjb2x1bW4gaWRlbnRpZmljYXRpb25cbiAgICAgICAgICAgIHZhciBwYXJlbnRJZCA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFt4LCB5XSk7XG5cbiAgICAgICAgICAgIC8vIENvZGUgcHJvdGVjdGlvblxuICAgICAgICAgICAgaWYgKGZvcm11bGFMb29wUHJvdGVjdGlvbltwYXJlbnRJZF0pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdSZWZlcmVuY2UgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnI0VSUk9SJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybXVsYUxvb3BQcm90ZWN0aW9uW3BhcmVudElkXSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgcmFuZ2UgdG9rZW5zXG4gICAgICAgICAgICB2YXIgdG9rZW5zVXBkYXRlID0gZnVuY3Rpb24odG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2luZGV4XS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZTEgPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZSh0b2tlblswXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlMiA9IGpleGNlbC5nZXRJZEZyb21Db2x1bW5OYW1lKHRva2VuWzFdLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZTFbMF0gPD0gZTJbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MSA9IGUxWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHgyID0gZTJbMF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeDEgPSBlMlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IGUxWzBdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUxWzFdIDw9IGUyWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeTEgPSBlMVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5MiA9IGUyWzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkxID0gZTJbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeTIgPSBlMVsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSB5MTsgaiA8PSB5MjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0geDE7IGkgPD0geDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYucHVzaChqZXhjZWwuZ2V0Q29sdW1uTmFtZUZyb21JZChbaSwgal0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UodG9rZW5zW2luZGV4XSwgZi5qb2luKCcsJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRva2VucyA9IGV4cHJlc3Npb24ubWF0Y2goLyhbQS1aXStbMC05XSspXFw6KFtBLVpdK1swLTldKykvZyk7XG4gICAgICAgICAgICBpZiAodG9rZW5zICYmIHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnNVcGRhdGUodG9rZW5zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgICAgICB2YXIgZXZhbHN0cmluZyA9ICcnO1xuXG4gICAgICAgICAgICAvLyBHZXQgdG9rZW5zXG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gZXhwcmVzc2lvbi5tYXRjaCgvKFtBLVpdK1swLTldKykvZyk7XG5cbiAgICAgICAgICAgIC8vIERpcmVjdCBzZWxmLXJlZmVyZW5jZSBwcm90ZWN0aW9uXG4gICAgICAgICAgICBpZiAodG9rZW5zICYmIHRva2Vucy5pbmRleE9mKHBhcmVudElkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignU2VsZiBSZWZlcmVuY2UgZGV0ZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyNFUlJPUic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgY2hhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIG9iai5mb3JtdWxhW3Rva2Vuc1tpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZm9ybXVsYVt0b2tlbnNbaV1dID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJcyBhbHJlYWR5IGluIHRoZSByZWdpc3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5mb3JtdWxhW3Rva2Vuc1tpXV0uaW5kZXhPZihwYXJlbnRJZCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmZvcm11bGFbdG9rZW5zW2ldXS5wdXNoKHBhcmVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IGNhbGN1bGF0ZSBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2YWwoJ3R5cGVvZignICsgdG9rZW5zW2ldICsgJykgPT0gXCJ1bmRlZmluZWRcIicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29vcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUodG9rZW5zW2ldLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLmRhdGFbcG9zaXRpb25bMV1dKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Yob2JqLm9wdGlvbnMuZGF0YVtwb3NpdGlvblsxXV1bcG9zaXRpb25bMF1dKSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmoub3B0aW9ucy5kYXRhW3Bvc2l0aW9uWzFdXVtwb3NpdGlvblswXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBjb2x1bW4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJycrdmFsdWUpLnN1YnN0cigwLDEpID09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybXVsYVJlc3VsdHNbdG9rZW5zW2ldXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmb3JtdWxhUmVzdWx0c1t0b2tlbnNbaV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBleGVjdXRlKHZhbHVlLCBwb3NpdGlvblswXSwgcG9zaXRpb25bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYVJlc3VsdHNbdG9rZW5zW2ldXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFR5cGUhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgnJyt2YWx1ZSkudHJpbSgpID09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbHN0cmluZyArPSBcInZhciBcIiArIHRva2Vuc1tpXSArIFwiID0gbnVsbDtcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gTnVtYmVyKHZhbHVlKSAmJiBvYmoub3B0aW9ucy5hdXRvQ2FzdGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWxzdHJpbmcgKz0gXCJ2YXIgXCIgKyB0b2tlbnNbaV0gKyBcIiA9IFwiICsgTnVtYmVyKHZhbHVlKSArIFwiO1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5aW5nIGFueSBmb3JtYXR0ZWQgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gb2JqLnBhcnNlTnVtYmVyKHZhbHVlLCBwb3NpdGlvblswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5hdXRvQ2FzdGluZyA9PSB0cnVlICYmIG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhcyBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsc3RyaW5nICs9IFwidmFyIFwiICsgdG9rZW5zW2ldICsgXCIgPSBcIiArIG51bWJlciArIFwiO1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXIgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbHN0cmluZyArPSBcInZhciBcIiArIHRva2Vuc1tpXSArIFwiID0gJ1wiICsgdmFsdWUgKyBcIic7XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IGZvcm11bGEgdG8gamF2YXNjcmlwdFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV2YWxzdHJpbmcgKz0gXCJmdW5jdGlvbiBDT0xVTU4oKSB7IHJldHVybiBwYXJzZUludCh4KSArIDE7IH07IGZ1bmN0aW9uIFJPVygpIHsgcmV0dXJuIHBhcnNlSW50KHkpICsgMTsgfTsgZnVuY3Rpb24gQ0VMTCgpIHsgcmV0dXJuIHBhcmVudElkOyB9O1wiO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBldmFsKGV2YWxzdHJpbmcgKyBleHByZXNzaW9uLnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gJyNFUlJPUic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleGVjdXRlKGV4cHJlc3Npb24sIHgsIHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyeWluZyB0byBleHRyYWN0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmdcbiAgICAgKi9cbiAgICBvYmoucGFyc2VOdW1iZXIgPSBmdW5jdGlvbih2YWx1ZSwgY29sdW1uTnVtYmVyKSB7XG4gICAgICAgIC8vIERlY2ltYWwgcG9pbnRcbiAgICAgICAgdmFyIGRlY2ltYWwgPSBjb2x1bW5OdW1iZXIgJiYgb2JqLm9wdGlvbnMuY29sdW1uc1tjb2x1bW5OdW1iZXJdLmRlY2ltYWwgPyBvYmoub3B0aW9ucy5jb2x1bW5zW2NvbHVtbk51bWJlcl0uZGVjaW1hbCA6ICcuJztcblxuICAgICAgICAvLyBQYXJzZSBib3RoIHBhcnRzIG9mIHRoZSBudW1iZXJcbiAgICAgICAgdmFyIG51bWJlciA9ICgnJyArIHZhbHVlKTtcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyLnNwbGl0KGRlY2ltYWwpO1xuICAgICAgICBudW1iZXJbMF0gPSBudW1iZXJbMF0ubWF0Y2goL1srLV0/WzAtOV0vZyk7XG4gICAgICAgIGlmIChudW1iZXJbMF0pIHtcbiAgICAgICAgICAgIG51bWJlclswXSA9IG51bWJlclswXS5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyWzFdKSB7XG4gICAgICAgICAgICBudW1iZXJbMV0gPSBudW1iZXJbMV0ubWF0Y2goL1swLTldKi9nKS5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElzIGEgdmFsaWQgbnVtYmVyXG4gICAgICAgIGlmIChudW1iZXJbMF0gJiYgTnVtYmVyKG51bWJlclswXSkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKCEgbnVtYmVyWzFdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gTnVtYmVyKG51bWJlclswXSArICcuMDAnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gTnVtYmVyKG51bWJlclswXSArICcuJyArIG51bWJlclsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCByb3cgbnVtYmVyXG4gICAgICovXG4gICAgb2JqLnJvdyA9IGZ1bmN0aW9uKGNlbGwpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY29sIG51bWJlclxuICAgICAqL1xuICAgIG9iai5jb2wgPSBmdW5jdGlvbihjZWxsKSB7XG4gICAgfVxuXG4gICAgb2JqLnVwID0gZnVuY3Rpb24oc2hpZnRLZXksIGN0cmxLZXkpIHtcbiAgICAgICAgaWYgKHNoaWZ0S2V5KSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbFszXSA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmoudXAudmlzaWJsZSgxLCBjdHJsS2V5ID8gMCA6IDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbFsxXSA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmoudXAudmlzaWJsZSgwLCBjdHJsS2V5ID8gMCA6IDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzJdID0gb2JqLnNlbGVjdGVkQ2VsbFswXTtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbM10gPSBvYmouc2VsZWN0ZWRDZWxsWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvYmouc2VsZWN0ZWRDZWxsWzBdLCBvYmouc2VsZWN0ZWRDZWxsWzFdLCBvYmouc2VsZWN0ZWRDZWxsWzJdLCBvYmouc2VsZWN0ZWRDZWxsWzNdKTtcblxuICAgICAgICAvLyBDaGFuZ2UgcGFnZVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMubGF6eUxvYWRpbmcgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKG9iai5zZWxlY3RlZENlbGxbMV0gPT0gMCB8fCBvYmouc2VsZWN0ZWRDZWxsWzNdID09IDApIHtcbiAgICAgICAgICAgICAgICBvYmoubG9hZFBhZ2UoMCk7XG4gICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMob2JqLnNlbGVjdGVkQ2VsbFswXSwgb2JqLnNlbGVjdGVkQ2VsbFsxXSwgb2JqLnNlbGVjdGVkQ2VsbFsyXSwgb2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvYmoubG9hZFZhbGlkYXRpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvYmouc2VsZWN0ZWRDZWxsWzBdLCBvYmouc2VsZWN0ZWRDZWxsWzFdLCBvYmouc2VsZWN0ZWRDZWxsWzJdLCBvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHBhcnNlSW50KG9iai50Ym9keS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS15JykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbFsxXSAtIGl0ZW0gPCAzMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmxvYWRVcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMob2JqLnNlbGVjdGVkQ2VsbFswXSwgb2JqLnNlbGVjdGVkQ2VsbFsxXSwgb2JqLnNlbGVjdGVkQ2VsbFsyXSwgb2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMucGFnaW5hdGlvbiA+IDApIHtcbiAgICAgICAgICAgIHZhciBwYWdlTnVtYmVyID0gb2JqLndoaWNoUGFnZShvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgICAgIGlmIChwYWdlTnVtYmVyICE9IG9iai5wYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgb2JqLnBhZ2UocGFnZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYmoudXBkYXRlU2Nyb2xsKDEpO1xuICAgIH1cblxuICAgIG9iai51cC52aXNpYmxlID0gZnVuY3Rpb24oZ3JvdXAsIGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzBdKTtcbiAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLnNlbGVjdGVkQ2VsbFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KG9iai5zZWxlY3RlZENlbGxbMl0pO1xuICAgICAgICAgICAgdmFyIHkgPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB5OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1beF0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScgJiYgb2JqLnJvd3Nbal0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGo7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkgPSBvYmoudXAuZ2V0KHgsIHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyb3VwID09IDApIHtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMF0gPSB4O1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFsxXSA9IHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzJdID0geDtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbM10gPSB5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLnVwLmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgdmFyIHggPSBwYXJzZUludCh4KTtcbiAgICAgICAgdmFyIHkgPSBwYXJzZUludCh5KTtcbiAgICAgICAgZm9yICh2YXIgaiA9ICh5IC0gMSk7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1beF0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScgJiYgb2JqLnJvd3Nbal0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1beF0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1tqXVt4XSA9PSBvYmoucmVjb3Jkc1t5XVt4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeSA9IGo7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geTtcbiAgICB9XG5cbiAgICBvYmouZG93biA9IGZ1bmN0aW9uKHNoaWZ0S2V5LCBjdHJsS2V5KSB7XG4gICAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICAgICAgaWYgKG9iai5zZWxlY3RlZENlbGxbM10gPCBvYmoucmVjb3Jkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgb2JqLmRvd24udmlzaWJsZSgxLCBjdHJsS2V5ID8gMCA6IDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbFsxXSA8IG9iai5yZWNvcmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBvYmouZG93bi52aXNpYmxlKDAsIGN0cmxLZXkgPyAwIDogMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMl0gPSBvYmouc2VsZWN0ZWRDZWxsWzBdO1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IG9iai5zZWxlY3RlZENlbGxbMV07XG4gICAgICAgIH1cblxuICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvYmouc2VsZWN0ZWRDZWxsWzBdLCBvYmouc2VsZWN0ZWRDZWxsWzFdLCBvYmouc2VsZWN0ZWRDZWxsWzJdLCBvYmouc2VsZWN0ZWRDZWxsWzNdKTtcblxuICAgICAgICAvLyBDaGFuZ2UgcGFnZVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMubGF6eUxvYWRpbmcgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChvYmouc2VsZWN0ZWRDZWxsWzFdID09IG9iai5yZWNvcmRzLmxlbmd0aCAtIDEgfHwgb2JqLnNlbGVjdGVkQ2VsbFszXSA9PSBvYmoucmVjb3Jkcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgIG9iai5sb2FkUGFnZSgtMSk7XG4gICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMob2JqLnNlbGVjdGVkQ2VsbFswXSwgb2JqLnNlbGVjdGVkQ2VsbFsxXSwgb2JqLnNlbGVjdGVkQ2VsbFsyXSwgb2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvYmoubG9hZFZhbGlkYXRpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvYmouc2VsZWN0ZWRDZWxsWzBdLCBvYmouc2VsZWN0ZWRDZWxsWzFdLCBvYmouc2VsZWN0ZWRDZWxsWzJdLCBvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHBhcnNlSW50KG9iai50Ym9keS5sYXN0Q2hpbGQuZ2V0QXR0cmlidXRlKCdkYXRhLXknKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtIC0gb2JqLnNlbGVjdGVkQ2VsbFszXSA8IDMwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoubG9hZERvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKG9iai5zZWxlY3RlZENlbGxbMF0sIG9iai5zZWxlY3RlZENlbGxbMV0sIG9iai5zZWxlY3RlZENlbGxbMl0sIG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24gPiAwKSB7XG4gICAgICAgICAgICB2YXIgcGFnZU51bWJlciA9IG9iai53aGljaFBhZ2Uob2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgICAgICAgICBpZiAocGFnZU51bWJlciAhPSBvYmoucGFnZU51bWJlcikge1xuICAgICAgICAgICAgICAgIG9iai5wYWdlKHBhZ2VOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZVNjcm9sbCgzKTtcbiAgICB9XG5cbiAgICBvYmouZG93bi52aXNpYmxlID0gZnVuY3Rpb24oZ3JvdXAsIGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzBdKTtcbiAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLnNlbGVjdGVkQ2VsbFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KG9iai5zZWxlY3RlZENlbGxbMl0pO1xuICAgICAgICAgICAgdmFyIHkgPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IG9iai5yb3dzLmxlbmd0aCAtIDE7IGogPiB5OyBqLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbal1beF0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScgJiYgb2JqLnJvd3Nbal0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGo7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkgPSBvYmouZG93bi5nZXQoeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFswXSA9IHg7XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzFdID0geTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMl0gPSB4O1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IHk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouZG93bi5nZXQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciB4ID0gcGFyc2VJbnQoeCk7XG4gICAgICAgIHZhciB5ID0gcGFyc2VJbnQoeSk7XG4gICAgICAgIGZvciAodmFyIGogPSAoeSArIDEpOyBqIDwgb2JqLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1tqXVt4XS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJyAmJiBvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1tqXVt4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2VkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW2pdW3hdID09IG9iai5yZWNvcmRzW3ldW3hdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB5ID0gajtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB5O1xuICAgIH1cblxuICAgIG9iai5yaWdodCA9IGZ1bmN0aW9uKHNoaWZ0S2V5LCBjdHJsS2V5KSB7XG4gICAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICAgICAgaWYgKG9iai5zZWxlY3RlZENlbGxbMl0gPCBvYmouaGVhZGVycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgb2JqLnJpZ2h0LnZpc2libGUoMSwgY3RybEtleSA/IDAgOiAxKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9iai5zZWxlY3RlZENlbGxbMF0gPCBvYmouaGVhZGVycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgb2JqLnJpZ2h0LnZpc2libGUoMCwgY3RybEtleSA/IDAgOiAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFsyXSA9IG9iai5zZWxlY3RlZENlbGxbMF07XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzNdID0gb2JqLnNlbGVjdGVkQ2VsbFsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKG9iai5zZWxlY3RlZENlbGxbMF0sIG9iai5zZWxlY3RlZENlbGxbMV0sIG9iai5zZWxlY3RlZENlbGxbMl0sIG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICBvYmoudXBkYXRlU2Nyb2xsKDIpO1xuICAgIH1cblxuICAgIG9iai5yaWdodC52aXNpYmxlID0gZnVuY3Rpb24oZ3JvdXAsIGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzBdKTtcbiAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLnNlbGVjdGVkQ2VsbFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KG9iai5zZWxlY3RlZENlbGxbMl0pO1xuICAgICAgICAgICAgdmFyIHkgPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IG9iai5oZWFkZXJzLmxlbmd0aCAtIDE7IGkgPiB4OyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1baV0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBvYmoucmlnaHQuZ2V0KHgsIHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyb3VwID09IDApIHtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMF0gPSB4O1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFsxXSA9IHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzJdID0geDtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbM10gPSB5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLnJpZ2h0LmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgdmFyIHggPSBwYXJzZUludCh4KTtcbiAgICAgICAgdmFyIHkgPSBwYXJzZUludCh5KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gKHggKyAxKTsgaSA8IG9iai5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1baV0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1baV0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoucmVjb3Jkc1t5XVtpXSA9PSBvYmoucmVjb3Jkc1t5XVt4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeCA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICBvYmoubGVmdCA9IGZ1bmN0aW9uKHNoaWZ0S2V5LCBjdHJsS2V5KSB7XG4gICAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICAgICAgaWYgKG9iai5zZWxlY3RlZENlbGxbMl0gPiAwKSB7XG4gICAgICAgICAgICAgICAgb2JqLmxlZnQudmlzaWJsZSgxLCBjdHJsS2V5ID8gMCA6IDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbFswXSA+IDApIHtcbiAgICAgICAgICAgICAgICBvYmoubGVmdC52aXNpYmxlKDAsIGN0cmxLZXkgPyAwIDogMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMl0gPSBvYmouc2VsZWN0ZWRDZWxsWzBdO1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IG9iai5zZWxlY3RlZENlbGxbMV07XG4gICAgICAgIH1cblxuICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvYmouc2VsZWN0ZWRDZWxsWzBdLCBvYmouc2VsZWN0ZWRDZWxsWzFdLCBvYmouc2VsZWN0ZWRDZWxsWzJdLCBvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgb2JqLnVwZGF0ZVNjcm9sbCgwKTtcbiAgICB9XG5cbiAgICBvYmoubGVmdC52aXNpYmxlID0gZnVuY3Rpb24oZ3JvdXAsIGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzBdKTtcbiAgICAgICAgICAgIHZhciB5ID0gcGFyc2VJbnQob2JqLnNlbGVjdGVkQ2VsbFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KG9iai5zZWxlY3RlZENlbGxbMl0pO1xuICAgICAgICAgICAgdmFyIHkgPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzNdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1baV0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBvYmoubGVmdC5nZXQoeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JvdXAgPT0gMCkge1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFswXSA9IHg7XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzFdID0geTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMl0gPSB4O1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IHk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmoubGVmdC5nZXQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciB4ID0gcGFyc2VJbnQoeCk7XG4gICAgICAgIHZhciB5ID0gcGFyc2VJbnQoeSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAoeCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW3ldW2ldLnN0eWxlLmRpc3BsYXkgIT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5yZWNvcmRzW3ldW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnJlY29yZHNbeV1baV0gPT0gb2JqLnJlY29yZHNbeV1beF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgb2JqLmZpcnN0ID0gZnVuY3Rpb24oc2hpZnRLZXksIGN0cmxLZXkpIHtcbiAgICAgICAgaWYgKHNoaWZ0S2V5KSB7XG4gICAgICAgICAgICBpZiAoY3RybEtleSkge1xuICAgICAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbM10gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmoubGVmdC52aXNpYmxlKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzFdID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLmxlZnQudmlzaWJsZSgwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbMl0gPSBvYmouc2VsZWN0ZWRDZWxsWzBdO1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IG9iai5zZWxlY3RlZENlbGxbMV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGFuZ2UgcGFnZVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMubGF6eUxvYWRpbmcgPT0gdHJ1ZSAmJiAob2JqLnNlbGVjdGVkQ2VsbFsxXSA9PSAwIHx8IG9iai5zZWxlY3RlZENlbGxbM10gPT0gMCkpIHtcbiAgICAgICAgICAgIG9iai5sb2FkUGFnZSgwKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uID4gMCkge1xuICAgICAgICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBvYmoud2hpY2hQYWdlKG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICAgICAgaWYgKHBhZ2VOdW1iZXIgIT0gb2JqLnBhZ2VOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBvYmoucGFnZShwYWdlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9iai51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKG9iai5zZWxlY3RlZENlbGxbMF0sIG9iai5zZWxlY3RlZENlbGxbMV0sIG9iai5zZWxlY3RlZENlbGxbMl0sIG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICBvYmoudXBkYXRlU2Nyb2xsKDEpO1xuICAgIH1cblxuICAgIG9iai5sYXN0ID0gZnVuY3Rpb24oc2hpZnRLZXksIGN0cmxLZXkpIHtcbiAgICAgICAgaWYgKHNoaWZ0S2V5KSB7XG4gICAgICAgICAgICBpZiAoY3RybEtleSkge1xuICAgICAgICAgICAgICAgIG9iai5zZWxlY3RlZENlbGxbM10gPSBvYmoucmVjb3Jkcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmoucmlnaHQudmlzaWJsZSgxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFsxXSA9IG9iai5yZWNvcmRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iai5yaWdodC52aXNpYmxlKDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFsyXSA9IG9iai5zZWxlY3RlZENlbGxbMF07XG4gICAgICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzNdID0gb2JqLnNlbGVjdGVkQ2VsbFsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoYW5nZSBwYWdlXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5sYXp5TG9hZGluZyA9PSB0cnVlICYmIChvYmouc2VsZWN0ZWRDZWxsWzFdID09IG9iai5yZWNvcmRzLmxlbmd0aCAtIDEgfHwgb2JqLnNlbGVjdGVkQ2VsbFszXSA9PSBvYmoucmVjb3Jkcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgb2JqLmxvYWRQYWdlKC0xKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uID4gMCkge1xuICAgICAgICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBvYmoud2hpY2hQYWdlKG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICAgICAgaWYgKHBhZ2VOdW1iZXIgIT0gb2JqLnBhZ2VOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBvYmoucGFnZShwYWdlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9iai51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKG9iai5zZWxlY3RlZENlbGxbMF0sIG9iai5zZWxlY3RlZENlbGxbMV0sIG9iai5zZWxlY3RlZENlbGxbMl0sIG9iai5zZWxlY3RlZENlbGxbM10pO1xuICAgICAgICBvYmoudXBkYXRlU2Nyb2xsKDMpO1xuICAgIH1cblxuICAgIG9iai5zZWxlY3RBbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEgb2JqLnNlbGVjdGVkQ2VsbCkge1xuICAgICAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbCA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFswXSA9IDA7XG4gICAgICAgIG9iai5zZWxlY3RlZENlbGxbMV0gPSAwO1xuICAgICAgICBvYmouc2VsZWN0ZWRDZWxsWzJdID0gb2JqLmhlYWRlcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgb2JqLnNlbGVjdGVkQ2VsbFszXSA9IG9iai5yZWNvcmRzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgb2JqLnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMob2JqLnNlbGVjdGVkQ2VsbFswXSwgb2JqLnNlbGVjdGVkQ2VsbFsxXSwgb2JqLnNlbGVjdGVkQ2VsbFsyXSwgb2JqLnNlbGVjdGVkQ2VsbFszXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR28gdG8gYSBwYWdlIGluIGEgbGF6eUxvYWRpbmdcbiAgICAgKi9cbiAgICBvYmoubG9hZFBhZ2UgPSBmdW5jdGlvbihwYWdlTnVtYmVyKSB7XG4gICAgICAgIC8vIFNlYXJjaFxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2VhcmNoID09IHRydWUgJiYgb2JqLnJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gb2JqLnJlc3VsdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG9iai5yb3dzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGVyIHBhZ2VcbiAgICAgICAgdmFyIHF1YW50aXR5UGVyUGFnZSA9IDEwMDtcblxuICAgICAgICAvLyBwYWdlTnVtYmVyXG4gICAgICAgIGlmIChwYWdlTnVtYmVyID09IG51bGwgfHwgcGFnZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgLy8gTGFzdCBwYWdlXG4gICAgICAgICAgICBwYWdlTnVtYmVyID0gTWF0aC5jZWlsKHJlc3VsdHMubGVuZ3RoIC8gcXVhbnRpdHlQZXJQYWdlKTsgXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRSb3cgPSAocGFnZU51bWJlciAqIHF1YW50aXR5UGVyUGFnZSk7XG4gICAgICAgIHZhciBmaW5hbFJvdyA9IChwYWdlTnVtYmVyICogcXVhbnRpdHlQZXJQYWdlKSArIHF1YW50aXR5UGVyUGFnZTtcbiAgICAgICAgaWYgKGZpbmFsUm93ID4gcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpbmFsUm93ID0gcmVzdWx0cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRSb3cgPSBmaW5hbFJvdyAtIDEwMDtcbiAgICAgICAgaWYgKHN0YXJ0Um93IDwgMCkge1xuICAgICAgICAgICAgc3RhcnRSb3cgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZWRpbmcgaXRlbXNcbiAgICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0Um93OyBqIDwgZmluYWxSb3c7IGorKykge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW3Jlc3VsdHNbal1dKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW2pdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9iai50Ym9keS5jaGlsZHJlbi5sZW5ndGggPiBxdWFudGl0eVBlclBhZ2UpIHtcbiAgICAgICAgICAgICAgICBvYmoudGJvZHkucmVtb3ZlQ2hpbGQob2JqLnRib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmxvYWRVcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBTZWFyY2hcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG9iai5yZXN1bHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBvYmoucm93cztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGVzdCA9IDA7XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBwYWdlXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHBhcnNlSW50KG9iai50Ym9keS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS15JykpO1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IHJlc3VsdHMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMzA7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaXRlbSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSAmJiBvYmoucmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai50Ym9keS5pbnNlcnRCZWZvcmUob2JqLnJvd3NbcmVzdWx0c1tpdGVtXV0sIG9iai50Ym9keS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5Lmluc2VydEJlZm9yZShvYmoucm93c1tpdGVtXSwgb2JqLnRib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50Ym9keS5jaGlsZHJlbi5sZW5ndGggPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudGJvZHkucmVtb3ZlQ2hpbGQob2JqLnRib2R5Lmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlc3Q7XG4gICAgfVxuXG4gICAgb2JqLmxvYWREb3duID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFNlYXJjaFxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2VhcmNoID09IHRydWUgJiYgb2JqLnJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gb2JqLnJlc3VsdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG9iai5yb3dzO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ZXN0ID0gMDtcbiAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgcGFnZVxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBwYXJzZUludChvYmoudGJvZHkubGFzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS15JykpO1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IHJlc3VsdHMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtIDwgb2JqLnJvd3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDMwOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPCByZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW3Jlc3VsdHNbaXRlbV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW2l0ZW1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudGJvZHkuY2hpbGRyZW4ubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5LnJlbW92ZUNoaWxkKG9iai50Ym9keS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaXRlbSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRlc3Q7XG4gICAgfVxuXG4gICAgb2JqLmxvYWRWYWxpZGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChvYmouc2VsZWN0ZWRDZWxsKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFBhZ2UgPSBwYXJzZUludChvYmoudGJvZHkuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpKSAvIDEwMDtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFBhZ2UgPSBwYXJzZUludChvYmouc2VsZWN0ZWRDZWxsWzNdIC8gMTAwKTtcbiAgICAgICAgICAgIHZhciB0b3RhbFBhZ2VzID0gcGFyc2VJbnQob2JqLnJvd3MubGVuZ3RoIC8gMTAwKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlICE9IHNlbGVjdGVkUGFnZSAmJiBzZWxlY3RlZFBhZ2UgPD0gdG90YWxQYWdlcykge1xuICAgICAgICAgICAgICAgIGlmICghIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwob2JqLnRib2R5LmNoaWxkcmVuLCBvYmoucm93c1tvYmouc2VsZWN0ZWRDZWxsWzNdXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmxvYWRQYWdlKHNlbGVjdGVkUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBzZWFyY2hcbiAgICAgKi9cbiAgICBvYmoucmVzZXRTZWFyY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqLnNlYXJjaElucHV0LnZhbHVlID0gJyc7XG4gICAgICAgIG9iai5zZWFyY2goJycpO1xuICAgICAgICBvYmoucmVzdWx0cyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoXG4gICAgICovXG4gICAgb2JqLnNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgIC8vIFF1ZXJ5XG4gICAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHNlbGVjdGlvblxuICAgICAgICBvYmoucmVzZXRTZWxlY3Rpb24oKTtcblxuICAgICAgICAvLyBUb3RhbCBvZiByZXN1bHRzXG4gICAgICAgIG9iai5wYWdlTnVtYmVyID0gMDtcbiAgICAgICAgb2JqLnJlc3VsdHMgPSBbXTtcblxuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIC8vIFNlYXJjaCBmaWx0ZXJcbiAgICAgICAgICAgIHZhciBzZWFyY2ggPSBmdW5jdGlvbihpdGVtLCBxdWVyeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgnJytpdGVtW2ldKS50b0xvd2VyQ2FzZSgpLnNlYXJjaChxdWVyeSkgPj0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCcnK29iai5yZWNvcmRzW2luZGV4XVtpXS5pbm5lckhUTUwpLnRvTG93ZXJDYXNlKCkuc2VhcmNoKHF1ZXJ5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc3VsdFxuICAgICAgICAgICAgdmFyIGFkZFRvUmVzdWx0ID0gZnVuY3Rpb24oaykge1xuICAgICAgICAgICAgICAgIGlmIChvYmoucmVzdWx0cy5pbmRleE9mKGspID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yZXN1bHRzLnB1c2goayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaWx0ZXJcbiAgICAgICAgICAgIHZhciBkYXRhID0gb2JqLm9wdGlvbnMuZGF0YS5maWx0ZXIoZnVuY3Rpb24odiwgaykge1xuICAgICAgICAgICAgICAgIGlmIChzZWFyY2godiwgcXVlcnksIGspKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlZCByb3dzIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gb2JqLmlzUm93TWVyZ2VkKGspO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZShyb3dzW2ldLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5vcHRpb25zLm1lcmdlQ2VsbHNbcm93c1tpXV1bMV07IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb1Jlc3VsdChyb3dbMV0raik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9ybWFsIHJvdyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9SZXN1bHQoayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLnJlc3VsdHMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcblxuICAgICAgICAvLyBQYWdlIDFcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmxhenlMb2FkaW5nID09IHRydWUpIHtcbiAgICAgICAgICAgIHRvdGFsID0gMTAwO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24gPiAwKSB7XG4gICAgICAgICAgICB0b3RhbCA9IG9iai5vcHRpb25zLnBhZ2luYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2JqLnJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICB0b3RhbCA9IG9iai5yZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG90YWwgPSBvYmoucm93cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBjdXJyZW50IG5vZGVzXG4gICAgICAgIHdoaWxlIChvYmoudGJvZHkuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgb2JqLnRib2R5LnJlbW92ZUNoaWxkKG9iai50Ym9keS5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhpZGUgYWxsIHJlY29yZHMgZnJvbSB0aGUgdGFibGVcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoucm93cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKCEgb2JqLnJlc3VsdHMgfHwgb2JqLnJlc3VsdHMuaW5kZXhPZihqKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgdG90YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqLnJvd3Nbal0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmoucm93c1tqXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHBhZ2luYXRpb25cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24gPiAwKSB7XG4gICAgICAgICAgICBvYmoudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoaWNoIHBhZ2UgdGhlIGNlbGwgaXNcbiAgICAgKi9cbiAgICBvYmoud2hpY2hQYWdlID0gZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICAvLyBTZWFyY2hcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICBjZWxsID0gb2JqLnJlc3VsdHMuaW5kZXhPZihjZWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoTWF0aC5jZWlsKChwYXJzZUludChjZWxsKSArIDEpIC8gcGFyc2VJbnQob2JqLm9wdGlvbnMucGFnaW5hdGlvbikpKSAtIDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR28gdG8gcGFnZVxuICAgICAqL1xuICAgIG9iai5wYWdlID0gZnVuY3Rpb24ocGFnZU51bWJlcikge1xuICAgICAgICB2YXIgb2xkUGFnZSA9IG9iai5wYWdlTnVtYmVyO1xyXG5cbiAgICAgICAgLy8gU2VhcmNoXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSAmJiBvYmoucmVzdWx0cykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBvYmoucmVzdWx0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gb2JqLnJvd3M7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXIgcGFnZVxuICAgICAgICB2YXIgcXVhbnRpdHlQZXJQYWdlID0gcGFyc2VJbnQob2JqLm9wdGlvbnMucGFnaW5hdGlvbik7XG5cbiAgICAgICAgLy8gcGFnZU51bWJlclxuICAgICAgICBpZiAocGFnZU51bWJlciA9PSBudWxsIHx8IHBhZ2VOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIExhc3QgcGFnZVxuICAgICAgICAgICAgcGFnZU51bWJlciA9IE1hdGguY2VpbChyZXN1bHRzLmxlbmd0aCAvIHF1YW50aXR5UGVyUGFnZSk7IFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFnZSBudW1iZXJcbiAgICAgICAgb2JqLnBhZ2VOdW1iZXIgPSBwYWdlTnVtYmVyO1xuXG4gICAgICAgIHZhciBzdGFydFJvdyA9IChwYWdlTnVtYmVyICogcXVhbnRpdHlQZXJQYWdlKTtcbiAgICAgICAgdmFyIGZpbmFsUm93ID0gKHBhZ2VOdW1iZXIgKiBxdWFudGl0eVBlclBhZ2UpICsgcXVhbnRpdHlQZXJQYWdlO1xuICAgICAgICBpZiAoZmluYWxSb3cgPiByZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZmluYWxSb3cgPSByZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRSb3cgPCAwKSB7XG4gICAgICAgICAgICBzdGFydFJvdyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBjb250YWluZXJcbiAgICAgICAgd2hpbGUgKG9iai50Ym9keS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICBvYmoudGJvZHkucmVtb3ZlQ2hpbGQob2JqLnRib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZWRpbmcgaXRlbXNcbiAgICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0Um93OyBqIDwgZmluYWxSb3c7IGorKykge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlICYmIG9iai5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW3Jlc3VsdHNbal1dKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLnRib2R5LmFwcGVuZENoaWxkKG9iai5yb3dzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uID4gMCkge1xuICAgICAgICAgICAgb2JqLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBjb3JuZXIgcG9zaXRpb25cbiAgICAgICAgb2JqLnVwZGF0ZUNvcm5lclBvc2l0aW9uKCk7XG5cclxuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uY2hhbmdlcGFnZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvYmoub3B0aW9ucy5vbmNoYW5nZXBhZ2UoZWwsIHBhZ2VOdW1iZXIsIG9sZFBhZ2UpO1xyXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHBhZ2luYXRpb25cbiAgICAgKi9cbiAgICBvYmoudXBkYXRlUGFnaW5hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSZXNldCBjb250YWluZXJcbiAgICAgICAgb2JqLnBhZ2luYXRpb24uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIG9iai5wYWdpbmF0aW9uLmNoaWxkcmVuWzFdLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICAgIC8vIFN0YXJ0IHBhZ2luYXRpb25cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIC8vIFNlYXJjaGFibGVcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSAmJiBvYmoucmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gb2JqLnJlc3VsdHMubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG9iai5yb3dzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIC8vIE5vIHJlY29yZHMgZm91bmRcbiAgICAgICAgICAgICAgICBvYmoucGFnaW5hdGlvbi5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBvYmoub3B0aW9ucy50ZXh0Lm5vUmVjb3Jkc0ZvdW5kO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBQYWdpbmF0aW9uIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIHZhciBxdWFudHlPZlBhZ2VzID0gTWF0aC5jZWlsKHJlc3VsdHMgLyBvYmoub3B0aW9ucy5wYWdpbmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmIChvYmoucGFnZU51bWJlciA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0TnVtYmVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsTnVtYmVyID0gcXVhbnR5T2ZQYWdlcyA8IDEwID8gcXVhbnR5T2ZQYWdlcyA6IDEwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocXVhbnR5T2ZQYWdlcyAtIG9iai5wYWdlTnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnROdW1iZXIgPSBxdWFudHlPZlBhZ2VzIC0gOTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsTnVtYmVyID0gcXVhbnR5T2ZQYWdlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0TnVtYmVyIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROdW1iZXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0TnVtYmVyID0gb2JqLnBhZ2VOdW1iZXIgLSA0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxOdW1iZXIgPSBvYmoucGFnZU51bWJlciArIDU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRmlyc3RcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnROdW1iZXIgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdpbmF0aW9uSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSXRlbS5jbGFzc05hbWUgPSAnamV4Y2VsX3BhZ2UnO1xuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSXRlbS5pbm5lckhUTUwgPSAnPCc7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JdGVtLnRpdGxlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnBhZ2luYXRpb24uY2hpbGRyZW5bMV0uYXBwZW5kQ2hpbGQocGFnaW5hdGlvbkl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEdldCBwYWdlIGxpbmtzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0TnVtYmVyOyBpIDw9IGZpbmFsTnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JdGVtLmNsYXNzTmFtZSA9ICdqZXhjZWxfcGFnZSc7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JdGVtLmlubmVySFRNTCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5wYWdpbmF0aW9uLmNoaWxkcmVuWzFdLmFwcGVuZENoaWxkKHBhZ2luYXRpb25JdGVtKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnBhZ2VOdW1iZXIgPT0gKGktMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JdGVtLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF9wYWdlX3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMYXN0XG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsTnVtYmVyIDwgcXVhbnR5T2ZQYWdlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFnaW5hdGlvbkl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkl0ZW0uY2xhc3NOYW1lID0gJ2pleGNlbF9wYWdlJztcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkl0ZW0uaW5uZXJIVE1MID0gJz4nO1xuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSXRlbS50aXRsZSA9IHF1YW50eU9mUGFnZXM7XG4gICAgICAgICAgICAgICAgICAgIG9iai5wYWdpbmF0aW9uLmNoaWxkcmVuWzFdLmFwcGVuZENoaWxkKHBhZ2luYXRpb25JdGVtKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUZXh0XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgveyhcXGQrKX0vZywgZnVuY3Rpb24obWF0Y2gsIG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJnc1tudW1iZXJdICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGFyZ3NbbnVtYmVyXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG9iai5wYWdpbmF0aW9uLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IGZvcm1hdChvYmoub3B0aW9ucy50ZXh0LnNob3dpbmdQYWdlLCBvYmoucGFnZU51bWJlciArIDEsIHF1YW50eU9mUGFnZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBDU1YgdGFibGVcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIG51bGxcbiAgICAgKi9cbiAgICBvYmouZG93bmxvYWQgPSBmdW5jdGlvbihpbmNsdWRlSGVhZGVycykge1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMuYWxsb3dFeHBvcnQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0V4cG9ydCBub3QgYWxsb3dlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGF0YVxuICAgICAgICAgICAgdmFyIGRhdGEgPSAnJztcbiAgICAgICAgICAgIGlmIChpbmNsdWRlSGVhZGVycyA9PSB0cnVlIHx8IG9iai5vcHRpb25zLmluY2x1ZGVIZWFkZXJzT25Eb3dubG9hZCA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZGF0YSArPSBvYmouZ2V0SGVhZGVycygpO1xuICAgICAgICAgICAgICAgIGRhdGEgKz0gXCJcXHJcXG5cIjtcbiAgICAgICAgICAgIH1cblxyXG4gICAgICAgICAgICAvLyBHZXQgZGF0YVxuICAgICAgICAgICAgZGF0YSArPSBvYmouY29weShmYWxzZSwgb2JqLm9wdGlvbnMuY3N2RGVsaW1pdGVyLCB0cnVlKTtcclxuXG4gICAgICAgICAgICAvLyBEb3dubG9hZCBlbGVtZW50XG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtcIlxcdUZFRkZcIitkYXRhXSwge3R5cGU6ICd0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04Oyd9KTtcblxyXG4gICAgICAgICAgICAvLyBJRSBDb21wYXRpYmlsaXR5XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGJsb2IsIG9wdGlvbnMuY3N2RmlsZU5hbWUgKyAnLmNzdicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERvd25sb2FkIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgcG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIHBvbS5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgIHBvbS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgb2JqLm9wdGlvbnMuY3N2RmlsZU5hbWUgKyAnLmNzdicpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocG9tKTtcbiAgICAgICAgICAgICAgICBwb20uY2xpY2soKTtcbiAgICAgICAgICAgICAgICBwb20ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaGlzdG9yeSByZWNvcmQgZm9yIHVuZG8vcmVkb1xuICAgICAqIFxuICAgICAqIEByZXR1cm4gbnVsbFxuICAgICAqL1xuICAgIG9iai5zZXRIaXN0b3J5ID0gZnVuY3Rpb24oY2hhbmdlcykge1xuICAgICAgICBpZiAob2JqLmlnbm9yZUhpc3RvcnkgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gSW5jcmVtZW50IGFuZCBnZXQgdGhlIGN1cnJlbnQgaGlzdG9yeSBpbmRleFxuICAgICAgICAgICAgdmFyIGluZGV4ID0gKytvYmouaGlzdG9yeUluZGV4O1xuXG4gICAgICAgICAgICAvLyBTbGljZSB0aGUgYXJyYXkgdG8gZGlzY2FyZCB1bmRvbmUgY2hhbmdlc1xuICAgICAgICAgICAgb2JqLmhpc3RvcnkgPSAob2JqLmhpc3RvcnkgPSBvYmouaGlzdG9yeS5zbGljZSgwLCBpbmRleCArIDEpKTtcblxuICAgICAgICAgICAgLy8gS2VlcCBoaXN0b3J5XG4gICAgICAgICAgICBvYmouaGlzdG9yeVtpbmRleF0gPSBjaGFuZ2VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29weSBtZXRob2RcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYm9vbCBoaWdobGlnaHRlZCAtIEdldCBvbmx5IGhpZ2hsaWdodGVkIGNlbGxzXG4gICAgICogQHBhcmFtIGRlbGltaXRlciAtIFxcdCBkZWZhdWx0IHRvIGtlZXAgY29tcGF0aWJpbGl0eSB3aXRoIGV4Y2VsXG4gICAgICogQHJldHVybiBzdHJpbmcgdmFsdWVcbiAgICAgKi9cbiAgICBvYmouY29weSA9IGZ1bmN0aW9uKGhpZ2hsaWdodGVkLCBkZWxpbWl0ZXIsIHJldHVybkRhdGEpIHtcbiAgICAgICAgaWYgKCEgZGVsaW1pdGVyKSB7XG4gICAgICAgICAgICBkZWxpbWl0ZXIgPSBcIlxcdFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udHJvbHNcbiAgICAgICAgdmFyIGNvbCA9IFtdO1xuICAgICAgICB2YXIgY29sTGFiZWwgPSBbXTtcbiAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICB2YXIgcm93TGFiZWwgPSBbXTtcbiAgICAgICAgdmFyIHggPSBvYmoub3B0aW9ucy5kYXRhWzBdLmxlbmd0aFxuICAgICAgICB2YXIgeSA9IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoXG4gICAgICAgIHZhciB0bXAgPSAnJztcblxuICAgICAgICAvLyBSZXNldCBjb250YWluZXJcbiAgICAgICAgb2JqLnN0eWxlID0gW107XG5cbiAgICAgICAgLy8gR28gdGhyb3VnaCB0aGUgY29sdW1ucyB0byBnZXQgdGhlIGRhdGFcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB5OyBqKyspIHtcbiAgICAgICAgICAgIGNvbCA9IFtdO1xuICAgICAgICAgICAgY29sTGFiZWwgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBjZWxsIGlzIGhpZ2hsaWdodGVkXG4gICAgICAgICAgICAgICAgaWYgKCEgaGlnaGxpZ2h0ZWQgfHwgb2JqLnJlY29yZHNbal1baV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdobGlnaHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqLm9wdGlvbnMuZGF0YVtqXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLm1hdGNoICYmICh2YWx1ZS5tYXRjaCgvLC9nKSB8fCB2YWx1ZS5tYXRjaCgvXFxuLykgfHwgdmFsdWUubWF0Y2goL1xcXCIvKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKCdcIicsICdnJyksICdcIlwiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICdcIicgKyB2YWx1ZSArICdcIic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29sLnB1c2godmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIExhYmVsc1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdjaGVja2JveCcgfHwgb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50eXBlID09ICdyYWRpbycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IG9iai5yZWNvcmRzW2pdW2ldLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbC5tYXRjaCAmJiAobGFiZWwubWF0Y2goLywvZykgfHwgbGFiZWwubWF0Y2goL1xcbi8pIHx8IGxhYmVsLm1hdGNoKC9cXFwiLykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2NhcGUgZG91YmxlIHF1b3Rlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFiZWwucmVwbGFjZShuZXcgUmVnRXhwKCdcIicsICdnJyksICdcIlwiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnXCInICsgbGFiZWwgKyAnXCInO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29sTGFiZWwucHVzaChsYWJlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHN0eWxlXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG9iai5yZWNvcmRzW2pdW2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnN0eWxlLnB1c2godG1wID8gdG1wIDogJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByb3cucHVzaChjb2wuam9pbihkZWxpbWl0ZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2xMYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByb3dMYWJlbC5wdXNoKGNvbExhYmVsLmpvaW4oZGVsaW1pdGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbCBzdHJpbmdcbiAgICAgICAgdmFyIHN0ciA9IHJvdy5qb2luKFwiXFxyXFxuXCIpO1xuICAgICAgICB2YXIgc3RyTGFiZWwgPSByb3dMYWJlbC5qb2luKFwiXFxyXFxuXCIpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIGhpZGRlbiB0ZXh0YXJlYSB0byBjb3B5IHRoZSB2YWx1ZXNcbiAgICAgICAgaWYgKCEgcmV0dXJuRGF0YSkge1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmNvcHlDb21wYXRpYmlsaXR5ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBvYmoudGV4dGFyZWEudmFsdWUgPSBzdHJMYWJlbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLnRleHRhcmVhLnZhbHVlID0gc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLnRleHRhcmVhLnNlbGVjdCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcCBkYXRhXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5jb3B5Q29tcGF0aWJpbGl0eSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBvYmouZGF0YSA9IHN0ckxhYmVsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBvYmouZGF0YSA9IHN0cjtcbiAgICAgICAgfVxuICAgICAgICAvLyBLZWVwIG5vbiB2aXNpYmxlIGluZm9ybWF0aW9uXG4gICAgICAgIG9iai5oYXNoU3RyaW5nID0gb2JqLmhhc2gob2JqLmRhdGEpO1xuXG4gICAgICAgIHJldHVybiBvYmouZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBqRXhjZWwgcGFzdGUgbWV0aG9kXG4gICAgICogXG4gICAgICogQHBhcmFtIGludGVnZXIgcm93IG51bWJlclxuICAgICAqIEByZXR1cm4gc3RyaW5nIHZhbHVlXG4gICAgICovXG4gICAgb2JqLnBhc3RlID0gZnVuY3Rpb24oeCwgeSwgZGF0YSkge1xuICAgICAgICAvLyBQYXN0ZSBmaWx0ZXJcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJlZm9yZXBhc3RlKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG9iai5vcHRpb25zLm9uYmVmb3JlcGFzdGUoZWwsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udHJvbHNcbiAgICAgICAgdmFyIGhhc2ggPSBvYmouaGFzaChkYXRhKTtcbiAgICAgICAgdmFyIHN0eWxlID0gKGhhc2ggPT0gb2JqLmhhc2hTdHJpbmcpID8gb2JqLnN0eWxlIDogbnVsbDtcblxuICAgICAgICAvLyBEZXBlbmRpbmcgb24gdGhlIGJlaGF2aW9yXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5jb3B5Q29tcGF0aWJpbGl0eSA9PSB0cnVlICYmIGhhc2ggPT0gb2JqLmhhc2hTdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gb2JqLmRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGxpdCBuZXcgbGluZVxuICAgICAgICB2YXIgZGF0YSA9IG9iai5wYXJzZUNTVihkYXRhLCBcIlxcdFwiKTtcblxuICAgICAgICBpZiAoeCAhPSBudWxsICYmIHkgIT0gbnVsbCAmJiBkYXRhKSB7XG4gICAgICAgICAgICAvLyBSZWNvcmRzXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgaiA9IDA7XG4gICAgICAgICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuICAgICAgICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICAgICAgICB2YXIgb2xkU3R5bGUgPSB7fTtcbiAgICAgICAgICAgIHZhciBzdHlsZUluZGV4ID0gMDtcblxuICAgICAgICAgICAgLy8gSW5kZXhcbiAgICAgICAgICAgIHZhciBjb2xJbmRleCA9IHBhcnNlSW50KHgpO1xuICAgICAgICAgICAgdmFyIHJvd0luZGV4ID0gcGFyc2VJbnQoeSk7XG4gICAgICAgICAgICB2YXIgcm93ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gR28gdGhyb3VnaCB0aGUgY29sdW1ucyB0byBnZXQgdGhlIGRhdGFcbiAgICAgICAgICAgIHdoaWxlIChyb3cgPSBkYXRhW2pdKSB7XG4gICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgY29sSW5kZXggPSBwYXJzZUludCh4KTtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChyb3dbaV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgYW5kIGtlZXAgaGlzdG9yeVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gb2JqLnVwZGF0ZUNlbGwoY29sSW5kZXgsIHJvd0luZGV4LCByb3dbaV0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIGhpc3RvcnlcbiAgICAgICAgICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgZm9ybXVsYXMgaW4gdGhlIGNoYWluXG4gICAgICAgICAgICAgICAgICAgIG9iai51cGRhdGVGb3JtdWxhQ2hhaW4oY29sSW5kZXgsIHJvd0luZGV4LCByZWNvcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlICYmIHN0eWxlW3N0eWxlSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uTmFtZSA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFtjb2xJbmRleCwgcm93SW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0eWxlW2NvbHVtbk5hbWVdID0gc3R5bGVbc3R5bGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRTdHlsZVtjb2x1bW5OYW1lXSA9IG9iai5nZXRTdHlsZShjb2x1bW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW3Jvd0luZGV4XVtjb2xJbmRleF0uc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlW3N0eWxlSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlSW5kZXgrK1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1tpXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sSW5kZXggPj0gb2JqLmhlYWRlcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5pbnNlcnRDb2x1bW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gb2JqLnJpZ2h0LmdldChjb2xJbmRleCwgcm93SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dJbmRleCA+PSBvYmoucm93cy5sZW5ndGgtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmluc2VydFJvdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gb2JqLmRvd24uZ2V0KHgsIHJvd0luZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNlbGVjdCB0aGUgbmV3IGNlbGxzXG4gICAgICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3Jkcyh4LCB5LCBjb2xJbmRleCwgcm93SW5kZXgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgaGlzdG9yeVxuICAgICAgICAgICAgb2JqLnNldEhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjonc2V0VmFsdWUnLFxuICAgICAgICAgICAgICAgIHJlY29yZHM6cmVjb3JkcyxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246b2JqLnNlbGVjdGVkQ2VsbCxcbiAgICAgICAgICAgICAgICBuZXdTdHlsZTpuZXdTdHlsZSxcbiAgICAgICAgICAgICAgICBvbGRTdHlsZTpvbGRTdHlsZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGFibGVcbiAgICAgICAgICAgIG9iai51cGRhdGVUYWJsZSgpO1xuXG4gICAgICAgICAgICAvLyBQYXN0ZSBldmVudFxuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbnBhc3RlKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25wYXN0ZShlbCwgcmVjb3Jkcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE9uIGFmdGVyIGNoYW5nZXNcbiAgICAgICAgICAgIG9iai5vbmFmdGVyY2hhbmdlcyhlbCwgcmVjb3Jkcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHJvd1xuICAgICAqL1xuICAgIG9iai5oaXN0b3J5UHJvY2Vzc1JvdyA9IGZ1bmN0aW9uKHR5cGUsIGhpc3RvcnlSZWNvcmQpIHtcbiAgICAgICAgdmFyIHJvd0luZGV4ID0gKCEgaGlzdG9yeVJlY29yZC5pbnNlcnRCZWZvcmUpID8gaGlzdG9yeVJlY29yZC5yb3dOdW1iZXIgKyAxIDogaGlzdG9yeVJlY29yZC5yb3dOdW1iZXI7XG5cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAob2JqLnJlc3VsdHMgJiYgb2JqLnJlc3VsdHMubGVuZ3RoICE9IG9iai5yb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9iai5yZXNldFNlYXJjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHJvd1xuICAgICAgICBpZiAodHlwZSA9PSAxKSB7XG4gICAgICAgICAgICB2YXIgbnVtT2ZSb3dzID0gaGlzdG9yeVJlY29yZC5udW1PZlJvd3M7XG4gICAgICAgICAgICAvLyBSZW1vdmUgbm9kZXNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSByb3dJbmRleDsgaiA8IChudW1PZlJvd3MgKyByb3dJbmRleCk7IGorKykge1xuICAgICAgICAgICAgICAgIG9iai5yb3dzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2JqLnJvd3Nbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtb3ZlIHJlZmVyZW5jZXNcbiAgICAgICAgICAgIG9iai5yZWNvcmRzLnNwbGljZShyb3dJbmRleCwgbnVtT2ZSb3dzKTtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGEuc3BsaWNlKHJvd0luZGV4LCBudW1PZlJvd3MpO1xuICAgICAgICAgICAgb2JqLnJvd3Muc3BsaWNlKHJvd0luZGV4LCBudW1PZlJvd3MpO1xuXG4gICAgICAgICAgICBvYmouY29uZGl0aW9uYWxTZWxlY3Rpb25VcGRhdGUoMSwgcm93SW5kZXgsIChudW1PZlJvd3MgKyByb3dJbmRleCkgLSAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluc2VydCBkYXRhXG4gICAgICAgICAgICBvYmoucmVjb3JkcyA9IGpleGNlbC5pbmplY3RBcnJheShvYmoucmVjb3Jkcywgcm93SW5kZXgsIGhpc3RvcnlSZWNvcmQucm93UmVjb3Jkcyk7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhID0gamV4Y2VsLmluamVjdEFycmF5KG9iai5vcHRpb25zLmRhdGEsIHJvd0luZGV4LCBoaXN0b3J5UmVjb3JkLnJvd0RhdGEpO1xuICAgICAgICAgICAgb2JqLnJvd3MgPSBqZXhjZWwuaW5qZWN0QXJyYXkob2JqLnJvd3MsIHJvd0luZGV4LCBoaXN0b3J5UmVjb3JkLnJvd05vZGUpO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IG5vZGVzXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gcm93SW5kZXg7IGogPCAoaGlzdG9yeVJlY29yZC5udW1PZlJvd3MgKyByb3dJbmRleCk7IGorKykge1xuICAgICAgICAgICAgICAgIG9iai50Ym9keS5pbnNlcnRCZWZvcmUoaGlzdG9yeVJlY29yZC5yb3dOb2RlW2luZGV4XSwgb2JqLnRib2R5LmNoaWxkcmVuW2pdKTtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzcGVjdCBwYWdpbmF0aW9uXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5wYWdpbmF0aW9uID4gMCkge1xuICAgICAgICAgICAgb2JqLnBhZ2Uob2JqLnBhZ2VOdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZVRhYmxlUmVmZXJlbmNlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgY29sdW1uXG4gICAgICovXG4gICAgb2JqLmhpc3RvcnlQcm9jZXNzQ29sdW1uID0gZnVuY3Rpb24odHlwZSwgaGlzdG9yeVJlY29yZCkge1xuICAgICAgICB2YXIgY29sdW1uSW5kZXggPSAoISBoaXN0b3J5UmVjb3JkLmluc2VydEJlZm9yZSkgPyBoaXN0b3J5UmVjb3JkLmNvbHVtbk51bWJlciArIDEgOiBoaXN0b3J5UmVjb3JkLmNvbHVtbk51bWJlcjtcblxuICAgICAgICAvLyBSZW1vdmUgY29sdW1uXG4gICAgICAgIGlmICh0eXBlID09IDEpIHtcbiAgICAgICAgICAgIHZhciBudW1PZkNvbHVtbnMgPSBoaXN0b3J5UmVjb3JkLm51bU9mQ29sdW1ucztcblxuICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1ucy5zcGxpY2UoY29sdW1uSW5kZXgsIG51bU9mQ29sdW1ucyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gY29sdW1uSW5kZXg7IGkgPCAobnVtT2ZDb2x1bW5zICsgY29sdW1uSW5kZXgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvYmouaGVhZGVyc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iai5oZWFkZXJzW2ldKTtcbiAgICAgICAgICAgICAgICBvYmouY29sZ3JvdXBbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvYmouY29sZ3JvdXBbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLmhlYWRlcnMuc3BsaWNlKGNvbHVtbkluZGV4LCBudW1PZkNvbHVtbnMpO1xuICAgICAgICAgICAgb2JqLmNvbGdyb3VwLnNwbGljZShjb2x1bW5JbmRleCwgbnVtT2ZDb2x1bW5zKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGlzdG9yeVJlY29yZC5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGNvbHVtbkluZGV4OyBpIDwgKG51bU9mQ29sdW1ucyArIGNvbHVtbkluZGV4KTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2JqLnJlY29yZHNbal1baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmoucmVjb3Jkc1tqXS5zcGxpY2UoY29sdW1uSW5kZXgsIG51bU9mQ29sdW1ucyk7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YVtqXS5zcGxpY2UoY29sdW1uSW5kZXgsIG51bU9mQ29sdW1ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9iai5jb25kaXRpb25hbFNlbGVjdGlvblVwZGF0ZSgwLCBjb2x1bW5JbmRleCwgKG51bU9mQ29sdW1ucyArIGNvbHVtbkluZGV4KSAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW5zZXJ0IGRhdGFcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnMgPSBqZXhjZWwuaW5qZWN0QXJyYXkob2JqLm9wdGlvbnMuY29sdW1ucywgY29sdW1uSW5kZXgsIGhpc3RvcnlSZWNvcmQuY29sdW1ucyk7XG4gICAgICAgICAgICBvYmouaGVhZGVycyA9IGpleGNlbC5pbmplY3RBcnJheShvYmouaGVhZGVycywgY29sdW1uSW5kZXgsIGhpc3RvcnlSZWNvcmQuaGVhZGVycyk7XG4gICAgICAgICAgICBvYmouY29sZ3JvdXAgPSBqZXhjZWwuaW5qZWN0QXJyYXkob2JqLmNvbGdyb3VwLCBjb2x1bW5JbmRleCwgaGlzdG9yeVJlY29yZC5jb2xncm91cCk7XG5cbiAgICAgICAgICAgIHZhciBpbmRleCA9IDBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb2x1bW5JbmRleDsgaSA8IChoaXN0b3J5UmVjb3JkLm51bU9mQ29sdW1ucyArIGNvbHVtbkluZGV4KTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb2JqLmhlYWRlckNvbnRhaW5lci5pbnNlcnRCZWZvcmUoaGlzdG9yeVJlY29yZC5oZWFkZXJzW2luZGV4XSwgb2JqLmhlYWRlckNvbnRhaW5lci5jaGlsZHJlbltpKzFdKTtcbiAgICAgICAgICAgICAgICBvYmouY29sZ3JvdXBDb250YWluZXIuaW5zZXJ0QmVmb3JlKGhpc3RvcnlSZWNvcmQuY29sZ3JvdXBbaW5kZXhdLCBvYmouY29sZ3JvdXBDb250YWluZXIuY2hpbGRyZW5baSsxXSk7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoaXN0b3J5UmVjb3JkLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW2pdID0gamV4Y2VsLmluamVjdEFycmF5KG9iai5vcHRpb25zLmRhdGFbal0sIGNvbHVtbkluZGV4LCBoaXN0b3J5UmVjb3JkLmRhdGFbal0pO1xuICAgICAgICAgICAgICAgIG9iai5yZWNvcmRzW2pdID0gamV4Y2VsLmluamVjdEFycmF5KG9iai5yZWNvcmRzW2pdLCBjb2x1bW5JbmRleCwgaGlzdG9yeVJlY29yZC5yZWNvcmRzW2pdKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGNvbHVtbkluZGV4OyBpIDwgKGhpc3RvcnlSZWNvcmQubnVtT2ZDb2x1bW5zICsgY29sdW1uSW5kZXgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJvd3Nbal0uaW5zZXJ0QmVmb3JlKGhpc3RvcnlSZWNvcmQucmVjb3Jkc1tqXVtpbmRleF0sIG9iai5yb3dzW2pdLmNoaWxkcmVuW2krMV0pO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkanVzdCBuZXN0ZWQgaGVhZGVyc1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMubmVzdGVkSGVhZGVycyAmJiBvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZsZXhpYmxlIHdheSB0byBoYW5kbGUgbmVzdGVkaGVhZGVyc1xuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0gJiYgb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1swXVswXSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbal1bb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXS5sZW5ndGgtMV0uY29sc3BhbikgLSBoaXN0b3J5UmVjb3JkLm51bU9mQ29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xzcGFuID0gcGFyc2VJbnQob2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXVtvYmoub3B0aW9ucy5uZXN0ZWRIZWFkZXJzW2pdLmxlbmd0aC0xXS5jb2xzcGFuKSArIGhpc3RvcnlSZWNvcmQubnVtT2ZDb2x1bW5zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbal1bb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1tqXS5sZW5ndGgtMV0uY29sc3BhbiA9IGNvbHNwYW47XG4gICAgICAgICAgICAgICAgICAgIG9iai50aGVhZC5jaGlsZHJlbltqXS5jaGlsZHJlbltvYmoudGhlYWQuY2hpbGRyZW5bal0uY2hpbGRyZW4ubGVuZ3RoLTFdLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsIGNvbHNwYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0uY29sc3BhbikgLSBoaXN0b3J5UmVjb3JkLm51bU9mQ29sdW1ucztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sc3BhbiA9IHBhcnNlSW50KG9iai5vcHRpb25zLm5lc3RlZEhlYWRlcnNbMF0uY29sc3BhbikgKyBoaXN0b3J5UmVjb3JkLm51bU9mQ29sdW1ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMubmVzdGVkSGVhZGVyc1swXS5jb2xzcGFuID0gY29sc3BhbjtcbiAgICAgICAgICAgICAgICBvYmoudGhlYWQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bb2JqLnRoZWFkLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aC0xXS5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xzcGFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9iai51cGRhdGVUYWJsZVJlZmVyZW5jZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmRvIGxhc3QgYWN0aW9uXG4gICAgICovXG4gICAgb2JqLnVuZG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSWdub3JlIGV2ZW50cyBhbmQgaGlzdG9yeVxuICAgICAgICB2YXIgaWdub3JlRXZlbnRzID0gb2JqLmlnbm9yZUV2ZW50cyA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdmFyIGlnbm9yZUhpc3RvcnkgPSBvYmouaWdub3JlSGlzdG9yeSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICBvYmouaWdub3JlRXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgb2JqLmlnbm9yZUhpc3RvcnkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFJlY29yZHNcbiAgICAgICAgdmFyIHJlY29yZHMgPSBbXTtcblxuICAgICAgICAvLyBVcGRhdGUgY2VsbHNcbiAgICAgICAgaWYgKG9iai5oaXN0b3J5SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gSGlzdG9yeVxuICAgICAgICAgICAgdmFyIGhpc3RvcnlSZWNvcmQgPSBvYmouaGlzdG9yeVtvYmouaGlzdG9yeUluZGV4LS1dO1xuXG4gICAgICAgICAgICBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ2luc2VydFJvdycpIHtcbiAgICAgICAgICAgICAgICBvYmouaGlzdG9yeVByb2Nlc3NSb3coMSwgaGlzdG9yeVJlY29yZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdkZWxldGVSb3cnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmhpc3RvcnlQcm9jZXNzUm93KDAsIGhpc3RvcnlSZWNvcmQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnaW5zZXJ0Q29sdW1uJykge1xuICAgICAgICAgICAgICAgIG9iai5oaXN0b3J5UHJvY2Vzc0NvbHVtbigxLCBoaXN0b3J5UmVjb3JkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ2RlbGV0ZUNvbHVtbicpIHtcbiAgICAgICAgICAgICAgICBvYmouaGlzdG9yeVByb2Nlc3NDb2x1bW4oMCwgaGlzdG9yeVJlY29yZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdtb3ZlUm93Jykge1xuICAgICAgICAgICAgICAgIG9iai5tb3ZlUm93KGhpc3RvcnlSZWNvcmQubmV3VmFsdWUsIGhpc3RvcnlSZWNvcmQub2xkVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnbW92ZUNvbHVtbicpIHtcbiAgICAgICAgICAgICAgICBvYmoubW92ZUNvbHVtbihoaXN0b3J5UmVjb3JkLm5ld1ZhbHVlLCBoaXN0b3J5UmVjb3JkLm9sZFZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldE1lcmdlJykge1xuICAgICAgICAgICAgICAgIG9iai5yZW1vdmVNZXJnZShoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5kYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldFN0eWxlJykge1xuICAgICAgICAgICAgICAgIG9iai5zZXRTdHlsZShoaXN0b3J5UmVjb3JkLm9sZFZhbHVlLCBudWxsLCBudWxsLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldFdpZHRoJykge1xuICAgICAgICAgICAgICAgIG9iai5zZXRXaWR0aChoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5vbGRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRIZWlnaHQnKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldEhlaWdodChoaXN0b3J5UmVjb3JkLnJvdywgaGlzdG9yeVJlY29yZC5vbGRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRIZWFkZXInKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldEhlYWRlcihoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5vbGRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRDb21tZW50cycpIHtcbiAgICAgICAgICAgICAgICBvYmouc2V0Q29tbWVudHMoaGlzdG9yeVJlY29yZC5jb2x1bW4sIGhpc3RvcnlSZWNvcmQub2xkVmFsdWVbMF0sIGhpc3RvcnlSZWNvcmQub2xkVmFsdWVbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnb3JkZXJCeScpIHtcbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGlzdG9yeVJlY29yZC5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd3NbaGlzdG9yeVJlY29yZC5yb3dzW2pdXSA9IGo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iai51cGRhdGVPcmRlckFycm93KGhpc3RvcnlSZWNvcmQuY29sdW1uLCBoaXN0b3J5UmVjb3JkLm9yZGVyID8gMCA6IDEpO1xuICAgICAgICAgICAgICAgIG9iai51cGRhdGVPcmRlcihyb3dzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldFZhbHVlJykge1xuICAgICAgICAgICAgICAgIC8vIFJlZG8gZm9yIGNoYW5nZXMgaW4gY2VsbHNcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhpc3RvcnlSZWNvcmQucmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlQ2VsbChoaXN0b3J5UmVjb3JkLnJlY29yZHNbaV0uY29sLCBoaXN0b3J5UmVjb3JkLnJlY29yZHNbaV0ucm93LCBoaXN0b3J5UmVjb3JkLnJlY29yZHNbaV0ub2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlRm9ybXVsYUNoYWluKGhpc3RvcnlSZWNvcmQucmVjb3Jkc1tpXS5jb2wsIGhpc3RvcnlSZWNvcmQucmVjb3Jkc1tpXS5yb3csIHJlY29yZHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeVJlY29yZC5vbGRTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlc2V0U3R5bGUoaGlzdG9yeVJlY29yZC5vbGRTdHlsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIGlmICghIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uID0gW2hpc3RvcnlSZWNvcmQucmVjb3Jkc1swXS5jb2wsIGhpc3RvcnlSZWNvcmQucmVjb3Jkc1swXS5yb3ddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhoaXN0b3J5UmVjb3JkLnNlbGVjdGlvblswXSwgaGlzdG9yeVJlY29yZC5zZWxlY3Rpb25bMV0sIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uWzJdLCBoaXN0b3J5UmVjb3JkLnNlbGVjdGlvblszXSk7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRhYmxlXG4gICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVRhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmlnbm9yZUV2ZW50cyA9IGlnbm9yZUV2ZW50cztcbiAgICAgICAgb2JqLmlnbm9yZUhpc3RvcnkgPSBpZ25vcmVIaXN0b3J5O1xuXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub251bmRvKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5vbnVuZG8oZWwsIGhpc3RvcnlSZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVkbyBwcmV2aW91c2x5IHVuZG9uZSBhY3Rpb25cbiAgICAgKi9cbiAgICBvYmoucmVkbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBJZ25vcmUgZXZlbnRzIGFuZCBoaXN0b3J5XG4gICAgICAgIHZhciBpZ25vcmVFdmVudHMgPSBvYmouaWdub3JlRXZlbnRzID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB2YXIgaWdub3JlSGlzdG9yeSA9IG9iai5pZ25vcmVIaXN0b3J5ID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIG9iai5pZ25vcmVFdmVudHMgPSB0cnVlO1xuICAgICAgICBvYmouaWdub3JlSGlzdG9yeSA9IHRydWU7XG5cbiAgICAgICAgLy8gUmVjb3Jkc1xuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBjZWxsc1xuICAgICAgICBpZiAob2JqLmhpc3RvcnlJbmRleCA8IG9iai5oaXN0b3J5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIC8vIEhpc3RvcnlcbiAgICAgICAgICAgIHZhciBoaXN0b3J5UmVjb3JkID0gb2JqLmhpc3RvcnlbKytvYmouaGlzdG9yeUluZGV4XTtcblxuICAgICAgICAgICAgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdpbnNlcnRSb3cnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmhpc3RvcnlQcm9jZXNzUm93KDAsIGhpc3RvcnlSZWNvcmQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnZGVsZXRlUm93Jykge1xuICAgICAgICAgICAgICAgIG9iai5oaXN0b3J5UHJvY2Vzc1JvdygxLCBoaXN0b3J5UmVjb3JkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ2luc2VydENvbHVtbicpIHtcbiAgICAgICAgICAgICAgICBvYmouaGlzdG9yeVByb2Nlc3NDb2x1bW4oMCwgaGlzdG9yeVJlY29yZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdkZWxldGVDb2x1bW4nKSB7XG4gICAgICAgICAgICAgICAgb2JqLmhpc3RvcnlQcm9jZXNzQ29sdW1uKDEsIGhpc3RvcnlSZWNvcmQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnbW92ZVJvdycpIHtcbiAgICAgICAgICAgICAgICBvYmoubW92ZVJvdyhoaXN0b3J5UmVjb3JkLm9sZFZhbHVlLCBoaXN0b3J5UmVjb3JkLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ21vdmVDb2x1bW4nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm1vdmVDb2x1bW4oaGlzdG9yeVJlY29yZC5vbGRWYWx1ZSwgaGlzdG9yeVJlY29yZC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRNZXJnZScpIHtcbiAgICAgICAgICAgICAgICBvYmouc2V0TWVyZ2UoaGlzdG9yeVJlY29yZC5jb2x1bW4sIGhpc3RvcnlSZWNvcmQuY29sc3BhbiwgaGlzdG9yeVJlY29yZC5yb3dzcGFuLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldFN0eWxlJykge1xuICAgICAgICAgICAgICAgIG9iai5zZXRTdHlsZShoaXN0b3J5UmVjb3JkLm5ld1ZhbHVlLCBudWxsLCBudWxsLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGlzdG9yeVJlY29yZC5hY3Rpb24gPT0gJ3NldFdpZHRoJykge1xuICAgICAgICAgICAgICAgIG9iai5zZXRXaWR0aChoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRIZWlnaHQnKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldEhlaWdodChoaXN0b3J5UmVjb3JkLnJvdywgaGlzdG9yeVJlY29yZC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRIZWFkZXInKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldEhlYWRlcihoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5uZXdWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRDb21tZW50cycpIHtcbiAgICAgICAgICAgICAgICBvYmouc2V0Q29tbWVudHMoaGlzdG9yeVJlY29yZC5jb2x1bW4sIGhpc3RvcnlSZWNvcmQubmV3VmFsdWVbMF0sIGhpc3RvcnlSZWNvcmQubmV3VmFsdWVbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoaXN0b3J5UmVjb3JkLmFjdGlvbiA9PSAnb3JkZXJCeScpIHtcbiAgICAgICAgICAgICAgICBvYmoudXBkYXRlT3JkZXJBcnJvdyhoaXN0b3J5UmVjb3JkLmNvbHVtbiwgaGlzdG9yeVJlY29yZC5vcmRlcik7XG4gICAgICAgICAgICAgICAgb2JqLnVwZGF0ZU9yZGVyKGhpc3RvcnlSZWNvcmQucm93cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhpc3RvcnlSZWNvcmQuYWN0aW9uID09ICdzZXRWYWx1ZScpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWRvIGZvciBjaGFuZ2VzIGluIGNlbGxzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoaXN0b3J5UmVjb3JkLnJlY29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUNlbGwoaGlzdG9yeVJlY29yZC5yZWNvcmRzW2ldLmNvbCwgaGlzdG9yeVJlY29yZC5yZWNvcmRzW2ldLnJvdywgaGlzdG9yeVJlY29yZC5yZWNvcmRzW2ldLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUZvcm11bGFDaGFpbihoaXN0b3J5UmVjb3JkLnJlY29yZHNbaV0uY29sLCBoaXN0b3J5UmVjb3JkLnJlY29yZHNbaV0ucm93LCByZWNvcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpc3RvcnlSZWNvcmQubmV3U3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZXNldFN0eWxlKGhpc3RvcnlSZWNvcmQubmV3U3R5bGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIGlmICghIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uID0gW2hpc3RvcnlSZWNvcmQucmVjb3Jkc1swXS5jb2wsIGhpc3RvcnlSZWNvcmQucmVjb3Jkc1swXS5yb3ddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmoudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhoaXN0b3J5UmVjb3JkLnNlbGVjdGlvblswXSwgaGlzdG9yeVJlY29yZC5zZWxlY3Rpb25bMV0sIGhpc3RvcnlSZWNvcmQuc2VsZWN0aW9uWzJdLCBoaXN0b3J5UmVjb3JkLnNlbGVjdGlvblszXSk7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRhYmxlXG4gICAgICAgICAgICAgICAgb2JqLnVwZGF0ZVRhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmlnbm9yZUV2ZW50cyA9IGlnbm9yZUV2ZW50cztcbiAgICAgICAgb2JqLmlnbm9yZUhpc3RvcnkgPSBpZ25vcmVIaXN0b3J5O1xuXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25yZWRvKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5vbnJlZG8oZWwsIGhpc3RvcnlSZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGRyb3Bkb3duIHZhbHVlIGZyb20ga2V5XG4gICAgICovXG4gICAgb2JqLmdldERyb3BEb3duVmFsdWUgPSBmdW5jdGlvbihjb2x1bW4sIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uc1tjb2x1bW5dICYmIG9iai5vcHRpb25zLmNvbHVtbnNbY29sdW1uXS5zb3VyY2UpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhcnJheSBmcm9tIHNvdXJjZVxuICAgICAgICAgICAgdmFyIGNvbWJvID0gW107XG4gICAgICAgICAgICB2YXIgc291cmNlID0gb2JqLm9wdGlvbnMuY29sdW1uc1tjb2x1bW5dLnNvdXJjZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHNvdXJjZVtpXSkgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tYm9bc291cmNlW2ldLmlkXSA9IHNvdXJjZVtpXS5uYW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbWJvW3NvdXJjZVtpXV0gPSBzb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHYXJhbnRlIHNpbmdsZSBtdWx0aXBsZSBjb21wYXRpYmlseVxuICAgICAgICAgICAgdmFyIGtleXMgPSAoJycgKyBrZXkpLnNwbGl0KCc7JylcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbWJvW2tleXNbaV1dKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goY29tYm9ba2V5c1tpXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgY29sdW1uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHZhbHVlLmxlbmd0aCA+IDApID8gdmFsdWUuam9pbignOyAnKSA6ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZyb20gc3RhcmNrb3ZlcmZsb3cgY29udHJpYnV0aW9uc1xuICAgICAqL1xuICAgIG9iai5wYXJzZUNTViA9IGZ1bmN0aW9uKHN0ciwgZGVsaW1pdGVyKSB7XG4gICAgICAgIC8vIFJlbW92ZSBsYXN0IGxpbmUgYnJlYWtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xccj9cXG4kfFxcciR8XFxuJC9nLCBcIlwiKTtcbiAgICAgICAgLy8gTGFzdCBjYXJhY3RlciBpcyB0aGUgZGVsaW1pdGVyXG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpID09IDkpIHtcbiAgICAgICAgICAgIHN0ciArPSBcIlxcMFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVzZXItc3VwcGxpZWQgZGVsaW1ldGVyIG9yIGRlZmF1bHQgY29tbWFcbiAgICAgICAgZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBcIixcIik7XG5cbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICB2YXIgcXVvdGUgPSBmYWxzZTsgIC8vIHRydWUgbWVhbnMgd2UncmUgaW5zaWRlIGEgcXVvdGVkIGZpZWxkXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBlYWNoIGNoYXJhY3Rlciwga2VlcCB0cmFjayBvZiBjdXJyZW50IHJvdyBhbmQgY29sdW1uIChvZiB0aGUgcmV0dXJuZWQgYXJyYXkpXG4gICAgICAgIGZvciAodmFyIHJvdyA9IDAsIGNvbCA9IDAsIGMgPSAwOyBjIDwgc3RyLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgY2MgPSBzdHJbY10sIG5jID0gc3RyW2MrMV07XG4gICAgICAgICAgICBhcnJbcm93XSA9IGFycltyb3ddIHx8IFtdO1xuICAgICAgICAgICAgYXJyW3Jvd11bY29sXSA9IGFycltyb3ddW2NvbF0gfHwgJyc7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGNoYXJhY3RlciBpcyBhIHF1b3RhdGlvbiBtYXJrLCBhbmQgd2UncmUgaW5zaWRlIGEgcXVvdGVkIGZpZWxkLCBhbmQgdGhlIG5leHQgY2hhcmFjdGVyIGlzIGFsc28gYSBxdW90YXRpb24gbWFyaywgYWRkIGEgcXVvdGF0aW9uIG1hcmsgdG8gdGhlIGN1cnJlbnQgY29sdW1uIGFuZCBza2lwIHRoZSBuZXh0IGNoYXJhY3RlclxuICAgICAgICAgICAgaWYgKGNjID09ICdcIicgJiYgcXVvdGUgJiYgbmMgPT0gJ1wiJykgeyBhcnJbcm93XVtjb2xdICs9IGNjOyArK2M7IGNvbnRpbnVlOyB9ICBcblxuICAgICAgICAgICAgLy8gSWYgaXQncyBqdXN0IG9uZSBxdW90YXRpb24gbWFyaywgYmVnaW4vZW5kIHF1b3RlZCBmaWVsZFxuICAgICAgICAgICAgaWYgKGNjID09ICdcIicpIHsgcXVvdGUgPSAhcXVvdGU7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBjb21tYSBhbmQgd2UncmUgbm90IGluIGEgcXVvdGVkIGZpZWxkLCBtb3ZlIG9uIHRvIHRoZSBuZXh0IGNvbHVtblxuICAgICAgICAgICAgaWYgKGNjID09IGRlbGltaXRlciAmJiAhcXVvdGUpIHsgKytjb2w7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBuZXdsaW5lIChDUkxGKSBhbmQgd2UncmUgbm90IGluIGEgcXVvdGVkIGZpZWxkLCBza2lwIHRoZSBuZXh0IGNoYXJhY3RlciBhbmQgbW92ZSBvbiB0byB0aGUgbmV4dCByb3cgYW5kIG1vdmUgdG8gY29sdW1uIDAgb2YgdGhhdCBuZXcgcm93XG4gICAgICAgICAgICBpZiAoY2MgPT0gJ1xccicgJiYgbmMgPT0gJ1xcbicgJiYgIXF1b3RlKSB7ICsrcm93OyBjb2wgPSAwOyArK2M7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBuZXdsaW5lIChMRiBvciBDUikgYW5kIHdlJ3JlIG5vdCBpbiBhIHF1b3RlZCBmaWVsZCwgbW92ZSBvbiB0byB0aGUgbmV4dCByb3cgYW5kIG1vdmUgdG8gY29sdW1uIDAgb2YgdGhhdCBuZXcgcm93XG4gICAgICAgICAgICBpZiAoY2MgPT0gJ1xcbicgJiYgIXF1b3RlKSB7ICsrcm93OyBjb2wgPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgaWYgKGNjID09ICdcXHInICYmICFxdW90ZSkgeyArK3JvdzsgY29sID0gMDsgY29udGludWU7IH1cblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBhcHBlbmQgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIHRvIHRoZSBjdXJyZW50IGNvbHVtblxuICAgICAgICAgICAgYXJyW3Jvd11bY29sXSArPSBjYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIG9iai5oYXNoID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyO1xuXG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICAgICAgICAgICAgaGFzaCB8PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cblxuICAgIG9iai5vbmFmdGVyY2hhbmdlcyA9IGZ1bmN0aW9uKGVsLCByZWNvcmRzKSB7XG4gICAgICAgIGlmICghIG9iai5pZ25vcmVFdmVudHMpIHtcbiAgICAgICAgICAgIC8vIE9uIGFmdGVyIGNoYW5nZXNcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25hZnRlcmNoYW5nZXMpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmFmdGVyY2hhbmdlcyhlbCwgcmVjb3Jkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XHJcblxuICAgIG9iai5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgamV4Y2VsLmRlc3Ryb3koZWwpO1xyXG4gICAgfVxyXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiBtZXRob2RcbiAgICAgKi9cbiAgICBvYmouaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBqZXhjZWwuY3VycmVudCA9IG9iajtcblxuICAgICAgICAvLyBCdWlsZCBoYW5kbGVyc1xuICAgICAgICBpZiAodHlwZW9mKGpleGNlbC5idWlsZCkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgamV4Y2VsLmJ1aWxkKCk7XG4gICAgICAgICAgICBqZXhjZWwuYnVpbGQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9hZCB0aGUgdGFibGUgZGF0YSBiYXNlZCBvbiBhbiBDU1YgZmlsZVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuY3N2KSB7XG4gICAgICAgICAgICAvLyBMb2FkaW5nXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMubG9hZGluZ1NwaW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMubG9hZGluZy5zaG93KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWQgQ1NWIGZpbGVcbiAgICAgICAgICAgIGpTdWl0ZXMuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy5jc3YsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBvYmoucGFyc2VDU1YocmVzdWx0LCBvYmoub3B0aW9ucy5jc3ZEZWxpbWl0ZXIpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY3N2SGVhZGVycyA9PSB0cnVlICYmIG5ld0RhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBuZXdEYXRhLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLmNvbHVtbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuY29sdW1uc1tpXSA9IHsgdHlwZTondGV4dCcsIGFsaWduOm9iai5vcHRpb25zLmRlZmF1bHRDb2xBbGlnbiwgd2lkdGg6b2JqLm9wdGlvbnMuZGVmYXVsdENvbFdpZHRoIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZWNlZGVuY2Ugb3ZlciBwcmUtY29uZmlndXJhdGVkIHRpdGxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqLm9wdGlvbnMuY29sdW1uc1tpXS50aXRsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmNvbHVtbnNbaV0udGl0bGUgPSBoZWFkZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBEYXRhXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGEgPSBuZXdEYXRhO1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIHRhYmxlXG4gICAgICAgICAgICAgICAgICAgIG9iai5wcmVwYXJlVGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSBzcGluXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5sb2FkaW5nU3BpbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqU3VpdGVzLmxvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMudXJsKSB7XG4gICAgICAgICAgICAvLyBMb2FkaW5nXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMubG9hZGluZ1NwaW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMubG9hZGluZy5zaG93KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGpTdWl0ZXMuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEYXRhXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmRhdGEgPSAocmVzdWx0LmRhdGEpID8gcmVzdWx0LmRhdGEgOiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXBhcmUgdGFibGVcbiAgICAgICAgICAgICAgICAgICAgb2JqLnByZXBhcmVUYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBIaWRlIHNwaW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmxvYWRpbmdTcGluID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpTdWl0ZXMubG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFByZXBhcmUgdGFibGVcbiAgICAgICAgICAgIG9iai5wcmVwYXJlVGFibGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnRleHQgbWVudVxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29udGV4dE1lbnUgIT0gbnVsbCkge1xuICAgICAgICBvYmoub3B0aW9ucy5jb250ZXh0TWVudSA9IG9wdGlvbnMuY29udGV4dE1lbnU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqLm9wdGlvbnMuY29udGV4dE1lbnUgPSBmdW5jdGlvbihlbCwgeCwgeSwgZSkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgICAgICAgIGlmICh5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgYSBuZXcgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93SW5zZXJ0Q29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTpvYmoub3B0aW9ucy50ZXh0Lmluc2VydEFOZXdDb2x1bW5CZWZvcmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5pbnNlcnRDb2x1bW4oMSwgcGFyc2VJbnQoeCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuYWxsb3dJbnNlcnRDb2x1bW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOm9iai5vcHRpb25zLnRleHQuaW5zZXJ0QU5ld0NvbHVtbkFmdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouaW5zZXJ0Q29sdW1uKDEsIHBhcnNlSW50KHgpLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGEgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93RGVsZXRlQ29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTpvYmoub3B0aW9ucy50ZXh0LmRlbGV0ZVNlbGVjdGVkQ29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRlbGV0ZUNvbHVtbihvYmouZ2V0U2VsZWN0ZWRDb2x1bW5zKCkubGVuZ3RoID8gdW5kZWZpbmVkIDogcGFyc2VJbnQoeCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5hbWUgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93UmVuYW1lQ29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTpvYmoub3B0aW9ucy50ZXh0LnJlbmFtZVRoaXNDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXRIZWFkZXIoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNvcnRpbmdcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuY29sdW1uU29ydGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExpbmVcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHR5cGU6J2xpbmUnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6b2JqLm9wdGlvbnMudGV4dC5vcmRlckFzY2VuZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9yZGVyQnkoeCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOm9iai5vcHRpb25zLnRleHQub3JkZXJEZXNjZW5kaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3JkZXJCeSh4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgbmV3IHJvd1xuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5hbGxvd0luc2VydFJvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6b2JqLm9wdGlvbnMudGV4dC5pbnNlcnRBTmV3Um93QmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouaW5zZXJ0Um93KDEsIHBhcnNlSW50KHkpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTpvYmoub3B0aW9ucy50ZXh0Lmluc2VydEFOZXdSb3dBZnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmluc2VydFJvdygxLCBwYXJzZUludCh5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5hbGxvd0RlbGV0ZVJvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6b2JqLm9wdGlvbnMudGV4dC5kZWxldGVTZWxlY3RlZFJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kZWxldGVSb3cob2JqLmdldFNlbGVjdGVkUm93cygpLmxlbmd0aCA/IHVuZGVmaW5lZCA6IHBhcnNlSW50KHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93Q29tbWVudHMgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHR5cGU6J2xpbmUnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBvYmoucmVjb3Jkc1t5XVt4XS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSA/IG9iai5vcHRpb25zLnRleHQuZWRpdENvbW1lbnRzIDogb2JqLm9wdGlvbnMudGV4dC5hZGRDb21tZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudCA9IHByb21wdChvYmoub3B0aW9ucy50ZXh0LmNvbW1lbnRzLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNldENvbW1lbnRzKFsgeCwgeSBdLCBjb21tZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTpvYmoub3B0aW9ucy50ZXh0LmNsZWFyQ29tbWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0Q29tbWVudHMoWyB4LCB5IF0sICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaW5lXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHsgdHlwZTonbGluZScgfSk7XG5cbiAgICAgICAgICAgIC8vIENvcHlcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOm9iai5vcHRpb25zLnRleHQuY29weSxcbiAgICAgICAgICAgICAgICBzaG9ydGN1dDonQ3RybCArIEMnLFxuICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jb3B5KHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBQYXN0ZVxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IuY2xpcGJvYXJkKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOm9iai5vcHRpb25zLnRleHQucGFzdGUsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0Y3V0OidDdHJsICsgVicsXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnNlbGVjdGVkQ2VsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKS50aGVuKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnBhc3RlKG9iai5zZWxlY3RlZENlbGxbMF0sIG9iai5zZWxlY3RlZENlbGxbMV0sIHRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2F2ZVxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFsbG93RXhwb3J0KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvYmoub3B0aW9ucy50ZXh0LnNhdmVBcyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRjdXQ6ICdDdHJsICsgUycsXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kb3dubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFib3V0XG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuYWJvdXQpIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6b2JqLm9wdGlvbnMudGV4dC5hYm91dCxcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KG9iai5vcHRpb25zLmFib3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouc2Nyb2xsQ29udHJvbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5sYXp5TG9hZGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoamV4Y2VsLnRpbWVDb250cm9sTG9hZGluZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgamV4Y2VsLnRpbWVDb250cm9sTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouY29udGVudC5zY3JvbGxUb3AgKyBvYmouY29udGVudC5jbGllbnRIZWlnaHQgPj0gb2JqLmNvbnRlbnQuc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmxvYWREb3duKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmNvbnRlbnQuc2Nyb2xsVG9wICsgb2JqLmNvbnRlbnQuY2xpZW50SGVpZ2h0ID4gb2JqLmNvbnRlbnQuc2Nyb2xsSGVpZ2h0IC0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmNvbnRlbnQuc2Nyb2xsVG9wID0gb2JqLmNvbnRlbnQuc2Nyb2xsVG9wIC0gb2JqLmNvbnRlbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudXBkYXRlQ29ybmVyUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmouY29udGVudC5zY3JvbGxUb3AgPD0gb2JqLmNvbnRlbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmxvYWRVcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5jb250ZW50LnNjcm9sbFRvcCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jb250ZW50LnNjcm9sbFRvcCA9IG9iai5jb250ZW50LnNjcm9sbFRvcCArIG9iai5jb250ZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUNvcm5lclBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBqZXhjZWwudGltZUNvbnRyb2xMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xvc2UgZWRpdG9yXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5sYXp5TG9hZGluZyA9PSB0cnVlIHx8IG9iai5vcHRpb25zLnRhYmxlT3ZlcmZsb3cgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKG9iai5lZGl0aW9uICYmIGUudGFyZ2V0LmNsYXNzTmFtZS5zdWJzdHIoMCw5KSAhPSAnamRyb3Bkb3duJykge1xuICAgICAgICAgICAgICAgIG9iai5jbG9zZUVkaXRvcihvYmouZWRpdGlvblswXSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiRE9NTW91c2VTY3JvbGxcIiwgb2JqLnNjcm9sbENvbnRyb2xzKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBvYmouc2Nyb2xsQ29udHJvbHMpO1xuXG4gICAgZWwuamV4Y2VsID0gb2JqO1xuXG4gICAgb2JqLmluaXQoKTtcblxuICAgIHJldHVybiBvYmo7XG59KTtcblxuamV4Y2VsLmN1cnJlbnQgPSBudWxsO1xuamV4Y2VsLnRpbWVDb250cm9sID0gbnVsbDtcbmpleGNlbC50aW1lQ29udHJvbExvYWRpbmcgPSBudWxsO1xuXG5qZXhjZWwuZGVzdHJveSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRlc3Ryb3lFdmVudEhhbmRsZXJzKSB7XG4gICAgaWYgKGVsZW1lbnQuamV4Y2VsKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsIGVsZW1lbnQuamV4Y2VsLnNjcm9sbENvbnRyb2xzKTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBlbGVtZW50LmpleGNlbC5zY3JvbGxDb250cm9scyk7XG4gICAgICAgIGVsZW1lbnQuamV4Y2VsID0gbnVsbDtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBpZiAoZGVzdHJveUV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGpleGNlbC5rZXlEb3duQ29udHJvbHMpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgamV4Y2VsLm1vdXNlVXBDb250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGpleGNlbC5tb3VzZURvd25Db250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGpleGNlbC5tb3VzZU1vdmVDb250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGpleGNlbC5tb3VzZU92ZXJDb250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgamV4Y2VsLmRvdWJsZUNsaWNrQ29udHJvbHMpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhc3RlXCIsIGpleGNlbC5wYXN0ZUNvbnRyb2xzKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBqZXhjZWwuY29udGV4dE1lbnVDb250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBqZXhjZWwudG91Y2hTdGFydENvbnRyb2xzKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBqZXhjZWwudG91Y2hFbmRDb250cm9scyk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgamV4Y2VsLnRvdWNoRW5kQ29udHJvbHMpO1xuICAgICAgICAgICAgamV4Y2VsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuamV4Y2VsLmJ1aWxkID0gZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgamV4Y2VsLmtleURvd25Db250cm9scyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgamV4Y2VsLm1vdXNlVXBDb250cm9scyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBqZXhjZWwubW91c2VEb3duQ29udHJvbHMpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgamV4Y2VsLm1vdXNlTW92ZUNvbnRyb2xzKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGpleGNlbC5tb3VzZU92ZXJDb250cm9scyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIGpleGNlbC5kb3VibGVDbGlja0NvbnRyb2xzKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgamV4Y2VsLnBhc3RlQ29udHJvbHMpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBqZXhjZWwuY29udGV4dE1lbnVDb250cm9scyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgamV4Y2VsLnRvdWNoU3RhcnRDb250cm9scyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGpleGNlbC50b3VjaEVuZENvbnRyb2xzKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgamV4Y2VsLnRvdWNoRW5kQ29udHJvbHMpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgamV4Y2VsLnRvdWNoRW5kQ29udHJvbHMpO1xufVxuXG4vKipcbiAqIEV2ZW50c1xuICovXG5qZXhjZWwua2V5RG93bkNvbnRyb2xzID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChqZXhjZWwuY3VycmVudCkge1xuICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZWRpdGlvbikge1xuICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMjcpIHtcbiAgICAgICAgICAgICAgICAvLyBFc2NhcGVcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZWRpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeGl0IHdpdGhvdXQgc2F2aW5nXG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNsb3NlRWRpdG9yKGpleGNlbC5jdXJyZW50LmVkaXRpb25bMF0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDEzKSB7XG4gICAgICAgICAgICAgICAgLy8gRW50ZXJcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb2x1bW5zW2pleGNlbC5jdXJyZW50LmVkaXRpb25bMl1dLnR5cGUgPT0gJ2NhbGVuZGFyJykge1xuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5lZGl0b3JbMF0uY2hpbGRyZW5bMF0uY2FsZW5kYXIuY2xvc2UoMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtbnNbamV4Y2VsLmN1cnJlbnQuZWRpdGlvblsyXV0udHlwZSA9PSAnZHJvcGRvd24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtbnNbamV4Y2VsLmN1cnJlbnQuZWRpdGlvblsyXV0udHlwZSA9PSAnYXV0b2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWx0IGVudGVyIC0+IGRvIG5vdCBjbG9zZSBlZGl0b3JcbiAgICAgICAgICAgICAgICAgICAgaWYgKChqZXhjZWwuY3VycmVudC5vcHRpb25zLndvcmRXcmFwID09IHRydWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtbnNbamV4Y2VsLmN1cnJlbnQuZWRpdGlvblsyXV0ud29yZFdyYXAgPT0gdHJ1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuZGF0YVtqZXhjZWwuY3VycmVudC5lZGl0aW9uWzNdXVtqZXhjZWwuY3VycmVudC5lZGl0aW9uWzJdXS5sZW5ndGggPiAyMDApICYmIGUuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbmV3IGxpbmUgdG8gdGhlIGVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkaXRvclRleHRhcmVhID0gamV4Y2VsLmN1cnJlbnQuZWRpdGlvblswXS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZGl0b3JWYWx1ZSA9IGpleGNlbC5jdXJyZW50LmVkaXRpb25bMF0uY2hpbGRyZW5bMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWRpdG9ySW5kZXhPZiA9IGVkaXRvclRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFsdWUgPSBlZGl0b3JWYWx1ZS5zbGljZSgwLCBlZGl0b3JJbmRleE9mKSArIFwiXFxuXCIgKyBlZGl0b3JWYWx1ZS5zbGljZShlZGl0b3JJbmRleE9mKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvclRleHRhcmVhLnZhbHVlID0gZWRpdG9yVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JUZXh0YXJlYS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQgPSBlZGl0b3JJbmRleE9mICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvclRleHRhcmVhLnNlbGVjdGlvbkVuZCA9IGVkaXRvckluZGV4T2YgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuZWRpdGlvblswXS5jaGlsZHJlblswXS5ibHVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gOSkge1xuICAgICAgICAgICAgICAgIC8vIFRhYlxuICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtbnNbamV4Y2VsLmN1cnJlbnQuZWRpdGlvblsyXV0udHlwZSA9PSAnY2FsZW5kYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmVkaXRpb25bMF0uY2hpbGRyZW5bMF0uY2FsZW5kYXIuY2xvc2UoMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuZWRpdGlvblswXS5jaGlsZHJlblswXS5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEgamV4Y2VsLmN1cnJlbnQuZWRpdGlvbiAmJiBqZXhjZWwuY3VycmVudC5zZWxlY3RlZENlbGwpIHtcbiAgICAgICAgICAgIC8vIFdoaWNoIGtleVxuICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMzcpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5sZWZ0KGUuc2hpZnRLZXksIGUuY3RybEtleSk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDM5KSB7XG4gICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmlnaHQoZS5zaGlmdEtleSwgZS5jdHJsS2V5KTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzgpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cChlLnNoaWZ0S2V5LCBlLmN0cmxLZXkpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA0MCkge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRvd24oZS5zaGlmdEtleSwgZS5jdHJsS2V5KTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzYpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5maXJzdChlLnNoaWZ0S2V5LCBlLmN0cmxLZXkpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSAzNSkge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50Lmxhc3QoZS5zaGlmdEtleSwgZS5jdHJsS2V5KTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzIpIHtcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5lZGl0YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNldENoZWNrUmFkaW9WYWx1ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gNDYpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWxldGVcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5lZGl0YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3RlZFJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuYWxsb3dEZWxldGVSb3cgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMudGV4dC5hcmVZb3VTdXJlVG9EZWxldGVUaGVTZWxlY3RlZFJvd3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRlbGV0ZVJvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuYWxsb3dEZWxldGVDb2x1bW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMudGV4dC5hcmVZb3VTdXJlVG9EZWxldGVUaGVTZWxlY3RlZENvbHVtbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRlbGV0ZUNvbHVtbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoYW5nZSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuc2V0VmFsdWUoamV4Y2VsLmN1cnJlbnQuaGlnaGxpZ2h0ZWQsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSAxMykge1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgY3Vyc29yXG4gICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQudXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5hbGxvd0luc2VydFJvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5hbGxvd01hbnVhbEluc2VydFJvdyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbFsxXSA9PSBqZXhjZWwuY3VycmVudC5vcHRpb25zLmRhdGEubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXcgcmVjb3JkIGluIGNhc2Ugc2VsZWN0ZWRDZWxsIGluIHRoZSBsYXN0IHJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5pbnNlcnRSb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5kb3duKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGFiXG4gICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQubGVmdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmFsbG93SW5zZXJ0Q29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmFsbG93TWFudWFsSW5zZXJ0Q29sdW1uID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRDZWxsWzBdID09IGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuZGF0YVswXS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyByZWNvcmQgaW4gY2FzZSBzZWxlY3RlZENlbGwgaW4gdGhlIGxhc3QgY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50Lmluc2VydENvbHVtbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiAhIGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gNjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN0cmwgKyBBXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZWxlY3RBbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDgzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDdHJsICsgU1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuZG93bmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDg5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDdHJsICsgWVxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVkbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gOTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN0cmwgKyBaXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51bmRvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA2Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3RybCArIENcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNvcHkodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA2Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3RybCArIENcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNvcHkodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA4OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3RybCArIFhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmVkaXRhYmxlID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3V0Q29udHJvbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmNvcHlDb250cm9scygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gODYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN0cmwgKyBWXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwucGFzdGVDb250cm9scygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuZWRpdGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dJZCA9IGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uSWQgPSBqZXhjZWwuY3VycmVudC5zZWxlY3RlZENlbGxbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBpcyBub3QgcmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb2x1bW5zW2NvbHVtbklkXS50eXBlICE9ICdyZWFkb25seScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hhcmFjdGVycyBhYmxlIHRvIHN0YXJ0IGEgZWRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuY29sdW1uc1tjb2x1bW5JZF0udHlwZSA9PSAnY2hlY2tib3gnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb2x1bW5zW2NvbHVtbklkXS50eXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGVkaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5vcGVuRWRpdG9yKGpleGNlbC5jdXJyZW50LnJlY29yZHNbcm93SWRdW2NvbHVtbklkXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDExMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgZWRpdGlvbiB3aXRoIGN1cnJlbnQgY29udGVudCBGMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQub3BlbkVkaXRvcihqZXhjZWwuY3VycmVudC5yZWNvcmRzW3Jvd0lkXVtjb2x1bW5JZF0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoZS5rZXlDb2RlID09IDgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUua2V5Q29kZSA+PSA0OCAmJiBlLmtleUNvZGUgPD0gNTcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUua2V5Q29kZSA+PSA5NiAmJiBlLmtleUNvZGUgPD0gMTExKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPT0gMTg3KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPT0gMTg5KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoU3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpID09IGUua2V5IHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKS50b0xvd2VyQ2FzZSgpID09IGUua2V5LnRvTG93ZXJDYXNlKCkpICYmIGpleGNlbC52YWxpZExldHRlcihTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgZWRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQub3BlbkVkaXRvcihqZXhjZWwuY3VycmVudC5yZWNvcmRzW3Jvd0lkXVtjb2x1bW5JZF0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBlbnRyaWVzIGluIHRoZSBjYWxlbmRhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuY29sdW1uc1tjb2x1bW5JZF0udHlwZSA9PSAnY2FsZW5kYXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamV4Y2VsX3NlYXJjaCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpleGNlbC50aW1lQ29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoamV4Y2VsLnRpbWVDb250cm9sKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqZXhjZWwudGltZUNvbnRyb2wgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZWFyY2goZS50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmpleGNlbC5pc01vdXNlQWN0aW9uID0gZmFsc2U7XG5cbmpleGNlbC5tb3VzZURvd25Db250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKGUuYnV0dG9ucykge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLmJ1dHRvbnM7XG4gICAgfSBlbHNlIGlmIChlLmJ1dHRvbikge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLmJ1dHRvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLndoaWNoO1xuICAgIH1cblxuICAgIC8vIEdldCBlbGVtZW50c1xuICAgIHZhciBqZXhjZWxUYWJsZSA9IGpleGNlbC5nZXRFbGVtZW50KGUudGFyZ2V0KTtcblxuICAgIGlmIChqZXhjZWxUYWJsZVswXSkge1xuICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQgIT0gamV4Y2VsVGFibGVbMF0uamV4Y2VsKSB7XG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZXNldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQgPSBqZXhjZWxUYWJsZVswXS5qZXhjZWw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJlc2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGpleGNlbC5jdXJyZW50ICYmIG1vdXNlQnV0dG9uID09IDEpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamV4Y2VsX3NlbGVjdGFsbCcpKSB7XG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZWxlY3RBbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pleGNlbF9jb3JuZXInKSkge1xuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuZWRpdGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ29ybmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEhlYWRlciBmb3VuZFxuICAgICAgICAgICAgaWYgKGpleGNlbFRhYmxlWzFdID09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uSWQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY3Vyc29yXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmZvID0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtblJlc2l6ZSA9PSB0cnVlICYmIGluZm8ud2lkdGggLSBlLm9mZnNldFggPCA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNpemUgaGVscGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZXNpemluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZVBvc2l0aW9uOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGluZm8ud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCb3JkZXIgaW5kaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuaGVhZGVyc1tjb2x1bW5JZF0uY2xhc3NMaXN0LmFkZCgncmVzaXppbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamV4Y2VsLmN1cnJlbnQucmVjb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2NvbHVtbklkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2NvbHVtbklkXS5jbGFzc0xpc3QuYWRkKCdyZXNpemluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqZXhjZWwuY3VycmVudC5vcHRpb25zLmNvbHVtbkRyYWcgPT0gdHJ1ZSAmJiBpbmZvLmhlaWdodCAtIGUub2Zmc2V0WSA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5pc0NvbE1lcmdlZChjb2x1bW5JZCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMOiBUaGlzIGNvbHVtbiBpcyBwYXJ0IG9mIGEgbWVyZ2VkIGNlbGwuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRHJhZyBoZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5kcmFnZ2luZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjpjb2x1bW5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246Y29sdW1uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCb3JkZXIgaW5kaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbY29sdW1uSWRdLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqZXhjZWwuY3VycmVudC5yZWNvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2NvbHVtbklkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVjb3Jkc1tqXVtjb2x1bW5JZF0uY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3RlZEhlYWRlciAmJiAoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBqZXhjZWwuY3VycmVudC5zZWxlY3RlZEhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGNvbHVtbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVzcyB0byByZW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRIZWFkZXIgPT0gY29sdW1uSWQgJiYgamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5hbGxvd1JlbmFtZUNvbHVtbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC50aW1lQ29udHJvbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZXRIZWFkZXIoY29sdW1uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA4MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggaGVhZGVyIHdhcyBzZWxlY3RlZCBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkSGVhZGVyID0gY29sdW1uSWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc2VsZWN0aW9uIHNpbmdsZSBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGNvbHVtbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gY29sdW1uSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMobywgMCwgZCwgamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5kYXRhLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZXhjZWxfbmVzdGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sdW1uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbHVtbicpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMxID0gcGFyc2VJbnQoY29sdW1uWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSBwYXJzZUludChjb2x1bW5bY29sdW1uLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMxID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuY29sdW1ucy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKGMxLCAwLCBjMiwgamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5kYXRhLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZWxlY3RlZEhlYWRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCb2R5IGZvdW5kXG4gICAgICAgICAgICBpZiAoamV4Y2VsVGFibGVbMV0gPT0gMikge1xuICAgICAgICAgICAgICAgIHZhciByb3dJZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZXhjZWxfcm93JykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50Lm9wdGlvbnMucm93UmVzaXplID09IHRydWUgJiYgaW5mby5oZWlnaHQgLSBlLm9mZnNldFkgPCA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNpemUgaGVscGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZXNpemluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlLnRhcmdldC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlUG9zaXRpb246IGUucGFnZVksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93OiByb3dJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGluZm8uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJvcmRlciBpbmRpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ3Jlc2l6aW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5yb3dEcmFnID09IHRydWUgJiYgaW5mby53aWR0aCAtIGUub2Zmc2V0WCA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5pc1Jvd01lcmdlZChyb3dJZCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMOiBUaGlzIHJvdyBpcyBwYXJ0IG9mIGEgbWVyZ2VkIGNlbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5zZWFyY2ggPT0gdHJ1ZSAmJiBqZXhjZWwuY3VycmVudC5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMOiBQbGVhc2UgY2xlYXIgeW91ciBzZWFyY2ggYmVmb3JlIHBlcmZvcm0gdGhpcyBhY3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVzZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEcmFnIGhlbHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRyYWdnaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlLnRhcmdldC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6cm93SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOnJvd0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm9yZGVyIGluZGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRSb3cgJiYgKGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRSb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSByb3dJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiB3aGljaCBoZWFkZXIgd2FzIHNlbGVjdGVkIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRSb3cgPSByb3dJZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzZWxlY3Rpb24gc2luZ2xlIGNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gcm93SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSByb3dJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcygwLCBvLCBqZXhjZWwuY3VycmVudC5vcHRpb25zLmRhdGFbMF0ubGVuZ3RoIC0gMSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBKY2xvc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamNsb3NlJykgJiYgZS50YXJnZXQuY2xpZW50V2lkdGggLSBlLm9mZnNldFggPCA1MCAmJiBlLm9mZnNldFkgPCA1MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY2xvc2VFZGl0b3IoamV4Y2VsLmN1cnJlbnQuZWRpdGlvblswXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0Q2VsbENvb3JkcyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCAmJiB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbeCwgeV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxDb29yZHMoZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGdldENlbGxDb29yZHMoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbklkID0gcG9zaXRpb25bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd0lkID0gcG9zaXRpb25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xvc2UgZWRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5lZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5lZGl0aW9uWzJdICE9IGNvbHVtbklkIHx8IGpleGNlbC5jdXJyZW50LmVkaXRpb25bM10gIT0gcm93SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNsb3NlRWRpdG9yKGpleGNlbC5jdXJyZW50LmVkaXRpb25bMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgamV4Y2VsLmN1cnJlbnQuZWRpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY2VsbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRDZWxsWzBdLCBqZXhjZWwuY3VycmVudC5zZWxlY3RlZENlbGxbMV0sIGNvbHVtbklkLCByb3dJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKGNvbHVtbklkLCByb3dJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBmdWxsIHJvdyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkSGVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZWxlY3RlZFJvdyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkUm93ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBhZ2luYXRpb25cbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pleGNlbF9wYWdlJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuaW5uZXJUZXh0ID09ICc8Jykge1xuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5wYWdlKDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuaW5uZXJUZXh0ID09ICc+Jykge1xuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5wYWdlKGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgndGl0bGUnKSAtIDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnBhZ2UoZS50YXJnZXQuaW5uZXJUZXh0IC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmVkaXRpb24pIHtcbiAgICAgICAgICAgIGpleGNlbC5pc01vdXNlQWN0aW9uID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqZXhjZWwuaXNNb3VzZUFjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBqZXhjZWwuaXNNb3VzZUFjdGlvbiA9IGZhbHNlO1xuICAgIH1cbn1cblxuamV4Y2VsLm1vdXNlVXBDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoamV4Y2VsLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gVXBkYXRlIGNlbGwgc2l6ZVxuICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQucmVzaXppbmcpIHtcbiAgICAgICAgICAgIC8vIENvbHVtbnMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLmNvbHVtbikge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBDbGFzc1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbamV4Y2VsLmN1cnJlbnQucmVzaXppbmcuY29sdW1uXS5jbGFzc0xpc3QucmVtb3ZlKCdyZXNpemluZycpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IGpleGNlbC5jdXJyZW50LmNvbGdyb3VwW2pleGNlbC5jdXJyZW50LnJlc2l6aW5nLmNvbHVtbl0uZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNldFdpZHRoKGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLmNvbHVtbiwgbmV3V2lkdGgsIGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLndpZHRoKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYm9yZGVyXG4gICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuaGVhZGVyc1tqZXhjZWwuY3VycmVudC5yZXNpemluZy5jb2x1bW5dLmNsYXNzTGlzdC5yZW1vdmUoJ3Jlc2l6aW5nJyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqZXhjZWwuY3VycmVudC5yZWNvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2pleGNlbC5jdXJyZW50LnJlc2l6aW5nLmNvbHVtbl0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVjb3Jkc1tqXVtqZXhjZWwuY3VycmVudC5yZXNpemluZy5jb2x1bW5dLmNsYXNzTGlzdC5yZW1vdmUoJ3Jlc2l6aW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBDbGFzc1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJvd3NbamV4Y2VsLmN1cnJlbnQucmVzaXppbmcucm93XS5jaGlsZHJlblswXS5jbGFzc0xpc3QucmVtb3ZlKCdyZXNpemluZycpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSBqZXhjZWwuY3VycmVudC5yb3dzW2pleGNlbC5jdXJyZW50LnJlc2l6aW5nLnJvd10uZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5zZXRIZWlnaHQoamV4Y2VsLmN1cnJlbnQucmVzaXppbmcucm93LCBuZXdIZWlnaHQsIGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGJvcmRlclxuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncmVzaXppbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlc2V0IHJlc2l6aW5nIGhlbHBlclxuICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVzaXppbmcgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGpleGNlbC5jdXJyZW50LmRyYWdnaW5nKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBkcmFnZ2luZyBoZWxwZXJcbiAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5kcmFnZ2luZykge1xuICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5kcmFnZ2luZy5jb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5JZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBtb3ZlIHN0eWxlXG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuY29sdW1uXS5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpleGNlbC5jdXJyZW50LnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2pleGNlbC5jdXJyZW50LmRyYWdnaW5nLmNvbHVtbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZWNvcmRzW2pdW2pleGNlbC5jdXJyZW50LmRyYWdnaW5nLmNvbHVtbl0uY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpleGNlbC5jdXJyZW50LmhlYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmctbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuaGVhZGVyc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZy1yaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5kcmFnZ2luZy5jb2x1bW4gIT0gamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5tb3ZlQ29sdW1uKGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmNvbHVtbiwgamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChqZXhjZWwuY3VycmVudC5kcmFnZ2luZy5lbGVtZW50LnBhcmVudE5vZGUuY2hpbGRyZW4sIGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcucm93ICE9IHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5tb3ZlUm93KGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLnJvdywgcG9zaXRpb24sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2xvc2UgYW55IGNvcm5lciBzZWxlY3Rpb25cbiAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3RlZENvcm5lcikge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ29ybmVyID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBEYXRhIHRvIGJlIGNvcGllZFxuICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb3B5IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY29weURhdGEoamV4Y2VsLmN1cnJlbnQuc2VsZWN0aW9uWzBdLCBqZXhjZWwuY3VycmVudC5zZWxlY3Rpb25bamV4Y2VsLmN1cnJlbnQuc2VsZWN0aW9uLmxlbmd0aCAtIDFdKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJlbW92ZUNvcHlTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDbGVhciBhbnkgdGltZSBjb250cm9sXG4gICAgaWYgKGpleGNlbC50aW1lQ29udHJvbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoamV4Y2VsLnRpbWVDb250cm9sKTtcbiAgICAgICAgamV4Y2VsLnRpbWVDb250cm9sID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBNb3VzZSB1cFxuICAgIGpleGNlbC5pc01vdXNlQWN0aW9uID0gZmFsc2U7XG59XG5cbi8vIE1vdXNlIG1vdmUgY29udHJvbHNcbmpleGNlbC5tb3VzZU1vdmVDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKGUuYnV0dG9ucykge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLmJ1dHRvbnM7XG4gICAgfSBlbHNlIGlmIChlLmJ1dHRvbikge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLmJ1dHRvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbW91c2VCdXR0b24gPSBlLndoaWNoO1xuICAgIH1cblxuICAgIGlmICghIG1vdXNlQnV0dG9uKSB7XG4gICAgICAgIGpleGNlbC5pc01vdXNlQWN0aW9uID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgIGlmIChqZXhjZWwuaXNNb3VzZUFjdGlvbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBSZXNpemluZyBpcyBvbmdvaW5nXG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQucmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQucmVzaXppbmcuY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGUucGFnZVggLSBqZXhjZWwuY3VycmVudC5yZXNpemluZy5tb3VzZVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZXNpemluZy53aWR0aCArIHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBXaWR0aCA9IGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLndpZHRoICsgd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5jb2xncm91cFtqZXhjZWwuY3VycmVudC5yZXNpemluZy5jb2x1bW5dLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0ZW1wV2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVDb3JuZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGUucGFnZVkgLSBqZXhjZWwuY3VycmVudC5yZXNpemluZy5tb3VzZVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5yZXNpemluZy5oZWlnaHQgKyBoZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcEhlaWdodCA9IGpleGNlbC5jdXJyZW50LnJlc2l6aW5nLmhlaWdodCArIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnJvd3NbamV4Y2VsLmN1cnJlbnQucmVzaXppbmcucm93XS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRlbXBIZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVDb3JuZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgdmFyIHkgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmN1cnNvci5zdHlsZS5jdXJzb3IgPSAnJztcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5jdXJzb3IgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlICYmIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncmVzaXphYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICYmIHggJiYgISB5ICYmIChyZWN0LndpZHRoIC0gKGUuY2xpZW50WCAtIHJlY3QubGVmdCkgPCA2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY3Vyc29yID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5jdXJzb3Iuc3R5bGUuY3Vyc29yID0gJ2NvbC1yZXNpemUnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ICYmICEgeCAmJiB5ICYmIChyZWN0LmhlaWdodCAtIChlLmNsaWVudFkgLSByZWN0LnRvcCkgPCA2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY3Vyc29yID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5jdXJzb3Iuc3R5bGUuY3Vyc29yID0gJ3Jvdy1yZXNpemUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2RyYWdnYWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCAmJiAhIHggJiYgeSAmJiAocmVjdC53aWR0aCAtIChlLmNsaWVudFggLSByZWN0LmxlZnQpIDwgNikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmN1cnNvciA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY3Vyc29yLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldCAmJiB4ICYmICEgeSAmJiAocmVjdC5oZWlnaHQgLSAoZS5jbGllbnRZIC0gcmVjdC50b3ApIDwgNikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmN1cnNvciA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY3Vyc29yLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuamV4Y2VsLm1vdXNlT3ZlckNvbnRyb2xzID0gZnVuY3Rpb24oZSkge1xuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICBpZiAoZS5idXR0b25zKSB7XG4gICAgICAgIHZhciBtb3VzZUJ1dHRvbiA9IGUuYnV0dG9ucztcbiAgICB9IGVsc2UgaWYgKGUuYnV0dG9uKSB7XG4gICAgICAgIHZhciBtb3VzZUJ1dHRvbiA9IGUuYnV0dG9uO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb3VzZUJ1dHRvbiA9IGUud2hpY2g7XG4gICAgfVxuXG4gICAgaWYgKCEgbW91c2VCdXR0b24pIHtcbiAgICAgICAgamV4Y2VsLmlzTW91c2VBY3Rpb24gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoamV4Y2VsLmN1cnJlbnQgJiYgamV4Y2VsLmlzTW91c2VBY3Rpb24gPT0gdHJ1ZSkge1xuICAgICAgICAvLyBHZXQgZWxlbWVudHNcbiAgICAgICAgdmFyIGpleGNlbFRhYmxlID0gamV4Y2VsLmdldEVsZW1lbnQoZS50YXJnZXQpO1xuXG4gICAgICAgIGlmIChqZXhjZWxUYWJsZVswXSkge1xuICAgICAgICAgICAgLy8gQXZvaWQgY3Jvc3MgcmVmZXJlbmNlXG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQgIT0gamV4Y2VsVGFibGVbMF0uamV4Y2VsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb2x1bW5JZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICB2YXIgcm93SWQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpO1xuXG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmlzQ29sTWVyZ2VkKGNvbHVtbklkKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdKRVhDRUw6IFRoaXMgY29sdW1uIGlzIHBhcnQgb2YgYSBtZXJnZWQgY2VsbC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqZXhjZWwuY3VycmVudC5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmctbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5oZWFkZXJzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmNvbHVtbiA9PSBjb2x1bW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5kcmFnZ2luZy5kZXN0aW5hdGlvbiA9IHBhcnNlSW50KGNvbHVtbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xpZW50V2lkdGggLyAyID4gZS5vZmZzZXRYKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuY29sdW1uIDwgY29sdW1uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5kcmFnZ2luZy5kZXN0aW5hdGlvbiA9IHBhcnNlSW50KGNvbHVtbklkKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmRlc3RpbmF0aW9uID0gcGFyc2VJbnQoY29sdW1uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuaGVhZGVyc1tjb2x1bW5JZF0uY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmctbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmNvbHVtbiA8IGNvbHVtbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuZHJhZ2dpbmcuZGVzdGluYXRpb24gPSBwYXJzZUludChjb2x1bW5JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmRlc3RpbmF0aW9uID0gcGFyc2VJbnQoY29sdW1uSWQpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmhlYWRlcnNbY29sdW1uSWRdLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5pc1Jvd01lcmdlZChyb3dJZCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSkVYQ0VMOiBUaGlzIHJvdyBpcyBwYXJ0IG9mIGEgbWVyZ2VkIGNlbGwuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoZS50YXJnZXQuY2xpZW50SGVpZ2h0IC8gMiA+IGUub2Zmc2V0WSkgPyBlLnRhcmdldC5wYXJlbnROb2RlLm5leHRTaWJsaW5nIDogZS50YXJnZXQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpleGNlbC5jdXJyZW50LmRyYWdnaW5nLmVsZW1lbnQsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpleGNlbC5jdXJyZW50LnJlc2l6aW5nKSB7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhlYWRlciBmb3VuZFxuICAgICAgICAgICAgICAgIGlmIChqZXhjZWxUYWJsZVsxXSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5zZWxlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbklkID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRIZWFkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGNvbHVtbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhvLCAwLCBkLCBqZXhjZWwuY3VycmVudC5vcHRpb25zLmRhdGEubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBCb2R5IGZvdW5kXG4gICAgICAgICAgICAgICAgaWYgKGpleGNlbFRhYmxlWzFdID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamV4Y2VsX3JvdycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRSb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGpleGNlbC5jdXJyZW50LnNlbGVjdGVkUm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gcm93SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnVwZGF0ZVNlbGVjdGlvbkZyb21Db29yZHMoMCwgbywgamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5kYXRhWzBdLmxlbmd0aCAtIDEsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHNlbGVjdCBlZHRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIGpleGNlbC5jdXJyZW50LmVkaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uSWQgJiYgcm93SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ29ybmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVDb3B5U2VsZWN0aW9uKGNvbHVtbklkLCByb3dJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRDZWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQudXBkYXRlU2VsZWN0aW9uRnJvbUNvb3JkcyhqZXhjZWwuY3VycmVudC5zZWxlY3RlZENlbGxbMF0sIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbFsxXSwgY29sdW1uSWQsIHJvd0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsZWFyIGFueSB0aW1lIGNvbnRyb2xcbiAgICBpZiAoamV4Y2VsLnRpbWVDb250cm9sKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChqZXhjZWwudGltZUNvbnRyb2wpO1xuICAgICAgICBqZXhjZWwudGltZUNvbnRyb2wgPSBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEb3VibGUgY2xpY2sgZXZlbnQgaGFuZGxlcjogY29udHJvbHMgdGhlIGRvdWJsZSBjbGljayBpbiB0aGUgY29ybmVyLCBjZWxsIGVkaXRpb24gb3IgY29sdW1uIHJlLW9yZGVyaW5nLlxuICovXG5qZXhjZWwuZG91YmxlQ2xpY2tDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAvLyBKZXhjZWwgaXMgc2VsZWN0ZWRcbiAgICBpZiAoamV4Y2VsLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gQ29ybmVyIGFjdGlvblxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZXhjZWxfY29ybmVyJykpIHtcbiAgICAgICAgICAgIC8vIEFueSBzZWxlY3RlZCBjZWxsc1xuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50LmhpZ2hsaWdodGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBDb3B5IGZyb20gdGhpc1xuICAgICAgICAgICAgICAgIHZhciB4MSA9IGpleGNlbC5jdXJyZW50LmhpZ2hsaWdodGVkWzBdLmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICAgICAgdmFyIHkxID0gcGFyc2VJbnQoamV4Y2VsLmN1cnJlbnQuaGlnaGxpZ2h0ZWRbamV4Y2VsLmN1cnJlbnQuaGlnaGxpZ2h0ZWQubGVuZ3RoIC0gMV0uZ2V0QXR0cmlidXRlKCdkYXRhLXknKSkgKyAxO1xuICAgICAgICAgICAgICAgIC8vIFVudGlsIHRoaXNcbiAgICAgICAgICAgICAgICB2YXIgeDIgPSBqZXhjZWwuY3VycmVudC5oaWdobGlnaHRlZFtqZXhjZWwuY3VycmVudC5oaWdobGlnaHRlZC5sZW5ndGggLSAxXS5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgIHZhciB5MiA9IGpleGNlbC5jdXJyZW50LnJlY29yZHMubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgY29weVxuICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNvcHlEYXRhKGpleGNlbC5jdXJyZW50LnJlY29yZHNbeTFdW3gxXSwgamV4Y2VsLmN1cnJlbnQucmVjb3Jkc1t5Ml1beDJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEdldCB0YWJsZVxuICAgICAgICAgICAgdmFyIGpleGNlbFRhYmxlID0gamV4Y2VsLmdldEVsZW1lbnQoZS50YXJnZXQpO1xuXG4gICAgICAgICAgICAvLyBEb3VibGUgY2xpY2sgb3ZlciBoZWFkZXJcbiAgICAgICAgICAgIGlmIChqZXhjZWxUYWJsZVsxXSA9PSAxICYmIGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuY29sdW1uU29ydGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdmFsaWQgY29sdW1uIGhlYWRlciBjb29yZHNcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uSWQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5JZCkge1xuICAgICAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC5vcmRlckJ5KGNvbHVtbklkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERvdWJsZSBjbGljayBvdmVyIGJvZHlcbiAgICAgICAgICAgIGlmIChqZXhjZWxUYWJsZVsxXSA9PSAyICYmIGpleGNlbC5jdXJyZW50Lm9wdGlvbnMuZWRpdGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghIGpleGNlbC5jdXJyZW50LmVkaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdldENlbGxDb29yZHMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS15Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggJiYgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbENvb3JkcyhlbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IGdldENlbGxDb29yZHMoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLmNsYXNzTGlzdC5jb250YWlucygnaGlnaGxpZ2h0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50Lm9wZW5FZGl0b3IoY2VsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmpleGNlbC5jb3B5Q29udHJvbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGpleGNlbC5jdXJyZW50ICYmIGpleGNlbC5jb3B5Q29udHJvbHMuZW5hYmxlZCkge1xuICAgICAgICBpZiAoISBqZXhjZWwuY3VycmVudC5lZGl0aW9uKSB7XG4gICAgICAgICAgICBqZXhjZWwuY3VycmVudC5jb3B5KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5qZXhjZWwuY3V0Q29udHJvbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgIGlmICghIGpleGNlbC5jdXJyZW50LmVkaXRpb24pIHtcbiAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNvcHkodHJ1ZSk7XG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5lZGl0YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuc2V0VmFsdWUoamV4Y2VsLmN1cnJlbnQuaGlnaGxpZ2h0ZWQsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuamV4Y2VsLnBhc3RlQ29udHJvbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGpleGNlbC5jdXJyZW50ICYmIGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbCkge1xuICAgICAgICBpZiAoISBqZXhjZWwuY3VycmVudC5lZGl0aW9uKSB7XG4gICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5lZGl0YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5jbGlwYm9hcmREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LnBhc3RlKGpleGNlbC5jdXJyZW50LnNlbGVjdGVkQ2VsbFswXSwgamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRDZWxsWzFdLCBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dCcpKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucGFzdGUoamV4Y2VsLmN1cnJlbnQuc2VsZWN0ZWRDZWxsWzBdLCBqZXhjZWwuY3VycmVudC5zZWxlY3RlZENlbGxbMV0sIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5qZXhjZWwuY29udGV4dE1lbnVDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKFwiYnV0dG9uc1wiIGluIGUpIHtcbiAgICAgICAgdmFyIG1vdXNlQnV0dG9uID0gZS5idXR0b25zO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb3VzZUJ1dHRvbiA9IGUud2hpY2ggfHwgZS5idXR0b247XG4gICAgfVxuXG4gICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgIGlmIChqZXhjZWwuY3VycmVudC5lZGl0aW9uKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb250ZXh0TWVudSkge1xuICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQuY29udGV4dE1lbnUuY29udGV4dG1lbnUuY2xvc2UoKTtcblxuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteCcpO1xuICAgICAgICAgICAgICAgIHZhciB5ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXknKTtcblxuICAgICAgICAgICAgICAgIGlmICh4IHx8IHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGFibGUgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb250ZXh0TWVudShqZXhjZWwuY3VycmVudCwgeCwgeSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBpZCBpcyBkZXBlbmRpbmcgb24gaGVhZGVyIGFuZCBib2R5XG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50LmNvbnRleHRNZW51LmNvbnRleHRtZW51Lm9wZW4oZSwgaXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCB0aGUgcmVhbCBvbmVcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuamV4Y2VsLnRvdWNoU3RhcnRDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgamV4Y2VsVGFibGUgPSBqZXhjZWwuZ2V0RWxlbWVudChlLnRhcmdldCk7XG5cbiAgICBpZiAoamV4Y2VsVGFibGVbMF0pIHtcbiAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50ICE9IGpleGNlbFRhYmxlWzBdLmpleGNlbCkge1xuICAgICAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQucmVzZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpleGNlbC5jdXJyZW50ID0gamV4Y2VsVGFibGVbMF0uamV4Y2VsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgICAgICBqZXhjZWwuY3VycmVudC5yZXNldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgamV4Y2VsLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGpleGNlbC5jdXJyZW50KSB7XG4gICAgICAgIGlmICghIGpleGNlbC5jdXJyZW50LmVkaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBjb2x1bW5JZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS14Jyk7XG4gICAgICAgICAgICB2YXIgcm93SWQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteScpO1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uSWQgJiYgcm93SWQpIHtcbiAgICAgICAgICAgICAgICBqZXhjZWwuY3VycmVudC51cGRhdGVTZWxlY3Rpb25Gcm9tQ29vcmRzKGNvbHVtbklkLCByb3dJZCk7XG5cbiAgICAgICAgICAgICAgICBqZXhjZWwudGltZUNvbnRyb2wgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIHRlbXBvcmFyeSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoamV4Y2VsLmN1cnJlbnQub3B0aW9ucy5jb2x1bW5zW2NvbHVtbklkXS50eXBlID09ICdjb2xvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgamV4Y2VsLnRtcEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpleGNlbC50bXBFbGVtZW50ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGpleGNlbC5jdXJyZW50Lm9wZW5FZGl0b3IoZS50YXJnZXQsIGZhbHNlLCBlKTtcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5qZXhjZWwudG91Y2hFbmRDb250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAvLyBDbGVhciBhbnkgdGltZSBjb250cm9sXG4gICAgaWYgKGpleGNlbC50aW1lQ29udHJvbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoamV4Y2VsLnRpbWVDb250cm9sKTtcbiAgICAgICAgamV4Y2VsLnRpbWVDb250cm9sID0gbnVsbDtcbiAgICAgICAgLy8gRWxlbWVudFxyXG4gICAgICAgIGlmIChqZXhjZWwudG1wRWxlbWVudCAmJiBqZXhjZWwudG1wRWxlbWVudC5jaGlsZHJlblswXS50YWdOYW1lID09ICdJTlBVVCcpIHtcclxuICAgICAgICAgICAgamV4Y2VsLnRtcEVsZW1lbnQuY2hpbGRyZW5bMF0uZm9jdXMoKTtcclxuICAgICAgICB9XG4gICAgICAgIGpleGNlbC50bXBFbGVtZW50ID0gbnVsbDtcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBKZXhjZWwgZXh0ZW5zaW9uc1xyXG4gKi9cclxuXHJcbmpleGNlbC5jcmVhdGVUYWJzID0gZnVuY3Rpb24odGFicywgcmVzdWx0KSB7XHJcbiAgICAvLyBDcmVhdGUgdGFiIGNvbnRhaW5lclxyXG4gICAgdGFicy5pbm5lckhUTUwgPSAnJztcclxuICAgIHRhYnMuY2xhc3NMaXN0LmFkZCgnamV4Y2VsX3RhYnMnKTtcclxuICAgIHZhciBzcHJlYWRzaGVldCA9IFtdXHJcbiAgICB2YXIgbGluayA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBTcHJlYWRzaGVldCBjb250YWluZXJcclxuICAgICAgICBzcHJlYWRzaGVldFtpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHNwcmVhZHNoZWV0W2ldLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF90YWInKTtcclxuICAgICAgICAvLyBUYWIgbGlua1xyXG4gICAgICAgIGxpbmtbaV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBsaW5rW2ldLmNsYXNzTGlzdC5hZGQoJ2pleGNlbF90YWJfbGluaycpO1xyXG4gICAgICAgIGxpbmtbaV0uc2V0QXR0cmlidXRlKCdkYXRhLXNwcmVhZHNoZWV0JywgaSk7XHJcbiAgICAgICAgbGlua1tpXS5pbm5lckhUTUwgPSByZXN1bHRbaV0uc2hlZXROYW1lO1xyXG4gICAgICAgIGxpbmtbaV0ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNwcmVhZHNoZWV0Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBzcHJlYWRzaGVldFtqXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgbGlua1tqXS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3ByZWFkc2hlZXQnKTtcclxuICAgICAgICAgICAgc3ByZWFkc2hlZXRbaV0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIGxpbmtbaV0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0YWJzLmFwcGVuZENoaWxkKGxpbmtbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcGVuZCBzcHJlYWRzaGVldFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcHJlYWRzaGVldC5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICB0YWJzLmFwcGVuZENoaWxkKHNwcmVhZHNoZWV0W2ldKTtcclxuICAgICAgICBqZXhjZWwoc3ByZWFkc2hlZXRbaV0sIHJlc3VsdFtpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmlyc3QgdGFiXHJcbiAgICBzcHJlYWRzaGVldFswXS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIGxpbmtbMF0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxyXG59XHJcblxyXG5qZXhjZWwuZnJvbVNwcmVhZHNoZWV0ID0gZnVuY3Rpb24oZmlsZSwgX19jYWxsYmFjaykge1xyXG4gICAgdmFyIGNvbnZlcnQgPSBmdW5jdGlvbih3b3JrYm9vaykge1xyXG4gICAgICAgIHZhciBzcHJlYWRzaGVldHMgPSBbXTtcclxuICAgICAgICB3b3JrYm9vay5TaGVldE5hbWVzLmZvckVhY2goZnVuY3Rpb24oc2hlZXROYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBzcHJlYWRzaGVldCA9IHt9O1xyXG4gICAgICAgICAgICBzcHJlYWRzaGVldC5yb3dzID0gW107XHJcbiAgICAgICAgICAgIHNwcmVhZHNoZWV0LmNvbHVtbnMgPSBbXTtcclxuICAgICAgICAgICAgc3ByZWFkc2hlZXQuZGF0YSA9IFtdO1xyXG4gICAgICAgICAgICBzcHJlYWRzaGVldC5zdHlsZSA9IHt9O1xyXG4gICAgICAgICAgICBzcHJlYWRzaGVldC5zaGVldE5hbWUgPSBzaGVldE5hbWU7XHJcblxyXG4gICAgICAgICAgICAvLyBDb2x1bW4gd2lkdGhzXHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gd29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV1bJyFjb2xzJ107XHJcbiAgICAgICAgICAgIGlmICh0ZW1wICYmIHRlbXAubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzcHJlYWRzaGVldC5jb2x1bW5zW2ldID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBbaV0gJiYgdGVtcFtpXS53cHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQuY29sdW1uc1tpXS53aWR0aCA9IHRlbXBbaV0ud3B4ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUm93cyBoZWlnaHRzXHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gd29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV1bJyFyb3dzJ107XHJcbiAgICAgICAgICAgIGlmICh0ZW1wICYmIHRlbXAubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFtpXSAmJiB0ZW1wW2ldLmhweCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJlYWRzaGVldC5yb3dzW2ldID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZHNoZWV0LnJvd3NbaV0uaGVpZ2h0ID0gdGVtcFtpXS5ocHggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBNZXJnZSBjZWxsc1xyXG4gICAgICAgICAgICB2YXIgdGVtcCA9IHdvcmtib29rLlNoZWV0c1tzaGVldE5hbWVdWychbWVyZ2VzJ107XHJcbiAgICAgICAgICAgIGlmICh0ZW1wICYmIHRlbXAubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQubWVyZ2VDZWxscyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHgxID0gdGVtcFtpXS5zLmM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkxID0gdGVtcFtpXS5zLnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHgyID0gdGVtcFtpXS5lLmM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gdGVtcFtpXS5lLnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGpleGNlbC5nZXRDb2x1bW5OYW1lRnJvbUlkKFt4MSx5MV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcmVhZHNoZWV0Lm1lcmdlQ2VsbHNba2V5XSA9IFsgeDIteDErMSwgeTIteTErMSBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERhdGEgY29udGFpbmVyXHJcbiAgICAgICAgICAgIHZhciBtYXhfeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBtYXhfeSA9IDA7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gT2JqZWN0LmtleXMod29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wW2ldLnN1YnN0cigwLDEpICE9ICchJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gd29ya2Jvb2suU2hlZXRzW3NoZWV0TmFtZV1bdGVtcFtpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBqZXhjZWwuZ2V0SWRGcm9tQ29sdW1uTmFtZSh0ZW1wW2ldLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISBzcHJlYWRzaGVldC5kYXRhW2luZm9bMV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZHNoZWV0LmRhdGFbaW5mb1sxXV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQuZGF0YVtpbmZvWzFdXVtpbmZvWzBdXSA9IGNlbGwuZiA/ICc9JyArIGNlbGwuZiA6IGNlbGwudztcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF4X3ggPCBpbmZvWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heF94ID0gaW5mb1swXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heF95IDwgaW5mb1sxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhfeSA9IGluZm9bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0eWxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuc3R5bGUgJiYgT2JqZWN0LmtleXMoY2VsbC5zdHlsZSkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJlYWRzaGVldC5zdHlsZVt0ZW1wW2ldXSA9IGNlbGwuc3R5bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLnMgJiYgY2VsbC5zLmZnQ29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwcmVhZHNoZWV0LnN0eWxlW3RlbXBbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJlYWRzaGVldC5zdHlsZVt0ZW1wW2ldXSArPSAnOyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQuc3R5bGVbdGVtcFtpXV0gKz0gJ2JhY2tncm91bmQtY29sb3I6IycgKyBjZWxsLnMuZmdDb2xvci5yZ2I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBudW1Db2x1bW5zID0gc3ByZWFkc2hlZXQuY29sdW1ucztcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPD0gbWF4X3k7IGorKykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbWF4X3g7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghIHNwcmVhZHNoZWV0LmRhdGFbal0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQuZGF0YVtqXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISBzcHJlYWRzaGVldC5kYXRhW2pdW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1Db2x1bW5zIDwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByZWFkc2hlZXQuZGF0YVtqXVtpXSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNwcmVhZHNoZWV0cy5wdXNoKHNwcmVhZHNoZWV0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNwcmVhZHNoZWV0cztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb1JlcTtcclxuICAgIG9SZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIG9SZXEub3BlbihcIkdFVFwiLCBmaWxlLCB0cnVlKTtcclxuXHJcbiAgICBpZih0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBvUmVxLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuICAgICAgICBvUmVxLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdmFyIGFycmF5YnVmZmVyID0gb1JlcS5yZXNwb25zZTtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHZhciB3YiA9IFhMU1gucmVhZChkYXRhLCB7dHlwZTpcImFycmF5XCIsIGNlbGxGb3JtdWxhOnRydWUsIGNlbGxTdHlsZXM6dHJ1ZSB9KTtcclxuICAgICAgICAgICAgX19jYWxsYmFjayhjb252ZXJ0KHdiKSlcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBvUmVxLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHQtQ2hhcnNldFwiLCBcIngtdXNlci1kZWZpbmVkXCIpOyAgXHJcbiAgICAgICAgb1JlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsgaWYob1JlcS5yZWFkeVN0YXRlID09IDQgJiYgb1JlcS5zdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIHZhciBmZiA9IGNvbnZlcnRSZXNwb25zZUJvZHlUb1RleHQob1JlcS5yZXNwb25zZUJvZHkpO1xyXG4gICAgICAgICAgICB2YXIgd2IgPSBYTFNYLnJlYWQoZmYsIHt0eXBlOlwiYmluYXJ5XCIsIGNlbGxGb3JtdWxhOnRydWUsIGNlbGxTdHlsZXM6dHJ1ZSB9KTtcclxuICAgICAgICAgICAgX19jYWxsYmFjayhjb252ZXJ0KHdiKSlcclxuICAgICAgICB9fTtcclxuICAgIH1cclxuXHJcbiAgICBvUmVxLnNlbmQoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGludGVybmF0aW9uYWwgbGV0dGVyXHJcbiAqL1xyXG5cclxuamV4Y2VsLnZhbGlkTGV0dGVyID0gZnVuY3Rpb24gKHRleHQpIHtcclxuICAgIHZhciByZWdleCA9IC8oW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQy1cXHUwNDAwLVxcdTA0RkYnXSspL2c7XHJcbiAgICByZXR1cm4gdGV4dC5tYXRjaChyZWdleCkgPyAxIDogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBpbmplY3RBcnJheVxyXG4gKi9cclxuamV4Y2VsLmluamVjdEFycmF5ID0gZnVuY3Rpb24obywgaWR4LCBhcnIpIHtcclxuICAgIHJldHVybiBvLnNsaWNlKDAsIGlkeCkuY29uY2F0KGFycikuY29uY2F0KG8uc2xpY2UoaWR4KSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgbGV0dGVyIGJhc2VkIG9uIGEgbnVtYmVyXHJcbiAqIFxyXG4gKiBAcGFyYW0gaW50ZWdlciBpXHJcbiAqIEByZXR1cm4gc3RyaW5nIGxldHRlclxyXG4gKi9cclxuamV4Y2VsLmdldENvbHVtbk5hbWUgPSBmdW5jdGlvbihpKSB7XHJcbiAgICB2YXIgbGV0dGVyID0gJyc7XHJcbiAgICBpZiAoaSA+IDcwMSkge1xyXG4gICAgICAgIGxldHRlciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY0ICsgcGFyc2VJbnQoaSAvIDY3NikpO1xyXG4gICAgICAgIGxldHRlciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY0ICsgcGFyc2VJbnQoKGkgJSA2NzYpIC8gMjYpKTtcclxuICAgIH0gZWxzZSBpZiAoaSA+IDI1KSB7XHJcbiAgICAgICAgbGV0dGVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjQgKyBwYXJzZUludChpIC8gMjYpKTtcclxuICAgIH1cclxuICAgIGxldHRlciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgKGkgJSAyNikpO1xyXG5cclxuICAgIHJldHVybiBsZXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGV4Y2VsIGxpa2UgY29sdW1uIHRvIGpleGNlbCBpZFxyXG4gKiBcclxuICogQHBhcmFtIHN0cmluZyBpZFxyXG4gKiBAcmV0dXJuIHN0cmluZyBpZFxyXG4gKi9cclxuamV4Y2VsLmdldElkRnJvbUNvbHVtbk5hbWUgPSBmdW5jdGlvbiAoaWQsIGFycikge1xyXG4gICAgLy8gR2V0IHRoZSBsZXR0ZXJzXHJcbiAgICB2YXIgdCA9IC9eW2EtekEtWl0rLy5leGVjKGlkKTtcclxuXHJcbiAgICBpZiAodCkge1xyXG4gICAgICAgIC8vIEJhc2UgMjYgY2FsY3VsYXRpb25cclxuICAgICAgICB2YXIgY29kZSA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0WzBdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvZGUgKz0gcGFyc2VJbnQodFswXS5jaGFyQ29kZUF0KGkpIC0gNjQpICogTWF0aC5wb3coMjYsICh0WzBdLmxlbmd0aCAtIDEgLSBpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvZGUtLTtcclxuICAgICAgICAvLyBNYWtlIHN1cmUgamV4Y2VsIHN0YXJ0cyBvbiB6ZXJvXHJcbiAgICAgICAgaWYgKGNvZGUgPCAwKSB7XHJcbiAgICAgICAgICAgIGNvZGUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTnVtYmVyXHJcbiAgICAgICAgdmFyIG51bWJlciA9IHBhcnNlSW50KC9bMC05XSskLy5leGVjKGlkKSk7XHJcbiAgICAgICAgaWYgKG51bWJlciA+IDApIHtcclxuICAgICAgICAgICAgbnVtYmVyLS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXJyID09IHRydWUpIHtcclxuICAgICAgICAgICAgaWQgPSBbIGNvZGUsIG51bWJlciBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlkID0gY29kZSArICctJyArIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlkO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydCBqZXhjZWwgaWQgdG8gZXhjZWwgbGlrZSBjb2x1bW4gbmFtZVxyXG4gKiBcclxuICogQHBhcmFtIHN0cmluZyBpZFxyXG4gKiBAcmV0dXJuIHN0cmluZyBpZFxyXG4gKi9cclxuamV4Y2VsLmdldENvbHVtbk5hbWVGcm9tSWQgPSBmdW5jdGlvbiAoY2VsbElkKSB7XHJcbiAgICBpZiAoISBBcnJheS5pc0FycmF5KGNlbGxJZCkpIHtcclxuICAgICAgICBjZWxsSWQgPSBjZWxsSWQuc3BsaXQoJy0nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gamV4Y2VsLmdldENvbHVtbk5hbWUocGFyc2VJbnQoY2VsbElkWzBdKSkgKyAocGFyc2VJbnQoY2VsbElkWzFdKSArIDEpO1xyXG59XHJcblxyXG4vKipcclxuICogVmVyaWZ5IGVsZW1lbnQgaW5zaWRlIGpleGNlbCB0YWJsZVxyXG4gKiBcclxuICogQHBhcmFtIHN0cmluZyBpZFxyXG4gKiBAcmV0dXJuIHN0cmluZyBpZFxyXG4gKi9cclxuamV4Y2VsLmdldEVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICB2YXIgamV4Y2VsU2VjdGlvbiA9IDA7XHJcbiAgICB2YXIgamV4Y2VsRWxlbWVudCA9IDA7XHJcblxyXG4gICAgZnVuY3Rpb24gcGF0aCAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2pleGNlbF9jb250YWluZXInKSkge1xyXG4gICAgICAgICAgICAgICAgamV4Y2VsRWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gJ1RIRUFEJykge1xyXG4gICAgICAgICAgICBqZXhjZWxTZWN0aW9uID0gMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudGFnTmFtZSA9PSAnVEJPRFknKSB7XHJcbiAgICAgICAgICAgIGpleGNlbFNlY3Rpb24gPSAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBwYXRoKGVsZW1lbnQucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhdGgoZWxlbWVudCk7XHJcblxyXG4gICAgcmV0dXJuIFsgamV4Y2VsRWxlbWVudCwgamV4Y2VsU2VjdGlvbiBdO1xyXG59XHJcblxyXG5qZXhjZWwuZG91YmxlRGlnaXRGb3JtYXQgPSBmdW5jdGlvbih2KSB7XHJcbiAgICB2ID0gJycrdjtcclxuICAgIGlmICh2Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgdiA9ICcwJyt2O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHY7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBKcXVlcnkgU3VwcG9ydFxyXG4gKi9cclxuaWYgKHR5cGVvZihqUXVlcnkpICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAoZnVuY3Rpb24oJCl7XHJcbiAgICAgICAgJC5mbi5qZXhjZWwgPSBmdW5jdGlvbihtZXRob2QpIHtcclxuICAgICAgICAgICAgdmFyIHNwcmVhZHNoZWV0Q29udGFpbmVyID0gJCh0aGlzKS5nZXQoMCk7XHJcbiAgICAgICAgICAgIGlmICghIHNwcmVhZHNoZWV0Q29udGFpbmVyLmpleGNlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpleGNlbCgkKHRoaXMpLmdldCgwKSwgYXJndW1lbnRzWzBdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJlYWRzaGVldENvbnRhaW5lci5qZXhjZWxbbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KShqUXVlcnkpO1xyXG59XHJcblxyXG5cclxuLy8gQmFzZWQgb24gc3V0b2lrdSB3b3JrIChodHRwczovL2dpdGh1Yi5jb20vc3V0b2lrdSlcclxuXHJcbnZhciBlcnJvciA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBleHBvcnRzID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5uaWwgPSBuZXcgRXJyb3IoJyNOVUxMIScpO1xyXG4gICAgZXhwb3J0cy5kaXYwID0gbmV3IEVycm9yKCcjRElWLzAhJyk7XHJcbiAgICBleHBvcnRzLnZhbHVlID0gbmV3IEVycm9yKCcjVkFMVUUhJyk7XHJcbiAgICBleHBvcnRzLnJlZiA9IG5ldyBFcnJvcignI1JFRiEnKTtcclxuICAgIGV4cG9ydHMubmFtZSA9IG5ldyBFcnJvcignI05BTUU/Jyk7XHJcbiAgICBleHBvcnRzLm51bSA9IG5ldyBFcnJvcignI05VTSEnKTtcclxuICAgIGV4cG9ydHMubmEgPSBuZXcgRXJyb3IoJyNOL0EnKTtcclxuICAgIGV4cG9ydHMuZXJyb3IgPSBuZXcgRXJyb3IoJyNFUlJPUiEnKTtcclxuICAgIGV4cG9ydHMuZGF0YSA9IG5ldyBFcnJvcignI0dFVFRJTkdfREFUQScpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59KSgpO1xyXG5cclxudmFyIHV0aWxzID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4cG9ydHMgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLmZsYXR0ZW5TaGFsbG93ID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICBpZiAoIWFycmF5IHx8ICFhcnJheS5yZWR1Y2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBhSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYSk7XHJcbiAgICAgICAgICAgIHZhciBiSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYik7XHJcblxyXG4gICAgICAgICAgICBpZiAoYUlzQXJyYXkgJiYgYklzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYUlzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGEucHVzaChiKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYklzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbIGEgXS5jb25jYXQoYik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBbIGEsIGIgXTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5pc0ZsYXQgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgIGlmICghYXJyYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheVtpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuZmxhdHRlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBleHBvcnRzLmFyZ3NUb0FycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgIHdoaWxlICghZXhwb3J0cy5pc0ZsYXQocmVzdWx0KSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBleHBvcnRzLmZsYXR0ZW5TaGFsbG93KHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLmFyZ3NUb0FycmF5ID0gZnVuY3Rpb24oYXJncykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgZXhwb3J0cy5hcnJheUVhY2goYXJncywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLm51bWJlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcG9zc2libGVOdW1iZXJzID0gdGhpcy5mbGF0dGVuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlTnVtYmVycy5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbCA9PT0gJ251bWJlcic7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuY2xlYW5GbG9hdCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIHZhciBwb3dlciA9IDFlMTQ7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogcG93ZXIpIC8gcG93ZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMucGFyc2VCb29sID0gZnVuY3Rpb24oYm9vbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYm9vbCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBib29sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJvb2wgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gYm9vbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgYm9vbCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJvb2wgIT09IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGJvb2wgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHZhciB1cCA9IGJvb2wudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgaWYgKHVwID09PSAnVFJVRScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXAgPT09ICdGQUxTRScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJvb2wgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihib29sKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5wYXJzZU51bWJlciA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG4gICAgICAgIGlmIChzdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc05hTihzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHN0cmluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMucGFyc2VOdW1iZXJBcnJheSA9IGZ1bmN0aW9uKGFycikge1xyXG4gICAgICAgIHZhciBsZW47XHJcblxyXG4gICAgICAgIGlmICghYXJyIHx8IChsZW4gPSBhcnIubGVuZ3RoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGFyc2VkO1xyXG5cclxuICAgICAgICB3aGlsZSAobGVuLS0pIHtcclxuICAgICAgICAgICAgcGFyc2VkID0gZXhwb3J0cy5wYXJzZU51bWJlcihhcnJbbGVuXSk7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZWQgPT09IGVycm9yLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFycltsZW5dID0gcGFyc2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5wYXJzZU1hdHJpeCA9IGZ1bmN0aW9uKG1hdHJpeCkge1xyXG4gICAgICAgIHZhciBuO1xyXG5cclxuICAgICAgICBpZiAoIW1hdHJpeCB8fCAobiA9IG1hdHJpeC5sZW5ndGgpID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHBuYXJyO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwbmFyciA9IGV4cG9ydHMucGFyc2VOdW1iZXJBcnJheShtYXRyaXhbaV0pO1xyXG4gICAgICAgICAgICBtYXRyaXhbaV0gPSBwbmFycjtcclxuXHJcbiAgICAgICAgICAgIGlmIChwbmFyciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcG5hcnI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXRyaXg7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBkMTkwMCA9IG5ldyBEYXRlKERhdGUuVVRDKDE5MDAsIDAsIDEpKTtcclxuICAgIGV4cG9ydHMucGFyc2VEYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGQgPSBwYXJzZUludChkYXRlLCAxMCk7XHJcbiAgICAgICAgICAgIGlmIChkIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZCA8PSA2MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGQxOTAwLmdldFRpbWUoKSArIChkIC0gMSkgKiA4NjQwMDAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGQxOTAwLmdldFRpbWUoKSArIChkIC0gMikgKiA4NjQwMDAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMucGFyc2VEYXRlQXJyYXkgPSBmdW5jdGlvbihhcnIpIHtcclxuICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcclxuICAgICAgICB2YXIgcGFyc2VkO1xyXG4gICAgICAgIHdoaWxlIChsZW4tLSkge1xyXG4gICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlRGF0ZShhcnJbbGVuXSk7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZWQgPT09IGVycm9yLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFycltsZW5dID0gcGFyc2VkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLmFueUlzRXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKG4tLSkge1xyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzW25dIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5hcnJheVZhbHVlc1RvTnVtYmVycyA9IGZ1bmN0aW9uKGFycikge1xyXG4gICAgICAgIHZhciBuID0gYXJyLmxlbmd0aDtcclxuICAgICAgICB2YXIgZWw7XHJcbiAgICAgICAgd2hpbGUgKG4tLSkge1xyXG4gICAgICAgICAgICBlbCA9IGFycltuXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgYXJyW25dID0gMTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGFycltuXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG51bWJlciA9IHRoaXMucGFyc2VOdW1iZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyW25dID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyW25dID0gbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMucmVzdCA9IGZ1bmN0aW9uKGFycmF5LCBpZHgpIHtcclxuICAgICAgICBpZHggPSBpZHggfHwgMTtcclxuICAgICAgICBpZiAoIWFycmF5IHx8IHR5cGVvZiBhcnJheS5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheS5zbGljZShpZHgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgaWR4KSB7XHJcbiAgICAgICAgaWR4ID0gaWR4IHx8IDE7XHJcbiAgICAgICAgaWYgKCFhcnJheSB8fCB0eXBlb2YgYXJyYXkuc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgYXJyYXkubGVuZ3RoIC0gaWR4KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5hcnJheUVhY2ggPSBmdW5jdGlvbihhcnJheSwgaXRlcmF0ZWUpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy50cmFuc3Bvc2UgPSBmdW5jdGlvbihtYXRyaXgpIHtcclxuICAgICAgICBpZiAoIW1hdHJpeCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWF0cml4WzBdLm1hcChmdW5jdGlvbihjb2wsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdHJpeC5tYXAoZnVuY3Rpb24ocm93KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93W2ldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGV4cG9ydHM7XHJcbn0pKCk7XHJcblxyXG5qZXhjZWwubWV0aG9kcyA9IHt9O1xyXG5cclxuamV4Y2VsLm1ldGhvZHMuZGF0ZXRpbWUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHt9O1xyXG5cclxuICAgIHZhciBkMTkwMCA9IG5ldyBEYXRlKDE5MDAsIDAsIDEpO1xyXG4gICAgdmFyIFdFRUtfU1RBUlRTID0gW1xyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAwLFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgMSxcclxuICAgICAgICAyLFxyXG4gICAgICAgIDMsXHJcbiAgICAgICAgNCxcclxuICAgICAgICA1LFxyXG4gICAgICAgIDYsXHJcbiAgICAgICAgMFxyXG4gICAgXTtcclxuICAgIHZhciBXRUVLX1RZUEVTID0gW1xyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFsxLCAyLCAzLCA0LCA1LCA2LCA3XSxcclxuICAgICAgICBbNywgMSwgMiwgMywgNCwgNSwgNl0sXHJcbiAgICAgICAgWzYsIDAsIDEsIDIsIDMsIDQsIDVdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFs3LCAxLCAyLCAzLCA0LCA1LCA2XSxcclxuICAgICAgICBbNiwgNywgMSwgMiwgMywgNCwgNV0sXHJcbiAgICAgICAgWzUsIDYsIDcsIDEsIDIsIDMsIDRdLFxyXG4gICAgICAgIFs0LCA1LCA2LCA3LCAxLCAyLCAzXSxcclxuICAgICAgICBbMywgNCwgNSwgNiwgNywgMSwgMl0sXHJcbiAgICAgICAgWzIsIDMsIDQsIDUsIDYsIDcsIDFdLFxyXG4gICAgICAgIFsxLCAyLCAzLCA0LCA1LCA2LCA3XVxyXG4gICAgXTtcclxuICAgIHZhciBXRUVLRU5EX1RZUEVTID0gW1xyXG4gICAgICAgIFtdLFxyXG4gICAgICAgIFs2LCAwXSxcclxuICAgICAgICBbMCwgMV0sXHJcbiAgICAgICAgWzEsIDJdLFxyXG4gICAgICAgIFsyLCAzXSxcclxuICAgICAgICBbMywgNF0sXHJcbiAgICAgICAgWzQsIDVdLFxyXG4gICAgICAgIFs1LCA2XSxcclxuICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIHVuZGVmaW5lZCwgWzAsIDBdLFxyXG4gICAgICAgIFsxLCAxXSxcclxuICAgICAgICBbMiwgMl0sXHJcbiAgICAgICAgWzMsIDNdLFxyXG4gICAgICAgIFs0LCA0XSxcclxuICAgICAgICBbNSwgNV0sXHJcbiAgICAgICAgWzYsIDZdXHJcbiAgICBdO1xyXG5cclxuICAgIGV4cG9ydHMuREFURSA9IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBkYXkpIHtcclxuICAgICAgICB5ZWFyID0gdXRpbHMucGFyc2VOdW1iZXIoeWVhcik7XHJcbiAgICAgICAgbW9udGggPSB1dGlscy5wYXJzZU51bWJlcihtb250aCk7XHJcbiAgICAgICAgZGF5ID0gdXRpbHMucGFyc2VOdW1iZXIoZGF5KTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih5ZWFyLCBtb250aCwgZGF5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5ZWFyIDwgMCB8fCBtb250aCA8IDAgfHwgZGF5IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5KTtcclxuICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EQVRFVkFMVUUgPSBmdW5jdGlvbihkYXRlX3RleHQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGVfdGV4dCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0ZSA9IERhdGUucGFyc2UoZGF0ZV90ZXh0KTtcclxuICAgICAgICBpZiAoaXNOYU4oZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0ZSA8PSAtMjIwMzg5MTIwMDAwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGRhdGUgLSBkMTkwMCkgLyA4NjQwMDAwMCArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoZGF0ZSAtIGQxOTAwKSAvIDg2NDAwMDAwICsgMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EQVkgPSBmdW5jdGlvbihzZXJpYWxfbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIGRhdGUgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XHJcbiAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkRBWVMgPSBmdW5jdGlvbihlbmRfZGF0ZSwgc3RhcnRfZGF0ZSkge1xyXG4gICAgICAgIGVuZF9kYXRlID0gdXRpbHMucGFyc2VEYXRlKGVuZF9kYXRlKTtcclxuICAgICAgICBzdGFydF9kYXRlID0gdXRpbHMucGFyc2VEYXRlKHN0YXJ0X2RhdGUpO1xyXG4gICAgICAgIGlmIChlbmRfZGF0ZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbmRfZGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbChlbmRfZGF0ZSkgLSBzZXJpYWwoc3RhcnRfZGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuREFZUzM2MCA9IGZ1bmN0aW9uKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBtZXRob2QpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5FREFURSA9IGZ1bmN0aW9uKHN0YXJ0X2RhdGUsIG1vbnRocykge1xyXG4gICAgICAgIHN0YXJ0X2RhdGUgPSB1dGlscy5wYXJzZURhdGUoc3RhcnRfZGF0ZSk7XHJcbiAgICAgICAgaWYgKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTmFOKG1vbnRocykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb250aHMgPSBwYXJzZUludChtb250aHMsIDEwKTtcclxuICAgICAgICBzdGFydF9kYXRlLnNldE1vbnRoKHN0YXJ0X2RhdGUuZ2V0TW9udGgoKSArIG1vbnRocyk7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbChzdGFydF9kYXRlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5FT01PTlRIID0gZnVuY3Rpb24oc3RhcnRfZGF0ZSwgbW9udGhzKSB7XHJcbiAgICAgICAgc3RhcnRfZGF0ZSA9IHV0aWxzLnBhcnNlRGF0ZShzdGFydF9kYXRlKTtcclxuICAgICAgICBpZiAoc3RhcnRfZGF0ZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNOYU4obW9udGhzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vbnRocyA9IHBhcnNlSW50KG1vbnRocywgMTApO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWwobmV3IERhdGUoc3RhcnRfZGF0ZS5nZXRGdWxsWWVhcigpLCBzdGFydF9kYXRlLmdldE1vbnRoKCkgKyBtb250aHMgKyAxLCAwKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSE9VUiA9IGZ1bmN0aW9uKHNlcmlhbF9udW1iZXIpIHtcclxuICAgICAgICBzZXJpYWxfbnVtYmVyID0gdXRpbHMucGFyc2VEYXRlKHNlcmlhbF9udW1iZXIpO1xyXG4gICAgICAgIGlmIChzZXJpYWxfbnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbF9udW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXJpYWxfbnVtYmVyLmdldEhvdXJzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU5URVJWQUwgPSBmdW5jdGlvbihzZWNvbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNlY29uZCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIHNlY29uZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlY29uZCA9IHBhcnNlSW50KHNlY29uZCwgMTApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHllYXIgID0gTWF0aC5mbG9vcihzZWNvbmQvOTQ2MDgwMDAwKTtcclxuICAgICAgICBzZWNvbmQgICAgPSBzZWNvbmQlOTQ2MDgwMDAwO1xyXG4gICAgICAgIHZhciBtb250aCA9IE1hdGguZmxvb3Ioc2Vjb25kLzI1OTIwMDApO1xyXG4gICAgICAgIHNlY29uZCAgICA9IHNlY29uZCUyNTkyMDAwO1xyXG4gICAgICAgIHZhciBkYXkgICA9IE1hdGguZmxvb3Ioc2Vjb25kLzg2NDAwKTtcclxuICAgICAgICBzZWNvbmQgICAgPSBzZWNvbmQlODY0MDA7XHJcblxyXG4gICAgICAgIHZhciBob3VyICA9IE1hdGguZmxvb3Ioc2Vjb25kLzM2MDApO1xyXG4gICAgICAgIHNlY29uZCAgICA9IHNlY29uZCUzNjAwO1xyXG4gICAgICAgIHZhciBtaW4gICA9IE1hdGguZmxvb3Ioc2Vjb25kLzYwKTtcclxuICAgICAgICBzZWNvbmQgICAgPSBzZWNvbmQlNjA7XHJcbiAgICAgICAgdmFyIHNlYyAgID0gc2Vjb25kO1xyXG5cclxuICAgICAgICB5ZWFyICA9ICh5ZWFyICA+IDApID8geWVhciAgKyAnWScgOiAnJztcclxuICAgICAgICBtb250aCA9IChtb250aCA+IDApID8gbW9udGggKyAnTScgOiAnJztcclxuICAgICAgICBkYXkgICA9IChkYXkgICA+IDApID8gZGF5ICAgKyAnRCcgOiAnJztcclxuICAgICAgICBob3VyICA9IChob3VyICA+IDApID8gaG91ciAgKyAnSCcgOiAnJztcclxuICAgICAgICBtaW4gICA9IChtaW4gICA+IDApID8gbWluICAgKyAnTScgOiAnJztcclxuICAgICAgICBzZWMgICA9IChzZWMgICA+IDApID8gc2VjICAgKyAnUycgOiAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuICdQJyArIHllYXIgKyBtb250aCArIGRheSArICdUJyArIGhvdXIgKyBtaW4gKyBzZWM7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVNPV0VFS05VTSA9IGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgICBkYXRlID0gdXRpbHMucGFyc2VEYXRlKGRhdGUpO1xyXG4gICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDApO1xyXG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDQgLSAoZGF0ZS5nZXREYXkoKSB8fCA3KSk7XHJcbiAgICAgICAgdmFyIHllYXJTdGFydCA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgoKChkYXRlIC0geWVhclN0YXJ0KSAvIDg2NDAwMDAwKSArIDEpIC8gNyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTUlOVVRFID0gZnVuY3Rpb24oc2VyaWFsX251bWJlcikge1xyXG4gICAgICAgIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XHJcbiAgICAgICAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbF9udW1iZXIuZ2V0TWludXRlcygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk1PTlRIID0gZnVuY3Rpb24oc2VyaWFsX251bWJlcikge1xyXG4gICAgICAgIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XHJcbiAgICAgICAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbF9udW1iZXIuZ2V0TW9udGgoKSArIDE7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTkVUV09SS0RBWVMgPSBmdW5jdGlvbihzdGFydF9kYXRlLCBlbmRfZGF0ZSwgaG9saWRheXMpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ORVRXT1JLREFZUy5JTlRMID0gZnVuY3Rpb24oc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIHdlZWtlbmQsIGhvbGlkYXlzKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTk9XID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU0VDT05EID0gZnVuY3Rpb24oc2VyaWFsX251bWJlcikge1xyXG4gICAgICAgIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XHJcbiAgICAgICAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbF9udW1iZXIuZ2V0U2Vjb25kcygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlRJTUUgPSBmdW5jdGlvbihob3VyLCBtaW51dGUsIHNlY29uZCkge1xyXG4gICAgICAgIGhvdXIgPSB1dGlscy5wYXJzZU51bWJlcihob3VyKTtcclxuICAgICAgICBtaW51dGUgPSB1dGlscy5wYXJzZU51bWJlcihtaW51dGUpO1xyXG4gICAgICAgIHNlY29uZCA9IHV0aWxzLnBhcnNlTnVtYmVyKHNlY29uZCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoaG91ciwgbWludXRlLCBzZWNvbmQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhvdXIgPCAwIHx8IG1pbnV0ZSA8IDAgfHwgc2Vjb25kIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKDM2MDAgKiBob3VyICsgNjAgKiBtaW51dGUgKyBzZWNvbmQpIC8gODY0MDA7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVElNRVZBTFVFID0gZnVuY3Rpb24odGltZV90ZXh0KSB7XHJcbiAgICAgICAgdGltZV90ZXh0ID0gdXRpbHMucGFyc2VEYXRlKHRpbWVfdGV4dCk7XHJcbiAgICAgICAgaWYgKHRpbWVfdGV4dCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lX3RleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoMzYwMCAqIHRpbWVfdGV4dC5nZXRIb3VycygpICsgNjAgKiB0aW1lX3RleHQuZ2V0TWludXRlcygpICsgdGltZV90ZXh0LmdldFNlY29uZHMoKSkgLyA4NjQwMDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5UT0RBWSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLldFRUtEQVkgPSBmdW5jdGlvbihzZXJpYWxfbnVtYmVyLCByZXR1cm5fdHlwZSkge1xyXG4gICAgICAgIHNlcmlhbF9udW1iZXIgPSB1dGlscy5wYXJzZURhdGUoc2VyaWFsX251bWJlcik7XHJcbiAgICAgICAgaWYgKHNlcmlhbF9udW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsX251bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldHVybl90eXBlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuX3R5cGUgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF5ID0gc2VyaWFsX251bWJlci5nZXREYXkoKTtcclxuICAgICAgICByZXR1cm4gV0VFS19UWVBFU1tyZXR1cm5fdHlwZV1bZGF5XTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5XRUVLTlVNID0gZnVuY3Rpb24oc2VyaWFsX251bWJlciwgcmV0dXJuX3R5cGUpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5XT1JLREFZID0gZnVuY3Rpb24oc3RhcnRfZGF0ZSwgZGF5cywgaG9saWRheXMpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5XT1JLREFZLklOVEwgPSBmdW5jdGlvbihzdGFydF9kYXRlLCBkYXlzLCB3ZWVrZW5kLCBob2xpZGF5cykge1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLllFQVIgPSBmdW5jdGlvbihzZXJpYWxfbnVtYmVyKSB7XHJcbiAgICAgICAgc2VyaWFsX251bWJlciA9IHV0aWxzLnBhcnNlRGF0ZShzZXJpYWxfbnVtYmVyKTtcclxuICAgICAgICBpZiAoc2VyaWFsX251bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxfbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VyaWFsX251bWJlci5nZXRGdWxsWWVhcigpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMSwgMjkpLmdldE1vbnRoKCkgPT09IDE7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0cy5ZRUFSRlJBQyA9IGZ1bmN0aW9uKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBiYXNpcykge1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXJpYWwoZGF0ZSkge1xyXG4gICAgICAgIHZhciBhZGRPbiA9IChkYXRlID4gLTIyMDM4OTEyMDAwMDApPzI6MTtcclxuICAgICAgICByZXR1cm4gKGRhdGUgLSBkMTkwMCkgLyA4NjQwMDAwMCArIGFkZE9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59KSgpO1xyXG5cclxuamV4Y2VsLm1ldGhvZHMuZGF0YWJhc2UgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHt9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcclxuICAgICAgICBpZiAoIWFycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKCFhcnJheVtpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydHMuRklOREZJRUxEID0gZnVuY3Rpb24oZGF0YWJhc2UsIHRpdGxlKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFiYXNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhYmFzZVtpXVswXSA9PT0gdGl0bGUpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgdGhlIGlucHV0IGZpZWxkIHRpdGxlIGlzIGluY29ycmVjdFxyXG4gICAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhcykge1xyXG4gICAgICAgIHZhciBtYXRjaGVzID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBkYXRhYmFzZVswXS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBtYXRjaGVzW2ldID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1heENyaXRlcmlhTGVuZ3RoID0gY3JpdGVyaWFzWzBdLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgY3JpdGVyaWFzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChjcml0ZXJpYXNbaV0ubGVuZ3RoID4gbWF4Q3JpdGVyaWFMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG1heENyaXRlcmlhTGVuZ3RoID0gY3JpdGVyaWFzW2ldLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgayA9IDE7IGsgPCBkYXRhYmFzZS5sZW5ndGg7ICsraykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBsID0gMTsgbCA8IGRhdGFiYXNlW2tdLmxlbmd0aDsgKytsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudENyaXRlcmlhUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzTWF0Y2hpbmdDcml0ZXJpYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjcml0ZXJpYXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3JpdGVyaWEgPSBjcml0ZXJpYXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyaXRlcmlhLmxlbmd0aCA8IG1heENyaXRlcmlhTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyaXRlcmlhRmllbGQgPSBjcml0ZXJpYVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YWJhc2Vba11bMF0gIT09IGNyaXRlcmlhRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhc01hdGNoaW5nQ3JpdGVyaWEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSAxOyBwIDwgY3JpdGVyaWEubGVuZ3RoOyArK3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENyaXRlcmlhUmVzdWx0ID0gY3VycmVudENyaXRlcmlhUmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgZXZhbChkYXRhYmFzZVtrXVtsXSArIGNyaXRlcmlhW3BdKTsgLy8ganNoaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhhc01hdGNoaW5nQ3JpdGVyaWEpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzW2xdID0gbWF0Y2hlc1tsXSAmJiBjdXJyZW50Q3JpdGVyaWFSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGRhdGFiYXNlWzBdLmxlbmd0aDsgKytuKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVzW25dKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEYXRhYmFzZSBmdW5jdGlvbnNcclxuICAgIGV4cG9ydHMuREFWRVJBR0UgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXHJcbiAgICAgICAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHRJbmRleGVzID0gZmluZFJlc3VsdEluZGV4KGRhdGFiYXNlLCBjcml0ZXJpYSk7XHJcbiAgICAgICAgdmFyIHRhcmdldEZpZWxkcyA9IFtdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZXhwb3J0cy5GSU5ERklFTEQoZGF0YWJhc2UsIGZpZWxkKTtcclxuICAgICAgICAgICAgdGFyZ2V0RmllbGRzID0gdXRpbHMucmVzdChkYXRhYmFzZVtpbmRleF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldEZpZWxkcyA9IHV0aWxzLnJlc3QoZGF0YWJhc2VbZmllbGRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1bSA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRJbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN1bSArPSB0YXJnZXRGaWVsZHNbcmVzdWx0SW5kZXhlc1tpXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRJbmRleGVzLmxlbmd0aCA9PT0gMCA/IGVycm9yLmRpdjAgOiBzdW0gLyByZXN1bHRJbmRleGVzLmxlbmd0aDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EQ09VTlQgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRENPVU5UQSA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ER0VUID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBmaWVsZCBpcyBub3QgYSBudW1iZXIgYW5kIG5vdCBhIHN0cmluZ1xyXG4gICAgICAgIGlmIChpc05hTihmaWVsZCkgJiYgKHR5cGVvZiBmaWVsZCAhPT0gXCJzdHJpbmdcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0SW5kZXhlcyA9IGZpbmRSZXN1bHRJbmRleChkYXRhYmFzZSwgY3JpdGVyaWEpO1xyXG4gICAgICAgIHZhciB0YXJnZXRGaWVsZHMgPSBbXTtcclxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGV4cG9ydHMuRklOREZJRUxEKGRhdGFiYXNlLCBmaWVsZCk7XHJcbiAgICAgICAgICAgIHRhcmdldEZpZWxkcyA9IHV0aWxzLnJlc3QoZGF0YWJhc2VbaW5kZXhdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXRGaWVsZHMgPSB1dGlscy5yZXN0KGRhdGFiYXNlW2ZpZWxkXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBubyByZWNvcmQgbWVldHMgdGhlIGNyaXRlcmlhXHJcbiAgICAgICAgaWYgKHJlc3VsdEluZGV4ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmV0dXJucyB0aGUgI05VTSEgZXJyb3IgdmFsdWUgYmVjYXVzZSBtb3JlIHRoYW4gb25lIHJlY29yZCBtZWV0cyB0aGVcclxuICAgICAgICAvLyBjcml0ZXJpYVxyXG4gICAgICAgIGlmIChyZXN1bHRJbmRleGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0YXJnZXRGaWVsZHNbcmVzdWx0SW5kZXhlc1swXV07XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRE1BWCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcclxuICAgICAgICBpZiAoaXNOYU4oZmllbGQpICYmICh0eXBlb2YgZmllbGQgIT09IFwic3RyaW5nXCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdEluZGV4ZXMgPSBmaW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcclxuICAgICAgICB2YXIgdGFyZ2V0RmllbGRzID0gW107XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBleHBvcnRzLkZJTkRGSUVMRChkYXRhYmFzZSwgZmllbGQpO1xyXG4gICAgICAgICAgICB0YXJnZXRGaWVsZHMgPSB1dGlscy5yZXN0KGRhdGFiYXNlW2luZGV4XSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0RmllbGRzID0gdXRpbHMucmVzdChkYXRhYmFzZVtmaWVsZF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWF4VmFsdWUgPSB0YXJnZXRGaWVsZHNbcmVzdWx0SW5kZXhlc1swXV07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCByZXN1bHRJbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXhWYWx1ZSA8IHRhcmdldEZpZWxkc1tyZXN1bHRJbmRleGVzW2ldXSkge1xyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSB0YXJnZXRGaWVsZHNbcmVzdWx0SW5kZXhlc1tpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heFZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkRNSU4gPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGZpZWxkIGlzIG5vdCBhIG51bWJlciBhbmQgbm90IGEgc3RyaW5nXHJcbiAgICAgICAgaWYgKGlzTmFOKGZpZWxkKSAmJiAodHlwZW9mIGZpZWxkICE9PSBcInN0cmluZ1wiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHRJbmRleGVzID0gZmluZFJlc3VsdEluZGV4KGRhdGFiYXNlLCBjcml0ZXJpYSk7XHJcbiAgICAgICAgdmFyIHRhcmdldEZpZWxkcyA9IFtdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZXhwb3J0cy5GSU5ERklFTEQoZGF0YWJhc2UsIGZpZWxkKTtcclxuICAgICAgICAgICAgdGFyZ2V0RmllbGRzID0gdXRpbHMucmVzdChkYXRhYmFzZVtpbmRleF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldEZpZWxkcyA9IHV0aWxzLnJlc3QoZGF0YWJhc2VbZmllbGRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1pblZhbHVlID0gdGFyZ2V0RmllbGRzW3Jlc3VsdEluZGV4ZXNbMF1dO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcmVzdWx0SW5kZXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobWluVmFsdWUgPiB0YXJnZXRGaWVsZHNbcmVzdWx0SW5kZXhlc1tpXV0pIHtcclxuICAgICAgICAgICAgICAgIG1pblZhbHVlID0gdGFyZ2V0RmllbGRzW3Jlc3VsdEluZGV4ZXNbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaW5WYWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EUFJPRFVDVCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZmllbGQgaXMgbm90IGEgbnVtYmVyIGFuZCBub3QgYSBzdHJpbmdcclxuICAgICAgICBpZiAoaXNOYU4oZmllbGQpICYmICh0eXBlb2YgZmllbGQgIT09IFwic3RyaW5nXCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdEluZGV4ZXMgPSBmaW5kUmVzdWx0SW5kZXgoZGF0YWJhc2UsIGNyaXRlcmlhKTtcclxuICAgICAgICB2YXIgdGFyZ2V0RmllbGRzID0gW107XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBleHBvcnRzLkZJTkRGSUVMRChkYXRhYmFzZSwgZmllbGQpO1xyXG4gICAgICAgICAgICB0YXJnZXRGaWVsZHMgPSB1dGlscy5yZXN0KGRhdGFiYXNlW2luZGV4XSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0RmllbGRzID0gdXRpbHMucmVzdChkYXRhYmFzZVtmaWVsZF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGFyZ2V0VmFsdWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRJbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFZhbHVlc1tpXSA9IHRhcmdldEZpZWxkc1tyZXN1bHRJbmRleGVzW2ldXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0VmFsdWVzID0gY29tcGFjdCh0YXJnZXRWYWx1ZXMpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAxO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ICo9IHRhcmdldFZhbHVlc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EU1RERVYgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRFNUREVWUCA9IGZ1bmN0aW9uKGRhdGFiYXNlLCBmaWVsZCwgY3JpdGVyaWEpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EU1VNID0gZnVuY3Rpb24oZGF0YWJhc2UsIGZpZWxkLCBjcml0ZXJpYSkge1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkRWQVIgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRFZBUlAgPSBmdW5jdGlvbihkYXRhYmFzZSwgZmllbGQsIGNyaXRlcmlhKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTUFUQ0ggPSBmdW5jdGlvbihsb29rdXBWYWx1ZSwgbG9va3VwQXJyYXksIG1hdGNoVHlwZSkge1xyXG4gICAgICAgIGlmICghbG9va3VwVmFsdWUgJiYgIWxvb2t1cEFycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgbWF0Y2hUeXBlID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEobG9va3VwQXJyYXkgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF0Y2hUeXBlICE9PSAtMSAmJiBtYXRjaFR5cGUgIT09IDAgJiYgbWF0Y2hUeXBlICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpbmRleDtcclxuICAgICAgICB2YXIgaW5kZXhWYWx1ZTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbG9va3VwQXJyYXkubGVuZ3RoOyBpZHgrKykge1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9va3VwQXJyYXlbaWR4XSA9PT0gbG9va3VwVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWR4ICsgMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9va3VwQXJyYXlbaWR4XSA8IGxvb2t1cFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaWR4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhWYWx1ZSA9IGxvb2t1cEFycmF5W2lkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29rdXBBcnJheVtpZHhdID4gaW5kZXhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGlkeCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4VmFsdWUgPSBsb29rdXBBcnJheVtpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFR5cGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9va3VwVmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwVmFsdWUgPSBsb29rdXBWYWx1ZS5yZXBsYWNlKC9cXD8vZywgJy4nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobG9va3VwQXJyYXlbaWR4XS50b0xvd2VyQ2FzZSgpLm1hdGNoKGxvb2t1cFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZHggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvb2t1cEFycmF5W2lkeF0gPT09IGxvb2t1cFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZHggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFR5cGUgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9va3VwQXJyYXlbaWR4XSA9PT0gbG9va3VwVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWR4ICsgMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9va3VwQXJyYXlbaWR4XSA+IGxvb2t1cFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaWR4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhWYWx1ZSA9IGxvb2t1cEFycmF5W2lkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29rdXBBcnJheVtpZHhdIDwgaW5kZXhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGlkeCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4VmFsdWUgPSBsb29rdXBBcnJheVtpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4ID8gaW5kZXggOiBlcnJvci5uYTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGV4cG9ydHM7XHJcbn0pKCk7XHJcblxyXG5qZXhjZWwubWV0aG9kcy5lbmdpbmVlcmluZyA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBleHBvcnRzID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gaXNWYWxpZEJpbmFyeU51bWJlcihudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gKC9eWzAxXXsxLDEwfSQvKS50ZXN0KG51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0cy5CRVNTRUxJID0gZnVuY3Rpb24oeCwgbikge1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJFU1NFTEogPSBmdW5jdGlvbih4LCBuKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQkVTU0VMSyA9IGZ1bmN0aW9uKHgsIG4pIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5CRVNTRUxZID0gZnVuY3Rpb24oeCwgbikge1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJJTjJERUMgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBiaW5hcnkgb3IgY29udGFpbnMgbW9yZSB0aGFuIDEwXHJcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxyXG4gICAgICAgIGlmICghaXNWYWxpZEJpbmFyeU51bWJlcihudW1iZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGJpbmFyeSBudW1iZXIgdG8gZGVjaW1hbFxyXG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludChudW1iZXIsIDIpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgbmVnYXRpdmUgbnVtYmVyc1xyXG4gICAgICAgIHZhciBzdHJpbmdpZmllZCA9IG51bWJlci50b1N0cmluZygpO1xyXG4gICAgICAgIGlmIChzdHJpbmdpZmllZC5sZW5ndGggPT09IDEwICYmIHN0cmluZ2lmaWVkLnN1YnN0cmluZygwLCAxKSA9PT0gJzEnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSksIDIpIC0gNTEyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJJTjJIRVggPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGJpbmFyeSBvciBjb250YWlucyBtb3JlIHRoYW4gMTBcclxuICAgICAgICAvLyBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkQmluYXJ5TnVtYmVyKG51bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBoZXhhZGVjaW1hbCBudW1iZXIgaWYgbnVtYmVyXHJcbiAgICAgICAgLy8gaXMgbmVnYXRpdmVcclxuICAgICAgICB2YXIgc3RyaW5naWZpZWQgPSBudW1iZXIudG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAoc3RyaW5naWZpZWQubGVuZ3RoID09PSAxMCAmJiBzdHJpbmdpZmllZC5zdWJzdHJpbmcoMCwgMSkgPT09ICcxJykge1xyXG4gICAgICAgICAgICByZXR1cm4gKDEwOTk1MTE2MjcyNjQgKyBwYXJzZUludChzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSksIDIpKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGJpbmFyeSBudW1iZXIgdG8gaGV4YWRlY2ltYWxcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VJbnQobnVtYmVyLCAyKS50b1N0cmluZygxNik7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBoZXhhZGVjaW1hbCBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnNcclxuICAgICAgICAvLyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmIChwbGFjZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAocGxhY2VzIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZ1xyXG4gICAgICAgICAgICAvLyBVbmRlcnNjb3JlLnN0cmluZylcclxuICAgICAgICAgICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyBSRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJJTjJPQ1QgPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGJpbmFyeSBvciBjb250YWlucyBtb3JlIHRoYW4gMTBcclxuICAgICAgICAvLyBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkQmluYXJ5TnVtYmVyKG51bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBvY3RhbCBudW1iZXIgaWYgbnVtYmVyIGlzXHJcbiAgICAgICAgLy8gbmVnYXRpdmVcclxuICAgICAgICB2YXIgc3RyaW5naWZpZWQgPSBudW1iZXIudG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAoc3RyaW5naWZpZWQubGVuZ3RoID09PSAxMCAmJiBzdHJpbmdpZmllZC5zdWJzdHJpbmcoMCwgMSkgPT09ICcxJykge1xyXG4gICAgICAgICAgICByZXR1cm4gKDEwNzM3NDEzMTIgKyBwYXJzZUludChzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSksIDIpKS50b1N0cmluZyg4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgYmluYXJ5IG51bWJlciB0byBvY3RhbFxyXG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludChudW1iZXIsIDIpLnRvU3RyaW5nKDgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gb2N0YWwgbnVtYmVyIHVzaW5nIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIG5lY2Vzc2FyeVxyXG4gICAgICAgIC8vIGlmIHBsYWNlcyBpcyB1bmRlZmluZWRcclxuICAgICAgICBpZiAocGxhY2VzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5vbm51bWVyaWNcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHBsYWNlcykpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbmVnYXRpdmVcclxuICAgICAgICAgICAgaWYgKHBsYWNlcyA8IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUcnVuY2F0ZSBwbGFjZXMgaW4gY2FzZSBpdCBpcyBub3QgYW4gaW50ZWdlclxyXG4gICAgICAgICAgICBwbGFjZXMgPSBNYXRoLmZsb29yKHBsYWNlcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBQYWQgcmV0dXJuIHZhbHVlIHdpdGggbGVhZGluZyAwcyAoemVyb3MpIGlmIG5lY2Vzc2FyeSAodXNpbmdcclxuICAgICAgICAgICAgLy8gVW5kZXJzY29yZS5zdHJpbmcpXHJcbiAgICAgICAgICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gUkVQVCgnMCcsIHBsYWNlcyAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0IDogZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5CSVRBTkQgPSBmdW5jdGlvbihudW1iZXIxLCBudW1iZXIyKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgYSBub24tbnVtZXJpYyB2YWx1ZVxyXG4gICAgICAgIG51bWJlcjEgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIxKTtcclxuICAgICAgICBudW1iZXIyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyMSwgbnVtYmVyMikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgbGVzcyB0aGFuIDBcclxuICAgICAgICBpZiAobnVtYmVyMSA8IDAgfHwgbnVtYmVyMiA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGEgbm9uLWludGVnZXJcclxuICAgICAgICBpZiAoTWF0aC5mbG9vcihudW1iZXIxKSAhPT0gbnVtYmVyMSB8fCBNYXRoLmZsb29yKG51bWJlcjIpICE9PSBudW1iZXIyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBncmVhdGVyIHRoYW4gKDJeNDgpLTFcclxuICAgICAgICBpZiAobnVtYmVyMSA+IDI4MTQ3NDk3NjcxMDY1NSB8fCBudW1iZXIyID4gMjgxNDc0OTc2NzEwNjU1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYml0d2lzZSBBTkQgb2YgdHdvIG51bWJlcnNcclxuICAgICAgICByZXR1cm4gbnVtYmVyMSAmIG51bWJlcjI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQklUTFNISUZUID0gZnVuY3Rpb24obnVtYmVyLCBzaGlmdCkge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgc2hpZnQgPSB1dGlscy5wYXJzZU51bWJlcihzaGlmdCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBzaGlmdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBsZXNzIHRoYW4gMFxyXG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGEgbm9uLWludGVnZXJcclxuICAgICAgICBpZiAoTWF0aC5mbG9vcihudW1iZXIpICE9PSBudW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgZ3JlYXRlciB0aGFuICgyXjQ4KS0xXHJcbiAgICAgICAgaWYgKG51bWJlciA+IDI4MTQ3NDk3NjcxMDY1NSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBzaGlmdCBpcyBncmVhdGVyIHRoYW4gNTNcclxuICAgICAgICBpZiAoTWF0aC5hYnMoc2hpZnQpID4gNTMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBudW1iZXIgc2hpZnRlZCBieSBzaGlmdCBiaXRzIHRvIHRoZSBsZWZ0IG9yIHRvIHRoZSByaWdodCBpZlxyXG4gICAgICAgIC8vIHNoaWZ0IGlzIG5lZ2F0aXZlXHJcbiAgICAgICAgcmV0dXJuIChzaGlmdCA+PSAwKSA/IG51bWJlciA8PCBzaGlmdCA6IG51bWJlciA+PiAtc2hpZnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQklUT1IgPSBmdW5jdGlvbihudW1iZXIxLCBudW1iZXIyKSB7XHJcbiAgICAgICAgbnVtYmVyMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcjEpO1xyXG4gICAgICAgIG51bWJlcjIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIyKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIxLCBudW1iZXIyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBsZXNzIHRoYW4gMFxyXG4gICAgICAgIGlmIChudW1iZXIxIDwgMCB8fCBudW1iZXIyIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgYSBub24taW50ZWdlclxyXG4gICAgICAgIGlmIChNYXRoLmZsb29yKG51bWJlcjEpICE9PSBudW1iZXIxIHx8IE1hdGguZmxvb3IobnVtYmVyMikgIT09IG51bWJlcjIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiAoMl40OCktMVxyXG4gICAgICAgIGlmIChudW1iZXIxID4gMjgxNDc0OTc2NzEwNjU1IHx8IG51bWJlcjIgPiAyODE0NzQ5NzY3MTA2NTUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBiaXR3aXNlIE9SIG9mIHR3byBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIG51bWJlcjEgfCBudW1iZXIyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJJVFJTSElGVCA9IGZ1bmN0aW9uKG51bWJlciwgc2hpZnQpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIHNoaWZ0ID0gdXRpbHMucGFyc2VOdW1iZXIoc2hpZnQpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgc2hpZnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbGVzcyB0aGFuIDBcclxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBhIG5vbi1pbnRlZ2VyXHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3IobnVtYmVyKSAhPT0gbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiAoMl40OCktMVxyXG4gICAgICAgIGlmIChudW1iZXIgPiAyODE0NzQ5NzY3MTA2NTUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiB0aGUgYWJzb2x1dGUgdmFsdWUgb2Ygc2hpZnQgaXMgZ3JlYXRlciB0aGFuIDUzXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHNoaWZ0KSA+IDUzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gbnVtYmVyIHNoaWZ0ZWQgYnkgc2hpZnQgYml0cyB0byB0aGUgcmlnaHQgb3IgdG8gdGhlIGxlZnQgaWZcclxuICAgICAgICAvLyBzaGlmdCBpcyBuZWdhdGl2ZVxyXG4gICAgICAgIHJldHVybiAoc2hpZnQgPj0gMCkgPyBudW1iZXIgPj4gc2hpZnQgOiBudW1iZXIgPDwgLXNoaWZ0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkJJVFhPUiA9IGZ1bmN0aW9uKG51bWJlcjEsIG51bWJlcjIpIHtcclxuICAgICAgICBudW1iZXIxID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMSk7XHJcbiAgICAgICAgbnVtYmVyMiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcjIpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlcjEsIG51bWJlcjIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgbnVtYmVyIGlzIGxlc3MgdGhhbiAwXHJcbiAgICAgICAgaWYgKG51bWJlcjEgPCAwIHx8IG51bWJlcjIgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIG51bWJlciBpcyBhIG5vbi1pbnRlZ2VyXHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3IobnVtYmVyMSkgIT09IG51bWJlcjEgfHwgTWF0aC5mbG9vcihudW1iZXIyKSAhPT0gbnVtYmVyMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBudW1iZXIgaXMgZ3JlYXRlciB0aGFuICgyXjQ4KS0xXHJcbiAgICAgICAgaWYgKG51bWJlcjEgPiAyODE0NzQ5NzY3MTA2NTUgfHwgbnVtYmVyMiA+IDI4MTQ3NDk3NjcxMDY1NSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGJpdHdpc2UgWE9SIG9mIHR3byBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIG51bWJlcjEgXiBudW1iZXIyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNPTVBMRVggPSBmdW5jdGlvbihyZWFsLCBpbWFnaW5hcnksIHN1ZmZpeCkge1xyXG4gICAgICAgIHJlYWwgPSB1dGlscy5wYXJzZU51bWJlcihyZWFsKTtcclxuICAgICAgICBpbWFnaW5hcnkgPSB1dGlscy5wYXJzZU51bWJlcihpbWFnaW5hcnkpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHJlYWwsIGltYWdpbmFyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgc3VmZml4XHJcbiAgICAgICAgc3VmZml4ID0gKHN1ZmZpeCA9PT0gdW5kZWZpbmVkKSA/ICdpJyA6IHN1ZmZpeDtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHN1ZmZpeCBpcyBuZWl0aGVyIFwiaVwiIG5vciBcImpcIlxyXG4gICAgICAgIGlmIChzdWZmaXggIT09ICdpJyAmJiBzdWZmaXggIT09ICdqJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gY29tcGxleCBudW1iZXJcclxuICAgICAgICBpZiAocmVhbCA9PT0gMCAmJiBpbWFnaW5hcnkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyZWFsID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaW1hZ2luYXJ5ID09PSAxKSA/IHN1ZmZpeCA6IGltYWdpbmFyeS50b1N0cmluZygpICsgc3VmZml4O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW1hZ2luYXJ5ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWFsLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaW1hZ2luYXJ5ID4gMCkgPyAnKycgOiAnJztcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWwudG9TdHJpbmcoKSArIHNpZ24gKyAoKGltYWdpbmFyeSA9PT0gMSkgPyBzdWZmaXggOiBpbWFnaW5hcnkudG9TdHJpbmcoKSArIHN1ZmZpeCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNPTlZFUlQgPSBmdW5jdGlvbihudW1iZXIsIGZyb21fdW5pdCwgdG9fdW5pdCkge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMaXN0IG9mIHVuaXRzIHN1cHBvcnRlZCBieSBDT05WRVJUIGFuZCB1bml0cyBkZWZpbmVkIGJ5IHRoZVxyXG4gICAgICAgIC8vIEludGVybmF0aW9uYWwgU3lzdGVtIG9mIFVuaXRzXHJcbiAgICAgICAgLy8gW05hbWUsIFN5bWJvbCwgQWx0ZXJuYXRlIHN5bWJvbHMsIFF1YW50aXR5LCBJU1UsIENPTlZFUlQsIENvbnZlcnNpb25cclxuICAgICAgICAvLyByYXRpb11cclxuICAgICAgICB2YXIgdW5pdHMgPSBbXHJcbiAgICAgICAgICAgIFtcImEudS4gb2YgYWN0aW9uXCIsIFwiP1wiLCBudWxsLCBcImFjdGlvblwiLCBmYWxzZSwgZmFsc2UsIDEuMDU0NTcxNjgxODE4MThlLTM0XSxcclxuICAgICAgICAgICAgW1wiYS51LiBvZiBjaGFyZ2VcIiwgXCJlXCIsIG51bGwsIFwiZWxlY3RyaWNfY2hhcmdlXCIsIGZhbHNlLCBmYWxzZSwgMS42MDIxNzY1MzE0MTQxNGUtMTldLFxyXG4gICAgICAgICAgICBbXCJhLnUuIG9mIGVuZXJneVwiLCBcIkVoXCIsIG51bGwsIFwiZW5lcmd5XCIsIGZhbHNlLCBmYWxzZSwgNC4zNTk3NDQxNzc1NzU3NmUtMThdLFxyXG4gICAgICAgICAgICBbXCJhLnUuIG9mIGxlbmd0aFwiLCBcImE/XCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCBmYWxzZSwgNS4yOTE3NzIxMDgxODE4MmUtMTFdLFxyXG4gICAgICAgICAgICBbXCJhLnUuIG9mIG1hc3NcIiwgXCJtP1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCA5LjEwOTM4MjYxNjE2MTYyZS0zMV0sXHJcbiAgICAgICAgICAgIFtcImEudS4gb2YgdGltZVwiLCBcIj8vRWhcIiwgbnVsbCwgXCJ0aW1lXCIsIGZhbHNlLCBmYWxzZSwgMi40MTg4ODQzMjY1MDUxNmUtMTddLFxyXG4gICAgICAgICAgICBbXCJhZG1pcmFsdHkga25vdFwiLCBcImFkbWtuXCIsIG51bGwsIFwic3BlZWRcIiwgZmFsc2UsIHRydWUsIDAuNTE0NzczMzMzXSxcclxuICAgICAgICAgICAgW1wiYW1wZXJlXCIsIFwiQVwiLCBudWxsLCBcImVsZWN0cmljX2N1cnJlbnRcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJhbXBlcmUgcGVyIG1ldGVyXCIsIFwiQS9tXCIsIG51bGwsIFwibWFnbmV0aWNfZmllbGRfaW50ZW5zaXR5XCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wiw6VuZ3N0csO2bVwiLCBcIsOFXCIsIFtcImFuZ1wiXSwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDFlLTEwXSxcclxuICAgICAgICAgICAgW1wiYXJlXCIsIFwiYXJcIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAxMDBdLFxyXG4gICAgICAgICAgICBbXCJhc3Ryb25vbWljYWwgdW5pdFwiLCBcInVhXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCBmYWxzZSwgMS40OTU5Nzg3MDY5MTY2N2UtMTFdLFxyXG4gICAgICAgICAgICBbXCJiYXJcIiwgXCJiYXJcIiwgbnVsbCwgXCJwcmVzc3VyZVwiLCBmYWxzZSwgZmFsc2UsIDEwMDAwMF0sXHJcbiAgICAgICAgICAgIFtcImJhcm5cIiwgXCJiXCIsIG51bGwsIFwiYXJlYVwiLCBmYWxzZSwgZmFsc2UsIDFlLTI4XSxcclxuICAgICAgICAgICAgW1wiYmVjcXVlcmVsXCIsIFwiQnFcIiwgbnVsbCwgXCJyYWRpb2FjdGl2aXR5XCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wiYml0XCIsIFwiYml0XCIsIFtcImJcIl0sIFwiaW5mb3JtYXRpb25cIiwgZmFsc2UsIHRydWUsIDFdLFxyXG4gICAgICAgICAgICBbXCJidHVcIiwgXCJCVFVcIiwgW1wiYnR1XCJdLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgMTA1NS4wNTU4NTI2Ml0sXHJcbiAgICAgICAgICAgIFtcImJ5dGVcIiwgXCJieXRlXCIsIG51bGwsIFwiaW5mb3JtYXRpb25cIiwgZmFsc2UsIHRydWUsIDhdLFxyXG4gICAgICAgICAgICBbXCJjYW5kZWxhXCIsIFwiY2RcIiwgbnVsbCwgXCJsdW1pbm91c19pbnRlbnNpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJjYW5kZWxhIHBlciBzcXVhcmUgbWV0cmVcIiwgXCJjZC9tP1wiLCBudWxsLCBcImx1bWluYW5jZVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcImNvdWxvbWJcIiwgXCJDXCIsIG51bGwsIFwiZWxlY3RyaWNfY2hhcmdlXCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wiY3ViaWMgw6VuZ3N0csO2bVwiLCBcImFuZzNcIiwgW1wiYW5nXjNcIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAxZS0zMF0sXHJcbiAgICAgICAgICAgIFtcImN1YmljIGZvb3RcIiwgXCJmdDNcIiwgW1wiZnReM1wiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDI4MzE2ODQ2NTkyXSxcclxuICAgICAgICAgICAgW1wiY3ViaWMgaW5jaFwiLCBcImluM1wiLCBbXCJpbl4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMTYzODcwNjRdLFxyXG4gICAgICAgICAgICBbXCJjdWJpYyBsaWdodC15ZWFyXCIsIFwibHkzXCIsIFtcImx5XjNcIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCA4LjQ2Nzg2NjY0NjIzNzE1ZS00N10sXHJcbiAgICAgICAgICAgIFtcImN1YmljIG1ldHJlXCIsIFwibT9cIiwgbnVsbCwgXCJ2b2x1bWVcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXHJcbiAgICAgICAgICAgIFtcImN1YmljIG1pbGVcIiwgXCJtaTNcIiwgW1wibWleM1wiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDQxNjgxODE4MjUuNDQwNThdLFxyXG4gICAgICAgICAgICBbXCJjdWJpYyBuYXV0aWNhbCBtaWxlXCIsIFwiTm1pM1wiLCBbXCJObWleM1wiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDYzNTIxODIyMDhdLFxyXG4gICAgICAgICAgICBbXCJjdWJpYyBQaWNhXCIsIFwiUGljYTNcIiwgW1wiUGljYXB0M1wiLCBcIlBpY2FeM1wiLCBcIlBpY2FwdF4zXCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgNy41ODY2MDM3MDM3MDM2OWUtOF0sXHJcbiAgICAgICAgICAgIFtcImN1YmljIHlhcmRcIiwgXCJ5ZDNcIiwgW1wieWReM1wiXSwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuNzY0NTU0ODU3OTg0XSxcclxuICAgICAgICAgICAgW1wiY3VwXCIsIFwiY3VwXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDIzNjU4ODIzNjVdLFxyXG4gICAgICAgICAgICBbXCJkYWx0b25cIiwgXCJEYVwiLCBbXCJ1XCJdLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCAxLjY2MDUzODg2MjgyODI4ZS0yN10sXHJcbiAgICAgICAgICAgIFtcImRheVwiLCBcImRcIiwgW1wiZGF5XCJdLCBcInRpbWVcIiwgZmFsc2UsIHRydWUsIDg2NDAwXSxcclxuICAgICAgICAgICAgW1wiZGVncmVlXCIsIFwiwrBcIiwgbnVsbCwgXCJhbmdsZVwiLCBmYWxzZSwgZmFsc2UsIDAuMDE3NDUzMjkyNTE5OTQzM10sXHJcbiAgICAgICAgICAgIFtcImRlZ3JlZXMgUmFua2luZVwiLCBcIlJhbmtcIiwgbnVsbCwgXCJ0ZW1wZXJhdHVyZVwiLCBmYWxzZSwgdHJ1ZSwgMC41NTU1NTU1NTU1NTU1NTZdLFxyXG4gICAgICAgICAgICBbXCJkeW5lXCIsIFwiZHluXCIsIFtcImR5XCJdLCBcImZvcmNlXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDAxXSxcclxuICAgICAgICAgICAgW1wiZWxlY3Ryb252b2x0XCIsIFwiZVZcIiwgW1wiZXZcIl0sIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCAxLjYwMjE3NjU2NTE0MTQxXSxcclxuICAgICAgICAgICAgW1wiZWxsXCIsIFwiZWxsXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAxLjE0M10sXHJcbiAgICAgICAgICAgIFtcImVyZ1wiLCBcImVyZ1wiLCBbXCJlXCJdLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgMWUtN10sXHJcbiAgICAgICAgICAgIFtcImZhcmFkXCIsIFwiRlwiLCBudWxsLCBcImVsZWN0cmljX2NhcGFjaXRhbmNlXCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wiZmx1aWQgb3VuY2VcIiwgXCJvelwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMjk1NzM1Mjk1NjI1XSxcclxuICAgICAgICAgICAgW1wiZm9vdFwiLCBcImZ0XCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAwLjMwNDhdLFxyXG4gICAgICAgICAgICBbXCJmb290LXBvdW5kXCIsIFwiZmxiXCIsIG51bGwsIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCAxLjM1NTgxNzk0ODMzMTRdLFxyXG4gICAgICAgICAgICBbXCJnYWxcIiwgXCJHYWxcIiwgbnVsbCwgXCJhY2NlbGVyYXRpb25cIiwgZmFsc2UsIGZhbHNlLCAwLjAxXSxcclxuICAgICAgICAgICAgW1wiZ2FsbG9uXCIsIFwiZ2FsXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMzc4NTQxMTc4NF0sXHJcbiAgICAgICAgICAgIFtcImdhdXNzXCIsIFwiR1wiLCBbXCJnYVwiXSwgXCJtYWduZXRpY19mbHV4X2RlbnNpdHlcIiwgZmFsc2UsIHRydWUsIDFdLFxyXG4gICAgICAgICAgICBbXCJncmFpblwiLCBcImdyYWluXCIsIG51bGwsIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwNjQ3OTg5XSxcclxuICAgICAgICAgICAgW1wiZ3JhbVwiLCBcImdcIiwgbnVsbCwgXCJtYXNzXCIsIGZhbHNlLCB0cnVlLCAwLjAwMV0sXHJcbiAgICAgICAgICAgIFtcImdyYXlcIiwgXCJHeVwiLCBudWxsLCBcImFic29yYmVkX2Rvc2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJncm9zcyByZWdpc3RlcmVkIHRvblwiLCBcIkdSVFwiLCBbXCJyZWd0b25cIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAyLjgzMTY4NDY1OTJdLFxyXG4gICAgICAgICAgICBbXCJoZWN0YXJlXCIsIFwiaGFcIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAxMDAwMF0sXHJcbiAgICAgICAgICAgIFtcImhlbnJ5XCIsIFwiSFwiLCBudWxsLCBcImluZHVjdGFuY2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJoZXJ0elwiLCBcIkh6XCIsIG51bGwsIFwiZnJlcXVlbmN5XCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wiaG9yc2Vwb3dlclwiLCBcIkhQXCIsIFtcImhcIl0sIFwicG93ZXJcIiwgZmFsc2UsIHRydWUsIDc0NS42OTk4NzE1ODIyN10sXHJcbiAgICAgICAgICAgIFtcImhvcnNlcG93ZXItaG91clwiLCBcIkhQaFwiLCBbXCJoaFwiLCBcImhwaFwiXSwgXCJlbmVyZ3lcIiwgZmFsc2UsIHRydWUsIDI2ODQ1MTkuNTM4XSxcclxuICAgICAgICAgICAgW1wiaG91clwiLCBcImhcIiwgW1wiaHJcIl0sIFwidGltZVwiLCBmYWxzZSwgdHJ1ZSwgMzYwMF0sXHJcbiAgICAgICAgICAgIFtcImltcGVyaWFsIGdhbGxvbiAoVS5LLilcIiwgXCJ1a19nYWxcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDA0NTQ2MDldLFxyXG4gICAgICAgICAgICBbXCJpbXBlcmlhbCBodW5kcmVkd2VpZ2h0XCIsIFwibGN3dFwiLCBbXCJ1a19jd3RcIiwgXCJod2VpZ2h0XCJdLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDUwLjgwMjM0NV0sXHJcbiAgICAgICAgICAgIFtcImltcGVyaWFsIHF1YXJ0IChVLkspXCIsIFwidWtfcXRcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAxMTM2NTIyNV0sXHJcbiAgICAgICAgICAgIFtcImltcGVyaWFsIHRvblwiLCBcImJydG9uXCIsIFtcInVrX3RvblwiLCBcIkxUT05cIl0sIFwibWFzc1wiLCBmYWxzZSwgdHJ1ZSwgMTAxNi4wNDY5MDldLFxyXG4gICAgICAgICAgICBbXCJpbmNoXCIsIFwiaW5cIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDAuMDI1NF0sXHJcbiAgICAgICAgICAgIFtcImludGVybmF0aW9uYWwgYWNyZVwiLCBcInVrX2FjcmVcIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCA0MDQ2Ljg1NjQyMjRdLFxyXG4gICAgICAgICAgICBbXCJJVCBjYWxvcmllXCIsIFwiY2FsXCIsIG51bGwsIFwiZW5lcmd5XCIsIGZhbHNlLCB0cnVlLCA0LjE4NjhdLFxyXG4gICAgICAgICAgICBbXCJqb3VsZVwiLCBcIkpcIiwgbnVsbCwgXCJlbmVyZ3lcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXHJcbiAgICAgICAgICAgIFtcImthdGFsXCIsIFwia2F0XCIsIG51bGwsIFwiY2F0YWx5dGljX2FjdGl2aXR5XCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wia2VsdmluXCIsIFwiS1wiLCBbXCJrZWxcIl0sIFwidGVtcGVyYXR1cmVcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXHJcbiAgICAgICAgICAgIFtcImtpbG9ncmFtXCIsIFwia2dcIiwgbnVsbCwgXCJtYXNzXCIsIHRydWUsIHRydWUsIDFdLFxyXG4gICAgICAgICAgICBbXCJrbm90XCIsIFwia25cIiwgbnVsbCwgXCJzcGVlZFwiLCBmYWxzZSwgdHJ1ZSwgMC41MTQ0NDQ0NDQ0NDQ0NDRdLFxyXG4gICAgICAgICAgICBbXCJsaWdodC15ZWFyXCIsIFwibHlcIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDk0NjA3MzA0NzI1ODA4MDBdLFxyXG4gICAgICAgICAgICBbXCJsaXRyZVwiLCBcIkxcIiwgW1wibFwiLCBcImx0XCJdLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDFdLFxyXG4gICAgICAgICAgICBbXCJsdW1lblwiLCBcImxtXCIsIG51bGwsIFwibHVtaW5vdXNfZmx1eFwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcImx1eFwiLCBcImx4XCIsIG51bGwsIFwiaWxsdW1pbmFuY2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJtYXh3ZWxsXCIsIFwiTXhcIiwgbnVsbCwgXCJtYWduZXRpY19mbHV4XCIsIGZhbHNlLCBmYWxzZSwgMWUtMThdLFxyXG4gICAgICAgICAgICBbXCJtZWFzdXJlbWVudCB0b25cIiwgXCJNVE9OXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAxLjEzMjY3Mzg2MzY4XSxcclxuICAgICAgICAgICAgW1wibWV0ZXIgcGVyIGhvdXJcIiwgXCJtL2hcIiwgW1wibS9oclwiXSwgXCJzcGVlZFwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAyNzc3Nzc3Nzc3Nzc3OF0sXHJcbiAgICAgICAgICAgIFtcIm1ldGVyIHBlciBzZWNvbmRcIiwgXCJtL3NcIiwgW1wibS9zZWNcIl0sIFwic3BlZWRcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXHJcbiAgICAgICAgICAgIFtcIm1ldGVyIHBlciBzZWNvbmQgc3F1YXJlZFwiLCBcIm0/cz8/XCIsIG51bGwsIFwiYWNjZWxlcmF0aW9uXCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wicGFyc2VjXCIsIFwicGNcIiwgW1wicGFyc2VjXCJdLCBcImxlbmd0aFwiLCBmYWxzZSwgdHJ1ZSwgMzA4NTY3NzU4MTQ2NzE5MDBdLFxyXG4gICAgICAgICAgICBbXCJtZXRlciBzcXVhcmVkIHBlciBzZWNvbmRcIiwgXCJtPy9zXCIsIG51bGwsIFwia2luZW1hdGljX3Zpc2Nvc2l0eVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcIm1ldHJlXCIsIFwibVwiLCBudWxsLCBcImxlbmd0aFwiLCB0cnVlLCB0cnVlLCAxXSxcclxuICAgICAgICAgICAgW1wibWlsZXMgcGVyIGhvdXJcIiwgXCJtcGhcIiwgbnVsbCwgXCJzcGVlZFwiLCBmYWxzZSwgdHJ1ZSwgMC40NDcwNF0sXHJcbiAgICAgICAgICAgIFtcIm1pbGxpbWV0cmUgb2YgbWVyY3VyeVwiLCBcIm1tSGdcIiwgbnVsbCwgXCJwcmVzc3VyZVwiLCBmYWxzZSwgZmFsc2UsIDEzMy4zMjJdLFxyXG4gICAgICAgICAgICBbXCJtaW51dGVcIiwgXCI/XCIsIG51bGwsIFwiYW5nbGVcIiwgZmFsc2UsIGZhbHNlLCAwLjAwMDI5MDg4ODIwODY2NTcyMl0sXHJcbiAgICAgICAgICAgIFtcIm1pbnV0ZVwiLCBcIm1pblwiLCBbXCJtblwiXSwgXCJ0aW1lXCIsIGZhbHNlLCB0cnVlLCA2MF0sXHJcbiAgICAgICAgICAgIFtcIm1vZGVybiB0ZWFzcG9vblwiLCBcInRzcG1cIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDAwMDA1XSxcclxuICAgICAgICAgICAgW1wibW9sZVwiLCBcIm1vbFwiLCBudWxsLCBcImFtb3VudF9vZl9zdWJzdGFuY2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJtb3JnZW5cIiwgXCJNb3JnZW5cIiwgbnVsbCwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAyNTAwXSxcclxuICAgICAgICAgICAgW1wibi51LiBvZiBhY3Rpb25cIiwgXCI/XCIsIG51bGwsIFwiYWN0aW9uXCIsIGZhbHNlLCBmYWxzZSwgMS4wNTQ1NzE2ODE4MTgxOGUtMzRdLFxyXG4gICAgICAgICAgICBbXCJuLnUuIG9mIG1hc3NcIiwgXCJtP1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIGZhbHNlLCA5LjEwOTM4MjYxNjE2MTYyZS0zMV0sXHJcbiAgICAgICAgICAgIFtcIm4udS4gb2Ygc3BlZWRcIiwgXCJjP1wiLCBudWxsLCBcInNwZWVkXCIsIGZhbHNlLCBmYWxzZSwgMjk5NzkyNDU4XSxcclxuICAgICAgICAgICAgW1wibi51LiBvZiB0aW1lXCIsIFwiPy8obWU/Yz8/KVwiLCBudWxsLCBcInRpbWVcIiwgZmFsc2UsIGZhbHNlLCAxLjI4ODA4ODY2Nzc4Njg3ZS0yMV0sXHJcbiAgICAgICAgICAgIFtcIm5hdXRpY2FsIG1pbGVcIiwgXCJNXCIsIFtcIk5taVwiXSwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDE4NTJdLFxyXG4gICAgICAgICAgICBbXCJuZXd0b25cIiwgXCJOXCIsIG51bGwsIFwiZm9yY2VcIiwgdHJ1ZSwgdHJ1ZSwgMV0sXHJcbiAgICAgICAgICAgIFtcIsWTcnN0ZWRcIiwgXCJPZSBcIiwgbnVsbCwgXCJtYWduZXRpY19maWVsZF9pbnRlbnNpdHlcIiwgZmFsc2UsIGZhbHNlLCA3OS41Nzc0NzE1NDU5NDc3XSxcclxuICAgICAgICAgICAgW1wib2htXCIsIFwizqlcIiwgbnVsbCwgXCJlbGVjdHJpY19yZXNpc3RhbmNlXCIsIHRydWUsIGZhbHNlLCAxXSxcclxuICAgICAgICAgICAgW1wib3VuY2UgbWFzc1wiLCBcIm96bVwiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDAuMDI4MzQ5NTIzMTI1XSxcclxuICAgICAgICAgICAgW1wicGFzY2FsXCIsIFwiUGFcIiwgbnVsbCwgXCJwcmVzc3VyZVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcInBhc2NhbCBzZWNvbmRcIiwgXCJQYT9zXCIsIG51bGwsIFwiZHluYW1pY192aXNjb3NpdHlcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJwZmVyZGVzdMOkcmtlXCIsIFwiUFNcIiwgbnVsbCwgXCJwb3dlclwiLCBmYWxzZSwgdHJ1ZSwgNzM1LjQ5ODc1XSxcclxuICAgICAgICAgICAgW1wicGhvdFwiLCBcInBoXCIsIG51bGwsIFwiaWxsdW1pbmFuY2VcIiwgZmFsc2UsIGZhbHNlLCAwLjAwMDFdLFxyXG4gICAgICAgICAgICBbXCJwaWNhICgxLzYgaW5jaClcIiwgXCJwaWNhXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDM1Mjc3Nzc3Nzc3Nzc4XSxcclxuICAgICAgICAgICAgW1wicGljYSAoMS83MiBpbmNoKVwiLCBcIlBpY2FcIiwgW1wiUGljYXB0XCJdLCBcImxlbmd0aFwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDQyMzMzMzMzMzMzMzMzM10sXHJcbiAgICAgICAgICAgIFtcInBvaXNlXCIsIFwiUFwiLCBudWxsLCBcImR5bmFtaWNfdmlzY29zaXR5XCIsIGZhbHNlLCBmYWxzZSwgMC4xXSxcclxuICAgICAgICAgICAgW1wicG9uZFwiLCBcInBvbmRcIiwgbnVsbCwgXCJmb3JjZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDk4MDY2NV0sXHJcbiAgICAgICAgICAgIFtcInBvdW5kIGZvcmNlXCIsIFwibGJmXCIsIG51bGwsIFwiZm9yY2VcIiwgZmFsc2UsIHRydWUsIDQuNDQ4MjIxNjE1MjYwNV0sXHJcbiAgICAgICAgICAgIFtcInBvdW5kIG1hc3NcIiwgXCJsYm1cIiwgbnVsbCwgXCJtYXNzXCIsIGZhbHNlLCB0cnVlLCAwLjQ1MzU5MjM3XSxcclxuICAgICAgICAgICAgW1wicXVhcnRcIiwgXCJxdFwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDA5NDYzNTI5NDZdLFxyXG4gICAgICAgICAgICBbXCJyYWRpYW5cIiwgXCJyYWRcIiwgbnVsbCwgXCJhbmdsZVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcInNlY29uZFwiLCBcIj9cIiwgbnVsbCwgXCJhbmdsZVwiLCBmYWxzZSwgZmFsc2UsIDAuMDAwMDA0ODQ4MTM2ODExMDk1MzZdLFxyXG4gICAgICAgICAgICBbXCJzZWNvbmRcIiwgXCJzXCIsIFtcInNlY1wiXSwgXCJ0aW1lXCIsIHRydWUsIHRydWUsIDFdLFxyXG4gICAgICAgICAgICBbXCJzaG9ydCBodW5kcmVkd2VpZ2h0XCIsIFwiY3d0XCIsIFtcInNod2VpZ2h0XCJdLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDQ1LjM1OTIzN10sXHJcbiAgICAgICAgICAgIFtcInNpZW1lbnNcIiwgXCJTXCIsIG51bGwsIFwiZWxlY3RyaWNhbF9jb25kdWN0YW5jZVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcInNpZXZlcnRcIiwgXCJTdlwiLCBudWxsLCBcImVxdWl2YWxlbnRfZG9zZVwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcInNsdWdcIiwgXCJzZ1wiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDE0LjU5MzkwMjk0XSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIMOlbmdzdHLDtm1cIiwgXCJhbmcyXCIsIFtcImFuZ14yXCJdLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDFlLTIwXSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIGZvb3RcIiwgXCJmdDJcIiwgW1wiZnReMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAwLjA5MjkwMzA0XSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIGluY2hcIiwgXCJpbjJcIiwgW1wiaW5eMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDY0NTE2XSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIGxpZ2h0LXllYXJcIiwgXCJseTJcIiwgW1wibHleMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCA4Ljk1MDU0MjEwNzQ4MTg5ZSszMV0sXHJcbiAgICAgICAgICAgIFtcInNxdWFyZSBtZXRlclwiLCBcIm0/XCIsIG51bGwsIFwiYXJlYVwiLCB0cnVlLCB0cnVlLCAxXSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIG1pbGVcIiwgXCJtaTJcIiwgW1wibWleMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAyNTg5OTg4LjExMDMzNl0sXHJcbiAgICAgICAgICAgIFtcInNxdWFyZSBuYXV0aWNhbCBtaWxlXCIsIFwiTm1pMlwiLCBbXCJObWleMlwiXSwgXCJhcmVhXCIsIGZhbHNlLCB0cnVlLCAzNDI5OTA0XSxcclxuICAgICAgICAgICAgW1wic3F1YXJlIFBpY2FcIiwgXCJQaWNhMlwiLCBbXCJQaWNhcHQyXCIsIFwiUGljYV4yXCIsIFwiUGljYXB0XjJcIl0sIFwiYXJlYVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMTc5MjExMTExMTExMV0sXHJcbiAgICAgICAgICAgIFtcInNxdWFyZSB5YXJkXCIsIFwieWQyXCIsIFtcInlkXjJcIl0sIFwiYXJlYVwiLCBmYWxzZSwgdHJ1ZSwgMC44MzYxMjczNl0sXHJcbiAgICAgICAgICAgIFtcInN0YXR1dGUgbWlsZVwiLCBcIm1pXCIsIG51bGwsIFwibGVuZ3RoXCIsIGZhbHNlLCB0cnVlLCAxNjA5LjM0NF0sXHJcbiAgICAgICAgICAgIFtcInN0ZXJhZGlhblwiLCBcInNyXCIsIG51bGwsIFwic29saWRfYW5nbGVcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJzdGlsYlwiLCBcInNiXCIsIG51bGwsIFwibHVtaW5hbmNlXCIsIGZhbHNlLCBmYWxzZSwgMC4wMDAxXSxcclxuICAgICAgICAgICAgW1wic3Rva2VzXCIsIFwiU3RcIiwgbnVsbCwgXCJraW5lbWF0aWNfdmlzY29zaXR5XCIsIGZhbHNlLCBmYWxzZSwgMC4wMDAxXSxcclxuICAgICAgICAgICAgW1wic3RvbmVcIiwgXCJzdG9uZVwiLCBudWxsLCBcIm1hc3NcIiwgZmFsc2UsIHRydWUsIDYuMzUwMjkzMThdLFxyXG4gICAgICAgICAgICBbXCJ0YWJsZXNwb29uXCIsIFwidGJzXCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDAxNDc4NjhdLFxyXG4gICAgICAgICAgICBbXCJ0ZWFzcG9vblwiLCBcInRzcFwiLCBudWxsLCBcInZvbHVtZVwiLCBmYWxzZSwgdHJ1ZSwgMC4wMDAwMDQ5Mjg5Ml0sXHJcbiAgICAgICAgICAgIFtcInRlc2xhXCIsIFwiVFwiLCBudWxsLCBcIm1hZ25ldGljX2ZsdXhfZGVuc2l0eVwiLCB0cnVlLCB0cnVlLCAxXSxcclxuICAgICAgICAgICAgW1widGhlcm1vZHluYW1pYyBjYWxvcmllXCIsIFwiY1wiLCBudWxsLCBcImVuZXJneVwiLCBmYWxzZSwgdHJ1ZSwgNC4xODRdLFxyXG4gICAgICAgICAgICBbXCJ0b25cIiwgXCJ0b25cIiwgbnVsbCwgXCJtYXNzXCIsIGZhbHNlLCB0cnVlLCA5MDcuMTg0NzRdLFxyXG4gICAgICAgICAgICBbXCJ0b25uZVwiLCBcInRcIiwgbnVsbCwgXCJtYXNzXCIsIGZhbHNlLCBmYWxzZSwgMTAwMF0sXHJcbiAgICAgICAgICAgIFtcIlUuSy4gcGludFwiLCBcInVrX3B0XCIsIG51bGwsIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDU2ODI2MTI1XSxcclxuICAgICAgICAgICAgW1wiVS5TLiBidXNoZWxcIiwgXCJidXNoZWxcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMDM1MjM5MDddLFxyXG4gICAgICAgICAgICBbXCJVLlMuIG9pbCBiYXJyZWxcIiwgXCJiYXJyZWxcIiwgbnVsbCwgXCJ2b2x1bWVcIiwgZmFsc2UsIHRydWUsIDAuMTU4OTg3Mjk1XSxcclxuICAgICAgICAgICAgW1wiVS5TLiBwaW50XCIsIFwicHRcIiwgW1widXNfcHRcIl0sIFwidm9sdW1lXCIsIGZhbHNlLCB0cnVlLCAwLjAwMDQ3MzE3NjQ3M10sXHJcbiAgICAgICAgICAgIFtcIlUuUy4gc3VydmV5IG1pbGVcIiwgXCJzdXJ2ZXlfbWlcIiwgbnVsbCwgXCJsZW5ndGhcIiwgZmFsc2UsIHRydWUsIDE2MDkuMzQ3MjE5XSxcclxuICAgICAgICAgICAgW1wiVS5TLiBzdXJ2ZXkvc3RhdHV0ZSBhY3JlXCIsIFwidXNfYWNyZVwiLCBudWxsLCBcImFyZWFcIiwgZmFsc2UsIHRydWUsIDQwNDYuODcyNjFdLFxyXG4gICAgICAgICAgICBbXCJ2b2x0XCIsIFwiVlwiLCBudWxsLCBcInZvbHRhZ2VcIiwgdHJ1ZSwgZmFsc2UsIDFdLFxyXG4gICAgICAgICAgICBbXCJ3YXR0XCIsIFwiV1wiLCBudWxsLCBcInBvd2VyXCIsIHRydWUsIHRydWUsIDFdLFxyXG4gICAgICAgICAgICBbXCJ3YXR0LWhvdXJcIiwgXCJXaFwiLCBbXCJ3aFwiXSwgXCJlbmVyZ3lcIiwgZmFsc2UsIHRydWUsIDM2MDBdLFxyXG4gICAgICAgICAgICBbXCJ3ZWJlclwiLCBcIldiXCIsIG51bGwsIFwibWFnbmV0aWNfZmx1eFwiLCB0cnVlLCBmYWxzZSwgMV0sXHJcbiAgICAgICAgICAgIFtcInlhcmRcIiwgXCJ5ZFwiLCBudWxsLCBcImxlbmd0aFwiLCBmYWxzZSwgdHJ1ZSwgMC45MTQ0XSxcclxuICAgICAgICAgICAgW1wieWVhclwiLCBcInlyXCIsIG51bGwsIFwidGltZVwiLCBmYWxzZSwgdHJ1ZSwgMzE1NTc2MDBdXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgLy8gQmluYXJ5IHByZWZpeGVzXHJcbiAgICAgICAgLy8gW05hbWUsIFByZWZpeCBwb3dlciBvZiAyIHZhbHVlLCBQcmV2aXggdmFsdWUsIEFiYnJldmlhdGlvbiwgRGVyaXZlZFxyXG4gICAgICAgIC8vIGZyb21dXHJcbiAgICAgICAgdmFyIGJpbmFyeV9wcmVmaXhlcyA9IHtcclxuICAgICAgICAgICAgWWk6IFtcInlvYmlcIiwgODAsIDEyMDg5MjU4MTk2MTQ2MjkxNzQ3MDYxNzYsIFwiWWlcIiwgXCJ5b3R0YVwiXSxcclxuICAgICAgICAgICAgWmk6IFtcInplYmlcIiwgNzAsIDExODA1OTE2MjA3MTc0MTEzMDM0MjQsIFwiWmlcIiwgXCJ6ZXR0YVwiXSxcclxuICAgICAgICAgICAgRWk6IFtcImV4YmlcIiwgNjAsIDExNTI5MjE1MDQ2MDY4NDY5NzYsIFwiRWlcIiwgXCJleGFcIl0sXHJcbiAgICAgICAgICAgIFBpOiBbXCJwZWJpXCIsIDUwLCAxMTI1ODk5OTA2ODQyNjI0LCBcIlBpXCIsIFwicGV0YVwiXSxcclxuICAgICAgICAgICAgVGk6IFtcInRlYmlcIiwgNDAsIDEwOTk1MTE2Mjc3NzYsIFwiVGlcIiwgXCJ0ZXJhXCJdLFxyXG4gICAgICAgICAgICBHaTogW1wiZ2liaVwiLCAzMCwgMTA3Mzc0MTgyNCwgXCJHaVwiLCBcImdpZ2FcIl0sXHJcbiAgICAgICAgICAgIE1pOiBbXCJtZWJpXCIsIDIwLCAxMDQ4NTc2LCBcIk1pXCIsIFwibWVnYVwiXSxcclxuICAgICAgICAgICAga2k6IFtcImtpYmlcIiwgMTAsIDEwMjQsIFwia2lcIiwgXCJraWxvXCJdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gVW5pdCBwcmVmaXhlc1xyXG4gICAgICAgIC8vIFtOYW1lLCBNdWx0aXBsaWVyLCBBYmJyZXZpYXRpb25dXHJcbiAgICAgICAgdmFyIHVuaXRfcHJlZml4ZXMgPSB7XHJcbiAgICAgICAgICAgIFk6IFtcInlvdHRhXCIsIDFlKzI0LCBcIllcIl0sXHJcbiAgICAgICAgICAgIFo6IFtcInpldHRhXCIsIDFlKzIxLCBcIlpcIl0sXHJcbiAgICAgICAgICAgIEU6IFtcImV4YVwiLCAxZSsxOCwgXCJFXCJdLFxyXG4gICAgICAgICAgICBQOiBbXCJwZXRhXCIsIDFlKzE1LCBcIlBcIl0sXHJcbiAgICAgICAgICAgIFQ6IFtcInRlcmFcIiwgMWUrMTIsIFwiVFwiXSxcclxuICAgICAgICAgICAgRzogW1wiZ2lnYVwiLCAxZSswOSwgXCJHXCJdLFxyXG4gICAgICAgICAgICBNOiBbXCJtZWdhXCIsIDFlKzA2LCBcIk1cIl0sXHJcbiAgICAgICAgICAgIGs6IFtcImtpbG9cIiwgMWUrMDMsIFwia1wiXSxcclxuICAgICAgICAgICAgaDogW1wiaGVjdG9cIiwgMWUrMDIsIFwiaFwiXSxcclxuICAgICAgICAgICAgZTogW1wiZGVrYW9cIiwgMWUrMDEsIFwiZVwiXSxcclxuICAgICAgICAgICAgZDogW1wiZGVjaVwiLCAxZS0wMSwgXCJkXCJdLFxyXG4gICAgICAgICAgICBjOiBbXCJjZW50aVwiLCAxZS0wMiwgXCJjXCJdLFxyXG4gICAgICAgICAgICBtOiBbXCJtaWxsaVwiLCAxZS0wMywgXCJtXCJdLFxyXG4gICAgICAgICAgICB1OiBbXCJtaWNyb1wiLCAxZS0wNiwgXCJ1XCJdLFxyXG4gICAgICAgICAgICBuOiBbXCJuYW5vXCIsIDFlLTA5LCBcIm5cIl0sXHJcbiAgICAgICAgICAgIHA6IFtcInBpY29cIiwgMWUtMTIsIFwicFwiXSxcclxuICAgICAgICAgICAgZjogW1wiZmVtdG9cIiwgMWUtMTUsIFwiZlwiXSxcclxuICAgICAgICAgICAgYTogW1wiYXR0b1wiLCAxZS0xOCwgXCJhXCJdLFxyXG4gICAgICAgICAgICB6OiBbXCJ6ZXB0b1wiLCAxZS0yMSwgXCJ6XCJdLFxyXG4gICAgICAgICAgICB5OiBbXCJ5b2N0b1wiLCAxZS0yNCwgXCJ5XCJdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB1bml0cyBhbmQgbXVsdGlwbGllcnNcclxuICAgICAgICB2YXIgZnJvbSA9IG51bGw7XHJcbiAgICAgICAgdmFyIHRvID0gbnVsbDtcclxuICAgICAgICB2YXIgYmFzZV9mcm9tX3VuaXQgPSBmcm9tX3VuaXQ7XHJcbiAgICAgICAgdmFyIGJhc2VfdG9fdW5pdCA9IHRvX3VuaXQ7XHJcbiAgICAgICAgdmFyIGZyb21fbXVsdGlwbGllciA9IDE7XHJcbiAgICAgICAgdmFyIHRvX211bHRpcGxpZXIgPSAxO1xyXG4gICAgICAgIHZhciBhbHQ7XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBmcm9tIGFuZCB0byB1bml0c1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYWx0ID0gKHVuaXRzW2ldWzJdID09PSBudWxsKSA/IFtdIDogdW5pdHNbaV1bMl07XHJcbiAgICAgICAgICAgIGlmICh1bml0c1tpXVsxXSA9PT0gYmFzZV9mcm9tX3VuaXQgfHwgYWx0LmluZGV4T2YoYmFzZV9mcm9tX3VuaXQpID49IDApIHtcclxuICAgICAgICAgICAgICBmcm9tID0gdW5pdHNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHVuaXRzW2ldWzFdID09PSBiYXNlX3RvX3VuaXQgfHwgYWx0LmluZGV4T2YoYmFzZV90b191bml0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgdG8gPSB1bml0c1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGZyb20gcHJlZml4XHJcbiAgICAgICAgaWYgKGZyb20gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIGZyb21fYmluYXJ5X3ByZWZpeCA9IGJpbmFyeV9wcmVmaXhlc1tmcm9tX3VuaXQuc3Vic3RyaW5nKDAsIDIpXTtcclxuICAgICAgICAgICAgdmFyIGZyb21fdW5pdF9wcmVmaXggPSB1bml0X3ByZWZpeGVzW2Zyb21fdW5pdC5zdWJzdHJpbmcoMCwgMSldO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIGRla2FvIHVuaXQgcHJlZml4IChvbmx5IHVuaXQgcHJlZml4IHdpdGggdHdvIGNoYXJhY3RlcnMpXHJcbiAgICAgICAgICAgIGlmIChmcm9tX3VuaXQuc3Vic3RyaW5nKDAsIDIpID09PSAnZGEnKSB7XHJcbiAgICAgICAgICAgICAgZnJvbV91bml0X3ByZWZpeCA9IFtcImRla2FvXCIsIDFlKzAxLCBcImRhXCJdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBIYW5kbGUgYmluYXJ5IHByZWZpeGVzIGZpcnN0IChzbyB0aGF0ICdZaScgaXMgcHJvY2Vzc2VkIGJlZm9yZVxyXG4gICAgICAgICAgICAvLyAnWScpXHJcbiAgICAgICAgICAgIGlmIChmcm9tX2JpbmFyeV9wcmVmaXgpIHtcclxuICAgICAgICAgICAgICBmcm9tX211bHRpcGxpZXIgPSBmcm9tX2JpbmFyeV9wcmVmaXhbMl07XHJcbiAgICAgICAgICAgICAgYmFzZV9mcm9tX3VuaXQgPSBmcm9tX3VuaXQuc3Vic3RyaW5nKDIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb21fdW5pdF9wcmVmaXgpIHtcclxuICAgICAgICAgICAgICBmcm9tX211bHRpcGxpZXIgPSBmcm9tX3VuaXRfcHJlZml4WzFdO1xyXG4gICAgICAgICAgICAgIGJhc2VfZnJvbV91bml0ID0gZnJvbV91bml0LnN1YnN0cmluZyhmcm9tX3VuaXRfcHJlZml4WzJdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIExvb2t1cCBmcm9tIHVuaXRcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1bml0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgIGFsdCA9ICh1bml0c1tqXVsyXSA9PT0gbnVsbCkgPyBbXSA6IHVuaXRzW2pdWzJdO1xyXG4gICAgICAgICAgICAgIGlmICh1bml0c1tqXVsxXSA9PT0gYmFzZV9mcm9tX3VuaXQgfHwgYWx0LmluZGV4T2YoYmFzZV9mcm9tX3VuaXQpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgZnJvbSA9IHVuaXRzW2pdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIHRvIHByZWZpeFxyXG4gICAgICAgIGlmICh0byA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgdG9fYmluYXJ5X3ByZWZpeCA9IGJpbmFyeV9wcmVmaXhlc1t0b191bml0LnN1YnN0cmluZygwLCAyKV07XHJcbiAgICAgICAgICAgIHZhciB0b191bml0X3ByZWZpeCA9IHVuaXRfcHJlZml4ZXNbdG9fdW5pdC5zdWJzdHJpbmcoMCwgMSldO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIGRla2FvIHVuaXQgcHJlZml4IChvbmx5IHVuaXQgcHJlZml4IHdpdGggdHdvIGNoYXJhY3RlcnMpXHJcbiAgICAgICAgICAgIGlmICh0b191bml0LnN1YnN0cmluZygwLCAyKSA9PT0gJ2RhJykge1xyXG4gICAgICAgICAgICAgIHRvX3VuaXRfcHJlZml4ID0gW1wiZGVrYW9cIiwgMWUrMDEsIFwiZGFcIl07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBiaW5hcnkgcHJlZml4ZXMgZmlyc3QgKHNvIHRoYXQgJ1lpJyBpcyBwcm9jZXNzZWQgYmVmb3JlXHJcbiAgICAgICAgICAgIC8vICdZJylcclxuICAgICAgICAgICAgaWYgKHRvX2JpbmFyeV9wcmVmaXgpIHtcclxuICAgICAgICAgICAgICB0b19tdWx0aXBsaWVyID0gdG9fYmluYXJ5X3ByZWZpeFsyXTtcclxuICAgICAgICAgICAgICBiYXNlX3RvX3VuaXQgPSB0b191bml0LnN1YnN0cmluZygyKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0b191bml0X3ByZWZpeCkge1xyXG4gICAgICAgICAgICAgIHRvX211bHRpcGxpZXIgPSB0b191bml0X3ByZWZpeFsxXTtcclxuICAgICAgICAgICAgICBiYXNlX3RvX3VuaXQgPSB0b191bml0LnN1YnN0cmluZyh0b191bml0X3ByZWZpeFsyXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBMb29rdXAgdG8gdW5pdFxyXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHVuaXRzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgYWx0ID0gKHVuaXRzW2tdWzJdID09PSBudWxsKSA/IFtdIDogdW5pdHNba11bMl07XHJcbiAgICAgICAgICAgICAgaWYgKHVuaXRzW2tdWzFdID09PSBiYXNlX3RvX3VuaXQgfHwgYWx0LmluZGV4T2YoYmFzZV90b191bml0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRvID0gdW5pdHNba107XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgYSB1bml0IGRvZXMgbm90IGV4aXN0XHJcbiAgICAgICAgaWYgKGZyb20gPT09IG51bGwgfHwgdG8gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHVuaXRzIHJlcHJlc2VudCBkaWZmZXJlbnQgcXVhbnRpdGllc1xyXG4gICAgICAgIGlmIChmcm9tWzNdICE9PSB0b1szXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gY29udmVydGVkIG51bWJlclxyXG4gICAgICAgIHJldHVybiBudW1iZXIgKiBmcm9tWzZdICogZnJvbV9tdWx0aXBsaWVyIC8gKHRvWzZdICogdG9fbXVsdGlwbGllcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuREVDMkJJTiA9IGZ1bmN0aW9uKG51bWJlciwgcGxhY2VzKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGRlY2ltYWwsIGlzIGxvd2VyIHRoYW4gLTUxMiwgb3IgaXNcclxuICAgICAgICAvLyBncmVhdGVyIHRoYW4gNTExXHJcbiAgICAgICAgaWYgKCEvXi0/WzAtOV17MSwzfSQvLnRlc3QobnVtYmVyKSB8fCBudW1iZXIgPCAtNTEyIHx8IG51bWJlciA+IDUxMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWdub3JlIHBsYWNlcyBhbmQgcmV0dXJuIGEgMTAtY2hhcmFjdGVyIGJpbmFyeSBudW1iZXIgaWYgbnVtYmVyIGlzXHJcbiAgICAgICAgLy8gbmVnYXRpdmVcclxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJzEnICsgUkVQVCgnMCcsIDkgLSAoNTEyICsgbnVtYmVyKS50b1N0cmluZygyKS5sZW5ndGgpICsgKDUxMiArIG51bWJlcikudG9TdHJpbmcoMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGRlY2ltYWwgbnVtYmVyIHRvIGJpbmFyeVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludChudW1iZXIsIDEwKS50b1N0cmluZygyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGJpbmFyeSBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5XHJcbiAgICAgICAgLy8gaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmICh0eXBlb2YgcGxhY2VzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAocGxhY2VzIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZ1xyXG4gICAgICAgICAgICAvLyBVbmRlcnNjb3JlLnN0cmluZylcclxuICAgICAgICAgICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyBSRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkRFQzJIRVggPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBkZWNpbWFsLCBpcyBsb3dlciB0aGFuIC01NDk3NTU4MTM4ODgsXHJcbiAgICAgICAgLy8gb3IgaXMgZ3JlYXRlciB0aGFuIDU0OTc1NTgxMzg4N1xyXG4gICAgICAgIGlmICghL14tP1swLTldezEsMTJ9JC8udGVzdChudW1iZXIpIHx8IG51bWJlciA8IC01NDk3NTU4MTM4ODggfHwgbnVtYmVyID4gNTQ5NzU1ODEzODg3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgaGV4YWRlY2ltYWwgbnVtYmVyIGlmIG51bWJlclxyXG4gICAgICAgIC8vIGlzIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICgxMDk5NTExNjI3Nzc2ICsgbnVtYmVyKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGRlY2ltYWwgbnVtYmVyIHRvIGhleGFkZWNpbWFsXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KG51bWJlciwgMTApLnRvU3RyaW5nKDE2KTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGhleGFkZWNpbWFsIG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVyc1xyXG4gICAgICAgIC8vIG5lY2Vzc2FyeSBpZiBwbGFjZXMgaXMgdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKHR5cGVvZiBwbGFjZXMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBub25udW1lcmljXHJcbiAgICAgICAgICAgIGlmIChpc05hTihwbGFjZXMpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5lZ2F0aXZlXHJcbiAgICAgICAgICAgIGlmIChwbGFjZXMgPCAwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgcGxhY2VzIGluIGNhc2UgaXQgaXMgbm90IGFuIGludGVnZXJcclxuICAgICAgICAgICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nXHJcbiAgICAgICAgICAgIC8vIFVuZGVyc2NvcmUuc3RyaW5nKVxyXG4gICAgICAgICAgICByZXR1cm4gKHBsYWNlcyA+PSByZXN1bHQubGVuZ3RoKSA/IFJFUFQoJzAnLCBwbGFjZXMgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdCA6IGVycm9yLm51bTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuREVDMk9DVCA9IGZ1bmN0aW9uKG51bWJlciwgcGxhY2VzKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGRlY2ltYWwsIGlzIGxvd2VyIHRoYW4gLTU0OTc1NTgxMzg4OCxcclxuICAgICAgICAvLyBvciBpcyBncmVhdGVyIHRoYW4gNTQ5NzU1ODEzODg3XHJcbiAgICAgICAgaWYgKCEvXi0/WzAtOV17MSw5fSQvLnRlc3QobnVtYmVyKSB8fCBudW1iZXIgPCAtNTM2ODcwOTEyIHx8IG51bWJlciA+IDUzNjg3MDkxMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWdub3JlIHBsYWNlcyBhbmQgcmV0dXJuIGEgMTAtY2hhcmFjdGVyIG9jdGFsIG51bWJlciBpZiBudW1iZXIgaXNcclxuICAgICAgICAvLyBuZWdhdGl2ZVxyXG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoMTA3Mzc0MTgyNCArIG51bWJlcikudG9TdHJpbmcoOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGRlY2ltYWwgbnVtYmVyIHRvIG9jdGFsXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KG51bWJlciwgMTApLnRvU3RyaW5nKDgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gb2N0YWwgbnVtYmVyIHVzaW5nIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIG5lY2Vzc2FyeVxyXG4gICAgICAgIC8vIGlmIHBsYWNlcyBpcyB1bmRlZmluZWRcclxuICAgICAgICBpZiAodHlwZW9mIHBsYWNlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5vbm51bWVyaWNcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHBsYWNlcykpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbmVnYXRpdmVcclxuICAgICAgICAgICAgaWYgKHBsYWNlcyA8IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUcnVuY2F0ZSBwbGFjZXMgaW4gY2FzZSBpdCBpcyBub3QgYW4gaW50ZWdlclxyXG4gICAgICAgICAgICBwbGFjZXMgPSBNYXRoLmZsb29yKHBsYWNlcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBQYWQgcmV0dXJuIHZhbHVlIHdpdGggbGVhZGluZyAwcyAoemVyb3MpIGlmIG5lY2Vzc2FyeSAodXNpbmdcclxuICAgICAgICAgICAgLy8gVW5kZXJzY29yZS5zdHJpbmcpXHJcbiAgICAgICAgICAgIHJldHVybiAocGxhY2VzID49IHJlc3VsdC5sZW5ndGgpID8gUkVQVCgnMCcsIHBsYWNlcyAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0IDogZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ERUxUQSA9IGZ1bmN0aW9uKG51bWJlcjEsIG51bWJlcjIpIHtcclxuICAgICAgICAvLyBTZXQgbnVtYmVyMiB0byB6ZXJvIGlmIHVuZGVmaW5lZFxyXG4gICAgICAgIG51bWJlcjIgPSAobnVtYmVyMiA9PT0gdW5kZWZpbmVkKSA/IDAgOiBudW1iZXIyO1xyXG4gICAgICAgIG51bWJlcjEgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIxKTtcclxuICAgICAgICBudW1iZXIyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyMik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyMSwgbnVtYmVyMikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGRlbHRhXHJcbiAgICAgICAgcmV0dXJuIChudW1iZXIxID09PSBudW1iZXIyKSA/IDEgOiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkVSRiA9IGZ1bmN0aW9uKGxvd2VyX2JvdW5kLCB1cHBlcl9ib3VuZCkge1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkVSRi5QUkVDSVNFID0gZnVuY3Rpb24oKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRVJGQyA9IGZ1bmN0aW9uKHgpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5FUkZDLlBSRUNJU0UgPSBmdW5jdGlvbigpIHtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5HRVNURVAgPSBmdW5jdGlvbihudW1iZXIsIHN0ZXApIHtcclxuICAgICAgICBzdGVwID0gc3RlcCB8fCAwO1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioc3RlcCwgbnVtYmVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGRlbHRhXHJcbiAgICAgICAgcmV0dXJuIChudW1iZXIgPj0gc3RlcCkgPyAxIDogMDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5IRVgyQklOID0gZnVuY3Rpb24obnVtYmVyLCBwbGFjZXMpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBoZXhhZGVjaW1hbCBvciBjb250YWlucyBtb3JlIHRoYW4gdGVuXHJcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxyXG4gICAgICAgIGlmICghL15bMC05QS1GYS1mXXsxLDEwfSQvLnRlc3QobnVtYmVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgbnVtYmVyIGlzIG5lZ2F0aXZlXHJcbiAgICAgICAgdmFyIG5lZ2F0aXZlID0gKG51bWJlci5sZW5ndGggPT09IDEwICYmIG51bWJlci5zdWJzdHJpbmcoMCwgMSkudG9Mb3dlckNhc2UoKSA9PT0gJ2YnKSA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBoZXhhZGVjaW1hbCBudW1iZXIgdG8gZGVjaW1hbFxyXG4gICAgICAgIHZhciBkZWNpbWFsID0gKG5lZ2F0aXZlKSA/IHBhcnNlSW50KG51bWJlciwgMTYpIC0gMTA5OTUxMTYyNzc3NiA6IHBhcnNlSW50KG51bWJlciwgMTYpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGxvd2VyIHRoYW4gLTUxMiBvciBncmVhdGVyIHRoYW4gNTExXHJcbiAgICAgICAgaWYgKGRlY2ltYWwgPCAtNTEyIHx8IGRlY2ltYWwgPiA1MTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBiaW5hcnkgbnVtYmVyIGlmIG51bWJlciBpc1xyXG4gICAgICAgIC8vIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKG5lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMScgKyBSRVBUKCcwJywgOSAtICg1MTIgKyBkZWNpbWFsKS50b1N0cmluZygyKS5sZW5ndGgpICsgKDUxMiArIGRlY2ltYWwpLnRvU3RyaW5nKDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBiaW5hcnlcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZygyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGJpbmFyeSBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5XHJcbiAgICAgICAgLy8gaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmIChwbGFjZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAocGxhY2VzIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZ1xyXG4gICAgICAgICAgICAvLyBVbmRlcnNjb3JlLnN0cmluZylcclxuICAgICAgICAgICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyBSRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkhFWDJERUMgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBoZXhhZGVjaW1hbCBvciBjb250YWlucyBtb3JlIHRoYW4gdGVuXHJcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxyXG4gICAgICAgIGlmICghL15bMC05QS1GYS1mXXsxLDEwfSQvLnRlc3QobnVtYmVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBoZXhhZGVjaW1hbCBudW1iZXIgdG8gZGVjaW1hbFxyXG4gICAgICAgIHZhciBkZWNpbWFsID0gcGFyc2VJbnQobnVtYmVyLCAxNik7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBkZWNpbWFsIG51bWJlclxyXG4gICAgICAgIHJldHVybiAoZGVjaW1hbCA+PSA1NDk3NTU4MTM4ODgpID8gZGVjaW1hbCAtIDEwOTk1MTE2Mjc3NzYgOiBkZWNpbWFsO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkhFWDJPQ1QgPSBmdW5jdGlvbihudW1iZXIsIHBsYWNlcykge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBudW1iZXIgaXMgbm90IGhleGFkZWNpbWFsIG9yIGNvbnRhaW5zIG1vcmUgdGhhbiB0ZW5cclxuICAgICAgICAvLyBjaGFyYWN0ZXJzICgxMCBkaWdpdHMpXHJcbiAgICAgICAgaWYgKCEvXlswLTlBLUZhLWZdezEsMTB9JC8udGVzdChudW1iZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGhleGFkZWNpbWFsIG51bWJlciB0byBkZWNpbWFsXHJcbiAgICAgICAgdmFyIGRlY2ltYWwgPSBwYXJzZUludChudW1iZXIsIDE2KTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBwb3NpdGl2ZSBhbmQgZ3JlYXRlciB0aGFuIDB4MWZmZmZmZmZcclxuICAgICAgICAvLyAoNTM2ODcwOTExKVxyXG4gICAgICAgIGlmIChkZWNpbWFsID4gNTM2ODcwOTExICYmIGRlY2ltYWwgPCAxMDk4OTc0NzU2ODY0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZ25vcmUgcGxhY2VzIGFuZCByZXR1cm4gYSAxMC1jaGFyYWN0ZXIgb2N0YWwgbnVtYmVyIGlmIG51bWJlciBpc1xyXG4gICAgICAgIC8vIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKGRlY2ltYWwgPj0gMTA5ODk3NDc1Njg2NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGRlY2ltYWwgLSAxMDk4NDM3ODg1OTUyKS50b1N0cmluZyg4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgZGVjaW1hbCBudW1iZXIgdG8gb2N0YWxcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZyg4KTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIG9jdGFsIG51bWJlciB1c2luZyB0aGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBuZWNlc3NhcnlcclxuICAgICAgICAvLyBpZiBwbGFjZXMgaXMgdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKHBsYWNlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBub25udW1lcmljXHJcbiAgICAgICAgICAgIGlmIChpc05hTihwbGFjZXMpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGxhY2VzIGlzIG5lZ2F0aXZlXHJcbiAgICAgICAgICAgIGlmIChwbGFjZXMgPCAwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgcGxhY2VzIGluIGNhc2UgaXQgaXMgbm90IGFuIGludGVnZXJcclxuICAgICAgICAgICAgcGxhY2VzID0gTWF0aC5mbG9vcihwbGFjZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gUGFkIHJldHVybiB2YWx1ZSB3aXRoIGxlYWRpbmcgMHMgKHplcm9zKSBpZiBuZWNlc3NhcnkgKHVzaW5nXHJcbiAgICAgICAgICAgIC8vIFVuZGVyc2NvcmUuc3RyaW5nKVxyXG4gICAgICAgICAgICByZXR1cm4gKHBsYWNlcyA+PSByZXN1bHQubGVuZ3RoKSA/IFJFUFQoJzAnLCBwbGFjZXMgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdCA6IGVycm9yLm51bTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1BQlMgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgY29lZmZpY2llbnQgaXMgbm90IGEgbnVtYmVyXHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGFic29sdXRlIHZhbHVlIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTUFHSU5BUlkgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGludW1iZXIgPT09IHVuZGVmaW5lZCB8fCBpbnVtYmVyID09PSB0cnVlIHx8IGludW1iZXIgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiAwIGlmIGludW1iZXIgaXMgZXF1YWwgdG8gMFxyXG4gICAgICAgIGlmIChpbnVtYmVyID09PSAwIHx8IGludW1iZXIgPT09ICcwJykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2VzXHJcbiAgICAgICAgaWYgKFsnaScsICdqJ10uaW5kZXhPZihpbnVtYmVyKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTm9ybWFsaXplIGltYWdpbmFyeSBjb2VmZmljaWVudFxyXG4gICAgICAgIGludW1iZXIgPSBpbnVtYmVyLnJlcGxhY2UoJytpJywgJysxaScpLnJlcGxhY2UoJy1pJywgJy0xaScpLnJlcGxhY2UoJytqJywgJysxaicpLnJlcGxhY2UoJy1qJywgJy0xaicpO1xyXG5cclxuICAgICAgICAvLyBMb29rdXAgc2lnblxyXG4gICAgICAgIHZhciBwbHVzID0gaW51bWJlci5pbmRleE9mKCcrJyk7XHJcbiAgICAgICAgdmFyIG1pbnVzID0gaW51bWJlci5pbmRleE9mKCctJyk7XHJcbiAgICAgICAgaWYgKHBsdXMgPT09IDApIHtcclxuICAgICAgICAgICAgcGx1cyA9IGludW1iZXIuaW5kZXhPZignKycsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG1pbnVzID09PSAwKSB7XHJcbiAgICAgICAgICAgIG1pbnVzID0gaW51bWJlci5pbmRleE9mKCctJywgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgbGFzdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSwgaW51bWJlci5sZW5ndGgpO1xyXG4gICAgICAgIHZhciB1bml0ID0gKGxhc3QgPT09ICdpJyB8fCBsYXN0ID09PSAnaicpO1xyXG5cclxuICAgICAgICBpZiAocGx1cyA+PSAwIHx8IG1pbnVzID49IDApIHtcclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGltYWdpbmFyeSB1bml0IGlzIG5laXRoZXIgaSBub3IgalxyXG4gICAgICAgICAgICBpZiAoIXVuaXQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gaW1hZ2luYXJ5IGNvZWZmaWNpZW50IG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgICAgIGlmIChwbHVzID49IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKDAsIHBsdXMpKSB8fCBpc05hTihpbnVtYmVyLnN1YnN0cmluZyhwbHVzICsgMSwgaW51bWJlci5sZW5ndGggLSAxKSkpID9cclxuICAgICAgICAgICAgICAgICAgZXJyb3IubnVtIDpcclxuICAgICAgICAgICAgICAgICAgTnVtYmVyKGludW1iZXIuc3Vic3RyaW5nKHBsdXMgKyAxLCBpbnVtYmVyLmxlbmd0aCAtIDEpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKDAsIG1pbnVzKSkgfHwgaXNOYU4oaW51bWJlci5zdWJzdHJpbmcobWludXMgKyAxLCBpbnVtYmVyLmxlbmd0aCAtIDEpKSkgP1xyXG4gICAgICAgICAgICAgICAgICBlcnJvci5udW0gOlxyXG4gICAgICAgICAgICAgICAgICAtTnVtYmVyKGludW1iZXIuc3Vic3RyaW5nKG1pbnVzICsgMSwgaW51bWJlci5sZW5ndGggLSAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodW5pdCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlci5zdWJzdHJpbmcoMCwgaW51bWJlci5sZW5ndGggLSAxKSkpID8gZXJyb3IubnVtIDogaW51bWJlci5zdWJzdHJpbmcoMCwgaW51bWJlci5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIpKSA/IGVycm9yLm51bSA6IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1BUkdVTUVOVCA9IGZ1bmN0aW9uKGludW1iZXIpIHtcclxuICAgICAgICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBleHBvcnRzLmpzXHJcbiAgICAgICAgLy8gW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxyXG4gICAgICAgIHZhciB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XHJcbiAgICAgICAgdmFyIHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBjb2VmZmljaWVudCBpcyBub3QgYSBudW1iZXJcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgaW51bWJlciBpcyBlcXVhbCB0byB6ZXJvXHJcbiAgICAgICAgaWYgKHggPT09IDAgJiYgeSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IuZGl2MDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBQSS8yIGlmIHggaXMgZXF1YWwgdG8gemVybyBhbmQgeSBpcyBwb3NpdGl2ZVxyXG4gICAgICAgIGlmICh4ID09PSAwICYmIHkgPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLlBJIC8gMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiAtUEkvMiBpZiB4IGlzIGVxdWFsIHRvIHplcm8gYW5kIHkgaXMgbmVnYXRpdmVcclxuICAgICAgICBpZiAoeCA9PT0gMCAmJiB5IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLU1hdGguUEkgLyAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHplcm8gaWYgeCBpcyBuZWdhdGl2ZSBhbmQgeSBpcyBlcXVhbCB0byB6ZXJvXHJcbiAgICAgICAgaWYgKHkgPT09IDAgJiYgeCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gemVybyBpZiB4IGlzIG5lZ2F0aXZlIGFuZCB5IGlzIGVxdWFsIHRvIHplcm9cclxuICAgICAgICBpZiAoeSA9PT0gMCAmJiB4IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLU1hdGguUEk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYXJndW1lbnQgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICBpZiAoeCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYXRhbih5IC8geCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh4IDwgMCAmJiB5ID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYXRhbih5IC8geCkgKyBNYXRoLlBJO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmF0YW4oeSAvIHgpIC0gTWF0aC5QSTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1DT05KVUdBVEUgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgZXhwb3J0cy5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxyXG4gICAgICAgIHZhciB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcclxuICAgICAgICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGNvbmp1Z2F0ZSBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiAoeSAhPT0gMCkgPyBleHBvcnRzLkNPTVBMRVgoeCwgLXksIHVuaXQpIDogaW51bWJlcjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTUNPUyA9IGZ1bmN0aW9uKGludW1iZXIpIHtcclxuICAgICAgICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBleHBvcnRzLmpzXHJcbiAgICAgICAgLy8gW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxyXG4gICAgICAgIHZhciB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XHJcbiAgICAgICAgdmFyIHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XHJcbiAgICAgICAgdmFyIHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gY29zaW5lIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWChNYXRoLmNvcyh4KSAqIChNYXRoLmV4cCh5KSArIE1hdGguZXhwKC15KSkgLyAyLCAtTWF0aC5zaW4oeCkgKiAoTWF0aC5leHAoeSkgLSBNYXRoLmV4cCgteSkpIC8gMiwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1DT1NIID0gZnVuY3Rpb24oaW51bWJlcikge1xyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIGV4cG9ydHMuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBoeXBlcmJvbGljIGNvc2luZSBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkNPTVBMRVgoTWF0aC5jb3MoeSkgKiAoTWF0aC5leHAoeCkgKyBNYXRoLmV4cCgteCkpIC8gMiwgTWF0aC5zaW4oeSkgKiAoTWF0aC5leHAoeCkgLSBNYXRoLmV4cCgteCkpIC8gMiwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1DT1QgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBjb3RhbmdlbnQgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5JTURJVihleHBvcnRzLklNQ09TKGludW1iZXIpLCBleHBvcnRzLklNU0lOKGludW1iZXIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTURJViA9IGZ1bmN0aW9uKGludW1iZXIxLCBpbnVtYmVyMikge1xyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIGEgPSBleHBvcnRzLklNUkVBTChpbnVtYmVyMSk7XHJcbiAgICAgICAgdmFyIGIgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyMSk7XHJcbiAgICAgICAgdmFyIGMgPSBleHBvcnRzLklNUkVBTChpbnVtYmVyMik7XHJcbiAgICAgICAgdmFyIGQgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyMik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGEsIGIsIGMsIGQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxyXG4gICAgICAgIHZhciB1bml0MSA9IGludW1iZXIxLnN1YnN0cmluZyhpbnVtYmVyMS5sZW5ndGggLSAxKTtcclxuICAgICAgICB2YXIgdW5pdDIgPSBpbnVtYmVyMi5zdWJzdHJpbmcoaW51bWJlcjIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdmFyIHVuaXQgPSAnaSc7XHJcbiAgICAgICAgaWYgKHVuaXQxID09PSAnaicpIHtcclxuICAgICAgICAgICAgdW5pdCA9ICdqJztcclxuICAgICAgICB9IGVsc2UgaWYgKHVuaXQyID09PSAnaicpIHtcclxuICAgICAgICAgICAgdW5pdCA9ICdqJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBpbnVtYmVyMiBpcyBudWxsXHJcbiAgICAgICAgaWYgKGMgPT09IDAgJiYgZCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgdmFyIGRlbiA9IGMgKiBjICsgZCAqIGQ7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWCgoYSAqIGMgKyBiICogZCkgLyBkZW4sIChiICogYyAtIGEgKiBkKSAvIGRlbiwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1FWFAgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxyXG4gICAgICAgIHZhciB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcclxuICAgICAgICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgdmFyIGUgPSBNYXRoLmV4cCh4KTtcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKGUgKiBNYXRoLmNvcyh5KSwgZSAqIE1hdGguc2luKHkpLCB1bml0KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTUxOID0gZnVuY3Rpb24oaW51bWJlcikge1xyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBleHBvbmVudGlhbCBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkNPTVBMRVgoTWF0aC5sb2coTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpKSwgTWF0aC5hdGFuKHkgLyB4KSwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1MT0cxMCA9IGZ1bmN0aW9uKGludW1iZXIpIHtcclxuICAgICAgICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzXHJcbiAgICAgICAgLy8gW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxyXG4gICAgICAgIHZhciB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XHJcbiAgICAgICAgdmFyIHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XHJcbiAgICAgICAgdmFyIHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXhwb25lbnRpYWwgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGgubG9nKE1hdGguc3FydCh4ICogeCArIHkgKiB5KSkgLyBNYXRoLmxvZygxMCksIE1hdGguYXRhbih5IC8geCkgLyBNYXRoLmxvZygxMCksIHVuaXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklNTE9HMiA9IGZ1bmN0aW9uKGludW1iZXIpIHtcclxuICAgICAgICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzXHJcbiAgICAgICAgLy8gW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxyXG4gICAgICAgIHZhciB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XHJcbiAgICAgICAgdmFyIHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XHJcbiAgICAgICAgdmFyIHVuaXQgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIHVuaXQgPSAodW5pdCA9PT0gJ2knIHx8IHVuaXQgPT09ICdqJykgPyB1bml0IDogJ2knO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXhwb25lbnRpYWwgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKE1hdGgubG9nKE1hdGguc3FydCh4ICogeCArIHkgKiB5KSkgLyBNYXRoLmxvZygyKSwgTWF0aC5hdGFuKHkgLyB4KSAvIE1hdGgubG9nKDIpLCB1bml0KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTVBPV0VSID0gZnVuY3Rpb24oaW51bWJlciwgbnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCB4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBwb3dlciBvZiBtb2R1bHVzXHJcbiAgICAgICAgdmFyIHAgPSBNYXRoLnBvdyhleHBvcnRzLklNQUJTKGludW1iZXIpLCBudW1iZXIpO1xyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgYXJndW1lbnRcclxuICAgICAgICB2YXIgdCA9IGV4cG9ydHMuSU1BUkdVTUVOVChpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGV4cG9uZW50aWFsIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWChwICogTWF0aC5jb3MobnVtYmVyICogdCksIHAgKiBNYXRoLnNpbihudW1iZXIgKiB0KSwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1QUk9EVUNUID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSByZXN1bHRcclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXJndW1lbnRzWzBdO1xyXG5cclxuICAgICAgICAvLyBMb29wIG9uIGFsbCBudW1iZXJzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gTG9va3VwIGNvZWZmaWNpZW50cyBvZiB0d28gY29tcGxleCBudW1iZXJzXHJcbiAgICAgICAgICAgIHZhciBhID0gZXhwb3J0cy5JTVJFQUwocmVzdWx0KTtcclxuICAgICAgICAgICAgdmFyIGIgPSBleHBvcnRzLklNQUdJTkFSWShyZXN1bHQpO1xyXG4gICAgICAgICAgICB2YXIgYyA9IGV4cG9ydHMuSU1SRUFMKGFyZ3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgIHZhciBkID0gZXhwb3J0cy5JTUFHSU5BUlkoYXJndW1lbnRzW2ldKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGEsIGIsIGMsIGQpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb21wbHV0ZSBwcm9kdWN0IG9mIHR3byBjb21wbGV4IG51bWJlcnNcclxuICAgICAgICAgICAgcmVzdWx0ID0gZXhwb3J0cy5DT01QTEVYKGEgKiBjIC0gYiAqIGQsIGEgKiBkICsgYiAqIGMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHByb2R1Y3Qgb2YgY29tcGxleCBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTVJFQUwgPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGludW1iZXIgPT09IHVuZGVmaW5lZCB8fCBpbnVtYmVyID09PSB0cnVlIHx8IGludW1iZXIgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiAwIGlmIGludW1iZXIgaXMgZXF1YWwgdG8gMFxyXG4gICAgICAgIGlmIChpbnVtYmVyID09PSAwIHx8IGludW1iZXIgPT09ICcwJykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2VzXHJcbiAgICAgICAgaWYgKFsnaScsICcraScsICcxaScsICcrMWknLCAnLWknLCAnLTFpJywgJ2onLCAnK2onLCAnMWonLCAnKzFqJywgJy1qJywgJy0xaiddLmluZGV4T2YoaW51bWJlcikgPj0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBzaWduXHJcbiAgICAgICAgdmFyIHBsdXMgPSBpbnVtYmVyLmluZGV4T2YoJysnKTtcclxuICAgICAgICB2YXIgbWludXMgPSBpbnVtYmVyLmluZGV4T2YoJy0nKTtcclxuICAgICAgICBpZiAocGx1cyA9PT0gMCkge1xyXG4gICAgICAgICAgICBwbHVzID0gaW51bWJlci5pbmRleE9mKCcrJywgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtaW51cyA9PT0gMCkge1xyXG4gICAgICAgICAgICBtaW51cyA9IGludW1iZXIuaW5kZXhPZignLScsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XHJcbiAgICAgICAgdmFyIGxhc3QgPSBpbnVtYmVyLnN1YnN0cmluZyhpbnVtYmVyLmxlbmd0aCAtIDEsIGludW1iZXIubGVuZ3RoKTtcclxuICAgICAgICB2YXIgdW5pdCA9IChsYXN0ID09PSAnaScgfHwgbGFzdCA9PT0gJ2onKTtcclxuXHJcbiAgICAgICAgaWYgKHBsdXMgPj0gMCB8fCBtaW51cyA+PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBpbWFnaW5hcnkgdW5pdCBpcyBuZWl0aGVyIGkgbm9yIGpcclxuICAgICAgICAgICAgaWYgKCF1bml0KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIHJlYWwgY29lZmZpY2llbnQgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICAgICAgaWYgKHBsdXMgPj0gMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlci5zdWJzdHJpbmcoMCwgcGx1cykpIHx8IGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKHBsdXMgKyAxLCBpbnVtYmVyLmxlbmd0aCAtIDEpKSkgP1xyXG4gICAgICAgICAgICAgICAgICBlcnJvci5udW0gOlxyXG4gICAgICAgICAgICAgICAgICBOdW1iZXIoaW51bWJlci5zdWJzdHJpbmcoMCwgcGx1cykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiAoaXNOYU4oaW51bWJlci5zdWJzdHJpbmcoMCwgbWludXMpKSB8fCBpc05hTihpbnVtYmVyLnN1YnN0cmluZyhtaW51cyArIDEsIGludW1iZXIubGVuZ3RoIC0gMSkpKSA/XHJcbiAgICAgICAgICAgICAgICAgIGVycm9yLm51bSA6XHJcbiAgICAgICAgICAgICAgICAgIE51bWJlcihpbnVtYmVyLnN1YnN0cmluZygwLCBtaW51cykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHVuaXQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKGlzTmFOKGludW1iZXIuc3Vic3RyaW5nKDAsIGludW1iZXIubGVuZ3RoIC0gMSkpKSA/IGVycm9yLm51bSA6IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChpc05hTihpbnVtYmVyKSkgPyBlcnJvci5udW0gOiBpbnVtYmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklNU0VDID0gZnVuY3Rpb24oaW51bWJlcikge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBpbnVtYmVyIGlzIGEgbG9naWNhbCB2YWx1ZVxyXG4gICAgICAgIGlmIChpbnVtYmVyID09PSB0cnVlIHx8IGludW1iZXIgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gc2VjYW50IG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuSU1ESVYoJzEnLCBleHBvcnRzLklNQ09TKGludW1iZXIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTVNFQ0ggPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBoeXBlcmJvbGljIHNlY2FudCBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLklNRElWKCcxJywgZXhwb3J0cy5JTUNPU0goaW51bWJlcikpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklNU0lOID0gZnVuY3Rpb24oaW51bWJlcikge1xyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBzaW5lIG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ09NUExFWChNYXRoLnNpbih4KSAqIChNYXRoLmV4cCh5KSArIE1hdGguZXhwKC15KSkgLyAyLCBNYXRoLmNvcyh4KSAqIChNYXRoLmV4cCh5KSAtIE1hdGguZXhwKC15KSkgLyAyLCB1bml0KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTVNJTkggPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBpbWFnaW5hcnkgdW5pdFxyXG4gICAgICAgIHZhciB1bml0ID0gaW51bWJlci5zdWJzdHJpbmcoaW51bWJlci5sZW5ndGggLSAxKTtcclxuICAgICAgICB1bml0ID0gKHVuaXQgPT09ICdpJyB8fCB1bml0ID09PSAnaicpID8gdW5pdCA6ICdpJztcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGh5cGVyYm9saWMgc2luZSBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkNPTVBMRVgoTWF0aC5jb3MoeSkgKiAoTWF0aC5leHAoeCkgLSBNYXRoLmV4cCgteCkpIC8gMiwgTWF0aC5zaW4oeSkgKiAoTWF0aC5leHAoeCkgKyBNYXRoLmV4cCgteCkpIC8gMiwgdW5pdCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1TUVJUID0gZnVuY3Rpb24oaW51bWJlcikge1xyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgaW1hZ2luYXJ5IHVuaXRcclxuICAgICAgICB2YXIgdW5pdCA9IGludW1iZXIuc3Vic3RyaW5nKGludW1iZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdW5pdCA9ICh1bml0ID09PSAnaScgfHwgdW5pdCA9PT0gJ2onKSA/IHVuaXQgOiAnaSc7XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBwb3dlciBvZiBtb2R1bHVzXHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNxcnQoZXhwb3J0cy5JTUFCUyhpbnVtYmVyKSk7XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBhcmd1bWVudFxyXG4gICAgICAgIHZhciB0ID0gZXhwb3J0cy5JTUFSR1VNRU5UKGludW1iZXIpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXhwb25lbnRpYWwgb2YgY29tcGxleCBudW1iZXJcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5DT01QTEVYKHMgKiBNYXRoLmNvcyh0IC8gMiksIHMgKiBNYXRoLnNpbih0IC8gMiksIHVuaXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklNQ1NDID0gZnVuY3Rpb24gKGludW1iZXIpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgaW51bWJlciBpcyBhIGxvZ2ljYWwgdmFsdWVcclxuICAgICAgICBpZiAoaW51bWJlciA9PT0gdHJ1ZSB8fCBpbnVtYmVyID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29rdXAgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvZWZmaWNpZW50cyB1c2luZyBGb3JtdWxhLmpzXHJcbiAgICAgICAgLy8gW2h0dHA6Ly9mb3JtdWxhanMub3JnXVxyXG4gICAgICAgIHZhciB4ID0gZXhwb3J0cy5JTVJFQUwoaW51bWJlcik7XHJcbiAgICAgICAgdmFyIHkgPSBleHBvcnRzLklNQUdJTkFSWShpbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBjb2VmZmljaWVudCBpcyBub3QgYSBudW1iZXJcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGNvc2VjYW50IG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuSU1ESVYoJzEnLCBleHBvcnRzLklNU0lOKGludW1iZXIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTUNTQ0ggPSBmdW5jdGlvbiAoaW51bWJlcikge1xyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBpbnVtYmVyIGlzIGEgbG9naWNhbCB2YWx1ZVxyXG4gICAgICAgIGlmIChpbnVtYmVyID09PSB0cnVlIHx8IGludW1iZXIgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCByZWFsIGFuZCBpbWFnaW5hcnkgY29lZmZpY2llbnRzIHVzaW5nIEZvcm11bGEuanNcclxuICAgICAgICAvLyBbaHR0cDovL2Zvcm11bGFqcy5vcmddXHJcbiAgICAgICAgdmFyIHggPSBleHBvcnRzLklNUkVBTChpbnVtYmVyKTtcclxuICAgICAgICB2YXIgeSA9IGV4cG9ydHMuSU1BR0lOQVJZKGludW1iZXIpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZWl0aGVyIGNvZWZmaWNpZW50IGlzIG5vdCBhIG51bWJlclxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gaHlwZXJib2xpYyBjb3NlY2FudCBvZiBjb21wbGV4IG51bWJlclxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLklNRElWKCcxJywgZXhwb3J0cy5JTVNJTkgoaW51bWJlcikpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklNU1VCID0gZnVuY3Rpb24oaW51bWJlcjEsIGludW1iZXIyKSB7XHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgYSA9IHRoaXMuSU1SRUFMKGludW1iZXIxKTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuSU1BR0lOQVJZKGludW1iZXIxKTtcclxuICAgICAgICB2YXIgYyA9IHRoaXMuSU1SRUFMKGludW1iZXIyKTtcclxuICAgICAgICB2YXIgZCA9IHRoaXMuSU1BR0lOQVJZKGludW1iZXIyKTtcclxuXHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYSwgYiwgYywgZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIGltYWdpbmFyeSB1bml0XHJcbiAgICAgICAgdmFyIHVuaXQxID0gaW51bWJlcjEuc3Vic3RyaW5nKGludW1iZXIxLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIHZhciB1bml0MiA9IGludW1iZXIyLnN1YnN0cmluZyhpbnVtYmVyMi5sZW5ndGggLSAxKTtcclxuICAgICAgICB2YXIgdW5pdCA9ICdpJztcclxuICAgICAgICBpZiAodW5pdDEgPT09ICdqJykge1xyXG4gICAgICAgICAgICB1bml0ID0gJ2onO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodW5pdDIgPT09ICdqJykge1xyXG4gICAgICAgICAgICB1bml0ID0gJ2onO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIF8gb2YgdHdvIGNvbXBsZXggbnVtYmVyc1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNPTVBMRVgoYSAtIGMsIGIgLSBkLCB1bml0KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JTVNVTSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIHJlc3VsdFxyXG4gICAgICAgIHZhciByZXN1bHQgPSBhcmdzWzBdO1xyXG5cclxuICAgICAgICAvLyBMb29wIG9uIGFsbCBudW1iZXJzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIExvb2t1cCBjb2VmZmljaWVudHMgb2YgdHdvIGNvbXBsZXggbnVtYmVyc1xyXG4gICAgICAgICAgICB2YXIgYSA9IHRoaXMuSU1SRUFMKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHZhciBiID0gdGhpcy5JTUFHSU5BUlkocmVzdWx0KTtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLklNUkVBTChhcmdzW2ldKTtcclxuICAgICAgICAgICAgdmFyIGQgPSB0aGlzLklNQUdJTkFSWShhcmdzW2ldKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGEsIGIsIGMsIGQpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb21wbHV0ZSBwcm9kdWN0IG9mIHR3byBjb21wbGV4IG51bWJlcnNcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5DT01QTEVYKGEgKyBjLCBiICsgZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gc3VtIG9mIGNvbXBsZXggbnVtYmVyc1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU1UQU4gPSBmdW5jdGlvbihpbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGludW1iZXIgaXMgYSBsb2dpY2FsIHZhbHVlXHJcbiAgICAgICAgaWYgKGludW1iZXIgPT09IHRydWUgfHwgaW51bWJlciA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIHJlYWwgYW5kIGltYWdpbmFyeSBjb2VmZmljaWVudHMgdXNpbmcgRm9ybXVsYS5qc1xyXG4gICAgICAgIC8vIFtodHRwOi8vZm9ybXVsYWpzLm9yZ11cclxuICAgICAgICB2YXIgeCA9IGV4cG9ydHMuSU1SRUFMKGludW1iZXIpO1xyXG4gICAgICAgIHZhciB5ID0gZXhwb3J0cy5JTUFHSU5BUlkoaW51bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0YW5nZW50IG9mIGNvbXBsZXggbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSU1ESVYodGhpcy5JTVNJTihpbnVtYmVyKSwgdGhpcy5JTUNPUyhpbnVtYmVyKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuT0NUMkJJTiA9IGZ1bmN0aW9uKG51bWJlciwgcGxhY2VzKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3QgaGV4YWRlY2ltYWwgb3IgY29udGFpbnMgbW9yZSB0aGFuIHRlblxyXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgKDEwIGRpZ2l0cylcclxuICAgICAgICBpZiAoIS9eWzAtN117MSwxMH0kLy50ZXN0KG51bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIG51bWJlciBpcyBuZWdhdGl2ZVxyXG4gICAgICAgIHZhciBuZWdhdGl2ZSA9IChudW1iZXIubGVuZ3RoID09PSAxMCAmJiBudW1iZXIuc3Vic3RyaW5nKDAsIDEpID09PSAnNycpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IG9jdGFsIG51bWJlciB0byBkZWNpbWFsXHJcbiAgICAgICAgdmFyIGRlY2ltYWwgPSAobmVnYXRpdmUpID8gcGFyc2VJbnQobnVtYmVyLCA4KSAtIDEwNzM3NDE4MjQgOiBwYXJzZUludChudW1iZXIsIDgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIGxvd2VyIHRoYW4gLTUxMiBvciBncmVhdGVyIHRoYW4gNTExXHJcbiAgICAgICAgaWYgKGRlY2ltYWwgPCAtNTEyIHx8IGRlY2ltYWwgPiA1MTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBiaW5hcnkgbnVtYmVyIGlmIG51bWJlciBpc1xyXG4gICAgICAgIC8vIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKG5lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMScgKyBSRVBUKCcwJywgOSAtICg1MTIgKyBkZWNpbWFsKS50b1N0cmluZygyKS5sZW5ndGgpICsgKDUxMiArIGRlY2ltYWwpLnRvU3RyaW5nKDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBkZWNpbWFsIG51bWJlciB0byBiaW5hcnlcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZygyKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGJpbmFyeSBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgbmVjZXNzYXJ5XHJcbiAgICAgICAgLy8gaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmICh0eXBlb2YgcGxhY2VzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAocGxhY2VzIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZ1xyXG4gICAgICAgICAgICAvLyBVbmRlcnNjb3JlLnN0cmluZylcclxuICAgICAgICAgICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyBSRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk9DVDJERUMgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbnVtYmVyIGlzIG5vdCBvY3RhbCBvciBjb250YWlucyBtb3JlIHRoYW4gdGVuXHJcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoMTAgZGlnaXRzKVxyXG4gICAgICAgIGlmICghL15bMC03XXsxLDEwfSQvLnRlc3QobnVtYmVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBvY3RhbCBudW1iZXIgdG8gZGVjaW1hbFxyXG4gICAgICAgIHZhciBkZWNpbWFsID0gcGFyc2VJbnQobnVtYmVyLCA4KTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGRlY2ltYWwgbnVtYmVyXHJcbiAgICAgICAgcmV0dXJuIChkZWNpbWFsID49IDUzNjg3MDkxMikgPyBkZWNpbWFsIC0gMTA3Mzc0MTgyNCA6IGRlY2ltYWw7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuT0NUMkhFWCA9IGZ1bmN0aW9uKG51bWJlciwgcGxhY2VzKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG51bWJlciBpcyBub3Qgb2N0YWwgb3IgY29udGFpbnMgbW9yZSB0aGFuIHRlblxyXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgKDEwIGRpZ2l0cylcclxuICAgICAgICBpZiAoIS9eWzAtN117MSwxMH0kLy50ZXN0KG51bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgb2N0YWwgbnVtYmVyIHRvIGRlY2ltYWxcclxuICAgICAgICB2YXIgZGVjaW1hbCA9IHBhcnNlSW50KG51bWJlciwgOCk7XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBwbGFjZXMgYW5kIHJldHVybiBhIDEwLWNoYXJhY3RlciBvY3RhbCBudW1iZXIgaWYgbnVtYmVyIGlzXHJcbiAgICAgICAgLy8gbmVnYXRpdmVcclxuICAgICAgICBpZiAoZGVjaW1hbCA+PSA1MzY4NzA5MTIpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdmZicgKyAoZGVjaW1hbCArIDMyMjEyMjU0NzIpLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgZGVjaW1hbCBudW1iZXIgdG8gaGV4YWRlY2ltYWxcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGVjaW1hbC50b1N0cmluZygxNik7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBoZXhhZGVjaW1hbCBudW1iZXIgdXNpbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnNcclxuICAgICAgICAvLyBuZWNlc3NhcnkgaWYgcGxhY2VzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmIChwbGFjZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBwbGFjZXMgaXMgbm9ubnVtZXJpY1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocGxhY2VzKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBsYWNlcyBpcyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAocGxhY2VzIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHBsYWNlcyBpbiBjYXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgICAgIHBsYWNlcyA9IE1hdGguZmxvb3IocGxhY2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhZCByZXR1cm4gdmFsdWUgd2l0aCBsZWFkaW5nIDBzICh6ZXJvcykgaWYgbmVjZXNzYXJ5ICh1c2luZ1xyXG4gICAgICAgICAgICAvLyBVbmRlcnNjb3JlLnN0cmluZylcclxuICAgICAgICAgICAgcmV0dXJuIChwbGFjZXMgPj0gcmVzdWx0Lmxlbmd0aCkgPyBSRVBUKCcwJywgcGxhY2VzIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQgOiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufSkoKTtcclxuXHJcbmpleGNlbC5tZXRob2RzLmZpbmFuY2lhbCA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBleHBvcnRzID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWREYXRlKGQpIHtcclxuICAgICAgICByZXR1cm4gZCAmJiBkLmdldFRpbWUgJiYgIWlzTmFOKGQuZ2V0VGltZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlbnN1cmVEYXRlKGQpIHtcclxuICAgICAgICByZXR1cm4gKGQgaW5zdGFuY2VvZiBEYXRlKT9kOm5ldyBEYXRlKGQpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydHMuQUNDUklOVCA9IGZ1bmN0aW9uKGlzc3VlLCBmaXJzdCwgc2V0dGxlbWVudCwgcmF0ZSwgcGFyLCBmcmVxdWVuY3ksIGJhc2lzKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciBkYXRlIGlzIGludmFsaWRcclxuICAgICAgICBpc3N1ZSAgICAgICAgPSBlbnN1cmVEYXRlKGlzc3VlKTtcclxuICAgICAgICBmaXJzdCAgICAgICAgPSBlbnN1cmVEYXRlKGZpcnN0KTtcclxuICAgICAgICBzZXR0bGVtZW50ID0gZW5zdXJlRGF0ZShzZXR0bGVtZW50KTtcclxuICAgICAgICBpZiAoIXZhbGlkRGF0ZShpc3N1ZSkgfHwgIXZhbGlkRGF0ZShmaXJzdCkgfHwgIXZhbGlkRGF0ZShzZXR0bGVtZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyNWQUxVRSEnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciByYXRlIG9yIHBhciBhcmUgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXHJcbiAgICAgICAgaWYgKHJhdGUgPD0gMCB8fCBwYXIgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyNOVU0hJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBmcmVxdWVuY3kgaXMgbmVpdGhlciAxLCAyLCBvciA0XHJcbiAgICAgICAgaWYgKFsxLCAyLCA0XS5pbmRleE9mKGZyZXF1ZW5jeSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnI05VTSEnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGJhc2lzIGlzIG5laXRoZXIgMCwgMSwgMiwgMywgb3IgNFxyXG4gICAgICAgIGlmIChbMCwgMSwgMiwgMywgNF0uaW5kZXhPZihiYXNpcykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnI05VTSEnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHNldHRsZW1lbnQgaXMgYmVmb3JlIG9yIGVxdWFsIHRvIGlzc3VlXHJcbiAgICAgICAgaWYgKHNldHRsZW1lbnQgPD0gaXNzdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcjTlVNISc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgICBwYXIgICA9IHBhciAgIHx8IDA7XHJcbiAgICAgICAgYmFzaXMgPSBiYXNpcyB8fCAwO1xyXG5cclxuICAgICAgICAvLyBDb21wdXRlIGFjY3J1ZWQgaW50ZXJlc3RcclxuICAgICAgICByZXR1cm4gcGFyICogcmF0ZSAqIFlFQVJGUkFDKGlzc3VlLCBzZXR0bGVtZW50LCBiYXNpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQUNDUklOVE0gPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuQU1PUkRFR1JDID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkFNT1JMSU5DID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkNPVVBEQVlCUyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5DT1VQREFZUyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5DT1VQREFZU05DID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkNPVVBOQ0QgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuQ09VUE5VTSA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5DT1VQUENEID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkNVTUlQTVQgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2RzLCB2YWx1ZSwgc3RhcnQsIGVuZCwgdHlwZSkge1xyXG4gICAgICAgIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxyXG4gICAgICAgIC8vIENyZWRpdHM6IEhhbm5lcyBTdGllYml0emhvZmVyIGZvciB0aGUgdHJhbnNsYXRpb25zIG9mIGZ1bmN0aW9uIGFuZFxyXG4gICAgICAgICAgICAvLyB2YXJpYWJsZSBuYW1lc1xyXG4gICAgICAgIC8vIFJlcXVpcmVzIGV4cG9ydHMuRlYoKSBhbmQgZXhwb3J0cy5QTVQoKSBmcm9tIGV4cG9ydHMuanNcclxuICAgICAgICAgICAgLy8gW2h0dHA6Ly9zdG9pYy5jb20vZXhwb3J0cy9dXHJcblxyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XHJcbiAgICAgICAgdmFsdWUgPSB1dGlscy5wYXJzZU51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kcywgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBlaXRoZXIgcmF0ZSwgcGVyaW9kcywgb3IgdmFsdWUgYXJlIGxvd2VyIHRoYW4gb3JcclxuICAgICAgICAgICAgLy8gZXF1YWwgdG8gemVyb1xyXG4gICAgICAgIGlmIChyYXRlIDw9IDAgfHwgcGVyaW9kcyA8PSAwIHx8IHZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBzdGFydCA8IDEsIGVuZCA8IDEsIG9yIHN0YXJ0ID4gZW5kXHJcbiAgICAgICAgaWYgKHN0YXJ0IDwgMSB8fCBlbmQgPCAxIHx8IHN0YXJ0ID4gZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgdHlwZSBpcyBuZWl0aGVyIDAgbm9yIDFcclxuICAgICAgICBpZiAodHlwZSAhPT0gMCAmJiB0eXBlICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIGN1bXVsYXRpdmUgaW50ZXJlc3RcclxuICAgICAgICB2YXIgcGF5bWVudCA9IGV4cG9ydHMuUE1UKHJhdGUsIHBlcmlvZHMsIHZhbHVlLCAwLCB0eXBlKTtcclxuICAgICAgICB2YXIgaW50ZXJlc3QgPSAwO1xyXG5cclxuICAgICAgICBpZiAoc3RhcnQgPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGludGVyZXN0ID0gLXZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdCArPSBleHBvcnRzLkZWKHJhdGUsIGkgLSAyLCBwYXltZW50LCB2YWx1ZSwgMSkgLSBwYXltZW50O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJlc3QgKz0gZXhwb3J0cy5GVihyYXRlLCBpIC0gMSwgcGF5bWVudCwgdmFsdWUsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGludGVyZXN0ICo9IHJhdGU7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBjdW11bGF0aXZlIGludGVyZXN0XHJcbiAgICAgICAgcmV0dXJuIGludGVyZXN0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNVTVBSSU5DID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kcywgdmFsdWUsIHN0YXJ0LCBlbmQsIHR5cGUpIHtcclxuICAgICAgICAvLyBDcmVkaXRzOiBhbGdvcml0aG0gaW5zcGlyZWQgYnkgQXBhY2hlIE9wZW5PZmZpY2VcclxuICAgICAgICAvLyBDcmVkaXRzOiBIYW5uZXMgU3RpZWJpdHpob2ZlciBmb3IgdGhlIHRyYW5zbGF0aW9ucyBvZiBmdW5jdGlvbiBhbmRcclxuICAgICAgICAgICAgLy8gdmFyaWFibGUgbmFtZXNcclxuXHJcbiAgICAgICAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xyXG4gICAgICAgIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcclxuICAgICAgICB2YWx1ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGVpdGhlciByYXRlLCBwZXJpb2RzLCBvciB2YWx1ZSBhcmUgbG93ZXIgdGhhbiBvclxyXG4gICAgICAgICAgICAvLyBlcXVhbCB0byB6ZXJvXHJcbiAgICAgICAgaWYgKHJhdGUgPD0gMCB8fCBwZXJpb2RzIDw9IDAgfHwgdmFsdWUgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHN0YXJ0IDwgMSwgZW5kIDwgMSwgb3Igc3RhcnQgPiBlbmRcclxuICAgICAgICBpZiAoc3RhcnQgPCAxIHx8IGVuZCA8IDEgfHwgc3RhcnQgPiBlbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiB0eXBlIGlzIG5laXRoZXIgMCBub3IgMVxyXG4gICAgICAgIGlmICh0eXBlICE9PSAwICYmIHR5cGUgIT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgY3VtdWxhdGl2ZSBwcmluY2lwYWxcclxuICAgICAgICB2YXIgcGF5bWVudCA9IGV4cG9ydHMuUE1UKHJhdGUsIHBlcmlvZHMsIHZhbHVlLCAwLCB0eXBlKTtcclxuICAgICAgICB2YXIgcHJpbmNpcGFsID0gMDtcclxuICAgICAgICBpZiAoc3RhcnQgPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHByaW5jaXBhbCA9IHBheW1lbnQgKyB2YWx1ZSAqIHJhdGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcmluY2lwYWwgPSBwYXltZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXJ0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodHlwZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHByaW5jaXBhbCArPSBwYXltZW50IC0gKGV4cG9ydHMuRlYocmF0ZSwgaSAtIDIsIHBheW1lbnQsIHZhbHVlLCAxKSAtIHBheW1lbnQpICogcmF0ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHByaW5jaXBhbCArPSBwYXltZW50IC0gZXhwb3J0cy5GVihyYXRlLCBpIC0gMSwgcGF5bWVudCwgdmFsdWUsIDApICogcmF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGN1bXVsYXRpdmUgcHJpbmNpcGFsXHJcbiAgICAgICAgcmV0dXJuIHByaW5jaXBhbDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EQiA9IGZ1bmN0aW9uKGNvc3QsIHNhbHZhZ2UsIGxpZmUsIHBlcmlvZCwgbW9udGgpIHtcclxuICAgICAgICAvLyBJbml0aWFsaXplIG1vbnRoXHJcbiAgICAgICAgbW9udGggPSAobW9udGggPT09IHVuZGVmaW5lZCkgPyAxMiA6IG1vbnRoO1xyXG5cclxuICAgICAgICBjb3N0ID0gdXRpbHMucGFyc2VOdW1iZXIoY29zdCk7XHJcbiAgICAgICAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xyXG4gICAgICAgIGxpZmUgPSB1dGlscy5wYXJzZU51bWJlcihsaWZlKTtcclxuICAgICAgICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xyXG4gICAgICAgIG1vbnRoID0gdXRpbHMucGFyc2VOdW1iZXIobW9udGgpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGNvc3QsIHNhbHZhZ2UsIGxpZmUsIHBlcmlvZCwgbW9udGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgaXMgbmVnYXRpdmVcclxuICAgICAgICBpZiAoY29zdCA8IDAgfHwgc2FsdmFnZSA8IDAgfHwgbGlmZSA8IDAgfHwgcGVyaW9kIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG1vbnRoIGlzIG5vdCBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgMTJcclxuICAgICAgICBpZiAoWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdLmluZGV4T2YobW9udGgpID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBlcmlvZCBpcyBncmVhdGVyIHRoYW4gbGlmZVxyXG4gICAgICAgIGlmIChwZXJpb2QgPiBsaWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gMCAoemVybykgaWYgc2FsdmFnZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gY29zdFxyXG4gICAgICAgIGlmIChzYWx2YWdlID49IGNvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSYXRlIGlzIHJvdW5kZWQgdG8gdGhyZWUgZGVjaW1hbHMgcGxhY2VzXHJcbiAgICAgICAgdmFyIHJhdGUgPSAoMSAtIE1hdGgucG93KHNhbHZhZ2UgLyBjb3N0LCAxIC8gbGlmZSkpLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgaW5pdGlhbCBkZXByZWNpYXRpb25cclxuICAgICAgICB2YXIgaW5pdGlhbCA9IGNvc3QgKiByYXRlICogbW9udGggLyAxMjtcclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSB0b3RhbCBkZXByZWNpYXRpb25cclxuICAgICAgICB2YXIgdG90YWwgPSBpbml0aWFsO1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gMDtcclxuICAgICAgICB2YXIgY2VpbGluZyA9IChwZXJpb2QgPT09IGxpZmUpID8gbGlmZSAtIDEgOiBwZXJpb2Q7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPD0gY2VpbGluZzsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSAoY29zdCAtIHRvdGFsKSAqIHJhdGU7XHJcbiAgICAgICAgICAgIHRvdGFsICs9IGN1cnJlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEZXByZWNpYXRpb24gZm9yIHRoZSBmaXJzdCBhbmQgbGFzdCBwZXJpb2RzIGFyZSBzcGVjaWFsIGNhc2VzXHJcbiAgICAgICAgaWYgKHBlcmlvZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBGaXJzdCBwZXJpb2RcclxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwZXJpb2QgPT09IGxpZmUpIHtcclxuICAgICAgICAgICAgLy8gTGFzdCBwZXJpb2RcclxuICAgICAgICAgICAgcmV0dXJuIChjb3N0IC0gdG90YWwpICogcmF0ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRERCID0gZnVuY3Rpb24oY29zdCwgc2FsdmFnZSwgbGlmZSwgcGVyaW9kLCBmYWN0b3IpIHtcclxuICAgICAgICAvLyBJbml0aWFsaXplIGZhY3RvclxyXG4gICAgICAgIGZhY3RvciA9IChmYWN0b3IgPT09IHVuZGVmaW5lZCkgPyAyIDogZmFjdG9yO1xyXG5cclxuICAgICAgICBjb3N0ID0gdXRpbHMucGFyc2VOdW1iZXIoY29zdCk7XHJcbiAgICAgICAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xyXG4gICAgICAgIGxpZmUgPSB1dGlscy5wYXJzZU51bWJlcihsaWZlKTtcclxuICAgICAgICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xyXG4gICAgICAgIGZhY3RvciA9IHV0aWxzLnBhcnNlTnVtYmVyKGZhY3Rvcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoY29zdCwgc2FsdmFnZSwgbGlmZSwgcGVyaW9kLCBmYWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgaXMgbmVnYXRpdmUgb3IgaWYgZmFjdG9yIGlzXHJcbiAgICAgICAgICAgIC8vIG51bGxcclxuICAgICAgICBpZiAoY29zdCA8IDAgfHwgc2FsdmFnZSA8IDAgfHwgbGlmZSA8IDAgfHwgcGVyaW9kIDwgMCB8fCBmYWN0b3IgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBlcmlvZCBpcyBncmVhdGVyIHRoYW4gbGlmZVxyXG4gICAgICAgIGlmIChwZXJpb2QgPiBsaWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gMCAoemVybykgaWYgc2FsdmFnZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gY29zdFxyXG4gICAgICAgIGlmIChzYWx2YWdlID49IGNvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIGRlcHJlY2lhdGlvblxyXG4gICAgICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHBlcmlvZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBNYXRoLm1pbigoY29zdCAtIHRvdGFsKSAqIChmYWN0b3IgLyBsaWZlKSwgKGNvc3QgLSBzYWx2YWdlIC0gdG90YWwpKTtcclxuICAgICAgICAgICAgdG90YWwgKz0gY3VycmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBkZXByZWNpYXRpb25cclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ESVNDID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkRPTExBUkRFID0gZnVuY3Rpb24oZG9sbGFyLCBmcmFjdGlvbikge1xyXG4gICAgICAgIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxyXG5cclxuICAgICAgICBkb2xsYXIgPSB1dGlscy5wYXJzZU51bWJlcihkb2xsYXIpO1xyXG4gICAgICAgIGZyYWN0aW9uID0gdXRpbHMucGFyc2VOdW1iZXIoZnJhY3Rpb24pO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGRvbGxhciwgZnJhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBmcmFjdGlvbiBpcyBuZWdhdGl2ZVxyXG4gICAgICAgIGlmIChmcmFjdGlvbiA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBmcmFjdGlvbiBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCBhbmQgbGVzcyB0aGFuXHJcbiAgICAgICAgICAgIC8vIDFcclxuICAgICAgICBpZiAoZnJhY3Rpb24gPj0gMCAmJiBmcmFjdGlvbiA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLmRpdjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUcnVuY2F0ZSBmcmFjdGlvbiBpZiBpdCBpcyBub3QgYW4gaW50ZWdlclxyXG4gICAgICAgIGZyYWN0aW9uID0gcGFyc2VJbnQoZnJhY3Rpb24sIDEwKTtcclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBpbnRlZ2VyIHBhcnRcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VJbnQoZG9sbGFyLCAxMCk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBkZWNpbWFsIHBhcnRcclxuICAgICAgICByZXN1bHQgKz0gKGRvbGxhciAlIDEpICogTWF0aC5wb3coMTAsIE1hdGguY2VpbChNYXRoLmxvZyhmcmFjdGlvbikgLyBNYXRoLkxOMTApKSAvIGZyYWN0aW9uO1xyXG5cclxuICAgICAgICAvLyBSb3VuZCByZXN1bHRcclxuICAgICAgICB2YXIgcG93ZXIgPSBNYXRoLnBvdygxMCwgTWF0aC5jZWlsKE1hdGgubG9nKGZyYWN0aW9uKSAvIE1hdGguTE4yKSArIDEpO1xyXG4gICAgICAgIHJlc3VsdCA9IE1hdGgucm91bmQocmVzdWx0ICogcG93ZXIpIC8gcG93ZXI7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBjb252ZXJ0ZWQgZG9sbGFyIHByaWNlXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ET0xMQVJGUiA9IGZ1bmN0aW9uKGRvbGxhciwgZnJhY3Rpb24pIHtcclxuICAgICAgICAvLyBDcmVkaXRzOiBhbGdvcml0aG0gaW5zcGlyZWQgYnkgQXBhY2hlIE9wZW5PZmZpY2VcclxuXHJcbiAgICAgICAgZG9sbGFyID0gdXRpbHMucGFyc2VOdW1iZXIoZG9sbGFyKTtcclxuICAgICAgICBmcmFjdGlvbiA9IHV0aWxzLnBhcnNlTnVtYmVyKGZyYWN0aW9uKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihkb2xsYXIsIGZyYWN0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZnJhY3Rpb24gaXMgbmVnYXRpdmVcclxuICAgICAgICBpZiAoZnJhY3Rpb24gPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZnJhY3Rpb24gaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAgYW5kIGxlc3MgdGhhblxyXG4gICAgICAgICAgICAvLyAxXHJcbiAgICAgICAgaWYgKGZyYWN0aW9uID49IDAgJiYgZnJhY3Rpb24gPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5kaXYwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGUgZnJhY3Rpb24gaWYgaXQgaXMgbm90IGFuIGludGVnZXJcclxuICAgICAgICBmcmFjdGlvbiA9IHBhcnNlSW50KGZyYWN0aW9uLCAxMCk7XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgaW50ZWdlciBwYXJ0XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KGRvbGxhciwgMTApO1xyXG5cclxuICAgICAgICAvLyBBZGQgZGVjaW1hbCBwYXJ0XHJcbiAgICAgICAgcmVzdWx0ICs9IChkb2xsYXIgJSAxKSAqIE1hdGgucG93KDEwLCAtTWF0aC5jZWlsKE1hdGgubG9nKGZyYWN0aW9uKSAvIE1hdGguTE4xMCkpICogZnJhY3Rpb247XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBjb252ZXJ0ZWQgZG9sbGFyIHByaWNlXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5EVVJBVElPTiA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5FRkZFQ1QgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2RzKSB7XHJcbiAgICAgICAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xyXG4gICAgICAgIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcmF0ZSA8PTAgb3IgcGVyaW9kcyA8IDFcclxuICAgICAgICBpZiAocmF0ZSA8PSAwIHx8IHBlcmlvZHMgPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUcnVuY2F0ZSBwZXJpb2RzIGlmIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXHJcbiAgICAgICAgcGVyaW9kcyA9IHBhcnNlSW50KHBlcmlvZHMsIDEwKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZVxyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdygxICsgcmF0ZSAvIHBlcmlvZHMsIHBlcmlvZHMpIC0gMTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GViA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZHMsIHBheW1lbnQsIHZhbHVlLCB0eXBlKSB7XHJcbiAgICAgICAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXHJcblxyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgfHwgMDtcclxuICAgICAgICB0eXBlID0gdHlwZSB8fCAwO1xyXG5cclxuICAgICAgICByYXRlID0gdXRpbHMucGFyc2VOdW1iZXIocmF0ZSk7XHJcbiAgICAgICAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xyXG4gICAgICAgIHBheW1lbnQgPSB1dGlscy5wYXJzZU51bWJlcihwYXltZW50KTtcclxuICAgICAgICB2YWx1ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB0eXBlID0gdXRpbHMucGFyc2VOdW1iZXIodHlwZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kcywgcGF5bWVudCwgdmFsdWUsIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBmdXR1cmUgdmFsdWVcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIGlmIChyYXRlID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlICsgcGF5bWVudCAqIHBlcmlvZHM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRlcm0gPSBNYXRoLnBvdygxICsgcmF0ZSwgcGVyaW9kcyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZSAqIHRlcm0gKyBwYXltZW50ICogKDEgKyByYXRlKSAqICh0ZXJtIC0gMSkgLyByYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUgKiB0ZXJtICsgcGF5bWVudCAqICh0ZXJtIC0gMSkgLyByYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkZWU0NIRURVTEUgPSBmdW5jdGlvbihwcmluY2lwYWwsIHNjaGVkdWxlKSB7XHJcbiAgICAgICAgcHJpbmNpcGFsID0gdXRpbHMucGFyc2VOdW1iZXIocHJpbmNpcGFsKTtcclxuICAgICAgICBzY2hlZHVsZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihzY2hlZHVsZSkpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHByaW5jaXBhbCwgc2NoZWR1bGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuID0gc2NoZWR1bGUubGVuZ3RoO1xyXG4gICAgICAgIHZhciBmdXR1cmUgPSBwcmluY2lwYWw7XHJcblxyXG4gICAgICAgIC8vIEFwcGx5IGFsbCBpbnRlcmVzdHMgaW4gc2NoZWR1bGVcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICAvLyBBcHBseSBzY2hlZHVsZWQgaW50ZXJlc3RcclxuICAgICAgICAgICAgZnV0dXJlICo9IDEgKyBzY2hlZHVsZVtpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBmdXR1cmUgdmFsdWVcclxuICAgICAgICByZXR1cm4gZnV0dXJlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklOVFJBVEUgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuSVBNVCA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZCwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKSB7XHJcbiAgICAgICAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXHJcblxyXG4gICAgICAgIGZ1dHVyZSA9IGZ1dHVyZSB8fCAwO1xyXG4gICAgICAgIHR5cGUgPSB0eXBlIHx8IDA7XHJcblxyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xyXG4gICAgICAgIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcclxuICAgICAgICBwcmVzZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocHJlc2VudCk7XHJcbiAgICAgICAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcclxuICAgICAgICB0eXBlID0gdXRpbHMucGFyc2VOdW1iZXIodHlwZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgcGF5bWVudFxyXG4gICAgICAgIHZhciBwYXltZW50ID0gZXhwb3J0cy5QTVQocmF0ZSwgcGVyaW9kcywgcHJlc2VudCwgZnV0dXJlLCB0eXBlKTtcclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBpbnRlcmVzdFxyXG4gICAgICAgIHZhciBpbnRlcmVzdDtcclxuICAgICAgICBpZiAocGVyaW9kID09PSAxKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdCA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdCA9IC1wcmVzZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGludGVyZXN0ID0gZXhwb3J0cy5GVihyYXRlLCBwZXJpb2QgLSAyLCBwYXltZW50LCBwcmVzZW50LCAxKSAtIHBheW1lbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdCA9IGV4cG9ydHMuRlYocmF0ZSwgcGVyaW9kIC0gMSwgcGF5bWVudCwgcHJlc2VudCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBpbnRlcmVzdFxyXG4gICAgICAgIHJldHVybiBpbnRlcmVzdCAqIHJhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVJSID0gZnVuY3Rpb24odmFsdWVzLCBndWVzcykge1xyXG4gICAgICAgIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxyXG5cclxuICAgICAgICBndWVzcyA9IGd1ZXNzIHx8IDA7XHJcblxyXG4gICAgICAgIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcclxuICAgICAgICBndWVzcyA9IHV0aWxzLnBhcnNlTnVtYmVyKGd1ZXNzKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih2YWx1ZXMsIGd1ZXNzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGVzIHRoZSByZXN1bHRpbmcgYW1vdW50XHJcbiAgICAgICAgdmFyIGlyclJlc3VsdCA9IGZ1bmN0aW9uKHZhbHVlcywgZGF0ZXMsIHJhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSByYXRlICsgMTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlc1swXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YWx1ZXNbaV0gLyBNYXRoLnBvdyhyLCAoZGF0ZXNbaV0gLSBkYXRlc1swXSkgLyAzNjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlcyB0aGUgZmlyc3QgZGVyaXZhdGlvblxyXG4gICAgICAgIHZhciBpcnJSZXN1bHREZXJpdiA9IGZ1bmN0aW9uKHZhbHVlcywgZGF0ZXMsIHJhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSByYXRlICsgMTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhYyA9IChkYXRlc1tpXSAtIGRhdGVzWzBdKSAvIDM2NTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCAtPSBmcmFjICogdmFsdWVzW2ldIC8gTWF0aC5wb3cociwgZnJhYyArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkYXRlcyBhbmQgY2hlY2sgdGhhdCB2YWx1ZXMgY29udGFpbnMgYXQgbGVhc3Qgb25lIHBvc2l0aXZlXHJcbiAgICAgICAgICAgIC8vIHZhbHVlIGFuZCBvbmUgbmVnYXRpdmUgdmFsdWVcclxuICAgICAgICB2YXIgZGF0ZXMgPSBbXTtcclxuICAgICAgICB2YXIgcG9zaXRpdmUgPSBmYWxzZTtcclxuICAgICAgICB2YXIgbmVnYXRpdmUgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBkYXRlc1tpXSA9IChpID09PSAwKSA/IDAgOiBkYXRlc1tpIC0gMV0gKyAzNjU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbaV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSA8IDApIHtcclxuICAgICAgICAgICAgICAgIG5lZ2F0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHZhbHVlcyBkb2VzIG5vdCBjb250YWluIGF0IGxlYXN0IG9uZSBwb3NpdGl2ZSB2YWx1ZVxyXG4gICAgICAgICAgICAvLyBhbmQgb25lIG5lZ2F0aXZlIHZhbHVlXHJcbiAgICAgICAgaWYgKCFwb3NpdGl2ZSB8fCAhbmVnYXRpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgZ3Vlc3MgYW5kIHJlc3VsdFJhdGVcclxuICAgICAgICBndWVzcyA9IChndWVzcyA9PT0gdW5kZWZpbmVkKSA/IDAuMSA6IGd1ZXNzO1xyXG4gICAgICAgIHZhciByZXN1bHRSYXRlID0gZ3Vlc3M7XHJcblxyXG4gICAgICAgIC8vIFNldCBtYXhpbXVtIGVwc2lsb24gZm9yIGVuZCBvZiBpdGVyYXRpb25cclxuICAgICAgICB2YXIgZXBzTWF4ID0gMWUtMTA7XHJcblxyXG4gICAgICAgIC8vIEltcGxlbWVudCBOZXd0b24ncyBtZXRob2RcclxuICAgICAgICB2YXIgbmV3UmF0ZSwgZXBzUmF0ZSwgcmVzdWx0VmFsdWU7XHJcbiAgICAgICAgdmFyIGNvbnRMb29wID0gdHJ1ZTtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHJlc3VsdFZhbHVlID0gaXJyUmVzdWx0KHZhbHVlcywgZGF0ZXMsIHJlc3VsdFJhdGUpO1xyXG4gICAgICAgICAgICBuZXdSYXRlID0gcmVzdWx0UmF0ZSAtIHJlc3VsdFZhbHVlIC8gaXJyUmVzdWx0RGVyaXYodmFsdWVzLCBkYXRlcywgcmVzdWx0UmF0ZSk7XHJcbiAgICAgICAgICAgIGVwc1JhdGUgPSBNYXRoLmFicyhuZXdSYXRlIC0gcmVzdWx0UmF0ZSk7XHJcbiAgICAgICAgICAgIHJlc3VsdFJhdGUgPSBuZXdSYXRlO1xyXG4gICAgICAgICAgICBjb250TG9vcCA9IChlcHNSYXRlID4gZXBzTWF4KSAmJiAoTWF0aC5hYnMocmVzdWx0VmFsdWUpID4gZXBzTWF4KTtcclxuICAgICAgICB9IHdoaWxlIChjb250TG9vcCk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBpbnRlcm5hbCByYXRlIG9mIHJldHVyblxyXG4gICAgICAgIHJldHVybiByZXN1bHRSYXRlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklTUE1UID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCB2YWx1ZSkge1xyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xyXG4gICAgICAgIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcclxuICAgICAgICB2YWx1ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2QsIHBlcmlvZHMsIHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gaW50ZXJlc3RcclxuICAgICAgICByZXR1cm4gdmFsdWUgKiByYXRlICogKHBlcmlvZCAvIHBlcmlvZHMgLSAxKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NRFVSQVRJT04gPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuTUlSUiA9IGZ1bmN0aW9uKHZhbHVlcywgZmluYW5jZV9yYXRlLCByZWludmVzdF9yYXRlKSB7XHJcbiAgICAgICAgdmFsdWVzID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHZhbHVlcykpO1xyXG4gICAgICAgIGZpbmFuY2VfcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZpbmFuY2VfcmF0ZSk7XHJcbiAgICAgICAgcmVpbnZlc3RfcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJlaW52ZXN0X3JhdGUpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHZhbHVlcywgZmluYW5jZV9yYXRlLCByZWludmVzdF9yYXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIG51bWJlciBvZiB2YWx1ZXNcclxuICAgICAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBwYXltZW50cyAobmVnYXRpdmUgdmFsdWVzKSBhbmQgaW5jb21lcyAocG9zaXRpdmUgdmFsdWVzKVxyXG4gICAgICAgIHZhciBwYXltZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBpbmNvbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHBheW1lbnRzLnB1c2godmFsdWVzW2ldKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluY29tZXMucHVzaCh2YWx1ZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gbW9kaWZpZWQgaW50ZXJuYWwgcmF0ZSBvZiByZXR1cm5cclxuICAgICAgICB2YXIgbnVtID0gLWV4cG9ydHMuTlBWKHJlaW52ZXN0X3JhdGUsIGluY29tZXMpICogTWF0aC5wb3coMSArIHJlaW52ZXN0X3JhdGUsIG4gLSAxKTtcclxuICAgICAgICB2YXIgZGVuID0gZXhwb3J0cy5OUFYoZmluYW5jZV9yYXRlLCBwYXltZW50cykgKiAoMSArIGZpbmFuY2VfcmF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KG51bSAvIGRlbiwgMSAvIChuIC0gMSkpIC0gMTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5OT01JTkFMID0gZnVuY3Rpb24ocmF0ZSwgcGVyaW9kcykge1xyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGVyaW9kcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHJhdGUgPD0wIG9yIHBlcmlvZHMgPCAxXHJcbiAgICAgICAgaWYgKHJhdGUgPD0gMCB8fCBwZXJpb2RzIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGUgcGVyaW9kcyBpZiBpdCBpcyBub3QgYW4gaW50ZWdlclxyXG4gICAgICAgIHBlcmlvZHMgPSBwYXJzZUludChwZXJpb2RzLCAxMCk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBub21pbmFsIGFubnVhbCBpbnRlcmVzdCByYXRlXHJcbiAgICAgICAgcmV0dXJuIChNYXRoLnBvdyhyYXRlICsgMSwgMSAvIHBlcmlvZHMpIC0gMSkgKiBwZXJpb2RzO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk5QRVIgPSBmdW5jdGlvbihyYXRlLCBwYXltZW50LCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpIHtcclxuICAgICAgICB0eXBlID0gKHR5cGUgPT09IHVuZGVmaW5lZCkgPyAwIDogdHlwZTtcclxuICAgICAgICBmdXR1cmUgPSAoZnV0dXJlID09PSB1bmRlZmluZWQpID8gMCA6IGZ1dHVyZTtcclxuXHJcbiAgICAgICAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xyXG4gICAgICAgIHBheW1lbnQgPSB1dGlscy5wYXJzZU51bWJlcihwYXltZW50KTtcclxuICAgICAgICBwcmVzZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocHJlc2VudCk7XHJcbiAgICAgICAgZnV0dXJlID0gdXRpbHMucGFyc2VOdW1iZXIoZnV0dXJlKTtcclxuICAgICAgICB0eXBlID0gdXRpbHMucGFyc2VOdW1iZXIodHlwZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmF0ZSwgcGF5bWVudCwgcHJlc2VudCwgZnV0dXJlLCB0eXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gbnVtYmVyIG9mIHBlcmlvZHNcclxuICAgICAgICB2YXIgbnVtID0gcGF5bWVudCAqICgxICsgcmF0ZSAqIHR5cGUpIC0gZnV0dXJlICogcmF0ZTtcclxuICAgICAgICB2YXIgZGVuID0gKHByZXNlbnQgKiByYXRlICsgcGF5bWVudCAqICgxICsgcmF0ZSAqIHR5cGUpKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5sb2cobnVtIC8gZGVuKSAvIE1hdGgubG9nKDEgKyByYXRlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5OUFYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcclxuICAgICAgICBpZiAoYXJncyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmdzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTG9va3VwIHJhdGVcclxuICAgICAgICB2YXIgcmF0ZSA9IGFyZ3NbMF07XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgbmV0IHByZXNlbnQgdmFsdWVcclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG5cclxuICAgICAgICAvLyBMb29wIG9uIGFsbCB2YWx1ZXNcclxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdmFsdWUgKz0gYXJnc1tqXSAvIE1hdGgucG93KDEgKyByYXRlLCBqKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBuZXQgcHJlc2VudCB2YWx1ZVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5PRERGUFJJQ0UgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuT0RERllJRUxEID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLk9ERExQUklDRSA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5PRERMWUlFTEQgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuUERVUkFUSU9OID0gZnVuY3Rpb24ocmF0ZSwgcHJlc2VudCwgZnV0dXJlKSB7XHJcbiAgICAgICAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xyXG4gICAgICAgIHByZXNlbnQgPSB1dGlscy5wYXJzZU51bWJlcihwcmVzZW50KTtcclxuICAgICAgICBmdXR1cmUgPSB1dGlscy5wYXJzZU51bWJlcihmdXR1cmUpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhdGUsIHByZXNlbnQsIGZ1dHVyZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHJhdGUgPD0wXHJcbiAgICAgICAgaWYgKHJhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIG51bWJlciBvZiBwZXJpb2RzXHJcbiAgICAgICAgcmV0dXJuIChNYXRoLmxvZyhmdXR1cmUpIC0gTWF0aC5sb2cocHJlc2VudCkpIC8gTWF0aC5sb2coMSArIHJhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBNVCA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkge1xyXG4gICAgICAgIC8vIENyZWRpdHM6IGFsZ29yaXRobSBpbnNwaXJlZCBieSBBcGFjaGUgT3Blbk9mZmljZVxyXG5cclxuICAgICAgICBmdXR1cmUgPSBmdXR1cmUgfHwgMDtcclxuICAgICAgICB0eXBlID0gdHlwZSB8fCAwO1xyXG5cclxuICAgICAgICByYXRlID0gdXRpbHMucGFyc2VOdW1iZXIocmF0ZSk7XHJcbiAgICAgICAgcGVyaW9kcyA9IHV0aWxzLnBhcnNlTnVtYmVyKHBlcmlvZHMpO1xyXG4gICAgICAgIHByZXNlbnQgPSB1dGlscy5wYXJzZU51bWJlcihwcmVzZW50KTtcclxuICAgICAgICBmdXR1cmUgPSB1dGlscy5wYXJzZU51bWJlcihmdXR1cmUpO1xyXG4gICAgICAgIHR5cGUgPSB1dGlscy5wYXJzZU51bWJlcih0eXBlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBwYXltZW50XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBpZiAocmF0ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAocHJlc2VudCArIGZ1dHVyZSkgLyBwZXJpb2RzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXJtID0gTWF0aC5wb3coMSArIHJhdGUsIHBlcmlvZHMpO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKGZ1dHVyZSAqIHJhdGUgLyAodGVybSAtIDEpICsgcHJlc2VudCAqIHJhdGUgLyAoMSAtIDEgLyB0ZXJtKSkgLyAoMSArIHJhdGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZnV0dXJlICogcmF0ZSAvICh0ZXJtIC0gMSkgKyBwcmVzZW50ICogcmF0ZSAvICgxIC0gMSAvIHRlcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBQTVQgPSBmdW5jdGlvbihyYXRlLCBwZXJpb2QsIHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkge1xyXG4gICAgICAgIGZ1dHVyZSA9IGZ1dHVyZSB8fCAwO1xyXG4gICAgICAgIHR5cGUgPSB0eXBlIHx8IDA7XHJcblxyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XHJcbiAgICAgICAgcHJlc2VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHByZXNlbnQpO1xyXG4gICAgICAgIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XHJcbiAgICAgICAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhdGUsIHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUE1UKHJhdGUsIHBlcmlvZHMsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSkgLSBleHBvcnRzLklQTVQocmF0ZSwgcGVyaW9kLCBwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUsIHR5cGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBSSUNFID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLlBSSUNFRElTQyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5QUklDRU1BVCA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5QViA9IGZ1bmN0aW9uKHJhdGUsIHBlcmlvZHMsIHBheW1lbnQsIGZ1dHVyZSwgdHlwZSkge1xyXG4gICAgICAgIGZ1dHVyZSA9IGZ1dHVyZSB8fCAwO1xyXG4gICAgICAgIHR5cGUgPSB0eXBlIHx8IDA7XHJcblxyXG4gICAgICAgIHJhdGUgPSB1dGlscy5wYXJzZU51bWJlcihyYXRlKTtcclxuICAgICAgICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XHJcbiAgICAgICAgcGF5bWVudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHBheW1lbnQpO1xyXG4gICAgICAgIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XHJcbiAgICAgICAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhdGUsIHBlcmlvZHMsIHBheW1lbnQsIGZ1dHVyZSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHByZXNlbnQgdmFsdWVcclxuICAgICAgICBpZiAocmF0ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLXBheW1lbnQgKiBwZXJpb2RzIC0gZnV0dXJlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKCgxIC0gTWF0aC5wb3coMSArIHJhdGUsIHBlcmlvZHMpKSAvIHJhdGUpICogcGF5bWVudCAqICgxICsgcmF0ZSAqIHR5cGUpIC0gZnV0dXJlKSAvIE1hdGgucG93KDEgKyByYXRlLCBwZXJpb2RzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUkFURSA9IGZ1bmN0aW9uKHBlcmlvZHMsIHBheW1lbnQsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSwgZ3Vlc3MpIHtcclxuICAgICAgICAvLyBDcmVkaXRzOiByYWJ1Z2VudG9cclxuXHJcbiAgICAgICAgZ3Vlc3MgPSAoZ3Vlc3MgPT09IHVuZGVmaW5lZCkgPyAwLjAxIDogZ3Vlc3M7XHJcbiAgICAgICAgZnV0dXJlID0gKGZ1dHVyZSA9PT0gdW5kZWZpbmVkKSA/IDAgOiBmdXR1cmU7XHJcbiAgICAgICAgdHlwZSA9ICh0eXBlID09PSB1bmRlZmluZWQpID8gMCA6IHR5cGU7XHJcblxyXG4gICAgICAgIHBlcmlvZHMgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2RzKTtcclxuICAgICAgICBwYXltZW50ID0gdXRpbHMucGFyc2VOdW1iZXIocGF5bWVudCk7XHJcbiAgICAgICAgcHJlc2VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHByZXNlbnQpO1xyXG4gICAgICAgIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XHJcbiAgICAgICAgdHlwZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHR5cGUpO1xyXG4gICAgICAgIGd1ZXNzID0gdXRpbHMucGFyc2VOdW1iZXIoZ3Vlc3MpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHBlcmlvZHMsIHBheW1lbnQsIHByZXNlbnQsIGZ1dHVyZSwgdHlwZSwgZ3Vlc3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBtYXhpbXVtIGVwc2lsb24gZm9yIGVuZCBvZiBpdGVyYXRpb25cclxuICAgICAgICB2YXIgZXBzTWF4ID0gMWUtNjtcclxuXHJcbiAgICAgICAgLy8gU2V0IG1heGltdW0gbnVtYmVyIG9mIGl0ZXJhdGlvbnNcclxuICAgICAgICB2YXIgaXRlck1heCA9IDEwMDtcclxuICAgICAgICB2YXIgaXRlciA9IDA7XHJcbiAgICAgICAgdmFyIGNsb3NlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHJhdGUgPSBndWVzcztcclxuXHJcbiAgICAgICAgd2hpbGUgKGl0ZXIgPCBpdGVyTWF4ICYmICFjbG9zZSkge1xyXG4gICAgICAgICAgICB2YXIgdDEgPSBNYXRoLnBvdyhyYXRlICsgMSwgcGVyaW9kcyk7XHJcbiAgICAgICAgICAgIHZhciB0MiA9IE1hdGgucG93KHJhdGUgKyAxLCBwZXJpb2RzIC0gMSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZjEgPSBmdXR1cmUgKyB0MSAqIHByZXNlbnQgKyBwYXltZW50ICogKHQxIC0gMSkgKiAocmF0ZSAqIHR5cGUgKyAxKSAvIHJhdGU7XHJcbiAgICAgICAgICAgIHZhciBmMiA9IHBlcmlvZHMgKiB0MiAqIHByZXNlbnQgLSBwYXltZW50ICogKHQxIC0gMSkgKihyYXRlICogdHlwZSArIDEpIC8gTWF0aC5wb3cocmF0ZSwyKTtcclxuICAgICAgICAgICAgdmFyIGYzID0gcGVyaW9kcyAqIHBheW1lbnQgKiB0MiAqIChyYXRlICogdHlwZSArIDEpIC8gcmF0ZSArIHBheW1lbnQgKiAodDEgLSAxKSAqIHR5cGUgLyByYXRlO1xyXG5cclxuICAgICAgICAgICAgdmFyIG5ld1JhdGUgPSByYXRlIC0gZjEgLyAoZjIgKyBmMyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobmV3UmF0ZSAtIHJhdGUpIDwgZXBzTWF4KSBjbG9zZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGl0ZXIrK1xyXG4gICAgICAgICAgICByYXRlID0gbmV3UmF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY2xvc2UpIHJldHVybiBOdW1iZXIuTmFOICsgcmF0ZTtcclxuICAgICAgICByZXR1cm4gcmF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gVE9ET1xyXG4gICAgZXhwb3J0cy5SRUNFSVZFRCA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5SUkkgPSBmdW5jdGlvbihwZXJpb2RzLCBwcmVzZW50LCBmdXR1cmUpIHtcclxuICAgICAgICBwZXJpb2RzID0gdXRpbHMucGFyc2VOdW1iZXIocGVyaW9kcyk7XHJcbiAgICAgICAgcHJlc2VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKHByZXNlbnQpO1xyXG4gICAgICAgIGZ1dHVyZSA9IHV0aWxzLnBhcnNlTnVtYmVyKGZ1dHVyZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocGVyaW9kcywgcHJlc2VudCwgZnV0dXJlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgcGVyaW9kcyBvciBwcmVzZW50IGlzIGVxdWFsIHRvIDAgKHplcm8pXHJcbiAgICAgICAgaWYgKHBlcmlvZHMgPT09IDAgfHwgcHJlc2VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVxdWl2YWxlbnQgaW50ZXJlc3QgcmF0ZVxyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhmdXR1cmUgLyBwcmVzZW50LCAxIC8gcGVyaW9kcykgLSAxO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNMTiA9IGZ1bmN0aW9uKGNvc3QsIHNhbHZhZ2UsIGxpZmUpIHtcclxuICAgICAgICBjb3N0ID0gdXRpbHMucGFyc2VOdW1iZXIoY29zdCk7XHJcbiAgICAgICAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xyXG4gICAgICAgIGxpZmUgPSB1dGlscy5wYXJzZU51bWJlcihsaWZlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihjb3N0LCBzYWx2YWdlLCBsaWZlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbGlmZSBlcXVhbCB0byAwICh6ZXJvKVxyXG4gICAgICAgIGlmIChsaWZlID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gc3RyYWlnaHQtbGluZSBkZXByZWNpYXRpb25cclxuICAgICAgICByZXR1cm4gKGNvc3QgLSBzYWx2YWdlKSAvIGxpZmU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1lEID0gZnVuY3Rpb24oY29zdCwgc2FsdmFnZSwgbGlmZSwgcGVyaW9kKSB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGFueSBvZiB0aGUgcGFyYW1ldGVycyBpcyBub3QgYSBudW1iZXJcclxuICAgICAgICBjb3N0ID0gdXRpbHMucGFyc2VOdW1iZXIoY29zdCk7XHJcbiAgICAgICAgc2FsdmFnZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHNhbHZhZ2UpO1xyXG4gICAgICAgIGxpZmUgPSB1dGlscy5wYXJzZU51bWJlcihsaWZlKTtcclxuICAgICAgICBwZXJpb2QgPSB1dGlscy5wYXJzZU51bWJlcihwZXJpb2QpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGNvc3QsIHNhbHZhZ2UsIGxpZmUsIHBlcmlvZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIGxpZmUgZXF1YWwgdG8gMCAoemVybylcclxuICAgICAgICBpZiAobGlmZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHBlcmlvZCBpcyBsb3dlciB0aGFuIDEgb3IgZ3JlYXRlciB0aGFuIGxpZmVcclxuICAgICAgICBpZiAocGVyaW9kIDwgMSB8fCBwZXJpb2QgPiBsaWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUcnVuY2F0ZSBwZXJpb2QgaWYgaXQgaXMgbm90IGFuIGludGVnZXJcclxuICAgICAgICBwZXJpb2QgPSBwYXJzZUludChwZXJpb2QsIDEwKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHN0cmFpZ2h0LWxpbmUgZGVwcmVjaWF0aW9uXHJcbiAgICAgICAgcmV0dXJuICgoY29zdCAtIHNhbHZhZ2UpICogKGxpZmUgLSBwZXJpb2QgKyAxKSAqIDIpIC8gKGxpZmUgKiAobGlmZSArIDEpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5UQklMTEVRID0gZnVuY3Rpb24oc2V0dGxlbWVudCwgbWF0dXJpdHksIGRpc2NvdW50KSB7XHJcbiAgICAgICAgc2V0dGxlbWVudCA9IHV0aWxzLnBhcnNlRGF0ZShzZXR0bGVtZW50KTtcclxuICAgICAgICBtYXR1cml0eSA9IHV0aWxzLnBhcnNlRGF0ZShtYXR1cml0eSk7XHJcbiAgICAgICAgZGlzY291bnQgPSB1dGlscy5wYXJzZU51bWJlcihkaXNjb3VudCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3Ioc2V0dGxlbWVudCwgbWF0dXJpdHksIGRpc2NvdW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgZGlzY291bnQgaXMgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvXHJcbiAgICAgICAgaWYgKGRpc2NvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBzZXR0bGVtZW50IGlzIGdyZWF0ZXIgdGhhbiBtYXR1cml0eVxyXG4gICAgICAgIGlmIChzZXR0bGVtZW50ID4gbWF0dXJpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBtYXR1cml0eSBpcyBtb3JlIHRoYW4gb25lIHllYXIgYWZ0ZXIgc2V0dGxlbWVudFxyXG4gICAgICAgIGlmIChtYXR1cml0eSAtIHNldHRsZW1lbnQgPiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYm9uZC1lcXVpdmFsZW50IHlpZWxkXHJcbiAgICAgICAgcmV0dXJuICgzNjUgKiBkaXNjb3VudCkgLyAoMzYwIC0gZGlzY291bnQgKiBEQVlTMzYwKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBmYWxzZSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlRCSUxMUFJJQ0UgPSBmdW5jdGlvbihzZXR0bGVtZW50LCBtYXR1cml0eSwgZGlzY291bnQpIHtcclxuICAgICAgICBzZXR0bGVtZW50ID0gdXRpbHMucGFyc2VEYXRlKHNldHRsZW1lbnQpO1xyXG4gICAgICAgIG1hdHVyaXR5ID0gdXRpbHMucGFyc2VEYXRlKG1hdHVyaXR5KTtcclxuICAgICAgICBkaXNjb3VudCA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpc2NvdW50KTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihzZXR0bGVtZW50LCBtYXR1cml0eSwgZGlzY291bnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBlcnJvciBpZiBkaXNjb3VudCBpcyBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIHplcm9cclxuICAgICAgICBpZiAoZGlzY291bnQgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHNldHRsZW1lbnQgaXMgZ3JlYXRlciB0aGFuIG1hdHVyaXR5XHJcbiAgICAgICAgaWYgKHNldHRsZW1lbnQgPiBtYXR1cml0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIG1hdHVyaXR5IGlzIG1vcmUgdGhhbiBvbmUgeWVhciBhZnRlciBzZXR0bGVtZW50XHJcbiAgICAgICAgaWYgKG1hdHVyaXR5IC0gc2V0dGxlbWVudCA+IDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBib25kLWVxdWl2YWxlbnQgeWllbGRcclxuICAgICAgICByZXR1cm4gMTAwICogKDEgLSBkaXNjb3VudCAqIERBWVMzNjAoc2V0dGxlbWVudCwgbWF0dXJpdHksIGZhbHNlKSAvIDM2MCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVEJJTExZSUVMRCA9IGZ1bmN0aW9uKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBwcmljZSkge1xyXG4gICAgICAgIHNldHRsZW1lbnQgPSB1dGlscy5wYXJzZURhdGUoc2V0dGxlbWVudCk7XHJcbiAgICAgICAgbWF0dXJpdHkgPSB1dGlscy5wYXJzZURhdGUobWF0dXJpdHkpO1xyXG4gICAgICAgIHByaWNlID0gdXRpbHMucGFyc2VOdW1iZXIocHJpY2UpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHNldHRsZW1lbnQsIG1hdHVyaXR5LCBwcmljZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yIGlmIHByaWNlIGlzIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gemVyb1xyXG4gICAgICAgIGlmIChwcmljZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgc2V0dGxlbWVudCBpcyBncmVhdGVyIHRoYW4gbWF0dXJpdHlcclxuICAgICAgICBpZiAoc2V0dGxlbWVudCA+IG1hdHVyaXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5udW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgbWF0dXJpdHkgaXMgbW9yZSB0aGFuIG9uZSB5ZWFyIGFmdGVyIHNldHRsZW1lbnRcclxuICAgICAgICBpZiAobWF0dXJpdHkgLSBzZXR0bGVtZW50ID4gMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGJvbmQtZXF1aXZhbGVudCB5aWVsZFxyXG4gICAgICAgIHJldHVybiAoMTAwIC0gcHJpY2UpICogMzYwIC8gKHByaWNlICogREFZUzM2MChzZXR0bGVtZW50LCBtYXR1cml0eSwgZmFsc2UpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5WREIgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuWElSUiA9IGZ1bmN0aW9uKHZhbHVlcywgZGF0ZXMsIGd1ZXNzKSB7XHJcbiAgICAgICAgLy8gQ3JlZGl0czogYWxnb3JpdGhtIGluc3BpcmVkIGJ5IEFwYWNoZSBPcGVuT2ZmaWNlXHJcblxyXG4gICAgICAgIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcclxuICAgICAgICBkYXRlcyA9IHV0aWxzLnBhcnNlRGF0ZUFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0ZXMpKTtcclxuICAgICAgICBndWVzcyA9IHV0aWxzLnBhcnNlTnVtYmVyKGd1ZXNzKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcih2YWx1ZXMsIGRhdGVzLCBndWVzcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlcyB0aGUgcmVzdWx0aW5nIGFtb3VudFxyXG4gICAgICAgIHZhciBpcnJSZXN1bHQgPSBmdW5jdGlvbih2YWx1ZXMsIGRhdGVzLCByYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gcmF0ZSArIDE7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZXNbMF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFsdWVzW2ldIC8gTWF0aC5wb3cociwgREFZUyhkYXRlc1tpXSwgZGF0ZXNbMF0pIC8gMzY1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZXMgdGhlIGZpcnN0IGRlcml2YXRpb25cclxuICAgICAgICB2YXIgaXJyUmVzdWx0RGVyaXYgPSBmdW5jdGlvbih2YWx1ZXMsIGRhdGVzLCByYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gcmF0ZSArIDE7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYWMgPSBEQVlTKGRhdGVzW2ldLCBkYXRlc1swXSkgLyAzNjU7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgLT0gZnJhYyAqIHZhbHVlc1tpXSAvIE1hdGgucG93KHIsIGZyYWMgKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENoZWNrIHRoYXQgdmFsdWVzIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBwb3NpdGl2ZSB2YWx1ZSBhbmQgb25lXHJcbiAgICAgICAgICAgIC8vIG5lZ2F0aXZlIHZhbHVlXHJcbiAgICAgICAgdmFyIHBvc2l0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5lZ2F0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWVzW2ldIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZXJyb3IgaWYgdmFsdWVzIGRvZXMgbm90IGNvbnRhaW4gYXQgbGVhc3Qgb25lIHBvc2l0aXZlIHZhbHVlXHJcbiAgICAgICAgICAgIC8vIGFuZCBvbmUgbmVnYXRpdmUgdmFsdWVcclxuICAgICAgICBpZiAoIXBvc2l0aXZlIHx8ICFuZWdhdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBndWVzcyBhbmQgcmVzdWx0UmF0ZVxyXG4gICAgICAgIGd1ZXNzID0gZ3Vlc3MgfHwgMC4xO1xyXG4gICAgICAgIHZhciByZXN1bHRSYXRlID0gZ3Vlc3M7XHJcblxyXG4gICAgICAgIC8vIFNldCBtYXhpbXVtIGVwc2lsb24gZm9yIGVuZCBvZiBpdGVyYXRpb25cclxuICAgICAgICB2YXIgZXBzTWF4ID0gMWUtMTA7XHJcblxyXG4gICAgICAgIC8vIEltcGxlbWVudCBOZXd0b24ncyBtZXRob2RcclxuICAgICAgICB2YXIgbmV3UmF0ZSwgZXBzUmF0ZSwgcmVzdWx0VmFsdWU7XHJcbiAgICAgICAgdmFyIGNvbnRMb29wID0gdHJ1ZTtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHJlc3VsdFZhbHVlID0gaXJyUmVzdWx0KHZhbHVlcywgZGF0ZXMsIHJlc3VsdFJhdGUpO1xyXG4gICAgICAgICAgICBuZXdSYXRlID0gcmVzdWx0UmF0ZSAtIHJlc3VsdFZhbHVlIC8gaXJyUmVzdWx0RGVyaXYodmFsdWVzLCBkYXRlcywgcmVzdWx0UmF0ZSk7XHJcbiAgICAgICAgICAgIGVwc1JhdGUgPSBNYXRoLmFicyhuZXdSYXRlIC0gcmVzdWx0UmF0ZSk7XHJcbiAgICAgICAgICAgIHJlc3VsdFJhdGUgPSBuZXdSYXRlO1xyXG4gICAgICAgICAgICBjb250TG9vcCA9IChlcHNSYXRlID4gZXBzTWF4KSAmJiAoTWF0aC5hYnMocmVzdWx0VmFsdWUpID4gZXBzTWF4KTtcclxuICAgICAgICB9IHdoaWxlIChjb250TG9vcCk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBpbnRlcm5hbCByYXRlIG9mIHJldHVyblxyXG4gICAgICAgIHJldHVybiByZXN1bHRSYXRlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlhOUFYgPSBmdW5jdGlvbihyYXRlLCB2YWx1ZXMsIGRhdGVzKSB7XHJcbiAgICAgICAgcmF0ZSA9IHV0aWxzLnBhcnNlTnVtYmVyKHJhdGUpO1xyXG4gICAgICAgIHZhbHVlcyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbih2YWx1ZXMpKTtcclxuICAgICAgICBkYXRlcyA9IHV0aWxzLnBhcnNlRGF0ZUFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0ZXMpKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYXRlLCB2YWx1ZXMsIGRhdGVzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gdmFsdWVzW2ldIC8gTWF0aC5wb3coMSArIHJhdGUsIERBWVMoZGF0ZXNbaV0sIGRhdGVzWzBdKSAvIDM2NSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuWUlFTEQgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuWUlFTERESVNDID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLllJRUxETUFUID0gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufSkoKTtcclxuXHJcbmpleGNlbC5tZXRob2RzLmluZm9ybWF0aW9uID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4cG9ydHMgPSB7fTtcclxuICAgIGV4cG9ydHMuQ0VMTCA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5FUlJPUiA9IHt9O1xyXG4gICAgZXhwb3J0cy5FUlJPUi5UWVBFID0gZnVuY3Rpb24oZXJyb3JfdmFsKSB7XHJcbiAgICAgICAgc3dpdGNoIChlcnJvcl92YWwpIHtcclxuICAgICAgICAgICAgY2FzZSBlcnJvci5uaWw6IHJldHVybiAxO1xyXG4gICAgICAgICAgICBjYXNlIGVycm9yLmRpdjA6IHJldHVybiAyO1xyXG4gICAgICAgICAgICBjYXNlIGVycm9yLnZhbHVlOiByZXR1cm4gMztcclxuICAgICAgICAgICAgY2FzZSBlcnJvci5yZWY6IHJldHVybiA0O1xyXG4gICAgICAgICAgICBjYXNlIGVycm9yLm5hbWU6IHJldHVybiA1O1xyXG4gICAgICAgICAgICBjYXNlIGVycm9yLm51bTogcmV0dXJuIDY7XHJcbiAgICAgICAgICAgIGNhc2UgZXJyb3IubmE6IHJldHVybiA3O1xyXG4gICAgICAgICAgICBjYXNlIGVycm9yLmRhdGE6IHJldHVybiA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSU5GTyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5JU0JMQU5LID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVNCSU5BUlkgPSBmdW5jdGlvbiAobnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuICgvXlswMV17MSwxMH0kLykudGVzdChudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklTRVJSID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gKFtlcnJvci52YWx1ZSwgZXJyb3IucmVmLCBlcnJvci5kaXYwLCBlcnJvci5udW0sIGVycm9yLm5hbWUsIGVycm9yLm5pbF0pLmluZGV4T2YodmFsdWUpID49IDAgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVNFUlJPUiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuSVNFUlIodmFsdWUpIHx8IHZhbHVlID09PSBlcnJvci5uYTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JU0VWRU4gPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gKE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSkgJiAxKSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gVE9ET1xyXG4gICAgZXhwb3J0cy5JU0ZPUk1VTEEgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuSVNMT0dJQ0FMID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklTTkEgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXJyb3IubmE7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVNOT05URVhUID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mKHZhbHVlKSAhPT0gJ3N0cmluZyc7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSVNOVU1CRVIgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JU09ERCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKSAmIDEpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLklTUkVGID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLklTVEVYVCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZih2YWx1ZSkgPT09ICdzdHJpbmcnO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk4gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLklTTlVNQkVSKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmdldFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5JU0VSUk9SKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk5BID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNIRUVUID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLlNIRUVUUyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5UWVBFID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5JU05VTUJFUih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLklTVEVYVCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLklTTE9HSUNBTCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLklTRVJST1IodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA2NDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59KSgpO1xyXG5cclxuamV4Y2VsLm1ldGhvZHMubG9naWNhbCA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBleHBvcnRzID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5BTkQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFhcmdzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNIT09TRSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMSB8fCBpbmRleCA+IDI1NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IGluZGV4ICsgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzW2luZGV4XTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GQUxTRSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JRiA9IGZ1bmN0aW9uKHRlc3QsIHRoZW5fdmFsdWUsIG90aGVyd2lzZV92YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0ZXN0ID8gdGhlbl92YWx1ZSA6IG90aGVyd2lzZV92YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5JRkVSUk9SID0gZnVuY3Rpb24odmFsdWUsIHZhbHVlSWZFcnJvcikge1xyXG4gICAgICAgIGlmIChJU0VSUk9SKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJZkVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuSUZOQSA9IGZ1bmN0aW9uKHZhbHVlLCB2YWx1ZV9pZl9uYSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXJyb3IubmEgPyB2YWx1ZV9pZl9uYSA6IHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk5PVCA9IGZ1bmN0aW9uKGxvZ2ljYWwpIHtcclxuICAgICAgICByZXR1cm4gIWxvZ2ljYWw7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuT1IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmdzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVFJVRSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlhPUiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXJnc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChNYXRoLmZsb29yKE1hdGguYWJzKHJlc3VsdCkpICYgMSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1dJVENIID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApICB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRWYWx1ZSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICAgICAgdmFyIGFyZ2MgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgdmFyIHN3aXRjaENvdW50ID0gTWF0aC5mbG9vcihhcmdjIC8gMik7XHJcbiAgICAgICAgICAgIHZhciBzd2l0Y2hTYXRpc2ZpZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRDbGF1c2UgPSBhcmdjICUgMiA9PT0gMCA/IG51bGwgOiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN3aXRjaENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3dpdGNoQ291bnQ7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VmFsdWUgPT09IGFyZ3VtZW50c1tpbmRleCAqIDIgKyAxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXJndW1lbnRzW2luZGV4ICogMiArIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc3dpdGNoU2F0aXNmaWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzd2l0Y2hTYXRpc2ZpZWQgJiYgZGVmYXVsdENsYXVzZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVmYXVsdENsYXVzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGV4cG9ydHM7XHJcbn0pKCk7XHJcblxyXG5qZXhjZWwubWV0aG9kcy5tYXRoID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4cG9ydHMgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLkFCUyA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyh1dGlscy5wYXJzZU51bWJlcihudW1iZXIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BQ09TID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkFDT1NIID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlciArIE1hdGguc3FydChudW1iZXIgKiBudW1iZXIgLSAxKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQUNPVCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmF0YW4oMSAvIG51bWJlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQUNPVEggPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMC41ICogTWF0aC5sb2coKG51bWJlciArIDEpIC8gKG51bWJlciAtIDEpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BR0dSRUdBVEUgPSBudWxsXHJcblxyXG4gICAgZXhwb3J0cy5BUkFCSUMgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgLy8gQ3JlZGl0czogUmFmYT8gS3VrYXdza2lcclxuICAgICAgICBpZiAoIS9eTSooPzpEP0N7MCwzfXxDW01EXSkoPzpMP1h7MCwzfXxYW0NMXSkoPzpWP0l7MCwzfXxJW1hWXSkkLy50ZXN0KHRleHQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSAwO1xyXG4gICAgICAgIHRleHQucmVwbGFjZSgvW01ETFZdfENbTURdP3xYW0NMXT98SVtYVl0/L2csIGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICAgICAgciArPSB7XHJcbiAgICAgICAgICAgICAgICBNOiAxMDAwLFxyXG4gICAgICAgICAgICAgICAgQ006IDkwMCxcclxuICAgICAgICAgICAgICAgIEQ6IDUwMCxcclxuICAgICAgICAgICAgICAgIENEOiA0MDAsXHJcbiAgICAgICAgICAgICAgICBDOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBYQzogOTAsXHJcbiAgICAgICAgICAgICAgICBMOiA1MCxcclxuICAgICAgICAgICAgICAgIFhMOiA0MCxcclxuICAgICAgICAgICAgICAgIFg6IDEwLFxyXG4gICAgICAgICAgICAgICAgSVg6IDksXHJcbiAgICAgICAgICAgICAgICBWOiA1LFxyXG4gICAgICAgICAgICAgICAgSVY6IDQsXHJcbiAgICAgICAgICAgICAgICBJOiAxXHJcbiAgICAgICAgICAgIH1baV07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQVNJTiA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmFzaW4obnVtYmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BU0lOSCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZyhudW1iZXIgKyBNYXRoLnNxcnQobnVtYmVyICogbnVtYmVyICsgMSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkFUQU4gPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5hdGFuKG51bWJlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQVRBTjIgPSBmdW5jdGlvbihudW1iZXJfeCwgbnVtYmVyX3kpIHtcclxuICAgICAgICBudW1iZXJfeCA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcl94KTtcclxuICAgICAgICBudW1iZXJfeSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcl95KTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXJfeCwgbnVtYmVyX3kpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIobnVtYmVyX3gsIG51bWJlcl95KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BVEFOSCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZygoMSArIG51bWJlcikgLyAoMSAtIG51bWJlcikpIC8gMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5CQVNFID0gZnVuY3Rpb24obnVtYmVyLCByYWRpeCwgbWluX2xlbmd0aCkge1xyXG4gICAgICAgIG1pbl9sZW5ndGggPSBtaW5fbGVuZ3RoIHx8IDA7XHJcblxyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgcmFkaXggPSB1dGlscy5wYXJzZU51bWJlcihyYWRpeCk7XHJcbiAgICAgICAgbWluX2xlbmd0aCA9IHV0aWxzLnBhcnNlTnVtYmVyKG1pbl9sZW5ndGgpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgcmFkaXgsIG1pbl9sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWluX2xlbmd0aCA9IChtaW5fbGVuZ3RoID09PSB1bmRlZmluZWQpID8gMCA6IG1pbl9sZW5ndGg7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlci50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheShNYXRoLm1heChtaW5fbGVuZ3RoICsgMSAtIHJlc3VsdC5sZW5ndGgsIDApKS5qb2luKCcwJykgKyByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ0VJTElORyA9IGZ1bmN0aW9uKG51bWJlciwgc2lnbmlmaWNhbmNlLCBtb2RlKSB7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gKHNpZ25pZmljYW5jZSA9PT0gdW5kZWZpbmVkKSA/IDEgOiBzaWduaWZpY2FuY2U7XHJcbiAgICAgICAgbW9kZSA9IChtb2RlID09PSB1bmRlZmluZWQpID8gMCA6IG1vZGU7XHJcblxyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gdXRpbHMucGFyc2VOdW1iZXIoc2lnbmlmaWNhbmNlKTtcclxuICAgICAgICBtb2RlID0gdXRpbHMucGFyc2VOdW1iZXIobW9kZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBzaWduaWZpY2FuY2UsIG1vZGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNpZ25pZmljYW5jZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNpZ25pZmljYW5jZSA9IE1hdGguYWJzKHNpZ25pZmljYW5jZSk7XHJcbiAgICAgICAgaWYgKG51bWJlciA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIE1hdGguY2VpbChNYXRoLmFicyhudW1iZXIpIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DRUlMSU5HLk1BVEggPSBleHBvcnRzLkNFSUxJTkc7XHJcblxyXG4gICAgZXhwb3J0cy5DRUlMSU5HLlBSRUNJU0UgPSBleHBvcnRzLkNFSUxJTkc7XHJcblxyXG4gICAgZXhwb3J0cy5DT01CSU4gPSBmdW5jdGlvbihudW1iZXIsIG51bWJlcl9jaG9zZW4pIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIG51bWJlcl9jaG9zZW4gPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXJfY2hvc2VuKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIG51bWJlcl9jaG9zZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuRkFDVChudW1iZXIpIC8gKGV4cG9ydHMuRkFDVChudW1iZXJfY2hvc2VuKSAqIGV4cG9ydHMuRkFDVChudW1iZXIgLSBudW1iZXJfY2hvc2VuKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09NQklOQSA9IGZ1bmN0aW9uKG51bWJlciwgbnVtYmVyX2Nob3Nlbikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgbnVtYmVyX2Nob3NlbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcl9jaG9zZW4pO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgbnVtYmVyX2Nob3NlbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKG51bWJlciA9PT0gMCAmJiBudW1iZXJfY2hvc2VuID09PSAwKSA/IDEgOiBleHBvcnRzLkNPTUJJTihudW1iZXIgKyBudW1iZXJfY2hvc2VuIC0gMSwgbnVtYmVyIC0gMSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09TID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY29zKG51bWJlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09TSCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoTWF0aC5leHAobnVtYmVyKSArIE1hdGguZXhwKC1udW1iZXIpKSAvIDI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09UID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDEgLyBNYXRoLnRhbihudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNPVEggPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZTIgPSBNYXRoLmV4cCgyICogbnVtYmVyKTtcclxuICAgICAgICByZXR1cm4gKGUyICsgMSkgLyAoZTIgLSAxKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DU0MgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMSAvIE1hdGguc2luKG51bWJlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ1NDSCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAyIC8gKE1hdGguZXhwKG51bWJlcikgLSBNYXRoLmV4cCgtbnVtYmVyKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuREVDSU1BTCA9IGZ1bmN0aW9uKG51bWJlciwgcmFkaXgpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBwYXJzZUludChudW1iZXIsIHJhZGl4KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ERUdSRUVTID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlciAqIDE4MCAvIE1hdGguUEk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRVZFTiA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkNFSUxJTkcobnVtYmVyLCAtMiwgLTEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkVYUCA9IE1hdGguZXhwO1xyXG5cclxuICAgIHZhciBNRU1PSVpFRF9GQUNUID0gW107XHJcbiAgICBleHBvcnRzLkZBQ1QgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbiA9IE1hdGguZmxvb3IobnVtYmVyKTtcclxuICAgICAgICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoTUVNT0laRURfRkFDVFtuXSA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1FTU9JWkVEX0ZBQ1Rbbl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTUVNT0laRURfRkFDVFtuXSA9IGV4cG9ydHMuRkFDVChuIC0gMSkgKiBuO1xyXG4gICAgICAgICAgICByZXR1cm4gTUVNT0laRURfRkFDVFtuXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRkFDVERPVUJMRSA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuID0gTWF0aC5mbG9vcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChuIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG4gKiBleHBvcnRzLkZBQ1RET1VCTEUobiAtIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GTE9PUiA9IGZ1bmN0aW9uKG51bWJlciwgc2lnbmlmaWNhbmNlLCBtb2RlKSB7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gKHNpZ25pZmljYW5jZSA9PT0gdW5kZWZpbmVkKSA/IDEgOiBzaWduaWZpY2FuY2U7XHJcbiAgICAgICAgbW9kZSA9IChtb2RlID09PSB1bmRlZmluZWQpID8gMCA6IG1vZGU7XHJcblxyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gdXRpbHMucGFyc2VOdW1iZXIoc2lnbmlmaWNhbmNlKTtcclxuICAgICAgICBtb2RlID0gdXRpbHMucGFyc2VOdW1iZXIobW9kZSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBzaWduaWZpY2FuY2UsIG1vZGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNpZ25pZmljYW5jZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNpZ25pZmljYW5jZSA9IE1hdGguYWJzKHNpZ25pZmljYW5jZSk7XHJcbiAgICAgICAgaWYgKG51bWJlciA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlciAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIE1hdGguY2VpbChNYXRoLmFicyhudW1iZXIpIC8gc2lnbmlmaWNhbmNlKSAqIHNpZ25pZmljYW5jZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSAvIHNpZ25pZmljYW5jZSkgKiBzaWduaWZpY2FuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRkxPT1IuTUFUSCA9IGV4cG9ydHMuRkxPT1I7XHJcblxyXG4gICAgZXhwb3J0cy5HQ0QgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuSU5UID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MQ00gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBDcmVkaXRzOiBKb25hcyBSYW9uaSBTb2FyZXMgU2lsdmFcclxuICAgICAgICB2YXIgbyA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcclxuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpLCBqLCBuLCBkLCByID0gMTtcclxuICAgICAgICAgICAgKG4gPSBvLnBvcCgpKSAhPT0gdW5kZWZpbmVkOykge1xyXG4gICAgICAgICAgICB3aGlsZSAobiA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuICUgMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDMsIGogPSBNYXRoLmZsb29yKE1hdGguc3FydChuKSk7IGkgPD0gaiAmJiBuICUgaTsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvL2VtcHR5XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGQgPSAoaSA8PSBqKSA/IGkgOiBuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobiAvPSBkLCByICo9IGQsIGkgPSBvLmxlbmd0aDsgaTtcclxuICAgICAgICAgICAgICAgICAgICAob1stLWldICUgZCkgPT09IDAgJiYgKG9baV0gLz0gZCkgPT09IDEgJiYgby5zcGxpY2UoaSwgMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2VtcHR5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTE4gPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MT0cgPSBmdW5jdGlvbihudW1iZXIsIGJhc2UpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGJhc2UgPSAoYmFzZSA9PT0gdW5kZWZpbmVkKSA/IDEwIDogdXRpbHMucGFyc2VOdW1iZXIoYmFzZSk7XHJcblxyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgYmFzZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZyhiYXNlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MT0cxMCA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZyhudW1iZXIpIC8gTWF0aC5sb2coMTApO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk1ERVRFUk0gPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuTUlOVkVSU0UgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuTU1VTFQgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuTU9EID0gZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcclxuICAgICAgICBkaXZpZGVuZCA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlkZW5kKTtcclxuICAgICAgICBkaXZpc29yID0gdXRpbHMucGFyc2VOdW1iZXIoZGl2aXNvcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZGl2aWRlbmQsIGRpdmlzb3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpdmlzb3IgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLmRpdjA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtb2R1bHVzID0gTWF0aC5hYnMoZGl2aWRlbmQgJSBkaXZpc29yKTtcclxuICAgICAgICByZXR1cm4gKGRpdmlzb3IgPiAwKSA/IG1vZHVsdXMgOiAtbW9kdWx1cztcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NUk9VTkQgPSBmdW5jdGlvbihudW1iZXIsIG11bHRpcGxlKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBtdWx0aXBsZSA9IHV0aWxzLnBhcnNlTnVtYmVyKG11bHRpcGxlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIG11bHRpcGxlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChudW1iZXIgKiBtdWx0aXBsZSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlciAvIG11bHRpcGxlKSAqIG11bHRpcGxlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk1VTFRJTk9NSUFMID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XHJcbiAgICAgICAgaWYgKGFyZ3MgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJncztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1bSA9IDA7XHJcbiAgICAgICAgdmFyIGRpdmlzb3IgPSAxO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdW0gKz0gYXJnc1tpXTtcclxuICAgICAgICAgICAgZGl2aXNvciAqPSBleHBvcnRzLkZBQ1QoYXJnc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkZBQ1Qoc3VtKSAvIGRpdmlzb3I7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTVVOSVQgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuT0REID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRlbXAgPSBNYXRoLmNlaWwoTWF0aC5hYnMobnVtYmVyKSk7XHJcbiAgICAgICAgdGVtcCA9ICh0ZW1wICYgMSkgPyB0ZW1wIDogdGVtcCArIDE7XHJcbiAgICAgICAgcmV0dXJuIChudW1iZXIgPiAwKSA/IHRlbXAgOiAtdGVtcDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5QSSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLlBJO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBPV0VSID0gZnVuY3Rpb24obnVtYmVyLCBwb3dlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgcG93ZXIgPSB1dGlscy5wYXJzZU51bWJlcihwb3dlcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBwb3dlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gTWF0aC5wb3cobnVtYmVyLCBwb3dlcik7XHJcbiAgICAgICAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUFJPRFVDVCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIGlmIChhcmdzIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSAxO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKj0gYXJnc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5RVU9USUVOVCA9IGZ1bmN0aW9uKG51bWVyYXRvciwgZGVub21pbmF0b3IpIHtcclxuICAgICAgICBudW1lcmF0b3IgPSB1dGlscy5wYXJzZU51bWJlcihudW1lcmF0b3IpO1xyXG4gICAgICAgIGRlbm9taW5hdG9yID0gdXRpbHMucGFyc2VOdW1iZXIoZGVub21pbmF0b3IpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWVyYXRvciwgZGVub21pbmF0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KG51bWVyYXRvciAvIGRlbm9taW5hdG9yLCAxMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUkFESUFOUyA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudW1iZXIgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlJBTkQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5SQU5EQkVUV0VFTiA9IGZ1bmN0aW9uKGJvdHRvbSwgdG9wKSB7XHJcbiAgICAgICAgYm90dG9tID0gdXRpbHMucGFyc2VOdW1iZXIoYm90dG9tKTtcclxuICAgICAgICB0b3AgPSB1dGlscy5wYXJzZU51bWJlcih0b3ApO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGJvdHRvbSwgdG9wKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gMy4wIExpY2Vuc2VcclxuICAgICAgICAvLyBDb3B5cmlnaHQgKGMpIDIwMTIgZXFjb2RlXHJcbiAgICAgICAgcmV0dXJuIGJvdHRvbSArIE1hdGguY2VpbCgodG9wIC0gYm90dG9tICsgMSkgKiBNYXRoLnJhbmRvbSgpKSAtIDE7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUk9NQU4gPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuUk9VTkQgPSBmdW5jdGlvbihudW1iZXIsIGRpZ2l0cykge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgZGlnaXRzID0gdXRpbHMucGFyc2VOdW1iZXIoZGlnaXRzKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIGRpZ2l0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIgKiBNYXRoLnBvdygxMCwgZGlnaXRzKSkgLyBNYXRoLnBvdygxMCwgZGlnaXRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ST1VORERPV04gPSBmdW5jdGlvbihudW1iZXIsIGRpZ2l0cykge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgZGlnaXRzID0gdXRpbHMucGFyc2VOdW1iZXIoZGlnaXRzKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIGRpZ2l0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2lnbiA9IChudW1iZXIgPiAwKSA/IDEgOiAtMTtcclxuICAgICAgICByZXR1cm4gc2lnbiAqIChNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikgKiBNYXRoLnBvdygxMCwgZGlnaXRzKSkpIC8gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUk9VTkRVUCA9IGZ1bmN0aW9uKG51bWJlciwgZGlnaXRzKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBkaWdpdHMgPSB1dGlscy5wYXJzZU51bWJlcihkaWdpdHMpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGlnaXRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzaWduID0gKG51bWJlciA+IDApID8gMSA6IC0xO1xyXG4gICAgICAgIHJldHVybiBzaWduICogKE1hdGguY2VpbChNYXRoLmFicyhudW1iZXIpICogTWF0aC5wb3coMTAsIGRpZ2l0cykpKSAvIE1hdGgucG93KDEwLCBkaWdpdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNFQyA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAxIC8gTWF0aC5jb3MobnVtYmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TRUNIID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDIgLyAoTWF0aC5leHAobnVtYmVyKSArIE1hdGguZXhwKC1udW1iZXIpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TRVJJRVNTVU0gPSBmdW5jdGlvbih4LCBuLCBtLCBjb2VmZmljaWVudHMpIHtcclxuICAgICAgICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XHJcbiAgICAgICAgbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG4pO1xyXG4gICAgICAgIG0gPSB1dGlscy5wYXJzZU51bWJlcihtKTtcclxuICAgICAgICBjb2VmZmljaWVudHMgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KGNvZWZmaWNpZW50cyk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgbiwgbSwgY29lZmZpY2llbnRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBjb2VmZmljaWVudHNbMF0gKiBNYXRoLnBvdyh4LCBuKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNvZWZmaWNpZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gY29lZmZpY2llbnRzW2ldICogTWF0aC5wb3coeCwgbiArIGkgKiBtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TSUdOID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TSU4gPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5zaW4obnVtYmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TSU5IID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChNYXRoLmV4cChudW1iZXIpIC0gTWF0aC5leHAoLW51bWJlcikpIC8gMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TUVJUID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNRUlRQSSA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQobnVtYmVyICogTWF0aC5QSSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1VCVE9UQUwgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuQUREID0gZnVuY3Rpb24gKG51bTEsIG51bTIpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBudW0xID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMSk7XHJcbiAgICAgICAgbnVtMiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTIpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bTEsIG51bTIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudW0xICsgbnVtMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NSU5VUyA9IGZ1bmN0aW9uIChudW0xLCBudW0yKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnVtMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTEpO1xyXG4gICAgICAgIG51bTIgPSB1dGlscy5wYXJzZU51bWJlcihudW0yKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW0xLCBudW0yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVtMSAtIG51bTI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuRElWSURFID0gZnVuY3Rpb24gKGRpdmlkZW5kLCBkaXZpc29yKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGl2aWRlbmQgPSB1dGlscy5wYXJzZU51bWJlcihkaXZpZGVuZCk7XHJcbiAgICAgICAgZGl2aXNvciA9IHV0aWxzLnBhcnNlTnVtYmVyKGRpdmlzb3IpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGRpdmlkZW5kLCBkaXZpc29yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGl2aXNvciA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IuZGl2MDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTVVMVElQTFkgPSBmdW5jdGlvbiAoZmFjdG9yMSwgZmFjdG9yMikge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZhY3RvcjEgPSB1dGlscy5wYXJzZU51bWJlcihmYWN0b3IxKTtcclxuICAgICAgICBmYWN0b3IyID0gdXRpbHMucGFyc2VOdW1iZXIoZmFjdG9yMik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoZmFjdG9yMSwgZmFjdG9yMikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcjEgKiBmYWN0b3IyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkdURSA9IGZ1bmN0aW9uIChudW0xLCBudW0yKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm5hO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnVtMSA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTEpO1xyXG4gICAgICAgIG51bTIgPSB1dGlscy5wYXJzZU51bWJlcihudW0yKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW0xLCBudW0yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IuZXJyb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVtMSA+PSBudW0yO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkxUID0gZnVuY3Rpb24gKG51bTEsIG51bTIpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBudW0xID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMSk7XHJcbiAgICAgICAgbnVtMiA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bTIpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bTEsIG51bTIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5lcnJvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudW0xIDwgbnVtMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MVEUgPSBmdW5jdGlvbiAobnVtMSwgbnVtMikge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG51bTEgPSB1dGlscy5wYXJzZU51bWJlcihudW0xKTtcclxuICAgICAgICBudW0yID0gdXRpbHMucGFyc2VOdW1iZXIobnVtMik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtMSwgbnVtMikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLmVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bTEgPD0gbnVtMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5FUSA9IGZ1bmN0aW9uICh2YWx1ZTEsIHZhbHVlMikge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTEgPT09IHZhbHVlMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5ORSA9IGZ1bmN0aW9uICh2YWx1ZTEsIHZhbHVlMikge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5uYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTEgIT09IHZhbHVlMjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5QT1cgPSBmdW5jdGlvbiAoYmFzZSwgZXhwb25lbnQpIHtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IubmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiYXNlID0gdXRpbHMucGFyc2VOdW1iZXIoYmFzZSk7XHJcbiAgICAgICAgZXhwb25lbnQgPSB1dGlscy5wYXJzZU51bWJlcihleHBvbmVudCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYmFzZSwgZXhwb25lbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5lcnJvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLlBPV0VSKGJhc2UsIGV4cG9uZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TVU0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICB2YXIgYXJnc0tleXMgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnc0tleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGVsdCA9IGFyZ3VtZW50c1thcmdzS2V5c1tpXV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWx0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGVsdDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWx0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlRmxvYXQoZWx0KTtcclxuICAgICAgICAgICAgICAgICFpc05hTihwYXJzZWQpICYmIChyZXN1bHQgKz0gcGFyc2VkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVsdCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBleHBvcnRzLlNVTS5hcHBseShudWxsLCBlbHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1VNSUYgPSBmdW5jdGlvbihyYW5nZSwgY3JpdGVyaWEpIHtcclxuICAgICAgICByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihyYW5nZSkpO1xyXG4gICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gKGV2YWwocmFuZ2VbaV0gKyBjcml0ZXJpYSkpID8gcmFuZ2VbaV0gOiAwOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TVU1JRlMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IHV0aWxzLmFyZ3NUb0FycmF5KGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3Muc2hpZnQoKSkpO1xyXG4gICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJncztcclxuXHJcbiAgICAgICAgdmFyIG5fcmFuZ2VfZWxlbWVudHMgPSByYW5nZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIG5fY3JpdGVyaWFzID0gY3JpdGVyaWEubGVuZ3RoO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5fcmFuZ2VfZWxlbWVudHM7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSByYW5nZVtpXTtcclxuICAgICAgICAgICAgdmFyIGNvbmRpdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IG5fY3JpdGVyaWFzOyBjKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbiArPSBlbCArIGNyaXRlcmlhW2NdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgIT09IG5fY3JpdGVyaWFzIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiArPSAnJiYnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmFsKGNvbmRpdGlvbikpIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TVU1QUk9EVUNUID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLlNVTVNRID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG51bWJlcnMgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XHJcbiAgICAgICAgaWYgKG51bWJlcnMgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IG51bWJlcnMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IChJU05VTUJFUihudW1iZXJzW2ldKSkgPyBudW1iZXJzW2ldICogbnVtYmVyc1tpXSA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1VNWDJNWTIgPSBmdW5jdGlvbihhcnJheV94LCBhcnJheV95KSB7XHJcbiAgICAgICAgYXJyYXlfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV94KSk7XHJcbiAgICAgICAgYXJyYXlfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV95KSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXlfeCwgYXJyYXlfeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5X3gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IGFycmF5X3hbaV0gKiBhcnJheV94W2ldIC0gYXJyYXlfeVtpXSAqIGFycmF5X3lbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1VNWDJQWTIgPSBmdW5jdGlvbihhcnJheV94LCBhcnJheV95KSB7XHJcbiAgICAgICAgYXJyYXlfeCA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV94KSk7XHJcbiAgICAgICAgYXJyYXlfeSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheV95KSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoYXJyYXlfeCwgYXJyYXlfeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBhcnJheV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3gpKTtcclxuICAgICAgICBhcnJheV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3kpKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5X3gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IGFycmF5X3hbaV0gKiBhcnJheV94W2ldICsgYXJyYXlfeVtpXSAqIGFycmF5X3lbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1VNWE1ZMiA9IGZ1bmN0aW9uKGFycmF5X3gsIGFycmF5X3kpIHtcclxuICAgICAgICBhcnJheV94ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3gpKTtcclxuICAgICAgICBhcnJheV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5X3kpKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheV94LCBhcnJheV95KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgIGFycmF5X3ggPSB1dGlscy5mbGF0dGVuKGFycmF5X3gpO1xyXG4gICAgICAgIGFycmF5X3kgPSB1dGlscy5mbGF0dGVuKGFycmF5X3kpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlfeC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gTWF0aC5wb3coYXJyYXlfeFtpXSAtIGFycmF5X3lbaV0sIDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlRBTiA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnRhbihudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlRBTkggPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZTIgPSBNYXRoLmV4cCgyICogbnVtYmVyKTtcclxuICAgICAgICByZXR1cm4gKGUyIC0gMSkgLyAoZTIgKyAxKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5UUlVOQyA9IGZ1bmN0aW9uKG51bWJlciwgZGlnaXRzKSB7XHJcbiAgICAgICAgZGlnaXRzID0gKGRpZ2l0cyA9PT0gdW5kZWZpbmVkKSA/IDAgOiBkaWdpdHM7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBkaWdpdHMgPSB1dGlscy5wYXJzZU51bWJlcihkaWdpdHMpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgZGlnaXRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzaWduID0gKG51bWJlciA+IDApID8gMSA6IC0xO1xyXG4gICAgICAgIHJldHVybiBzaWduICogKE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSAqIE1hdGgucG93KDEwLCBkaWdpdHMpKSkgLyBNYXRoLnBvdygxMCwgZGlnaXRzKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGV4cG9ydHM7XHJcbn0pKCk7XHJcblxyXG5qZXhjZWwubWV0aG9kcy5taXNjID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4cG9ydHMgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLlVOSVFVRSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGhhc0VsZW1lbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBhcmd1bWVudHNbaV07XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSd2ZSBhbHJlYWR5IHNlZW4gdGhpcyBlbGVtZW50LlxyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlc3VsdC5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgaGFzRWxlbWVudCA9IHJlc3VsdFtqXSA9PT0gZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNFbGVtZW50KSB7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlIGRpZCBub3QgZmluZCBpdCwgYWRkIGl0IHRvIHRoZSByZXN1bHQuXHJcbiAgICAgICAgICAgIGlmICghaGFzRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GTEFUVEVOID0gdXRpbHMuZmxhdHRlbjtcclxuXHJcbiAgICBleHBvcnRzLkFSR1MyQVJSQVkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUkVGRVJFTkNFID0gZnVuY3Rpb24gKGNvbnRleHQsIHJlZmVyZW5jZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gcmVmZXJlbmNlLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gcGF0aFtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGVwW3N0ZXAubGVuZ3RoIC0gMV0gPT09ICddJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGVuaW5nID0gc3RlcC5pbmRleE9mKCdbJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RlcC5zdWJzdHJpbmcob3BlbmluZyArIDEsIHN0ZXAubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3N0ZXAuc3Vic3RyaW5nKDAsIG9wZW5pbmcpXVtpbmRleF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdFtzdGVwXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkpPSU4gPSBmdW5jdGlvbiAoYXJyYXksIHNlcGFyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBhcnJheS5qb2luKHNlcGFyYXRvcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTlVNQkVSUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcG9zc2libGVOdW1iZXJzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG4gICAgICAgIHJldHVybiBwb3NzaWJsZU51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGVsID09PSAnbnVtYmVyJztcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5OVU1FUkFMID0gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufSkoKTtcclxuXHJcbmpleGNlbC5tZXRob2RzLnRleHQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHt9O1xyXG5cclxuICAgIGV4cG9ydHMuQVNDID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkJBSFRURVhUID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkNIQVIgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIGlmIChudW1iZXIgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShudW1iZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNMRUFOID0gZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgIHRleHQgPSB0ZXh0IHx8ICcnO1xyXG4gICAgICAgIHZhciByZSA9IC9bXFwwLVxceDFGXS9nO1xyXG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmUsIFwiXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNPREUgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgdGV4dCA9IHRleHQgfHwgJyc7XHJcbiAgICAgICAgcmV0dXJuIHRleHQuY2hhckNvZGVBdCgwKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DT05DQVRFTkFURSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICB2YXIgdHJ1ZUZvdW5kID0gMDtcclxuICAgICAgICB3aGlsZSAoKHRydWVGb3VuZCA9IGFyZ3MuaW5kZXhPZih0cnVlKSkgPiAtMSkge1xyXG4gICAgICAgICAgICBhcmdzW3RydWVGb3VuZF0gPSAnVFJVRSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZmFsc2VGb3VuZCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKChmYWxzZUZvdW5kID0gYXJncy5pbmRleE9mKGZhbHNlKSkgPiAtMSkge1xyXG4gICAgICAgICAgICBhcmdzW2ZhbHNlRm91bmRdID0gJ0ZBTFNFJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcmdzLmpvaW4oJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkRCQ1MgPSBudWxsO1xyXG5cclxuICAgIGV4cG9ydHMuRE9MTEFSID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkVYQUNUID0gZnVuY3Rpb24odGV4dDEsIHRleHQyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQxID09PSB0ZXh0MjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GSU5EID0gZnVuY3Rpb24oZmluZF90ZXh0LCB3aXRoaW5fdGV4dCwgcG9zaXRpb24pIHtcclxuICAgICAgICBwb3NpdGlvbiA9IChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSA/IDAgOiBwb3NpdGlvbjtcclxuICAgICAgICByZXR1cm4gd2l0aGluX3RleHQgPyB3aXRoaW5fdGV4dC5pbmRleE9mKGZpbmRfdGV4dCwgcG9zaXRpb24gLSAxKSArIDEgOiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkZJWEVEID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkhUTUwyVEVYVCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnXFxuJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IChsaW5lLnJlcGxhY2UoLzwoPzoufFxcbikqPz4vZ20sICcnKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlLnJlcGxhY2UoLzwoPzoufFxcbikqPz4vZ20sICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MRUZUID0gZnVuY3Rpb24odGV4dCwgbnVtYmVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gKG51bWJlciA9PT0gdW5kZWZpbmVkKSA/IDEgOiBudW1iZXI7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAobnVtYmVyIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRleHQgPyB0ZXh0LnN1YnN0cmluZygwLCBudW1iZXIpIDogbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5MRU4gPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLmVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dCA/IHRleHQubGVuZ3RoIDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTE9XRVIgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0ID8gdGV4dC50b0xvd2VyQ2FzZSgpIDogdGV4dDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NSUQgPSBmdW5jdGlvbih0ZXh0LCBzdGFydCwgbnVtYmVyKSB7XHJcbiAgICAgICAgc3RhcnQgPSB1dGlscy5wYXJzZU51bWJlcihzdGFydCk7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihzdGFydCwgbnVtYmVyKSB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBiZWdpbiA9IHN0YXJ0IC0gMTtcclxuICAgICAgICB2YXIgZW5kID0gYmVnaW4gKyBudW1iZXI7XHJcblxyXG4gICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhiZWdpbiwgZW5kKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5OVU1CRVJWQUxVRSA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5QUk9ORVRJQyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5QUk9QRVIgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCB8fCB0ZXh0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZXh0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSAnVFJVRSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZXh0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0ZXh0ID0gJ0ZBTFNFJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTmFOKHRleHQpICYmIHR5cGVvZiB0ZXh0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGV4dCA9ICcnICsgdGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xcd1xcUyovZywgZnVuY3Rpb24odHh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUkVHRVhFWFRSQUNUID0gZnVuY3Rpb24gKHRleHQsIHJlZ3VsYXJfZXhwcmVzc2lvbikge1xyXG4gICAgICAgIHZhciBtYXRjaCA9IHRleHQubWF0Y2gobmV3IFJlZ0V4cChyZWd1bGFyX2V4cHJlc3Npb24pKTtcclxuICAgICAgICByZXR1cm4gbWF0Y2ggPyAobWF0Y2hbbWF0Y2gubGVuZ3RoID4gMSA/IG1hdGNoLmxlbmd0aCAtIDEgOiAwXSkgOiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlJFR0VYTUFUQ0ggPSBmdW5jdGlvbiAodGV4dCwgcmVndWxhcl9leHByZXNzaW9uLCBmdWxsKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoID0gdGV4dC5tYXRjaChuZXcgUmVnRXhwKHJlZ3VsYXJfZXhwcmVzc2lvbikpO1xyXG4gICAgICAgIHJldHVybiBmdWxsID8gbWF0Y2ggOiAhIW1hdGNoO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlJFR0VYUkVQTEFDRSA9IGZ1bmN0aW9uICh0ZXh0LCByZWd1bGFyX2V4cHJlc3Npb24sIHJlcGxhY2VtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShuZXcgUmVnRXhwKHJlZ3VsYXJfZXhwcmVzc2lvbiksIHJlcGxhY2VtZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5SRVBMQUNFID0gZnVuY3Rpb24odGV4dCwgcG9zaXRpb24sIGxlbmd0aCwgbmV3X3RleHQpIHtcclxuICAgICAgICBwb3NpdGlvbiA9IHV0aWxzLnBhcnNlTnVtYmVyKHBvc2l0aW9uKTtcclxuICAgICAgICBsZW5ndGggPSB1dGlscy5wYXJzZU51bWJlcihsZW5ndGgpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHBvc2l0aW9uLCBsZW5ndGgpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgbmV3X3RleHQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyKDAsIHBvc2l0aW9uIC0gMSkgKyBuZXdfdGV4dCArIHRleHQuc3Vic3RyKHBvc2l0aW9uIC0gMSArIGxlbmd0aCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUkVQVCA9IGZ1bmN0aW9uKHRleHQsIG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobnVtYmVyICsgMSkuam9pbih0ZXh0KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5SSUdIVCA9IGZ1bmN0aW9uKHRleHQsIG51bWJlcikge1xyXG4gICAgICAgIG51bWJlciA9IChudW1iZXIgPT09IHVuZGVmaW5lZCkgPyAxIDogbnVtYmVyO1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgaWYgKG51bWJlciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0ID8gdGV4dC5zdWJzdHJpbmcodGV4dC5sZW5ndGggLSBudW1iZXIpIDogbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TRUFSQ0ggPSBmdW5jdGlvbihmaW5kX3RleHQsIHdpdGhpbl90ZXh0LCBwb3NpdGlvbikge1xyXG4gICAgICAgIHZhciBmb3VuZEF0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmluZF90ZXh0ICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygd2l0aGluX3RleHQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcG9zaXRpb24gPSAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkgPyAwIDogcG9zaXRpb247XHJcbiAgICAgICAgZm91bmRBdCA9IHdpdGhpbl90ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaW5kX3RleHQudG9Mb3dlckNhc2UoKSwgcG9zaXRpb24gLSAxKSsxO1xyXG4gICAgICAgIHJldHVybiAoZm91bmRBdCA9PT0gMCk/ZXJyb3IudmFsdWU6Zm91bmRBdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TUExJVCA9IGZ1bmN0aW9uICh0ZXh0LCBzZXBhcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gdGV4dC5zcGxpdChzZXBhcmF0b3IpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNVQlNUSVRVVEUgPSBmdW5jdGlvbih0ZXh0LCBvbGRfdGV4dCwgbmV3X3RleHQsIG9jY3VycmVuY2UpIHtcclxuICAgICAgICBpZiAoIXRleHQgfHwgIW9sZF90ZXh0IHx8ICFuZXdfdGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICB9IGVsc2UgaWYgKG9jY3VycmVuY2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAob2xkX3RleHQsICdnJyksIG5ld190ZXh0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlICh0ZXh0LmluZGV4T2Yob2xkX3RleHQsIGluZGV4KSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGV4dC5pbmRleE9mKG9sZF90ZXh0LCBpbmRleCArIDEpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG9jY3VycmVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgbmV3X3RleHQgKyB0ZXh0LnN1YnN0cmluZyhpbmRleCArIG9sZF90ZXh0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpID8gdmFsdWUgOiAnJztcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5URVhUID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLlRSSU0gPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLyArL2csICcgJykudHJpbSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlVOSUNIQVIgPSBleHBvcnRzLkNIQVI7XHJcblxyXG4gICAgZXhwb3J0cy5VTklDT0RFID0gZXhwb3J0cy5DT0RFO1xyXG5cclxuICAgIGV4cG9ydHMuVVBQRVIgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0LnRvVXBwZXJDYXNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVkFMVUUgPSBudWxsO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59KSgpO1xyXG5cclxuamV4Y2VsLm1ldGhvZHMuc3RhdHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhwb3J0cyA9IHt9O1xyXG5cclxuICAgIHZhciBTUVJUMlBJID0gMi41MDY2MjgyNzQ2MzEwMDAyO1xyXG5cclxuICAgIGV4cG9ydHMuQVZFREVWID0gbnVsbDtcclxuXHJcbiAgICBleHBvcnRzLkFWRVJBR0UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB1dGlscy5udW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XHJcbiAgICAgICAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHN1bSA9IDA7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzdW0gKz0gcmFuZ2VbaV07XHJcbiAgICAgICAgICAgIGNvdW50ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdW0gLyBjb3VudDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BVkVSQUdFQSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcclxuICAgICAgICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcclxuICAgICAgICB2YXIgc3VtID0gMDtcclxuICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IHJhbmdlW2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgc3VtICs9IGVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc3VtKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdW0gLyBjb3VudDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5BVkVSQUdFSUYgPSBmdW5jdGlvbihyYW5nZSwgY3JpdGVyaWEsIGF2ZXJhZ2VfcmFuZ2UpIHtcclxuICAgICAgICBhdmVyYWdlX3JhbmdlID0gYXZlcmFnZV9yYW5nZSB8fCByYW5nZTtcclxuICAgICAgICByYW5nZSA9IHV0aWxzLmZsYXR0ZW4ocmFuZ2UpO1xyXG4gICAgICAgIGF2ZXJhZ2VfcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXZlcmFnZV9yYW5nZSkpO1xyXG4gICAgICAgIGlmIChhdmVyYWdlX3JhbmdlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF2ZXJhZ2VfcmFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhdmVyYWdlX2NvdW50ID0gMDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChldmFsKHJhbmdlW2ldICsgY3JpdGVyaWEpKSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGF2ZXJhZ2VfcmFuZ2VbaV07XHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlX2NvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAvIGF2ZXJhZ2VfY291bnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQVZFUkFHRUlGUyA9IG51bGw7XHJcblxyXG4gICAgZXhwb3J0cy5DT1VOVCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB1dGlscy5udW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSkubGVuZ3RoO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkNPVU5UQSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByYW5nZSA9IHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKTtcclxuICAgICAgICByZXR1cm4gcmFuZ2UubGVuZ3RoIC0gZXhwb3J0cy5DT1VOVEJMQU5LKHJhbmdlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DT1VOVElOID0gZnVuY3Rpb24gKHJhbmdlLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHJhbmdlW2ldID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DT1VOVEJMQU5LID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG4gICAgICAgIHZhciBibGFua3MgPSAwO1xyXG4gICAgICAgIHZhciBlbGVtZW50O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IHJhbmdlW2ldO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgYmxhbmtzKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJsYW5rcztcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5DT1VOVElGID0gZnVuY3Rpb24ocmFuZ2UsIGNyaXRlcmlhKSB7XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKHJhbmdlKTtcclxuICAgICAgICBpZiAoIS9bPD49IV0vLnRlc3QoY3JpdGVyaWEpKSB7XHJcbiAgICAgICAgICAgIGNyaXRlcmlhID0gJz09XCInICsgY3JpdGVyaWEgKyAnXCInO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJhbmdlW2ldICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2YWwocmFuZ2VbaV0gKyBjcml0ZXJpYSkpIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2YWwoJ1wiJyArIHJhbmdlW2ldICsgJ1wiJyArIGNyaXRlcmlhKSkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09VTlRJRlMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IHV0aWxzLmFyZ3NUb0FycmF5KGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkodXRpbHMuZmxhdHRlbihhcmdzWzBdKS5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRzW2ldID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMuZmxhdHRlbihhcmdzW2ldKTtcclxuICAgICAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJnc1tpICsgMV07XHJcbiAgICAgICAgICAgIGlmICghL1s8Pj0hXS8udGVzdChjcml0ZXJpYSkpIHtcclxuICAgICAgICAgICAgICAgIGNyaXRlcmlhID0gJz09XCInICsgY3JpdGVyaWEgKyAnXCInO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmFuZ2UubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmFuZ2Vbal0gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1tqXSA9IHJlc3VsdHNbal0gJiYgZXZhbChyYW5nZVtqXSArIGNyaXRlcmlhKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbal0gPSByZXN1bHRzW2pdICYmIGV2YWwoJ1wiJyArIHJhbmdlW2pdICsgJ1wiJyArIGNyaXRlcmlhKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuQ09VTlRVTklRVUUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFVOSVFVRS5hcHBseShudWxsLCB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpLmxlbmd0aDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5GSVNIRVIgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgeCA9IHV0aWxzLnBhcnNlTnVtYmVyKHgpO1xyXG4gICAgICAgIGlmICh4IGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkZJU0hFUklOViA9IGZ1bmN0aW9uKHkpIHtcclxuICAgICAgICB5ID0gdXRpbHMucGFyc2VOdW1iZXIoeSk7XHJcbiAgICAgICAgaWYgKHkgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4geTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGUyeSA9IE1hdGguZXhwKDIgKiB5KTtcclxuICAgICAgICByZXR1cm4gKGUyeSAtIDEpIC8gKGUyeSArIDEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLkZSRVFVRU5DWSA9IGZ1bmN0aW9uKGRhdGEsIGJpbnMpIHtcclxuICAgICAgICBkYXRhID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGEpKTtcclxuICAgICAgICBiaW5zID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGJpbnMpKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihkYXRhLCBiaW5zKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGIgPSBiaW5zLmxlbmd0aDtcclxuICAgICAgICB2YXIgciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGI7IGkrKykge1xyXG4gICAgICAgICAgICByW2ldID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbal0gPD0gYmluc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByWzBdICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2pdID4gYmluc1tpIC0gMV0gJiYgZGF0YVtqXSA8PSBiaW5zW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJbaV0gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtqXSA+IGJpbnNbYiAtIDFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJbYl0gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTEFSR0UgPSBmdW5jdGlvbihyYW5nZSwgaykge1xyXG4gICAgICAgIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XHJcbiAgICAgICAgayA9IHV0aWxzLnBhcnNlTnVtYmVyKGspO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHJhbmdlLCBrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYW5nZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xyXG4gICAgICAgIH0pW2sgLSAxXTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NQVggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB1dGlscy5udW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XHJcbiAgICAgICAgcmV0dXJuIChyYW5nZS5sZW5ndGggPT09IDApID8gMCA6IE1hdGgubWF4LmFwcGx5KE1hdGgsIHJhbmdlKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5NQVhBID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMuYXJyYXlWYWx1ZXNUb051bWJlcnModXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcclxuICAgICAgICByZXR1cm4gKHJhbmdlLmxlbmd0aCA9PT0gMCkgPyAwIDogTWF0aC5tYXguYXBwbHkoTWF0aCwgcmFuZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk1JTiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByYW5nZSA9IHV0aWxzLm51bWJlcnModXRpbHMuZmxhdHRlbihhcmd1bWVudHMpKTtcclxuICAgICAgICByZXR1cm4gKHJhbmdlLmxlbmd0aCA9PT0gMCkgPyAwIDogTWF0aC5taW4uYXBwbHkoTWF0aCwgcmFuZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLk1JTkEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB1dGlscy5hcnJheVZhbHVlc1RvTnVtYmVycyh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIHJldHVybiAocmFuZ2UubGVuZ3RoID09PSAwKSA/IDAgOiBNYXRoLm1pbi5hcHBseShNYXRoLCByYW5nZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTU9ERSA9IHt9O1xyXG5cclxuICAgIGV4cG9ydHMuTU9ERS5NVUxUID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gQ3JlZGl0czogUm/Dtm5hw6RuXHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGNvdW50ID0ge307XHJcbiAgICAgICAgdmFyIG1heEl0ZW1zID0gW107XHJcbiAgICAgICAgdmFyIG1heCA9IDA7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRJdGVtO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBjdXJyZW50SXRlbSA9IHJhbmdlW2ldO1xyXG4gICAgICAgICAgICBjb3VudFtjdXJyZW50SXRlbV0gPSBjb3VudFtjdXJyZW50SXRlbV0gPyBjb3VudFtjdXJyZW50SXRlbV0gKyAxIDogMTtcclxuICAgICAgICAgICAgaWYgKGNvdW50W2N1cnJlbnRJdGVtXSA+IG1heCkge1xyXG4gICAgICAgICAgICAgICAgbWF4ID0gY291bnRbY3VycmVudEl0ZW1dO1xyXG4gICAgICAgICAgICAgICAgbWF4SXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY291bnRbY3VycmVudEl0ZW1dID09PSBtYXgpIHtcclxuICAgICAgICAgICAgICAgIG1heEl0ZW1zW21heEl0ZW1zLmxlbmd0aF0gPSBjdXJyZW50SXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4SXRlbXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuTU9ERS5TTkdMID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuTU9ERS5NVUxUKHJhbmdlKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgIH0pWzBdO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBFUkNFTlRJTEUgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLlBFUkNFTlRJTEUuRVhDID0gZnVuY3Rpb24oYXJyYXksIGspIHtcclxuICAgICAgICBhcnJheSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheSkpO1xyXG4gICAgICAgIGsgPSB1dGlscy5wYXJzZU51bWJlcihrKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheSwgaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcnJheSA9IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aDtcclxuICAgICAgICBpZiAoayA8IDEgLyAobiArIDEpIHx8IGsgPiAxIC0gMSAvIChuICsgMSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGwgPSBrICogKG4gKyAxKSAtIDE7XHJcbiAgICAgICAgdmFyIGZsID0gTWF0aC5mbG9vcihsKTtcclxuICAgICAgICByZXR1cm4gdXRpbHMuY2xlYW5GbG9hdCgobCA9PT0gZmwpID8gYXJyYXlbbF0gOiBhcnJheVtmbF0gKyAobCAtIGZsKSAqIChhcnJheVtmbCArIDFdIC0gYXJyYXlbZmxdKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUEVSQ0VOVElMRS5JTkMgPSBmdW5jdGlvbihhcnJheSwgaykge1xyXG4gICAgICAgIGFycmF5ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGFycmF5KSk7XHJcbiAgICAgICAgayA9IHV0aWxzLnBhcnNlTnVtYmVyKGspO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGFycmF5LCBrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFycmF5ID0gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aDtcclxuICAgICAgICB2YXIgbCA9IGsgKiAobiAtIDEpO1xyXG4gICAgICAgIHZhciBmbCA9IE1hdGguZmxvb3IobCk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLmNsZWFuRmxvYXQoKGwgPT09IGZsKSA/IGFycmF5W2xdIDogYXJyYXlbZmxdICsgKGwgLSBmbCkgKiAoYXJyYXlbZmwgKyAxXSAtIGFycmF5W2ZsXSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBFUkNFTlRSQU5LID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5QRVJDRU5UUkFOSy5FWEMgPSBmdW5jdGlvbihhcnJheSwgeCwgc2lnbmlmaWNhbmNlKSB7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gKHNpZ25pZmljYW5jZSA9PT0gdW5kZWZpbmVkKSA/IDMgOiBzaWduaWZpY2FuY2U7XHJcbiAgICAgICAgYXJyYXkgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oYXJyYXkpKTtcclxuICAgICAgICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XHJcbiAgICAgICAgc2lnbmlmaWNhbmNlID0gdXRpbHMucGFyc2VOdW1iZXIoc2lnbmlmaWNhbmNlKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihhcnJheSwgeCwgc2lnbmlmaWNhbmNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFycmF5ID0gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgdW5pcXVlcyA9IFVOSVFVRS5hcHBseShudWxsLCBhcnJheSk7XHJcbiAgICAgICAgdmFyIG4gPSBhcnJheS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIG0gPSB1bmlxdWVzLmxlbmd0aDtcclxuICAgICAgICB2YXIgcG93ZXIgPSBNYXRoLnBvdygxMCwgc2lnbmlmaWNhbmNlKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICB2YXIgbWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKCFtYXRjaCAmJiBpIDwgbSkge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdW5pcXVlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKGFycmF5LmluZGV4T2YodW5pcXVlc1tpXSkgKyAxKSAvIChuICsgMSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA+PSB1bmlxdWVzW2ldICYmICh4IDwgdW5pcXVlc1tpICsgMV0gfHwgaSA9PT0gbSAtIDEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAoYXJyYXkuaW5kZXhPZih1bmlxdWVzW2ldKSArIDEgKyAoeCAtIHVuaXF1ZXNbaV0pIC8gKHVuaXF1ZXNbaSArIDFdIC0gdW5pcXVlc1tpXSkpIC8gKG4gKyAxKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHJlc3VsdCAqIHBvd2VyKSAvIHBvd2VyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBFUkNFTlRSQU5LLklOQyA9IGZ1bmN0aW9uKGFycmF5LCB4LCBzaWduaWZpY2FuY2UpIHtcclxuICAgICAgICBzaWduaWZpY2FuY2UgPSAoc2lnbmlmaWNhbmNlID09PSB1bmRlZmluZWQpID8gMyA6IHNpZ25pZmljYW5jZTtcclxuICAgICAgICBhcnJheSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihhcnJheSkpO1xyXG4gICAgICAgIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcclxuICAgICAgICBzaWduaWZpY2FuY2UgPSB1dGlscy5wYXJzZU51bWJlcihzaWduaWZpY2FuY2UpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGFycmF5LCB4LCBzaWduaWZpY2FuY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXJyYXkgPSBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciB1bmlxdWVzID0gVU5JUVVFLmFwcGx5KG51bGwsIGFycmF5KTtcclxuICAgICAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aDtcclxuICAgICAgICB2YXIgbSA9IHVuaXF1ZXMubGVuZ3RoO1xyXG4gICAgICAgIHZhciBwb3dlciA9IE1hdGgucG93KDEwLCBzaWduaWZpY2FuY2UpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgIHZhciBtYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICB3aGlsZSAoIW1hdGNoICYmIGkgPCBtKSB7XHJcbiAgICAgICAgICAgIGlmICh4ID09PSB1bmlxdWVzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcnJheS5pbmRleE9mKHVuaXF1ZXNbaV0pIC8gKG4gLSAxKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh4ID49IHVuaXF1ZXNbaV0gJiYgKHggPCB1bmlxdWVzW2kgKyAxXSB8fCBpID09PSBtIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IChhcnJheS5pbmRleE9mKHVuaXF1ZXNbaV0pICsgKHggLSB1bmlxdWVzW2ldKSAvICh1bmlxdWVzW2kgKyAxXSAtIHVuaXF1ZXNbaV0pKSAvIChuIC0gMSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyZXN1bHQgKiBwb3dlcikgLyBwb3dlcjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5QRVJNVVQgPSBmdW5jdGlvbihudW1iZXIsIG51bWJlcl9jaG9zZW4pIHtcclxuICAgICAgICBudW1iZXIgPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXIpO1xyXG4gICAgICAgIG51bWJlcl9jaG9zZW4gPSB1dGlscy5wYXJzZU51bWJlcihudW1iZXJfY2hvc2VuKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIG51bWJlcl9jaG9zZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEZBQ1QobnVtYmVyKSAvIEZBQ1QobnVtYmVyIC0gbnVtYmVyX2Nob3Nlbik7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUEVSTVVUQVRJT05BID0gZnVuY3Rpb24obnVtYmVyLCBudW1iZXJfY2hvc2VuKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICBudW1iZXJfY2hvc2VuID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyX2Nob3Nlbik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IobnVtYmVyLCBudW1iZXJfY2hvc2VuKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhudW1iZXIsIG51bWJlcl9jaG9zZW4pO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlBISSA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XHJcbiAgICAgICAgaWYgKHggaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmV4cCgtMC41ICogeCAqIHgpIC8gU1FSVDJQSTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5QUk9CID0gZnVuY3Rpb24ocmFuZ2UsIHByb2JhYmlsaXR5LCBsb3dlciwgdXBwZXIpIHtcclxuICAgICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBwZXIgPSAodXBwZXIgPT09IHVuZGVmaW5lZCkgPyBsb3dlciA6IHVwcGVyO1xyXG5cclxuICAgICAgICByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihyYW5nZSkpO1xyXG4gICAgICAgIHByb2JhYmlsaXR5ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHByb2JhYmlsaXR5KSk7XHJcbiAgICAgICAgbG93ZXIgPSB1dGlscy5wYXJzZU51bWJlcihsb3dlcik7XHJcbiAgICAgICAgdXBwZXIgPSB1dGlscy5wYXJzZU51bWJlcih1cHBlcik7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIHByb2JhYmlsaXR5LCBsb3dlciwgdXBwZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsb3dlciA9PT0gdXBwZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChyYW5nZS5pbmRleE9mKGxvd2VyKSA+PSAwKSA/IHByb2JhYmlsaXR5W3JhbmdlLmluZGV4T2YobG93ZXIpXSA6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc29ydGVkID0gcmFuZ2Uuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgbiA9IHNvcnRlZC5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNvcnRlZFtpXSA+PSBsb3dlciAmJiBzb3J0ZWRbaV0gPD0gdXBwZXIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwcm9iYWJpbGl0eVtyYW5nZS5pbmRleE9mKHNvcnRlZFtpXSldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUVVBUlRJTEUgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLlFVQVJUSUxFLkVYQyA9IGZ1bmN0aW9uKHJhbmdlLCBxdWFydCkge1xyXG4gICAgICAgIHJhbmdlID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKHJhbmdlKSk7XHJcbiAgICAgICAgcXVhcnQgPSB1dGlscy5wYXJzZU51bWJlcihxdWFydCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIHF1YXJ0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAocXVhcnQpIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuUEVSQ0VOVElMRS5FWEMocmFuZ2UsIDAuMjUpO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLkVYQyhyYW5nZSwgMC41KTtcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuUEVSQ0VOVElMRS5FWEMocmFuZ2UsIDAuNzUpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm51bTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuUVVBUlRJTEUuSU5DID0gZnVuY3Rpb24ocmFuZ2UsIHF1YXJ0KSB7XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcclxuICAgICAgICBxdWFydCA9IHV0aWxzLnBhcnNlTnVtYmVyKHF1YXJ0KTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihyYW5nZSwgcXVhcnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChxdWFydCkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLklOQyhyYW5nZSwgMC4yNSk7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzLlBFUkNFTlRJTEUuSU5DKHJhbmdlLCAwLjUpO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5QRVJDRU5USUxFLklOQyhyYW5nZSwgMC43NSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IubnVtO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5SQU5LID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5SQU5LLkFWRyA9IGZ1bmN0aW9uKG51bWJlciwgcmFuZ2UsIG9yZGVyKSB7XHJcbiAgICAgICAgbnVtYmVyID0gdXRpbHMucGFyc2VOdW1iZXIobnVtYmVyKTtcclxuICAgICAgICByYW5nZSA9IHV0aWxzLnBhcnNlTnVtYmVyQXJyYXkodXRpbHMuZmxhdHRlbihyYW5nZSkpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKG51bWJlciwgcmFuZ2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKHJhbmdlKTtcclxuICAgICAgICBvcmRlciA9IG9yZGVyIHx8IGZhbHNlO1xyXG4gICAgICAgIHZhciBzb3J0ID0gKG9yZGVyKSA/IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgIH0gOiBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJhbmdlID0gcmFuZ2Uuc29ydChzb3J0KTtcclxuXHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHJhbmdlLmxlbmd0aDtcclxuICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHJhbmdlW2ldID09PSBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoY291bnQgPiAxKSA/ICgyICogcmFuZ2UuaW5kZXhPZihudW1iZXIpICsgY291bnQgKyAxKSAvIDIgOiByYW5nZS5pbmRleE9mKG51bWJlcikgKyAxO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlJBTksuRVEgPSBmdW5jdGlvbihudW1iZXIsIHJhbmdlLCBvcmRlcikge1xyXG4gICAgICAgIG51bWJlciA9IHV0aWxzLnBhcnNlTnVtYmVyKG51bWJlcik7XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcclxuICAgICAgICBpZiAodXRpbHMuYW55SXNFcnJvcihudW1iZXIsIHJhbmdlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9yZGVyID0gb3JkZXIgfHwgZmFsc2U7XHJcbiAgICAgICAgdmFyIHNvcnQgPSAob3JkZXIpID8gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYSAtIGI7XHJcbiAgICAgICAgfSA6IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmFuZ2UgPSByYW5nZS5zb3J0KHNvcnQpO1xyXG4gICAgICAgIHJldHVybiByYW5nZS5pbmRleE9mKG51bWJlcikgKyAxO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlJTUSA9IGZ1bmN0aW9uKGRhdGFfeCwgZGF0YV95KSB7IC8vIG5vIG5lZWQgdG8gZmxhdHRlbiBoZXJlLCBQRUFSU09OIHdpbGwgdGFrZSBjYXJlIG9mIHRoYXRcclxuICAgICAgICBkYXRhX3ggPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4oZGF0YV94KSk7XHJcbiAgICAgICAgZGF0YV95ID0gdXRpbHMucGFyc2VOdW1iZXJBcnJheSh1dGlscy5mbGF0dGVuKGRhdGFfeSkpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKGRhdGFfeCwgZGF0YV95KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhleHBvcnRzLlBFQVJTT04oZGF0YV94LCBkYXRhX3kpLCAyKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TTUFMTCA9IGZ1bmN0aW9uKHJhbmdlLCBrKSB7XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcclxuICAgICAgICBrID0gdXRpbHMucGFyc2VOdW1iZXIoayk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIGspKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJhbmdlLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYSAtIGI7XHJcbiAgICAgICAgfSlbayAtIDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNUQU5EQVJESVpFID0gZnVuY3Rpb24oeCwgbWVhbiwgc2QpIHtcclxuICAgICAgICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XHJcbiAgICAgICAgbWVhbiA9IHV0aWxzLnBhcnNlTnVtYmVyKG1lYW4pO1xyXG4gICAgICAgIHNkID0gdXRpbHMucGFyc2VOdW1iZXIoc2QpO1xyXG4gICAgICAgIGlmICh1dGlscy5hbnlJc0Vycm9yKHgsIG1lYW4sIHNkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3IudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoeCAtIG1lYW4pIC8gc2Q7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuU1RERVYgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLlNUREVWLlAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdiA9IGV4cG9ydHMuVkFSLlAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHYpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNUREVWLlMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdiA9IGV4cG9ydHMuVkFSLlMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHYpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRzLlNUREVWQSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB2ID0gZXhwb3J0cy5WQVJBLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5TVERFVlBBID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHYgPSBleHBvcnRzLlZBUlBBLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2KTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5WQVIgPSB7fTtcclxuXHJcbiAgICBleHBvcnRzLlZBUi5QID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMubnVtYmVycyh1dGlscy5mbGF0dGVuKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xyXG4gICAgICAgIHZhciBzaWdtYSA9IDA7XHJcbiAgICAgICAgdmFyIG1lYW4gPSBleHBvcnRzLkFWRVJBR0UocmFuZ2UpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNpZ21hICs9IE1hdGgucG93KHJhbmdlW2ldIC0gbWVhbiwgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaWdtYSAvIG47XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVkFSLlMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB1dGlscy5udW1iZXJzKHV0aWxzLmZsYXR0ZW4oYXJndW1lbnRzKSk7XHJcbiAgICAgICAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHNpZ21hID0gMDtcclxuICAgICAgICB2YXIgbWVhbiA9IGV4cG9ydHMuQVZFUkFHRShyYW5nZSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgc2lnbWEgKz0gTWF0aC5wb3cocmFuZ2VbaV0gLSBtZWFuLCAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNpZ21hIC8gKG4gLSAxKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5WQVJBID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdXRpbHMuZmxhdHRlbihhcmd1bWVudHMpO1xyXG4gICAgICAgIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xyXG4gICAgICAgIHZhciBzaWdtYSA9IDA7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICB2YXIgbWVhbiA9IGV4cG9ydHMuQVZFUkFHRUEocmFuZ2UpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IHJhbmdlW2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgc2lnbWEgKz0gTWF0aC5wb3coZWwgLSBtZWFuLCAyKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2lnbWEgKz0gTWF0aC5wb3coMSAtIG1lYW4sIDIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2lnbWEgKz0gTWF0aC5wb3coMCAtIG1lYW4sIDIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZWwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNpZ21hIC8gKGNvdW50IC0gMSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuVkFSUEEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB1dGlscy5mbGF0dGVuKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHNpZ21hID0gMDtcclxuICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgIHZhciBtZWFuID0gZXhwb3J0cy5BVkVSQUdFQShyYW5nZSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gcmFuZ2VbaV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBzaWdtYSArPSBNYXRoLnBvdyhlbCAtIG1lYW4sIDIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBzaWdtYSArPSBNYXRoLnBvdygxIC0gbWVhbiwgMik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaWdtYSArPSBNYXRoLnBvdygwIC0gbWVhbiwgMik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2lnbWEgLyBjb3VudDtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0cy5XRUlCVUxMID0ge307XHJcblxyXG4gICAgZXhwb3J0cy5XRUlCVUxMLkRJU1QgPSBmdW5jdGlvbih4LCBhbHBoYSwgYmV0YSwgY3VtdWxhdGl2ZSkge1xyXG4gICAgICAgIHggPSB1dGlscy5wYXJzZU51bWJlcih4KTtcclxuICAgICAgICBhbHBoYSA9IHV0aWxzLnBhcnNlTnVtYmVyKGFscGhhKTtcclxuICAgICAgICBiZXRhID0gdXRpbHMucGFyc2VOdW1iZXIoYmV0YSk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IoeCwgYWxwaGEsIGJldGEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChjdW11bGF0aXZlKSA/IDEgLSBNYXRoLmV4cCgtTWF0aC5wb3coeCAvIGJldGEsIGFscGhhKSkgOiBNYXRoLnBvdyh4LCBhbHBoYSAtIDEpICogTWF0aC5leHAoLU1hdGgucG93KHggLyBiZXRhLCBhbHBoYSkpICogYWxwaGEgLyBNYXRoLnBvdyhiZXRhLCBhbHBoYSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydHMuWiA9IHt9O1xyXG5cclxuICAgIGV4cG9ydHMuWi5URVNUID0gZnVuY3Rpb24ocmFuZ2UsIHgsIHNkKSB7XHJcbiAgICAgICAgcmFuZ2UgPSB1dGlscy5wYXJzZU51bWJlckFycmF5KHV0aWxzLmZsYXR0ZW4ocmFuZ2UpKTtcclxuICAgICAgICB4ID0gdXRpbHMucGFyc2VOdW1iZXIoeCk7XHJcbiAgICAgICAgaWYgKHV0aWxzLmFueUlzRXJyb3IocmFuZ2UsIHgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNkID0gc2QgfHwgZXhwb3J0cy5TVERFVi5TKHJhbmdlKTtcclxuICAgICAgICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gMSAtIGV4cG9ydHMuTk9STS5TLkRJU1QoKGV4cG9ydHMuQVZFUkFHRShyYW5nZSkgLSB4KSAvIChzZCAvIE1hdGguc3FydChuKSksIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufSkoKTtcclxuXHJcbmZvciAodmFyIGkgPSAwOyBpIDwgT2JqZWN0LmtleXMoamV4Y2VsLm1ldGhvZHMpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgbWV0aG9kcyA9IGpleGNlbC5tZXRob2RzW09iamVjdC5rZXlzKGpleGNlbC5tZXRob2RzKVtpXV07XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IE9iamVjdC5rZXlzKG1ldGhvZHMpLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZihtZXRob2RzW09iamVjdC5rZXlzKG1ldGhvZHMpW2pdXSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB3aW5kb3dbT2JqZWN0LmtleXMobWV0aG9kcylbal1dID0gbWV0aG9kc1tPYmplY3Qua2V5cyhtZXRob2RzKVtqXV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93W09iamVjdC5rZXlzKG1ldGhvZHMpW2pdXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1ldGhvZHMpW2pdICsgJ05vdCBpbXBsZW1lbnRlZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gamV4Y2VsO1xyXG5cclxufSkpKTsiLCJcclxuLyoqXHJcbiAqIChjKSBqU3VpdGVzIEphdmFzY3JpcHQgV2ViIENvbXBvbmVudHMgKHYyLjgpXHJcbiAqXHJcbiAqIEF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XHJcbiAqIFdlYnNpdGU6IGh0dHBzOi8vYm9zc2Fub3ZhLnVrL2pzdWl0ZXMvXHJcbiAqIERlc2NyaXB0aW9uOiBDcmVhdGUgYW1hemluZyB3ZWIgYmFzZWQgYXBwbGljYXRpb25zLlxyXG4gKlxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKlxyXG4gKi9cclxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XHJcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxyXG4gICAgZ2xvYmFsLmpTdWl0ZXMgPSBmYWN0b3J5KCk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG52YXIgalN1aXRlcyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge31cblxuICAgIG9iai5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEZpbmQgcm9vdCBlbGVtZW50XG4gICAgICAgIHZhciBhcHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuamFwcCcpO1xuXG4gICAgICAgIC8vIFJvb3QgZWxlbWVudFxuICAgICAgICBpZiAoYXBwKSB7XG4gICAgICAgICAgICBvYmouZWwgPSBhcHA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmouZWwgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9hZGluZyBtb2R1bGVzXG4gICAgICAgIHZhciBtb2R1bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYXV0b2xvYWRdJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG0gPSBtb2R1bGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1hdXRvbG9hZCcpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZih3aW5kb3dbbV0pID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dbbV0obW9kdWxlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouZ3VpZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ3VpZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgICAgIGd1aWQgKz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjB4RikudG9TdHJpbmcoMHhGKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3VpZDtcbiAgICB9XG5cbiAgICBvYmouZ2V0V2luZG93V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHcgPSB3aW5kb3csXG4gICAgICAgIGQgPSBkb2N1bWVudCxcbiAgICAgICAgZSA9IGQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBnID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLFxuICAgICAgICB4ID0gdy5pbm5lcldpZHRoIHx8IGUuY2xpZW50V2lkdGggfHwgZy5jbGllbnRXaWR0aDtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgb2JqLmdldFdpbmRvd0hlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdyA9IHdpbmRvdyxcbiAgICAgICAgZCA9IGRvY3VtZW50LFxuICAgICAgICBlID0gZC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIGcgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sXG4gICAgICAgIHkgPSB3LmlubmVySGVpZ2h0fHwgZS5jbGllbnRIZWlnaHR8fCBnLmNsaWVudEhlaWdodDtcbiAgICAgICAgcmV0dXJuICB5O1xuICAgIH1cblxuICAgIG9iai5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUuY2hhbmdlZFRvdWNoZXMgJiYgZS5jaGFuZ2VkVG91Y2hlc1swXSkge1xuICAgICAgICAgICAgdmFyIHggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgdmFyIHkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSAod2luZG93LkV2ZW50KSA/IGUucGFnZVggOiBlLmNsaWVudFggKyAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCk7XG4gICAgICAgICAgICB2YXIgeSA9ICh3aW5kb3cuRXZlbnQpID8gZS5wYWdlWSA6IGUuY2xpZW50WSArIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIHgsIHkgXTtcbiAgICB9XG5cbiAgICBvYmouY2xpY2sgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICBpZiAoZWwuY2xpY2spIHtcbiAgICAgICAgICAgIGVsLmNsaWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXZ0ID0gbmV3IE1vdXNlRXZlbnQoJ2NsaWNrJywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB3aW5kb3dcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmdldEVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGZvdW5kRWxlbWVudCA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIHBhdGggKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgcGF0aChlbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcGF0aChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gZm91bmRFbGVtZW50O1xuICAgIH1cblxuICAgIG9iai5nZXRMaW5rRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBmYWxzZTtcblxuICAgICAgICBmdW5jdGlvbiBwYXRoIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoKGVsZW1lbnQudGFnTmFtZSA9PSAnQScgfHwgZWxlbWVudC50YWdOYW1lID09ICdESVYnKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJykpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHBhdGgoZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGgoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgb2JqLmdldEZvcm1FbGVtZW50cyA9IGZ1bmN0aW9uKGZvcm1PYmplY3QpIHtcbiAgICAgICAgdmFyIHJldCA9IHt9O1xuXG4gICAgICAgIGlmIChmb3JtT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBmb3JtT2JqZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0W25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIG9iai5leGlzdHMgPSBmdW5jdGlvbih1cmwsIF9fY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgaHR0cC5vcGVuKCdIRUFEJywgdXJsLCBmYWxzZSk7XG4gICAgICAgIGh0dHAuc2VuZCgpO1xuICAgICAgICBpZiAoaHR0cC5zdGF0dXMpIHtcbiAgICAgICAgICAgIF9fY2FsbGJhY2soaHR0cC5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmdldEZpbGVzID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoISBlbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBlbGVtZW50IGRlZmluZWQgaW4gdGhlIGFyZ3VtZW50cyBvZiB5b3VyIG1ldGhvZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGF0dGFjaG1lbnRzXG4gICAgICAgIHZhciBmaWxlcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpmaWxlJyk7XG5cbiAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGUgPSB7fTtcblxuICAgICAgICAgICAgICAgIHZhciBzcmMgPSBmaWxlc1tpXS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVzW2ldLmNsYXNzTGlzdC5jb250YWlucygnanJlbW92ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGUucmVtb3ZlID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLnN1YnN0cigwLDQpID09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5jb250ZW50ID0gc3JjLnN1YnN0cihzcmMuaW5kZXhPZignLCcpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmV4dGVuc2lvbiA9IGZpbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1leHRlbnNpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuZmlsZSA9IHNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuZXh0ZW5zaW9uID0gZmlsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWV4dGVuc2lvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgZmlsZS5leHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmV4dGVuc2lvbiA9ICBzcmMuc3Vic3RyKHNyYy5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoalN1aXRlcy5maWxlc1tmaWxlLmZpbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5jb250ZW50ID0galN1aXRlcy5maWxlc1tmaWxlLmZpbGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9uYWwgZmlsZSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5uYW1lID0gZmlsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmZpbGUgPSBmaWxlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuc2l6ZSA9IGZpbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5kYXRlID0gZmlsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY292ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5jb3ZlciA9IGZpbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1jb3ZlcicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyBTTUFMTCB0aHVtYnM/XG5cbiAgICAgICAgICAgICAgICBkYXRhW2ldID0gZmlsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouYWpheCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEgb3B0aW9ucy5kYXRhKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy5kYXRhKTtcblxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob3B0aW9ucy5kYXRhW2tleXNbaV1dKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zLmRhdGFba2V5c1tpXV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG8ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9bal0pID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChrZXlzW2ldICsgJ1snICsgaiArICddPScgKyBlbmNvZGVVUklDb21wb25lbnQob1tqXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gT2JqZWN0LmtleXMob1tqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgcHJvcC5sZW5ndGg7IHorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKGtleXNbaV0gKyAnWycgKyBqICsgJ11bJyArIHByb3Bbel0gKyAnXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9bal1bcHJvcFt6XV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChrZXlzW2ldICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZGF0YVtrZXlzW2ldXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tZXRob2QgPT0gJ0dFVCcgJiYgZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudXJsLmluZGV4T2YoJz8nKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgKz0gJz8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybCArPSBkYXRhLmpvaW4oJyYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBodHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICBodHRwUmVxdWVzdC5vcGVuKG9wdGlvbnMubWV0aG9kLCBvcHRpb25zLnVybCwgdHJ1ZSk7XG4gICAgICAgIGh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5tZXRob2QgPT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgICAgaHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGF0YVR5cGUgPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgaHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvanNvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm8gY2FjaGVcbiAgICAgICAgaWYgKG9wdGlvbnMuY2FjaGUgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgaHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcigncHJhZ21hJywgJ25vLWNhY2hlJyk7XG4gICAgICAgICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdjYWNoZS1jb250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdXRoZW50aWNhdGlvblxuICAgICAgICBpZiAob3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaHR0cFJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmVmb3JlIHNlbmRcbiAgICAgICAgaWYgKHR5cGVvZihvcHRpb25zLmJlZm9yZVNlbmQpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYmVmb3JlU2VuZChodHRwUmVxdWVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBodHRwUmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRhdGFUeXBlID09ICdqc29uJykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UoaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3VjY2VzcyAmJiB0eXBlb2Yob3B0aW9ucy5zdWNjZXNzKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvciAmJiB0eXBlb2Yob3B0aW9ucy5lcnJvcikgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZXJyb3IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBodHRwUmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3VjY2VzcyAmJiB0eXBlb2Yob3B0aW9ucy5zdWNjZXNzKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3IgJiYgdHlwZW9mKG9wdGlvbnMuZXJyb3IpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5lcnJvcihodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2xvYmFsIGNvbXBsZXRlIG1ldGhvZFxuICAgICAgICAgICAgaWYgKG9iai5hamF4LnJlcXVlc3RzICYmIG9iai5hamF4LnJlcXVlc3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIEdldCBpbmRleCBvZiB0aGlzIHJlcXVlc3QgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG9iai5hamF4LnJlcXVlc3RzLmluZGV4T2YoaHR0cFJlcXVlc3QpXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gdGhlIGFqYXggcmVxdWVzdHMgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgb2JqLmFqYXgucmVxdWVzdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAvLyBMYXN0IG9uZT9cbiAgICAgICAgICAgICAgICBpZiAoISBvYmouYWpheC5yZXF1ZXN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29tcGxldGUgJiYgdHlwZW9mKG9wdGlvbnMuY29tcGxldGUpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY29tcGxldGUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICBodHRwUmVxdWVzdC5zZW5kKGRhdGEuam9pbignJicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0dHBSZXF1ZXN0LnNlbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai5hamF4LnJlcXVlc3RzLnB1c2goaHR0cFJlcXVlc3QpO1xuXG4gICAgICAgIHJldHVybiBodHRwUmVxdWVzdDtcbiAgICB9XG5cbiAgICBvYmouYWpheC5yZXF1ZXN0cyA9IFtdO1xuXG4gICAgb2JqLnNsaWRlTGVmdCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRpcmVjdGlvbiwgZG9uZSkge1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09IHRydWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2xpZGUtbGVmdC1pbicpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlLWxlZnQtaW4nKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGRvbmUpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWxlZnQtb3V0Jyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGUtbGVmdC1vdXQnKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGRvbmUpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouc2xpZGVSaWdodCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRpcmVjdGlvbiwgZG9uZSkge1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09IHRydWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2xpZGUtcmlnaHQtaW4nKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZS1yaWdodC1pbicpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoZG9uZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgNDAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2xpZGUtcmlnaHQtb3V0Jyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGUtcmlnaHQtb3V0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihkb25lKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCA0MDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLnNsaWRlVG9wID0gZnVuY3Rpb24oZWxlbWVudCwgZGlyZWN0aW9uLCBkb25lKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzbGlkZS10b3AtaW4nKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZS10b3AtaW4nKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGRvbmUpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NsaWRlLXRvcC1vdXQnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZS10b3Atb3V0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihkb25lKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCA0MDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLnNsaWRlQm90dG9tID0gZnVuY3Rpb24oZWxlbWVudCwgZGlyZWN0aW9uLCBkb25lKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzbGlkZS1ib3R0b20taW4nKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZS1ib3R0b20taW4nKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGRvbmUpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWJvdHRvbS1vdXQnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZS1ib3R0b20tb3V0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihkb25lKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmZhZGVJbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmYWRlLWluJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZhZGUtaW4nKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoZG9uZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwMCk7XG4gICAgfVxuXG4gICAgb2JqLmZhZGVPdXQgPSBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmFkZS1vdXQnKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmFkZS1vdXQnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoZG9uZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgb2JqLmtleURvd25Db250cm9scyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT0gMjcpIHtcbiAgICAgICAgICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qc2xpZGVyJyk7XG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0uc2xpZGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpkaWFsb2cnKSkge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMuZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSAxMykge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qZGlhbG9nJykpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGpTdWl0ZXMuZGlhbG9nLm9wdGlvbnMub25jb25maXJtKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGpTdWl0ZXMuZGlhbG9nLm9wdGlvbnMub25jb25maXJtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGpTdWl0ZXMuZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWZXJpZnkgbWFza1xuICAgICAgICBpZiAoalN1aXRlcy5tYXNrKSB7XG4gICAgICAgICAgICBqU3VpdGVzLm1hc2suYXBwbHkoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWN0aW9uVXBDb250cm9sID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChlbGVtZW50ID0galN1aXRlcy5nZXRMaW5rRWxlbWVudChlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHZhciBsaW5rID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpO1xuICAgICAgICAgICAgaWYgKGxpbmsgPT0gJyNiYWNrJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGluayA9PSAnI3BhbmVsJykge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMucGFuZWwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5wYWdlcyhsaW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb250cm9sU3dpcGVMZWZ0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGpTdWl0ZXMuZ2V0RWxlbWVudChlLnRhcmdldCwgJ29wdGlvbicpO1xuXG4gICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucXVlcnlTZWxlY3RvcignLm9wdGlvbi1hY3Rpb25zJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIGxlZnQ6IDEwMCxcbiAgICAgICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqU3VpdGVzLmdldEVsZW1lbnQoZS50YXJnZXQsICdqY2FsZW5kYXInKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIGpTdWl0ZXMuY2FsZW5kYXIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMuY2FsZW5kYXIuY3VycmVudC5wcmV2KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChqU3VpdGVzLnBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0galN1aXRlcy5wYW5lbC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0eWxlLmRpc3BsYXkgIT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5wYW5lbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbnRyb2xTd2lwZVJpZ2h0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGpTdWl0ZXMuZ2V0RWxlbWVudChlLnRhcmdldCwgJ29wdGlvbicpO1xuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vcHRpb24tYWN0aW9ucycpKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNjcm9sbFRvKHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpTdWl0ZXMuZ2V0RWxlbWVudChlLnRhcmdldCwgJ2pjYWxlbmRhcicpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgalN1aXRlcy5jYWxlbmRhci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5jYWxlbmRhci5jdXJyZW50Lm5leHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGpTdWl0ZXMucGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqU3VpdGVzLnBhbmVsLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqU3VpdGVzLnBhbmVsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWN0aW9uT3ZlckNvbnRyb2wgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vIFRvb2x0aXBcbiAgICAgICAgaWYgKGpTdWl0ZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgalN1aXRlcy50b29sdGlwKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFjdGlvbk91dENvbnRyb2wgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vIFRvb2x0aXBcbiAgICAgICAgaWYgKGpTdWl0ZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgalN1aXRlcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBwYWdlIGNvbnRhaW5lclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N3aXBlbGVmdCcsIGNvbnRyb2xTd2lwZUxlZnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N3aXBlcmlnaHQnLCBjb250cm9sU3dpcGVSaWdodCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9iai5rZXlEb3duQ29udHJvbHMpO1xuXG4gICAgaWYgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPT09IHRydWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBhY3Rpb25VcENvbnRyb2wpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBhY3Rpb25VcENvbnRyb2wpO1xuICAgIH1cblxuICAgIC8vIE9ubW91c2VvdmVyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgYWN0aW9uT3ZlckNvbnRyb2wpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgYWN0aW9uT3V0Q29udHJvbCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmouaW5pdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gUG9wIHN0YXRlIGNvbnRyb2xcbiAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5yb3V0ZSkge1xuICAgICAgICAgICAgaWYgKGpTdWl0ZXMucGFnZXMuZ2V0KGUuc3RhdGUucm91dGUpKSB7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5wYWdlcyhlLnN0YXRlLnJvdXRlLCB7IGlnbm9yZUhpc3Rvcnk6dHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59KCk7XG5cbmpTdWl0ZXMuZmlsZXMgPSBbXTtcclxuXHJcbmpTdWl0ZXMuY2FsZW5kYXIgPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcblxuICAgIC8vIEdsb2JhbCBjb250YWluZXJcbiAgICBpZiAoISBqU3VpdGVzLmNhbGVuZGFyLmN1cnJlbnQpIHtcbiAgICAgICAgalN1aXRlcy5jYWxlbmRhci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIC8vIERhdGFcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgLy8gSW5saW5lIG9yIG5vdFxuICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAvLyBSZXN0cmljdGlvbnNcbiAgICAgICAgdmFsaWRSYW5nZTogbnVsbCxcbiAgICAgICAgLy8gU3RhcnRpbmcgd2Vla2RheSAtIDAgZm9yIHN1bmRheSwgNiBmb3Igc2F0dXJkYXlcbiAgICAgICAgc3RhcnRpbmdEYXk6IG51bGwsIFxuICAgICAgICAvLyBEYXRlIGZvcm1hdFxuICAgICAgICBmb3JtYXQ6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgLy8gQWxsb3cga2V5Ym9hcmQgZGF0ZSBlbnRyeVxuICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgLy8gVG9kYXkgaXMgZGVmYXVsdFxuICAgICAgICB0b2RheTogZmFsc2UsXG4gICAgICAgIC8vIFNob3cgdGltZXBpY2tlclxuICAgICAgICB0aW1lOiBmYWxzZSxcbiAgICAgICAgLy8gU2hvdyB0aGUgcmVzZXQgYnV0dG9uXG4gICAgICAgIHJlc2V0QnV0dG9uOiB0cnVlLFxuICAgICAgICAvLyBQbGFjZWhvbGRlclxuICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgIC8vIFRyYW5zbGF0aW9ucyBjYW4gYmUgZG9uZSBoZXJlXG4gICAgICAgIG1vbnRoczogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgICAgICB3ZWVrZGF5czogWydTdW5kYXknLCdNb25kYXknLCdUdWVzZGF5JywnV2VkbmVzZGF5JywnVGh1cnNkYXknLCdGcmlkYXknLCdTYXR1cmRheSddLFxuICAgICAgICB3ZWVrZGF5c19zaG9ydDogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gICAgICAgIC8vIFZhbHVlXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAvLyBFdmVudHNcbiAgICAgICAgb25jbG9zZTogbnVsbCxcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIC8vIEZ1bGxzY3JlZW4gKHRoaXMgaXMgYXV0b21hdGljIHNldCBmb3Igc2NyZWVuc2l6ZSA8IDgwMClcbiAgICAgICAgZnVsbHNjcmVlbjogZmFsc2UsXG4gICAgICAgIC8vIEludGVybmFsIG1vZGUgY29udHJvbGxlclxuICAgICAgICBtb2RlOiBudWxsLFxuICAgICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjYWxlbmRhciBjbG9zZWQgYXMgZGVmYXVsdFxuICAgICAgICBvcGVuZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIG9iamVjdFxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZhbHVlXG4gICAgaWYgKCEgb2JqLm9wdGlvbnMudmFsdWUpIHtcbiAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT0gJ0lOUFVUJyAmJiBlbC52YWx1ZSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMudmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB1c2UgdXBwZXIgY2FzZSBpbiB0aGUgZm9ybWF0XG4gICAgb2JqLm9wdGlvbnMuZm9ybWF0ID0gb2JqLm9wdGlvbnMuZm9ybWF0LnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAob2JqLm9wdGlvbnMudmFsdWUpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBvYmoub3B0aW9ucy52YWx1ZS5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgdGltZSA9IGRhdGVbMV07XG4gICAgICAgIHZhciBkYXRlID0gZGF0ZVswXS5zcGxpdCgnLScpO1xuICAgICAgICB2YXIgeSA9IHBhcnNlSW50KGRhdGVbMF0pO1xuICAgICAgICB2YXIgbSA9IHBhcnNlSW50KGRhdGVbMV0pO1xuICAgICAgICB2YXIgZCA9IHBhcnNlSW50KGRhdGVbMl0pO1xuXG4gICAgICAgIGlmICh0aW1lKSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IHRpbWUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHZhciBoID0gcGFyc2VJbnQodGltZVswXSk7XG4gICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KHRpbWVbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGggPSAwO1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgeSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgdmFyIG0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICB2YXIgZCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICB2YXIgaCA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIGkgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICB9XG5cbiAgICAvLyBDdXJyZW50IHZhbHVlXG4gICAgb2JqLmRhdGUgPSBbIHksIG0sIGQsIGgsIGksIDAgXTtcblxuICAgIC8vIFR3byBkaWdpdHNcbiAgICB2YXIgdHdvID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIENhbGVuZGFyIGVsZW1lbnRzXG4gICAgdmFyIGNhbGVuZGFyUmVzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjYWxlbmRhclJlc2V0LmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItcmVzZXQnO1xuICAgIGNhbGVuZGFyUmVzZXQuaW5uZXJIVE1MID0gJ1Jlc2V0JztcblxuICAgIHZhciBjYWxlbmRhckNvbmZpcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjYWxlbmRhckNvbmZpcm0uY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1jb25maXJtJztcbiAgICBjYWxlbmRhckNvbmZpcm0uaW5uZXJIVE1MID0gJ0RvbmUnO1xuXG4gICAgdmFyIGNhbGVuZGFyQ29udHJvbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjYWxlbmRhckNvbnRyb2xzLmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItY29udHJvbHMnXG4gICAgaWYgKG9iai5vcHRpb25zLnJlc2V0QnV0dG9uKSB7XG4gICAgICAgIGNhbGVuZGFyQ29udHJvbHMuYXBwZW5kQ2hpbGQoY2FsZW5kYXJSZXNldCk7XG4gICAgfVxuICAgIGNhbGVuZGFyQ29udHJvbHMuYXBwZW5kQ2hpbGQoY2FsZW5kYXJDb25maXJtKTtcblxuICAgIHZhciBjYWxlbmRhckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItY29udGFpbmVyJztcblxuICAgIHZhciBjYWxlbmRhckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjYWxlbmRhckNvbnRlbnQuY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1jb250ZW50JztcbiAgICBjYWxlbmRhckNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FsZW5kYXJDb250cm9scyk7XG4gICAgY2FsZW5kYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FsZW5kYXJDb250ZW50KTtcblxuICAgIC8vIFRhYmxlIGNvbnRhaW5lclxuICAgIHZhciBjYWxlbmRhclRhYmxlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY2FsZW5kYXJUYWJsZUNvbnRhaW5lci5jbGFzc05hbWUgPSAnamNhbGVuZGFyLXRhYmxlJztcbiAgICBjYWxlbmRhckNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FsZW5kYXJUYWJsZUNvbnRhaW5lcik7XG5cbiAgICAvLyBNYWluIGVsZW1lbnRcbiAgICBpZiAoZWwudGFnTmFtZSA9PSAnSU5QVVQnKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IGVsO1xuICAgIH1cbiAgICBjYWxlbmRhci5jbGFzc05hbWUgPSAnamNhbGVuZGFyJztcbiAgICBjYWxlbmRhci5hcHBlbmRDaGlsZChjYWxlbmRhckNvbnRhaW5lcik7XG5cbiAgICAvLyBQcmV2aW91cyBidXR0b25cbiAgICB2YXIgY2FsZW5kYXJIZWFkZXJQcmV2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBjYWxlbmRhckhlYWRlclByZXYuc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgJzInKTtcbiAgICBjYWxlbmRhckhlYWRlclByZXYuY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1wcmV2JztcblxuICAgIC8vIEhlYWRlciB3aXRoIHllYXIgYW5kIG1vbnRoXG4gICAgdmFyIGNhbGVuZGFyTGFiZWxZZWFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGNhbGVuZGFyTGFiZWxZZWFyLmNsYXNzTmFtZSA9ICdqY2FsZW5kYXIteWVhcic7XG5cbiAgICB2YXIgY2FsZW5kYXJMYWJlbE1vbnRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGNhbGVuZGFyTGFiZWxNb250aC5jbGFzc05hbWUgPSAnamNhbGVuZGFyLW1vbnRoJztcblxuICAgIHZhciBjYWxlbmRhckhlYWRlclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBjYWxlbmRhckhlYWRlclRpdGxlLmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItaGVhZGVyJztcbiAgICBjYWxlbmRhckhlYWRlclRpdGxlLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsICczJyk7XG4gICAgY2FsZW5kYXJIZWFkZXJUaXRsZS5hcHBlbmRDaGlsZChjYWxlbmRhckxhYmVsTW9udGgpO1xuICAgIGNhbGVuZGFySGVhZGVyVGl0bGUuYXBwZW5kQ2hpbGQoY2FsZW5kYXJMYWJlbFllYXIpO1xuXG4gICAgdmFyIGNhbGVuZGFySGVhZGVyTmV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgY2FsZW5kYXJIZWFkZXJOZXh0LnNldEF0dHJpYnV0ZSgnY29sc3BhbicsICcyJyk7XG4gICAgY2FsZW5kYXJIZWFkZXJOZXh0LmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItbmV4dCc7XG5cbiAgICB2YXIgY2FsZW5kYXJIZWFkZXJSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIGNhbGVuZGFySGVhZGVyUm93LmFwcGVuZENoaWxkKGNhbGVuZGFySGVhZGVyUHJldik7XG4gICAgY2FsZW5kYXJIZWFkZXJSb3cuYXBwZW5kQ2hpbGQoY2FsZW5kYXJIZWFkZXJUaXRsZSk7XG4gICAgY2FsZW5kYXJIZWFkZXJSb3cuYXBwZW5kQ2hpbGQoY2FsZW5kYXJIZWFkZXJOZXh0KTtcblxuICAgIHZhciBjYWxlbmRhckhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgY2FsZW5kYXJIZWFkZXIuYXBwZW5kQ2hpbGQoY2FsZW5kYXJIZWFkZXJSb3cpO1xuXG4gICAgdmFyIGNhbGVuZGFyQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgdmFyIGNhbGVuZGFyRm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGZvb3QnKTtcblxuICAgIC8vIENhbGVuZGFyIHRhYmxlXG4gICAgdmFyIGNhbGVuZGFyVGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgIGNhbGVuZGFyVGFibGUuc2V0QXR0cmlidXRlKCdjZWxscGFkZGluZycsICcwJyk7XG4gICAgY2FsZW5kYXJUYWJsZS5zZXRBdHRyaWJ1dGUoJ2NlbGxzcGFjaW5nJywgJzAnKTtcbiAgICBjYWxlbmRhclRhYmxlLmFwcGVuZENoaWxkKGNhbGVuZGFySGVhZGVyKTtcbiAgICBjYWxlbmRhclRhYmxlLmFwcGVuZENoaWxkKGNhbGVuZGFyQm9keSk7XG4gICAgY2FsZW5kYXJUYWJsZS5hcHBlbmRDaGlsZChjYWxlbmRhckZvb3Rlcik7XG4gICAgY2FsZW5kYXJUYWJsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjYWxlbmRhclRhYmxlKTtcblxuICAgIHZhciBjYWxlbmRhclNlbGVjdEhvdXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICBjYWxlbmRhclNlbGVjdEhvdXIuY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1zZWxlY3QnO1xuICAgIGNhbGVuZGFyU2VsZWN0SG91ci5vbmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmouZGF0ZVszXSA9IHRoaXMudmFsdWU7IFxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBlbGVtZW50LnZhbHVlID0gaTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSB0d28oaSk7XG4gICAgICAgIGNhbGVuZGFyU2VsZWN0SG91ci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICB2YXIgY2FsZW5kYXJTZWxlY3RNaW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICBjYWxlbmRhclNlbGVjdE1pbi5jbGFzc05hbWUgPSAnamNhbGVuZGFyLXNlbGVjdCc7XG4gICAgY2FsZW5kYXJTZWxlY3RNaW4ub25jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqLmRhdGVbNF0gPSB0aGlzLnZhbHVlOyBcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDYwOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IGk7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdHdvKGkpO1xuICAgICAgICBjYWxlbmRhclNlbGVjdE1pbi5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBGb290ZXIgY29udHJvbHNcbiAgICB2YXIgY2FsZW5kYXJDb250cm9sc0Zvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbGVuZGFyQ29udHJvbHNGb290ZXIuY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1jb250cm9scyc7XG5cbiAgICB2YXIgY2FsZW5kYXJDb250cm9sc1RpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjYWxlbmRhckNvbnRyb2xzVGltZS5jbGFzc05hbWUgPSAnamNhbGVuZGFyLXRpbWUnO1xuICAgIGNhbGVuZGFyQ29udHJvbHNUaW1lLnN0eWxlLm1heFdpZHRoID0gJzE0MHB4JztcbiAgICBjYWxlbmRhckNvbnRyb2xzVGltZS5hcHBlbmRDaGlsZChjYWxlbmRhclNlbGVjdEhvdXIpO1xuICAgIGNhbGVuZGFyQ29udHJvbHNUaW1lLmFwcGVuZENoaWxkKGNhbGVuZGFyU2VsZWN0TWluKTtcblxuICAgIHZhciBjYWxlbmRhckNvbnRyb2xzVXBkYXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBjYWxlbmRhckNvbnRyb2xzVXBkYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICBjYWxlbmRhckNvbnRyb2xzVXBkYXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdqY2FsZW5kYXItdXBkYXRlJztcbiAgICBjYWxlbmRhckNvbnRyb2xzVXBkYXRlQnV0dG9uLnZhbHVlID0gJ1VwZGF0ZSc7XG5cbiAgICB2YXIgY2FsZW5kYXJDb250cm9sc1VwZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbGVuZGFyQ29udHJvbHNVcGRhdGUuc3R5bGUuZmxleEdyb3cgPSAnMTAnO1xuICAgIGNhbGVuZGFyQ29udHJvbHNVcGRhdGUuYXBwZW5kQ2hpbGQoY2FsZW5kYXJDb250cm9sc1VwZGF0ZUJ1dHRvbik7XG4gICAgY2FsZW5kYXJDb250cm9sc0Zvb3Rlci5hcHBlbmRDaGlsZChjYWxlbmRhckNvbnRyb2xzVGltZSk7XG4gICAgY2FsZW5kYXJDb250cm9sc0Zvb3Rlci5hcHBlbmRDaGlsZChjYWxlbmRhckNvbnRyb2xzVXBkYXRlKTtcbiAgICBjYWxlbmRhckNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FsZW5kYXJDb250cm9sc0Zvb3Rlcik7XG5cbiAgICB2YXIgY2FsZW5kYXJCYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbGVuZGFyQmFja2Ryb3AuY2xhc3NOYW1lID0gJ2pjYWxlbmRhci1iYWNrZHJvcCc7XG4gICAgY2FsZW5kYXIuYXBwZW5kQ2hpbGQoY2FsZW5kYXJCYWNrZHJvcCk7XG5cbiAgICAvLyBVcGRhdGUgYWN0aW9ucyBidXR0b25cbiAgICB2YXIgdXBkYXRlQWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3VycmVudERheSA9IGNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoJy5qY2FsZW5kYXItc2VsZWN0ZWQnKTtcblxuICAgICAgICBpZiAoY3VycmVudERheSAmJiBjdXJyZW50RGF5LmNsYXNzTGlzdC5jb250YWlucygnamNhbGVuZGFyLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgIGNhbGVuZGFyQ29udHJvbHNVcGRhdGVCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgY2FsZW5kYXJTZWxlY3RIb3VyLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGNhbGVuZGFyU2VsZWN0TWluLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGVuZGFyQ29udHJvbHNVcGRhdGVCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgY2FsZW5kYXJTZWxlY3RIb3VyLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGNhbGVuZGFyU2VsZWN0TWluLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ldGhvZHNcbiAgICBvYmoub3BlbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoISBjYWxlbmRhci5jbGFzc0xpc3QuY29udGFpbnMoJ2pjYWxlbmRhci1mb2N1cycpKSB7XG4gICAgICAgICAgICBpZiAoalN1aXRlcy5jYWxlbmRhci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5jYWxlbmRhci5jdXJyZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDdXJyZW50XG4gICAgICAgICAgICBqU3VpdGVzLmNhbGVuZGFyLmN1cnJlbnQgPSBvYmo7XG4gICAgICAgICAgICAvLyBTaG93IGNhbGVuZGFyXG4gICAgICAgICAgICBjYWxlbmRhci5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItZm9jdXMnKTtcbiAgICAgICAgICAgIC8vIEdldCBkYXlzXG4gICAgICAgICAgICBvYmouZ2V0RGF5cygpO1xuICAgICAgICAgICAgLy8gSG91clxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnRpbWUpIHtcbiAgICAgICAgICAgICAgICBjYWxlbmRhclNlbGVjdEhvdXIudmFsdWUgPSBvYmouZGF0ZVszXTtcbiAgICAgICAgICAgICAgICBjYWxlbmRhclNlbGVjdE1pbi52YWx1ZSA9IG9iai5kYXRlWzRdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBjb3JuZXIgaGVscGVyXG4gICAgICAgICAgICBpZiAoalN1aXRlcy5nZXRXaW5kb3dXaWR0aCgpIDwgODAwIHx8IG9iai5vcHRpb25zLmZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBGdWxsXG4gICAgICAgICAgICAgICAgY2FsZW5kYXIuY2xhc3NMaXN0LmFkZCgnamNhbGVuZGFyLWZ1bGxzaXplJyk7XG4gICAgICAgICAgICAgICAgLy8gQW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgalN1aXRlcy5zbGlkZUJvdHRvbShjYWxlbmRhckNvbnRlbnQsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdENvbnRlbnQgPSBjYWxlbmRhckNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgcmVjdC5ib3R0b20gKyByZWN0Q29udGVudC5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnRvcCA9IChyZWN0LnRvcCAtIChyZWN0Q29udGVudC5oZWlnaHQgKyAyKSkgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJDb250YWluZXIuc3R5bGUudG9wID0gKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgKyAyKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IHJlY3QubGVmdCArICdweCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCA8IHJlY3QuYm90dG9tICsgcmVjdENvbnRlbnQuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhckNvbnRhaW5lci5zdHlsZS5ib3R0b20gPSAoMSAqIHJlY3QuaGVpZ2h0ICsgcmVjdENvbnRlbnQuaGVpZ2h0ICsgMikgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJDb250YWluZXIuc3R5bGUudG9wID0gMiArICdweCc7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmNsb3NlID0gZnVuY3Rpb24gKGlnbm9yZUV2ZW50cywgdXBkYXRlKSB7XG4gICAgICAgIGlmIChqU3VpdGVzLmNhbGVuZGFyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIC8vIEN1cnJlbnRcbiAgICAgICAgICAgIGpTdWl0ZXMuY2FsZW5kYXIuY3VycmVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh1cGRhdGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBjYWxlbmRhci5xdWVyeVNlbGVjdG9yKCcuamNhbGVuZGFyLXNlbGVjdGVkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHVwZGF0ZSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdXBkYXRlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnamNhbGVuZGFyLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqLm9wdGlvbnMudmFsdWVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmouZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvYmouc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFdmVudHNcbiAgICAgICAgICAgIGlmICghIGlnbm9yZUV2ZW50cyAmJiB0eXBlb2Yob2JqLm9wdGlvbnMub25jbG9zZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2xvc2UoZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIaWRlXG4gICAgICAgICAgICBjYWxlbmRhci5jbGFzc0xpc3QucmVtb3ZlKCdqY2FsZW5kYXItZm9jdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmoub3B0aW9ucy52YWx1ZTtcbiAgICB9XG5cbiAgICBvYmoucHJldiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdmlzdWFsaXphdGlvbiBpcyB0aGUgZGF5cyBwaWNrZXIgb3IgeWVhcnMgcGlja2VyXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5tb2RlID09ICd5ZWFycycpIHtcbiAgICAgICAgICAgIG9iai5kYXRlWzBdID0gb2JqLmRhdGVbMF0gLSAxMjtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHBpY2tlciB0YWJsZSBvZiBkYXlzXG4gICAgICAgICAgICBvYmouZ2V0WWVhcnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEdvIHRvIHRoZSBwcmV2aW91cyBtb250aFxuICAgICAgICAgICAgaWYgKG9iai5kYXRlWzFdIDwgMikge1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzBdID0gb2JqLmRhdGVbMF0gLSAxO1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzFdID0gMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzFdID0gb2JqLmRhdGVbMV0gLSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGlja2VyIHRhYmxlIG9mIGRheXNcbiAgICAgICAgICAgIG9iai5nZXREYXlzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmoubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdmlzdWFsaXphdGlvbiBpcyB0aGUgZGF5cyBwaWNrZXIgb3IgeWVhcnMgcGlja2VyXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5tb2RlID09ICd5ZWFycycpIHtcbiAgICAgICAgICAgIG9iai5kYXRlWzBdID0gcGFyc2VJbnQob2JqLmRhdGVbMF0pICsgMTI7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwaWNrZXIgdGFibGUgb2YgZGF5c1xuICAgICAgICAgICAgb2JqLmdldFllYXJzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBHbyB0byB0aGUgcHJldmlvdXMgbW9udGhcbiAgICAgICAgICAgIGlmIChvYmouZGF0ZVsxXSA+IDExKSB7XG4gICAgICAgICAgICAgICAgb2JqLmRhdGVbMF0gPSBwYXJzZUludChvYmouZGF0ZVswXSkgKyAxO1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzFdID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLmRhdGVbMV0gPSBwYXJzZUludChvYmouZGF0ZVsxXSkgKyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGlja2VyIHRhYmxlIG9mIGRheXNcbiAgICAgICAgICAgIG9iai5nZXREYXlzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouc2V0VmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKCEgdmFsKSB7XG4gICAgICAgICAgICB2YWwgPSAnJyArIHZhbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBWYWx1ZXNcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdmFsO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBvYmoub3B0aW9ucy52YWx1ZTtcbiAgICAgICAgLy8gU2V0IGxhYmVsXG4gICAgICAgIHZhciB2YWx1ZSA9IG9iai5zZXRMYWJlbChuZXdWYWx1ZSwgb2JqLm9wdGlvbnMuZm9ybWF0KTtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXdWYWx1ZS5zcGxpdCgnICcpO1xuICAgICAgICBpZiAoISBkYXRlWzFdKSB7XG4gICAgICAgICAgICBkYXRlWzFdID0gJzAwOjAwOjAwJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGltZSA9IGRhdGVbMV0uc3BsaXQoJzonKVxuICAgICAgICB2YXIgZGF0ZSA9IGRhdGVbMF0uc3BsaXQoJy0nKTtcbiAgICAgICAgdmFyIHkgPSBwYXJzZUludChkYXRlWzBdKTtcbiAgICAgICAgdmFyIG0gPSBwYXJzZUludChkYXRlWzFdKTtcbiAgICAgICAgdmFyIGQgPSBwYXJzZUludChkYXRlWzJdKTtcbiAgICAgICAgdmFyIGggPSBwYXJzZUludCh0aW1lWzBdKTtcbiAgICAgICAgdmFyIGkgPSBwYXJzZUludCh0aW1lWzFdKTtcbiAgICAgICAgb2JqLmRhdGUgPSBbIHksIG0sIGQsIGgsIGksIDAgXTtcbiAgICAgICAgdmFyIHZhbCA9IG9iai5zZXRMYWJlbChuZXdWYWx1ZSwgb2JqLm9wdGlvbnMuZm9ybWF0KTtcblxuICAgICAgICBpZiAob2xkVmFsdWUgIT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIC8vIElucHV0IHZhbHVlXG4gICAgICAgICAgICBpZiAoZWwudGFnTmFtZSA9PSAnSU5QVVQnKSB7XG4gICAgICAgICAgICAgICAgZWwudmFsdWUgPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOZXcgdmFsdWVcbiAgICAgICAgICAgIG9iai5vcHRpb25zLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAvLyBPbiBjaGFuZ2VcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2UpID09ICAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UoZWwsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYmouZ2V0RGF5cygpO1xuICAgIH1cblxuICAgIG9iai5nZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAob2JqLmRhdGUpIHtcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy50aW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR3byhvYmouZGF0ZVswXSkgKyAnLScgKyB0d28ob2JqLmRhdGVbMV0pICsgJy0nICsgdHdvKG9iai5kYXRlWzJdKSArICcgJyArIHR3byhvYmouZGF0ZVszXSkgKyAnOicgKyB0d28ob2JqLmRhdGVbNF0pICsgJzonICsgdHdvKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHdvKG9iai5kYXRlWzBdKSArICctJyArIHR3byhvYmouZGF0ZVsxXSkgKyAnLScgKyB0d28ob2JqLmRhdGVbMl0pICsgJyAnICsgdHdvKDApICsgJzonICsgdHdvKDApICsgJzonICsgdHdvKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQ2FsZW5kYXJcbiAgICAgKi9cbiAgICBvYmoudXBkYXRlID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2pjYWxlbmRhci1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmouZGF0ZVsyXSA9IGVsZW1lbnQuaW5uZXJUZXh0O1xuXG4gICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy50aW1lKSB7XG4gICAgICAgICAgICAgICAgb2JqLmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzNdID0gY2FsZW5kYXJTZWxlY3RIb3VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIG9iai5kYXRlWzRdID0gY2FsZW5kYXJTZWxlY3RNaW4udmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoJy5qY2FsZW5kYXItc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzLmNsYXNzTGlzdC5yZW1vdmUoJ2pjYWxlbmRhci1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZVxuICAgICAgICB1cGRhdGVBY3Rpb25zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRvIGJsYW5rXG4gICAgICovXG4gICAgb2JqLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIENsb3NlIGNhbGVuZGFyXG4gICAgICAgIG9iai5jbG9zZShmYWxzZSwgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjYWxlbmRhciBkYXlzXG4gICAgICovXG4gICAgb2JqLmdldERheXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTW9kZVxuICAgICAgICBvYmoub3B0aW9ucy5tb2RlID0gJ2RheXMnO1xuXG4gICAgICAgIC8vIFNldHRpbmcgY3VycmVudCB2YWx1ZXMgaW4gY2FzZSBvZiBOVUxMc1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgLy8gQ3VycmVudCBzZWxlY3Rpb25cbiAgICAgICAgdmFyIHllYXIgPSBvYmouZGF0ZSAmJiBvYmouZGF0ZVswXSA/IG9iai5kYXRlWzBdIDogcGFyc2VJbnQoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgdmFyIG1vbnRoID0gb2JqLmRhdGUgJiYgb2JqLmRhdGVbMV0gPyBvYmouZGF0ZVsxXSA6IHBhcnNlSW50KGRhdGUuZ2V0TW9udGgoKSkgKyAxO1xuICAgICAgICB2YXIgZGF5ID0gb2JqLmRhdGUgJiYgb2JqLmRhdGVbMl0gPyBvYmouZGF0ZVsyXSA6IHBhcnNlSW50KGRhdGUuZ2V0RGF5KCkpO1xuICAgICAgICB2YXIgaG91ciA9IG9iai5kYXRlICYmIG9iai5kYXRlWzNdID8gb2JqLmRhdGVbM10gOiBwYXJzZUludChkYXRlLmdldEhvdXJzKCkpO1xuICAgICAgICB2YXIgbWluID0gb2JqLmRhdGUgJiYgb2JqLmRhdGVbNF0gPyBvYmouZGF0ZVs0XSA6IHBhcnNlSW50KGRhdGUuZ2V0TWludXRlcygpKTtcblxuICAgICAgICAvLyBTZWxlY3Rpb24gY29udGFpbmVyXG4gICAgICAgIG9iai5kYXRlID0gW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbiwgMCBdO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aXRsZVxuICAgICAgICBjYWxlbmRhckxhYmVsWWVhci5pbm5lckhUTUwgPSB5ZWFyO1xuICAgICAgICBjYWxlbmRhckxhYmVsTW9udGguaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMubW9udGhzW21vbnRoIC0gMV07XG5cbiAgICAgICAgLy8gQ3VycmVudCBtb250aCBhbmQgWWVhclxuICAgICAgICB2YXIgaXNDdXJyZW50TW9udGhBbmRZZWFyID0gKGRhdGUuZ2V0TW9udGgoKSA9PSBtb250aCAtIDEpICYmIChkYXRlLmdldEZ1bGxZZWFyKCkgPT0geWVhcikgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciBjdXJyZW50RGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cbiAgICAgICAgLy8gTnVtYmVyIG9mIGRheXMgaW4gdGhlIG1vbnRoXG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDAsIDAsIDApO1xuICAgICAgICB2YXIgbnVtYmVyT2ZEYXlzID0gZGF0ZS5nZXREYXRlKCk7XG5cbiAgICAgICAgLy8gRmlyc3QgZGF5XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgtMSwgMCwgMCwgMCk7XG4gICAgICAgIHZhciBmaXJzdERheSA9IGRhdGUuZ2V0RGF5KCkgKyAxO1xuXG4gICAgICAgIC8vIEluZGV4IHZhbHVlXG4gICAgICAgIHZhciBpbmRleCA9IG9iai5vcHRpb25zLnN0YXJ0aW5nRGF5IHx8IDA7XG5cbiAgICAgICAgLy8gRmlyc3Qgb2YgZGF5IHJlbGF0aXZlIHRvIHRoZSBzdGFydGluZyBjYWxlbmRhciB3ZWVrZGF5XG4gICAgICAgIGZpcnN0RGF5ID0gZmlyc3REYXkgLSBpbmRleDtcblxuICAgICAgICAvLyBSZXNldCB0YWJsZVxuICAgICAgICBjYWxlbmRhckJvZHkuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgLy8gV2Vla2RheXMgUm93XG4gICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICByb3cuc2V0QXR0cmlidXRlKCdhbGlnbicsICdjZW50ZXInKTtcbiAgICAgICAgY2FsZW5kYXJCb2R5LmFwcGVuZENoaWxkKHJvdyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHdlZWtkYXlzIHJvd1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItd2Vla2RheScpXG4gICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IG9iai5vcHRpb25zLndlZWtkYXlzX3Nob3J0W2luZGV4XTtcbiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgIC8vIE5leHQgd2VlayBkYXlcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAvLyBSZXN0YXJ0IGluZGV4XG4gICAgICAgICAgICBpZiAoaW5kZXggPiA2KSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5kZXggb2YgZGF5c1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgZCA9IDA7XG4gXG4gICAgICAgIC8vIENhbGVuZGFyIHRhYmxlXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNTsgaisrKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBjZWxscyBjb250YWluZXJcbiAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgcm93LnNldEF0dHJpYnV0ZSgnYWxpZ24nLCAnY2VudGVyJyk7XG4gICAgICAgICAgICAvLyBEYXRhIGNvbnRyb2xcbiAgICAgICAgICAgIHZhciBlbXB0eVJvdyA9IHRydWU7XG4gICAgICAgICAgICAvLyBDcmVhdGUgY2VsbHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGNlbGxcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItc2V0LWRheScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGZpcnN0RGF5ICYmIGluZGV4IDwgKGZpcnN0RGF5ICsgbnVtYmVyT2ZEYXlzKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEYXkgY2VsbFxuICAgICAgICAgICAgICAgICAgICBkKys7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gZDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PSBkYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnamNhbGVuZGFyLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDdXJyZW50IHNlbGVjdGlvbiBkYXkgaXMgdG9kYXlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudE1vbnRoQW5kWWVhciAmJiBjdXJyZW50RGF5ID09IGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgc2VsZWN0aW9uIGRheVxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IGpTdWl0ZXMuY2FsZW5kYXIubm93KG5ldyBEYXRlKHllYXIsIG1vbnRoLTEsIGQpLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBdmFpbGFibGUgcmFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy52YWxpZFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy52YWxpZFJhbmdlWzBdIHx8IGN1cnJlbnQgPj0gb2JqLm9wdGlvbnMudmFsaWRSYW5nZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0MSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0MSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy52YWxpZFJhbmdlWzFdIHx8IGN1cnJlbnQgPD0gb2JqLm9wdGlvbnMudmFsaWRSYW5nZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0MiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0MiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISAodGVzdDEgJiYgdGVzdDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlSb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRGF5IGNlbGxcbiAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgICAgICAgICAgLy8gSW5kZXhcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgY2VsbCB0byB0aGUgY2FsZW5kYXIgYm9keVxuICAgICAgICAgICAgaWYgKGVtcHR5Um93ID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJCb2R5LmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRpbWUgY29udHJvbHNcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnRpbWUpIHtcbiAgICAgICAgICAgIGNhbGVuZGFyQ29udHJvbHNUaW1lLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGVuZGFyQ29udHJvbHNUaW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVcbiAgICAgICAgdXBkYXRlQWN0aW9ucygpO1xuICAgIH1cblxuICAgIG9iai5nZXRNb250aHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTW9kZVxuICAgICAgICBvYmoub3B0aW9ucy5tb2RlID0gJ21vbnRocyc7XG5cbiAgICAgICAgLy8gTG9hZGluZyBtb250aCBsYWJlbHNcbiAgICAgICAgdmFyIG1vbnRocyA9IG9iai5vcHRpb25zLm1vbnRocztcblxuICAgICAgICAvLyBVcGRhdGUgdGl0bGVcbiAgICAgICAgY2FsZW5kYXJMYWJlbFllYXIuaW5uZXJIVE1MID0gb2JqLmRhdGVbMF07XG4gICAgICAgIGNhbGVuZGFyTGFiZWxNb250aC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAvLyBDcmVhdGUgbW9udGhzIHRhYmxlXG4gICAgICAgIHZhciBodG1sID0gJzx0ZCBjb2xzcGFuPVwiN1wiPjx0YWJsZSB3aWR0aD1cIjEwMCVcIj48dHIgYWxpZ249XCJjZW50ZXJcIj4nO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGkgPiAwKSAmJiAoIShpICUgNCkpKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC90cj48dHIgYWxpZ249XCJjZW50ZXJcIj4nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9udGggPSBwYXJzZUludChpKSArIDE7XG4gICAgICAgICAgICBodG1sICs9ICc8dGQgY2xhc3M9XCJqY2FsZW5kYXItc2V0LW1vbnRoXCIgZGF0YS12YWx1ZT1cIicgKyBtb250aCArICdcIj4nICsgbW9udGhzW2ldICsnPC90ZD4nO1xuICAgICAgICB9XG5cbiAgICAgICAgaHRtbCArPSAnPC90cj48L3RhYmxlPjwvdGQ+JztcblxuICAgICAgICBjYWxlbmRhckJvZHkuaW5uZXJIVE1MID0gaHRtbDtcbiAgICB9XG5cbiAgICBvYmouZ2V0WWVhcnMgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIC8vIE1vZGVcbiAgICAgICAgb2JqLm9wdGlvbnMubW9kZSA9ICd5ZWFycyc7XG5cbiAgICAgICAgLy8gQXJyYXkgb2YgeWVhcnNcbiAgICAgICAgdmFyIHkgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI1OyBpKyspIHtcbiAgICAgICAgICAgIHlbaV0gPSBwYXJzZUludChvYmouZGF0ZVswXSkgKyAoaSAtIDEyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFzc2VtYmxpbmcgdGhlIHllYXIgdGFibGVzXG4gICAgICAgIHZhciBodG1sID0gJzx0ZCBjb2xzcGFuPVwiN1wiPjx0YWJsZSB3aWR0aD1cIjEwMCVcIj48dHIgYWxpZ249XCJjZW50ZXJcIj4nO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGkgPiAwKSAmJiAoIShpICUgNSkpKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC90cj48dHIgYWxpZ249XCJjZW50ZXJcIj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCArPSAnPHRkIGNsYXNzPVwiamNhbGVuZGFyLXNldC15ZWFyXCI+JysgeVtpXSArJzwvdGQ+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGh0bWwgKz0gJzwvdHI+PC90YWJsZT48L3RkPic7XG5cbiAgICAgICAgY2FsZW5kYXJCb2R5LmlubmVySFRNTCA9IGh0bWw7XG4gICAgfVxuXG4gICAgb2JqLnNldExhYmVsID0gZnVuY3Rpb24odmFsdWUsIGZvcm1hdCkge1xuICAgICAgICByZXR1cm4galN1aXRlcy5jYWxlbmRhci5nZXREYXRlU3RyaW5nKHZhbHVlLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIG9iai5mcm9tRm9ybWF0dGVkID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIGpTdWl0ZXMuY2FsZW5kYXIuZXh0cmFjdERhdGVGcm9tU3RyaW5nKHZhbHVlLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIHZhciBtb3VzZVVwQ29udHJvbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBlLnRhcmdldC5jbGFzc05hbWU7XG5cbiAgICAgICAgLy8gT2JqZWN0IGlkXG4gICAgICAgIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci1wcmV2Jykge1xuICAgICAgICAgICAgb2JqLnByZXYoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09ICdqY2FsZW5kYXItbmV4dCcpIHtcbiAgICAgICAgICAgIG9iai5uZXh0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSAnamNhbGVuZGFyLW1vbnRoJykge1xuICAgICAgICAgICAgb2JqLmdldE1vbnRocygpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci15ZWFyJykge1xuICAgICAgICAgICAgb2JqLmdldFllYXJzKCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSAnamNhbGVuZGFyLXNldC15ZWFyJykge1xuICAgICAgICAgICAgb2JqLmRhdGVbMF0gPSBlLnRhcmdldC5pbm5lclRleHQ7XG4gICAgICAgICAgICBvYmouZ2V0RGF5cygpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci1zZXQtbW9udGgnKSB7XG4gICAgICAgICAgICBvYmouZGF0ZVsxXSA9IHBhcnNlSW50KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKTtcbiAgICAgICAgICAgIG9iai5nZXREYXlzKCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSAnamNhbGVuZGFyLWNvbmZpcm0nIHx8IGFjdGlvbiA9PSAnamNhbGVuZGFyLXVwZGF0ZScpIHtcbiAgICAgICAgICAgIG9iai5jbG9zZSgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci1jbG9zZScpIHtcbiAgICAgICAgICAgIG9iai5jbG9zZSgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci1iYWNrZHJvcCcpIHtcbiAgICAgICAgICAgIG9iai5jbG9zZShmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2pjYWxlbmRhci1yZXNldCcpIHtcbiAgICAgICAgICAgIG9iai5yZXNldCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pjYWxlbmRhci1zZXQtZGF5JykpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5pbm5lclRleHQpIHtcbiAgICAgICAgICAgICAgICBvYmoudXBkYXRlKGUudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlVcENvbnRyb2xzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUgJiYgZS50YXJnZXQudmFsdWUubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgdmFyIHRlc3QgPSBqU3VpdGVzLmNhbGVuZGFyLmV4dHJhY3REYXRlRnJvbVN0cmluZyhlLnRhcmdldC52YWx1ZSwgb2JqLm9wdGlvbnMuZm9ybWF0KTtcbiAgICAgICAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21wbGV0ZWQnKSA9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNldFZhbHVlKHRlc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwga2V5VXBDb250cm9scyk7XG5cbiAgICAvLyBBZGQgZ2xvYmFsIGV2ZW50c1xuICAgIGNhbGVuZGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJzd2lwZWxlZnRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICBqU3VpdGVzLnNsaWRlTGVmdChjYWxlbmRhclRhYmxlLCAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9iai5uZXh0KCk7XG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlUmlnaHQoY2FsZW5kYXJUYWJsZSwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICBjYWxlbmRhci5hZGRFdmVudExpc3RlbmVyKFwic3dpcGVyaWdodFwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGpTdWl0ZXMuc2xpZGVSaWdodChjYWxlbmRhclRhYmxlLCAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9iai5wcmV2KCk7XG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlTGVmdChjYWxlbmRhclRhYmxlLCAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIGlmICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID09PSB0cnVlKSB7XG4gICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwQ29udHJvbHMpO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBvYmoub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxlbmRhci5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwQ29udHJvbHMpO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG9iai5vcGVuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFwcGVuZCBlbGVtZW50IHRvIHRoZSBET01cbiAgICBpZiAoZWwudGFnTmFtZSA9PSAnSU5QVVQnKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNhbGVuZGFyLCBlbC5uZXh0U2libGluZyk7XG4gICAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWFzaycsIG9iai5vcHRpb25zLmZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMucmVhZG9ubHkpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAncmVhZG9ubHknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLm9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBvYmoub3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxlbWVudFxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdqY2FsZW5kYXItaW5wdXQnKTtcbiAgICAgICAgLy8gVmFsdWVcbiAgICAgICAgZWwudmFsdWUgPSBvYmouc2V0TGFiZWwob2JqLmdldFZhbHVlKCksIG9iai5vcHRpb25zLmZvcm1hdCk7XG4gICAgfVxuXG4gICAgLy8gS2VlcCBvYmplY3QgYXZhaWxhYmxlIGZyb20gdGhlIG5vZGVcbiAgICBlbC5jYWxlbmRhciA9IG9iajtcblxuICAgIGlmIChvYmoub3B0aW9ucy5vcGVuZWQgPT0gdHJ1ZSkge1xuICAgICAgICBvYmoub3BlbigpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59KTtcblxualN1aXRlcy5jYWxlbmRhci5wcmV0dGlmeSA9IGZ1bmN0aW9uKGQsIHRleHRzKSB7XG4gICAgaWYgKCEgdGV4dHMpIHtcbiAgICAgICAgdmFyIHRleHRzID0ge1xuICAgICAgICAgICAganVzdE5vdzogJ0p1c3Qgbm93JyxcbiAgICAgICAgICAgIHhNaW51dGVzQWdvOiAnezB9bSBhZ28nLFxuICAgICAgICAgICAgeEhvdXJzQWdvOiAnezB9aCBhZ28nLFxuICAgICAgICAgICAgeERheXNBZ286ICd7MH1kIGFnbycsXG4gICAgICAgICAgICB4V2Vla3NBZ286ICd7MH13IGFnbycsXG4gICAgICAgICAgICB4TW9udGhzQWdvOiAnezB9IG1vbiBhZ28nLFxuICAgICAgICAgICAgeFllYXJzQWdvOiAnezB9eSBhZ28nLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGQxID0gbmV3IERhdGUoKTtcbiAgICB2YXIgZDIgPSBuZXcgRGF0ZShkKTtcbiAgICB2YXIgdG90YWwgPSBwYXJzZUludCgoZDEgLSBkMikgLyAxMDAwIC8gNjApO1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoJ3swfScsIG8pO1xuICAgIH1cblxuICAgIGlmICh0b3RhbCA9PSAwKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdGV4dHMuanVzdE5vdztcbiAgICB9IGVsc2UgaWYgKHRvdGFsIDwgOTApIHtcbiAgICAgICAgdmFyIHRleHQgPSB0ZXh0cy54TWludXRlc0Fnby5mb3JtYXQodG90YWwpO1xuICAgIH0gZWxzZSBpZiAodG90YWwgPCAxNDQwKSB7IC8vIE9uZSBkYXlcbiAgICAgICAgdmFyIHRleHQgPSB0ZXh0cy54SG91cnNBZ28uZm9ybWF0KE1hdGgucm91bmQodG90YWwvNjApKTtcbiAgICB9IGVsc2UgaWYgKHRvdGFsIDwgMjAxNjApIHsgLy8gMTQgZGF5c1xuICAgICAgICB2YXIgdGV4dCA9IHRleHRzLnhEYXlzQWdvLmZvcm1hdChNYXRoLnJvdW5kKHRvdGFsIC8gMTQ0MCkpO1xuICAgIH0gZWxzZSBpZiAodG90YWwgPCA0MzIwMCkgeyAvLyAzMCBkYXlzXG4gICAgICAgIHZhciB0ZXh0ID0gdGV4dHMueFdlZWtzQWdvLmZvcm1hdChNYXRoLnJvdW5kKHRvdGFsIC8gMTAwODApKTtcbiAgICB9IGVsc2UgaWYgKHRvdGFsIDwgMTAzNjgwMCkgeyAvLyAyNCBtb250aHNcbiAgICAgICAgdmFyIHRleHQgPSB0ZXh0cy54TW9udGhzQWdvLmZvcm1hdChNYXRoLnJvdW5kKHRvdGFsIC8gNDMyMDApKTtcbiAgICB9IGVsc2UgeyAvLyAyNCBtb250aHMrXG4gICAgICAgIHZhciB0ZXh0ID0gdGV4dHMueFllYXJzQWdvLmZvcm1hdChNYXRoLnJvdW5kKHRvdGFsIC8gNTI1NjAwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHQ7XG59XG5cbmpTdWl0ZXMuY2FsZW5kYXIucHJldHRpZnlBbGwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJldHR5ZGF0ZScpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1kYXRlJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzW2ldLmlubmVySFRNTCA9IGpTdWl0ZXMuY2FsZW5kYXIucHJldHRpZnkoZWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50c1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScsIGVsZW1lbnRzW2ldLmlubmVySFRNTCk7XG4gICAgICAgICAgICBlbGVtZW50c1tpXS5pbm5lckhUTUwgPSBqU3VpdGVzLmNhbGVuZGFyLnByZXR0aWZ5KGVsZW1lbnRzW2ldLmlubmVySFRNTCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmpTdWl0ZXMuY2FsZW5kYXIubm93ID0gZnVuY3Rpb24oZGF0ZSwgZGF0ZU9ubHkpIHtcbiAgICBpZiAoISBkYXRlKSB7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgdmFyIHkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgdmFyIG0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIHZhciBkID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgdmFyIGggPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgdmFyIGkgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICB2YXIgcyA9IGRhdGUuZ2V0U2Vjb25kcygpO1xuXG4gICAgLy8gVHdvIGRpZ2l0c1xuICAgIHZhciB0d28gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGRhdGVPbmx5ID09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHR3byh5KSArICctJyArIHR3byhtKSArICctJyArIHR3byhkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHdvKHkpICsgJy0nICsgdHdvKG0pICsgJy0nICsgdHdvKGQpICsgJyAnICsgdHdvKGgpICsgJzonICsgdHdvKGkpICsgJzonICsgdHdvKHMpO1xuICAgIH1cbn1cblxuLy8gSGVscGVyIHRvIGV4dHJhY3QgZGF0ZSBmcm9tIGEgc3RyaW5nXG5qU3VpdGVzLmNhbGVuZGFyLmV4dHJhY3REYXRlRnJvbVN0cmluZyA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkge1xuICAgIHZhciB2MSA9ICcnICsgZGF0ZTtcbiAgICB2YXIgdjIgPSBmb3JtYXQucmVwbGFjZSgvWzAtOV0vZywnJyk7XG5cbiAgICB2YXIgdGVzdCA9IDE7XG5cbiAgICAvLyBHZXQgeWVhclxuICAgIHZhciB5ID0gdjIuc2VhcmNoKFwiWVlZWVwiKTtcbiAgICB5ID0gdjEuc3Vic3RyKHksNCk7XG4gICAgaWYgKHBhcnNlSW50KHkpICE9IHkpIHtcbiAgICAgICAgdGVzdCA9IDA7XG4gICAgfVxuXG4gICAgLy8gR2V0IG1vbnRoXG4gICAgdmFyIG0gPSB2Mi5zZWFyY2goXCJNTVwiKTtcbiAgICBtID0gdjEuc3Vic3RyKG0sMik7XG4gICAgaWYgKHBhcnNlSW50KG0pICE9IG0gfHwgZCA+IDEyKSB7XG4gICAgICAgIHRlc3QgPSAwO1xuICAgIH1cblxuICAgIC8vIEdldCBkYXlcbiAgICB2YXIgZCA9IHYyLnNlYXJjaChcIkREXCIpO1xuICAgIGQgPSB2MS5zdWJzdHIoZCwyKTtcbiAgICBpZiAocGFyc2VJbnQoZCkgIT0gZCAgfHwgZCA+IDMxKSB7XG4gICAgICAgIHRlc3QgPSAwO1xuICAgIH1cblxuICAgIC8vIEdldCBob3VyXG4gICAgdmFyIGggPSB2Mi5zZWFyY2goXCJISFwiKTtcbiAgICBpZiAoaCA+PSAwKSB7XG4gICAgICAgIGggPSB2MS5zdWJzdHIoaCwyKTtcbiAgICAgICAgaWYgKCEgcGFyc2VJbnQoaCkgfHwgaCA+IDIzKSB7XG4gICAgICAgICAgICBoID0gJzAwJztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGggPSAnMDAnO1xuICAgIH1cbiAgICBcbiAgICAvLyBHZXQgbWludXRlc1xuICAgIHZhciBpID0gdjIuc2VhcmNoKFwiTUlcIik7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgICBpID0gdjEuc3Vic3RyKGksMik7XG4gICAgICAgIGlmICghIHBhcnNlSW50KGkpIHx8IGkgPiA1OSkge1xuICAgICAgICAgICAgaSA9ICcwMCc7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpID0gJzAwJztcbiAgICB9XG5cbiAgICAvLyBHZXQgc2Vjb25kc1xuICAgIHZhciBzID0gdjIuc2VhcmNoKFwiU1NcIik7XG4gICAgaWYgKHMgPj0gMCkge1xuICAgICAgICBzID0gdjEuc3Vic3RyKHMsMik7XG4gICAgICAgIGlmICghIHBhcnNlSW50KHMpIHx8IHMgPiA1OSkge1xuICAgICAgICAgICAgcyA9ICcwMCc7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzID0gJzAwJztcbiAgICB9XG5cbiAgICBpZiAodGVzdCA9PSAxICYmIGRhdGUubGVuZ3RoID09IHYyLmxlbmd0aCkge1xuICAgICAgICAvLyBVcGRhdGUgc291cmNlXG4gICAgICAgIHZhciBkYXRhID0geSArICctJyArIG0gKyAnLScgKyBkICsgJyAnICsgaCArICc6JyArICBpICsgJzonICsgcztcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG59XG5cbi8vIEhlbHBlciB0byBjb252ZXJ0IGRhdGUgaW50byBzdHJpbmdcbmpTdWl0ZXMuY2FsZW5kYXIuZ2V0RGF0ZVN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlLCBmb3JtYXQpIHtcbiAgICAvLyBEZWZhdWx0IGNhbGVuZGFyXG4gICAgaWYgKCEgZm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSAnREQvTU0vWVlZWSc7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBkID0gJycrdmFsdWU7XG4gICAgICAgIGQgPSBkLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdmFyIGggPSAnJztcbiAgICAgICAgdmFyIG0gPSAnJztcbiAgICAgICAgdmFyIHMgPSAnJztcblxuICAgICAgICBpZiAoZFsxXSkge1xuICAgICAgICAgICAgaCA9IGRbMV0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgIG0gPSBoWzFdID8gaFsxXSA6ICcwMCc7XG4gICAgICAgICAgICBzID0gaFsyXSA/IGhbMl0gOiAnMDAnO1xuICAgICAgICAgICAgaCA9IGhbMF0gPyBoWzBdIDogJzAwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGggPSAnMDAnO1xuICAgICAgICAgICAgbSA9ICcwMCc7XG4gICAgICAgICAgICBzID0gJzAwJztcbiAgICAgICAgfVxuXG4gICAgICAgIGQgPSBkWzBdLnNwbGl0KCctJyk7XG5cbiAgICAgICAgaWYgKGRbMF0gJiYgZFsxXSAmJiBkWzJdICYmIGRbMF0gPiAwICYmIGRbMV0gPiAwICYmIGRbMV0gPCAxMyAmJiBkWzJdID4gMCAmJiBkWzJdIDwgMzIpIHtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IG5ldyBEYXRlKGRbMF0sIGRbMV0tMSwgZFsyXSk7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IG5ldyBBcnJheSgnU3VuZGF5JywnTW9uZGF5JywnVHVlc2RheScsJ1dlZG5lc2RheScsJ1RodXJzZGF5JywnRnJpZGF5JywnU2F0dXJkYXknKTtcbiAgICAgICAgICAgIHZhciBtb250aHMgPSBuZXcgQXJyYXkoJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJyk7XG5cbiAgICAgICAgICAgIGRbMV0gPSAoZFsxXS5sZW5ndGggPCAyID8gJzAnIDogJycpICsgZFsxXTtcbiAgICAgICAgICAgIGRbMl0gPSAoZFsyXS5sZW5ndGggPCAyID8gJzAnIDogJycpICsgZFsyXTtcbiAgICAgICAgICAgIGggPSAoaC5sZW5ndGggPCAyID8gJzAnIDogJycpICsgaDtcbiAgICAgICAgICAgIG0gPSAobS5sZW5ndGggPCAyID8gJzAnIDogJycpICsgbTtcbiAgICAgICAgICAgIHMgPSAocy5sZW5ndGggPCAyID8gJzAnIDogJycpICsgcztcblxuICAgICAgICAgICAgdmFsdWUgPSBmb3JtYXQ7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ1dEJywgd2Vla2RheVtjYWxlbmRhci5nZXREYXkoKV0pO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCdERCcsIGRbMl0pO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCdNTScsIGRbMV0pO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCdZWVlZJywgZFswXSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ1lZJywgZFswXS5zdWJzdHJpbmcoMiw0KSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ01PTicsIG1vbnRoc1twYXJzZUludChkWzFdKS0xXS50b1VwcGVyQ2FzZSgpKTtcblxuICAgICAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ0hIMjQnLCBoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGggPiAxMikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnSEgxMicsIGggLSAxMik7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCdISCcsIGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ0hIMTInLCBoKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ0hIJywgaCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnTUknLCBtKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnTU0nLCBtKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnU1MnLCBzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmpTdWl0ZXMuY2FsZW5kYXIuaXNPcGVuID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChqU3VpdGVzLmNhbGVuZGFyLmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKCEgZS50YXJnZXQuY2xhc3NOYW1lIHx8IGUudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCdqY2FsZW5kYXInKSA9PSAtMSkge1xuICAgICAgICAgICAgalN1aXRlcy5jYWxlbmRhci5jdXJyZW50LmNsb3NlKGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPT09IHRydWUpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBqU3VpdGVzLmNhbGVuZGFyLmlzT3Blbik7XG59IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgalN1aXRlcy5jYWxlbmRhci5pc09wZW4pO1xufVxyXG5cclxualN1aXRlcy5jb2xvciA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBvYmoub3B0aW9ucyA9IHt9O1xuICAgIG9iai52YWx1ZXMgPSBbXTtcblxuICAgIC8vIEdsb2JhbCBjb250YWluZXJcbiAgICBpZiAoISBqU3VpdGVzLmNvbG9yLmN1cnJlbnQpIHtcbiAgICAgICAgalN1aXRlcy5jb2xvci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBkZWZhdWx0c1xuICAgICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xBcnJheSl9IHZhbHVlIC0gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgY29tcG9udGVudFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwbGFjZWhvbGRlciAtIFRoZSBkZWZhdWx0IGluc3RydWN0aW9uIHRleHQgb24gdGhlIGVsZW1lbnRcbiAgICAgKiBAcHJvcGVydHkge3JlcXVlc3RDYWxsYmFja30gb25jaGFuZ2UgLSBNZXRob2QgdG8gYmUgZXhlY3V0ZSBhZnRlciBhbnkgY2hhbmdlcyBvbiB0aGUgZWxlbWVudFxuICAgICAqIEBwcm9wZXJ0eSB7cmVxdWVzdENhbGxiYWNrfSBvbmNsb3NlIC0gTWV0aG9kIHRvIGJlIGV4ZWN1dGUgd2hlbiB0aGUgZWxlbWVudCBpcyBjbG9zZWRcbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIG9uY2xvc2U6IG51bGwsXG4gICAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgICBjbG9zZU9uQ2hhbmdlOiB0cnVlLFxuICAgIH07XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIG9iamVjdFxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwYWxldHRlID0ge1xuICAgICAgICAgIFwicmVkXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZmZlYmVlXCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNmZmNkZDJcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2VmOWE5YVwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjZTU3MzczXCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiNlZjUzNTBcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiI2Y0NDMzNlwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjZTUzOTM1XCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiNkMzJmMmZcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiI2M2MjgyOFwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjYjcxYzFjXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBpbmtcIjoge1xuICAgICAgICAgICAgXCI1MFwiOiBcIiNmY2U0ZWNcIixcbiAgICAgICAgICAgIFwiMTAwXCI6IFwiI2Y4YmJkMFwiLFxuICAgICAgICAgICAgXCIyMDBcIjogXCIjZjQ4ZmIxXCIsXG4gICAgICAgICAgICBcIjMwMFwiOiBcIiNmMDYyOTJcIixcbiAgICAgICAgICAgIFwiNDAwXCI6IFwiI2VjNDA3YVwiLFxuICAgICAgICAgICAgXCI1MDBcIjogXCIjZTkxZTYzXCIsXG4gICAgICAgICAgICBcIjYwMFwiOiBcIiNkODFiNjBcIixcbiAgICAgICAgICAgIFwiNzAwXCI6IFwiI2MyMTg1YlwiLFxuICAgICAgICAgICAgXCI4MDBcIjogXCIjYWQxNDU3XCIsXG4gICAgICAgICAgICBcIjkwMFwiOiBcIiM4ODBlNGZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHVycGxlXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZjNlNWY1XCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNlMWJlZTdcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2NlOTNkOFwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjYmE2OGM4XCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiNhYjQ3YmNcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiIzljMjdiMFwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjOGUyNGFhXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiM3YjFmYTJcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiIzZhMWI5YVwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjNGExNDhjXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImluZGlnb1wiOiB7XG4gICAgICAgICAgICBcIjUwXCI6IFwiI2U4ZWFmNlwiLFxuICAgICAgICAgICAgXCIxMDBcIjogXCIjYzVjYWU5XCIsXG4gICAgICAgICAgICBcIjIwMFwiOiBcIiM5ZmE4ZGFcIixcbiAgICAgICAgICAgIFwiMzAwXCI6IFwiIzc5ODZjYlwiLFxuICAgICAgICAgICAgXCI0MDBcIjogXCIjNWM2YmMwXCIsXG4gICAgICAgICAgICBcIjUwMFwiOiBcIiMzZjUxYjVcIixcbiAgICAgICAgICAgIFwiNjAwXCI6IFwiIzM5NDlhYlwiLFxuICAgICAgICAgICAgXCI3MDBcIjogXCIjMzAzZjlmXCIsXG4gICAgICAgICAgICBcIjgwMFwiOiBcIiMyODM1OTNcIixcbiAgICAgICAgICAgIFwiOTAwXCI6IFwiIzFhMjM3ZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJibHVlXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZTNmMmZkXCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNiYmRlZmJcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiIzkwY2FmOVwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjNjRiNWY2XCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiM0MmE1ZjVcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiIzIxOTZmM1wiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjMWU4OGU1XCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiMxOTc2ZDJcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiIzE1NjVjMFwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjMGQ0N2ExXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImN5YW5cIjoge1xuICAgICAgICAgICAgXCI1MFwiOiBcIiNlMGY3ZmFcIixcbiAgICAgICAgICAgIFwiMTAwXCI6IFwiI2IyZWJmMlwiLFxuICAgICAgICAgICAgXCIyMDBcIjogXCIjODBkZWVhXCIsXG4gICAgICAgICAgICBcIjMwMFwiOiBcIiM0ZGQwZTFcIixcbiAgICAgICAgICAgIFwiNDAwXCI6IFwiIzI2YzZkYVwiLFxuICAgICAgICAgICAgXCI1MDBcIjogXCIjMDBiY2Q0XCIsXG4gICAgICAgICAgICBcIjYwMFwiOiBcIiMwMGFjYzFcIixcbiAgICAgICAgICAgIFwiNzAwXCI6IFwiIzAwOTdhN1wiLFxuICAgICAgICAgICAgXCI4MDBcIjogXCIjMDA4MzhmXCIsXG4gICAgICAgICAgICBcIjkwMFwiOiBcIiMwMDYwNjRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGVhbFwiOiB7XG4gICAgICAgICAgICBcIjUwXCI6IFwiI2UwZjJmMVwiLFxuICAgICAgICAgICAgXCIxMDBcIjogXCIjYjJkZmRiXCIsXG4gICAgICAgICAgICBcIjIwMFwiOiBcIiM4MGNiYzRcIixcbiAgICAgICAgICAgIFwiMzAwXCI6IFwiIzRkYjZhY1wiLFxuICAgICAgICAgICAgXCI0MDBcIjogXCIjMjZhNjlhXCIsXG4gICAgICAgICAgICBcIjUwMFwiOiBcIiMwMDk2ODhcIixcbiAgICAgICAgICAgIFwiNjAwXCI6IFwiIzAwODk3YlwiLFxuICAgICAgICAgICAgXCI3MDBcIjogXCIjMDA3OTZiXCIsXG4gICAgICAgICAgICBcIjgwMFwiOiBcIiMwMDY5NWNcIixcbiAgICAgICAgICAgIFwiOTAwXCI6IFwiIzAwNGQ0MFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJncmVlblwiOiB7XG4gICAgICAgICAgICBcIjUwXCI6IFwiI2U4ZjVlOVwiLFxuICAgICAgICAgICAgXCIxMDBcIjogXCIjYzhlNmM5XCIsXG4gICAgICAgICAgICBcIjIwMFwiOiBcIiNhNWQ2YTdcIixcbiAgICAgICAgICAgIFwiMzAwXCI6IFwiIzgxYzc4NFwiLFxuICAgICAgICAgICAgXCI0MDBcIjogXCIjNjZiYjZhXCIsXG4gICAgICAgICAgICBcIjUwMFwiOiBcIiM0Y2FmNTBcIixcbiAgICAgICAgICAgIFwiNjAwXCI6IFwiIzQzYTA0N1wiLFxuICAgICAgICAgICAgXCI3MDBcIjogXCIjMzg4ZTNjXCIsXG4gICAgICAgICAgICBcIjgwMFwiOiBcIiMyZTdkMzJcIixcbiAgICAgICAgICAgIFwiOTAwXCI6IFwiIzFiNWUyMFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaWdodGdyZWVuXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZjFmOGU5XCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNkY2VkYzhcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2M1ZTFhNVwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjYWVkNTgxXCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiM5Y2NjNjVcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiIzhiYzM0YVwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjN2NiMzQyXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiM2ODlmMzhcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiIzU1OGIyZlwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjMzM2OTFlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpbWVcIjoge1xuICAgICAgICAgICAgXCI1MFwiOiBcIiNmOWZiZTdcIixcbiAgICAgICAgICAgIFwiMTAwXCI6IFwiI2YwZjRjM1wiLFxuICAgICAgICAgICAgXCIyMDBcIjogXCIjZTZlZTljXCIsXG4gICAgICAgICAgICBcIjMwMFwiOiBcIiNkY2U3NzVcIixcbiAgICAgICAgICAgIFwiNDAwXCI6IFwiI2Q0ZTE1N1wiLFxuICAgICAgICAgICAgXCI1MDBcIjogXCIjY2RkYzM5XCIsXG4gICAgICAgICAgICBcIjYwMFwiOiBcIiNjMGNhMzNcIixcbiAgICAgICAgICAgIFwiNzAwXCI6IFwiI2FmYjQyYlwiLFxuICAgICAgICAgICAgXCI4MDBcIjogXCIjOWU5ZDI0XCIsXG4gICAgICAgICAgICBcIjkwMFwiOiBcIiM4Mjc3MTdcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwieWVsbG93XCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZmZmZGU3XCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNmZmY5YzRcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2ZmZjU5ZFwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjZmZmMTc2XCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiNmZmVlNThcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiI2ZmZWIzYlwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjZmRkODM1XCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiNmYmMwMmRcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiI2Y5YTgyNVwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjZjU3ZjE3XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFtYmVyXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZmZmOGUxXCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNmZmVjYjNcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2ZmZTA4MlwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjZmZkNTRmXCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiNmZmNhMjhcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiI2ZmYzEwN1wiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjZmZiMzAwXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiNmZmEwMDBcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiI2ZmOGYwMFwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjZmY2ZjAwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9yYW5nZVwiOiB7XG4gICAgICAgICAgICBcIjUwXCI6IFwiI2ZmZjNlMFwiLFxuICAgICAgICAgICAgXCIxMDBcIjogXCIjZmZlMGIyXCIsXG4gICAgICAgICAgICBcIjIwMFwiOiBcIiNmZmNjODBcIixcbiAgICAgICAgICAgIFwiMzAwXCI6IFwiI2ZmYjc0ZFwiLFxuICAgICAgICAgICAgXCI0MDBcIjogXCIjZmZhNzI2XCIsXG4gICAgICAgICAgICBcIjUwMFwiOiBcIiNmZjk4MDBcIixcbiAgICAgICAgICAgIFwiNjAwXCI6IFwiI2ZiOGMwMFwiLFxuICAgICAgICAgICAgXCI3MDBcIjogXCIjZjU3YzAwXCIsXG4gICAgICAgICAgICBcIjgwMFwiOiBcIiNlZjZjMDBcIixcbiAgICAgICAgICAgIFwiOTAwXCI6IFwiI2U2NTEwMFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWVwb3JhbmdlXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZmJlOWU3XCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNmZmNjYmNcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2ZmYWI5MVwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjZmY4YTY1XCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiNmZjcwNDNcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiI2ZmNTcyMlwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjZjQ1MTFlXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiNlNjRhMTlcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiI2Q4NDMxNVwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjYmYzNjBjXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImJyb3duXCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZWZlYmU5XCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNkN2NjYzhcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2JjYWFhNFwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjYTE4ODdmXCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiM4ZDZlNjNcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiIzc5NTU0OFwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjNmQ0YzQxXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiM1ZDQwMzdcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiIzRlMzQyZVwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjM2UyNzIzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ3JleVwiOiB7XG4gICAgICAgICAgICBcIjUwXCI6IFwiI2ZhZmFmYVwiLFxuICAgICAgICAgICAgXCIxMDBcIjogXCIjZjVmNWY1XCIsXG4gICAgICAgICAgICBcIjIwMFwiOiBcIiNlZWVlZWVcIixcbiAgICAgICAgICAgIFwiMzAwXCI6IFwiI2UwZTBlMFwiLFxuICAgICAgICAgICAgXCI0MDBcIjogXCIjYmRiZGJkXCIsXG4gICAgICAgICAgICBcIjUwMFwiOiBcIiM5ZTllOWVcIixcbiAgICAgICAgICAgIFwiNjAwXCI6IFwiIzc1NzU3NVwiLFxuICAgICAgICAgICAgXCI3MDBcIjogXCIjNjE2MTYxXCIsXG4gICAgICAgICAgICBcIjgwMFwiOiBcIiM0MjQyNDJcIixcbiAgICAgICAgICAgIFwiOTAwXCI6IFwiIzIxMjEyMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImJsdWVncmV5XCI6IHtcbiAgICAgICAgICAgIFwiNTBcIjogXCIjZWNlZmYxXCIsXG4gICAgICAgICAgICBcIjEwMFwiOiBcIiNjZmQ4ZGNcIixcbiAgICAgICAgICAgIFwiMjAwXCI6IFwiI2IwYmVjNVwiLFxuICAgICAgICAgICAgXCIzMDBcIjogXCIjOTBhNGFlXCIsXG4gICAgICAgICAgICBcIjQwMFwiOiBcIiM3ODkwOWNcIixcbiAgICAgICAgICAgIFwiNTAwXCI6IFwiIzYwN2Q4YlwiLFxuICAgICAgICAgICAgXCI2MDBcIjogXCIjNTQ2ZTdhXCIsXG4gICAgICAgICAgICBcIjcwMFwiOiBcIiM0NTVhNjRcIixcbiAgICAgICAgICAgIFwiODAwXCI6IFwiIzM3NDc0ZlwiLFxuICAgICAgICAgICAgXCI5MDBcIjogXCIjMjYzMjM4XCJcbiAgICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB4ID0gMDtcbiAgICB2YXIgeSA9IDA7XG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuXG4gICAgdmFyIGNvbCA9IE9iamVjdC5rZXlzKHBhbGV0dGUpO1xuICAgIHZhciBzaGFkZSA9IE9iamVjdC5rZXlzKHBhbGV0dGVbY29sWzBdXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbC5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNoYWRlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoISBjb2xvcnNbal0pIHtcbiAgICAgICAgICAgICAgICBjb2xvcnNbal0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbG9yc1tqXVtpXSA9IHBhbGV0dGVbY29sW2ldXVtzaGFkZVtqXV07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVmFsdWVcbiAgICBpZiAob2JqLm9wdGlvbnMudmFsdWUpIHtcbiAgICAgICAgZWwudmFsdWUgPSBvYmoub3B0aW9ucy52YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBUYWJsZSBjb250YWluZXJcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9ICdqY29sb3InO1xuXG4gICAgLy8gVGFibGUgY29udGFpbmVyXG4gICAgdmFyIGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYmFja2Ryb3AuY2xhc3NOYW1lID0gJ2pjb2xvci1iYWNrZHJvcCc7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJhY2tkcm9wKTtcblxuICAgIC8vIENvbnRlbnRcbiAgICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRlbnQuY2xhc3NOYW1lID0gJ2pjb2xvci1jb250ZW50JztcblxuICAgIC8vIENsb3NlIGJ1dHRvblxuICAgIHZhciBjbG9zZUJ1dHRvbiAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjbG9zZUJ1dHRvbi5jbGFzc05hbWUgPSAnamNvbG9yLWNsb3NlJztcbiAgICBjbG9zZUJ1dHRvbi5pbm5lckhUTUwgPSAnRG9uZSc7XG4gICAgY2xvc2VCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmouY2xvc2UoKTtcbiAgICB9XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG5cbiAgICAvLyBUYWJsZSBwYWxsZXRlXG4gICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2NlbGxwYWRkaW5nJywgJzcnKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2NlbGxzcGFjaW5nJywgJzAnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sb3JzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgdGQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JzW2ldW2pdO1xuICAgICAgICAgICAgdGQuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgY29sb3JzW2ldW2pdKTtcbiAgICAgICAgICAgIHRkLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuXG4gICAgICAgICAgICAvLyBTZWxlY3RlZCBjb2xvclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnZhbHVlID09IGNvbG9yc1tpXVtqXSkge1xuICAgICAgICAgICAgICAgIHRkLmNsYXNzTGlzdC5hZGQoJ2pjb2xvci1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSB2YWx1ZXNcbiAgICAgICAgICAgIG9iai52YWx1ZXNbY29sb3JzW2ldW2pdXSA9IHRkO1xuICAgICAgICB9XG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIGNvbG9yIHBhbGxldGVcbiAgICAgKi9cbiAgICBvYmoub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoalN1aXRlcy5jb2xvci5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoalN1aXRlcy5jb2xvci5jdXJyZW50ICE9IG9iaikge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMuY29sb3IuY3VycmVudC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEgalN1aXRlcy5jb2xvci5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBQZXJzaXN0IGVsZW1lbnRcbiAgICAgICAgICAgIGpTdWl0ZXMuY29sb3IuY3VycmVudCA9IG9iajtcbiAgICAgICAgICAgIC8vIFNob3cgY29sb3JwaWNrZXJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqY29sb3ItZm9jdXMnKTtcblxuICAgICAgICAgICAgY29uc3QgcmVjdENvbnRlbnQgPSBjb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICBpZiAoalN1aXRlcy5nZXRXaW5kb3dXaWR0aCgpIDwgODAwKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5zdHlsZS50b3AgPSAnJztcbiAgICAgICAgICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5hZGQoJ2pjb2xvci1mdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5zbGlkZUJvdHRvbShjb250ZW50LCAxKTtcbiAgICAgICAgICAgICAgICBiYWNrZHJvcC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqY29sb3ItZnVsbHNjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnamNvbG9yLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3Auc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgPCByZWN0LmJvdHRvbSArIHJlY3RDb250ZW50LmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLnRvcCA9IC0xICogKHJlY3RDb250ZW50LmhlaWdodCArIHJlY3QuaGVpZ2h0ICsgMikgKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUudG9wID0gJzJweCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250YWluZXIuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIGNvbG9yIHBhbGxldGVcbiAgICAgKi9cbiAgICBvYmouY2xvc2UgPSBmdW5jdGlvbihpZ25vcmVFdmVudHMpIHtcbiAgICAgICAgaWYgKGpTdWl0ZXMuY29sb3IuY3VycmVudCkge1xuICAgICAgICAgICAgalN1aXRlcy5jb2xvci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghIGlnbm9yZUV2ZW50cyAmJiB0eXBlb2Yob2JqLm9wdGlvbnMub25jbG9zZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2xvc2UoZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2pjb2xvci1mb2N1cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIGJhY2tkcm9wIGlzIGhpZGRlblxuICAgICAgICBiYWNrZHJvcC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cbiAgICAgICAgcmV0dXJuIG9iai5vcHRpb25zLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB2YWx1ZVxuICAgICAqL1xuICAgIG9iai5zZXRWYWx1ZSA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgZWwudmFsdWUgPSBjb2xvcjtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLnZhbHVlID0gY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgY3VycmVudCBzZWxlY2RlZCBtYXJrXG4gICAgICAgIHZhciBzZWxlY3RlZCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuamNvbG9yLXNlbGVjdGVkJyk7XG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnamNvbG9yLXNlbGVjdGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYXJrIGNlbGwgYXMgc2VsZWN0ZWRcbiAgICAgICAgb2JqLnZhbHVlc1tjb2xvcl0uY2xhc3NMaXN0LmFkZCgnamNvbG9yLXNlbGVjdGVkJyk7XG5cbiAgICAgICAgLy8gT25jaGFuZ2VcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UoZWwsIGNvbG9yKTtcbiAgICAgICAgfVxuXHJcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmNsb3NlT25DaGFuZ2UgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBvYmouY2xvc2UoKTtcclxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHZhbHVlXG4gICAgICovXG4gICAgb2JqLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvYmoub3B0aW9ucy52YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBlbGVtZW50IGlzIGZvY3VzIG9wZW4gdGhlIHBpY2tlclxuICAgICAqL1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIG9iai5vcGVuKCk7XG4gICAgfSk7XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEgalN1aXRlcy5jb2xvci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb2JqLm9wZW4oKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2VsZWN0IGNvbG9yXG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT0gJ1REJykge1xuICAgICAgICAgICAgalN1aXRlcy5jb2xvci5jdXJyZW50LnNldFZhbHVlKGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKTtcblxyXG4gICAgICAgICAgICBpZiAoalN1aXRlcy5jb2xvci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5jb2xvci5jdXJyZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENsb3NlIGNvbnRyb2xsZXJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGpTdWl0ZXMuY29sb3IuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqU3VpdGVzLmdldEVsZW1lbnQoZS50YXJnZXQsICdqY29sb3InKTtcbiAgICAgICAgICAgIGlmICghIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBqU3VpdGVzLmNvbG9yLmN1cnJlbnQuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUG9zc2libGUgdG8gZm9jdXMgdGhlIGNvbnRhaW5lclxuICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzkwMCcpO1xuXG4gICAgLy8gUGxhY2Vob2xkZXJcbiAgICBpZiAob2JqLm9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIG9iai5vcHRpb25zLnBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICAvLyBBcHBlbmQgdG8gdGhlIHRhYmxlXG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh0YWJsZSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgLy8gSW5zZXJ0IHBpY2tlciBhZnRlciB0aGUgZWxlbWVudFxuICAgIGlmIChlbC50YWdOYW1lID09ICdJTlBVVCcpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBlbC5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICAvLyBLZWVwIG9iamVjdCBhdmFpbGFibGUgZnJvbSB0aGUgbm9kZVxuICAgIGVsLmNvbG9yID0gb2JqO1xuXG4gICAgcmV0dXJuIG9iajtcbn0pO1xuXHJcblxyXG5qU3VpdGVzLmNvbnRleHRtZW51ID0gKGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIG9iai5vcHRpb25zID0ge307XG5cbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIGl0ZW1zOiBudWxsLFxuICAgICAgICBvbmNsaWNrOiBudWxsLFxuICAgIH07XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIG9iamVjdFxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsYXNzIGRlZmluaXRpb25cbiAgICBlbC5jbGFzc0xpc3QuYWRkKCdqY29udGV4dG1lbnUnKTtcbiAgICAvLyBGb2N1c2FibGVcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzkwMCcpO1xuXG4gICAgLyoqXG4gICAgICogT3BlbiBjb250ZXh0bWVudVxuICAgICAqL1xuICAgIG9iai5vcGVuID0gZnVuY3Rpb24oZSwgaXRlbXMpIHtcbiAgICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgY29udGVudFxuICAgICAgICAgICAgb2JqLm9wdGlvbnMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpdGVtc1xuICAgICAgICAgICAgb2JqLmNyZWF0ZShpdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29vcmRpbmF0ZXNcbiAgICAgICAgaWYgKGUudGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgeCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgIHZhciB5ID0gZS5jbGllbnRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHggPSBlLng7XG4gICAgICAgICAgICB2YXIgeSA9IGUueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pjb250ZXh0bWVudS1mb2N1cycpO1xuICAgICAgICBlbC5mb2N1cygpO1xuXG4gICAgICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgeSArIHJlY3QuaGVpZ2h0KSB7XG4gICAgICAgICAgICBlbC5zdHlsZS50b3AgPSAoeSAtIHJlY3QuaGVpZ2h0KSArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IHggKyByZWN0LndpZHRoKSB7XG4gICAgICAgICAgICBpZiAoeCAtIHJlY3Qud2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9ICh4IC0gcmVjdC53aWR0aCkgKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgbWVudVxuICAgICAqL1xuICAgIG9iai5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdqY29udGV4dG1lbnUtZm9jdXMnKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnamNvbnRleHRtZW51LWZvY3VzJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgaXRlbXMgYmFzZWQgb24gdGhlIGRlY2xhcmVkIG9iamVjdGRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBMaXN0IG9mIG9iamVjdFxuICAgICAqL1xuICAgIG9iai5jcmVhdGUgPSBmdW5jdGlvbihpdGVtcykge1xuICAgICAgICAvLyBVcGRhdGUgY29udGVudFxuICAgICAgICBlbC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAvLyBBcHBlbmQgaXRlbXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLnR5cGUgJiYgaXRlbXNbaV0udHlwZSA9PSAnbGluZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1UZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgIGl0ZW1UZXh0LmlubmVySFRNTCA9IGl0ZW1zW2ldLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1Db250YWluZXIuY2xhc3NOYW1lID0gJ2pjb250ZXh0bWVudS1kaXNhYmxlZCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtc1tpXS5vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1Db250YWluZXIubWV0aG9kID0gaXRlbXNbaV0ub25jbGljaztcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbVRleHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLnNob3J0Y3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtU2hvcnRDdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TaG9ydEN1dC5pbm5lckhUTUwgPSBpdGVtc1tpXS5zaG9ydGN1dDtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChpdGVtU2hvcnRDdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaXRlbUNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uY2xpY2spID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5vbmNsaWNrKG9iaik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvYmouY2xvc2UoKTtcbiAgICAgICAgfSwgMTIwKTtcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgaXRlbXNcbiAgICBpZiAob2JqLm9wdGlvbnMuaXRlbXMpIHtcbiAgICAgICAgb2JqLmNyZWF0ZShvYmoub3B0aW9ucy5pdGVtcyk7XG4gICAgfVxuXG4gICAgZWwuY29udGV4dG1lbnUgPSBvYmo7XG5cbiAgICByZXR1cm4gb2JqO1xufSk7XG5cbmpTdWl0ZXMuY29udGV4dG1lbnUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgZm91bmRJZCA9IDA7XG5cbiAgICBmdW5jdGlvbiBwYXRoIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtY29udGV4dG1lbnUtaWQnKSkge1xuICAgICAgICAgICAgZm91bmRJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRleHRtZW51LWlkJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBwYXRoKGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXRoKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGZvdW5kSWQ7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGlkID0galN1aXRlcy5jb250ZXh0bWVudS5nZXRFbGVtZW50KGUudGFyZ2V0KTtcbiAgICBpZiAoaWQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGlkKTtcbiAgICAgICAgaWYgKCEgZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSlNVSVRFUzogQ29udGV4dG1lbnUgaWQgbm90IGZvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNvbnRleHRtZW51Lm9wZW4oZSk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcclxuXHJcbi8qKlxuICogRGlhbG9nIHYxLjAuMVxuICogQXV0aG9yOiBwYXVsLmhvZGVsQGdtYWlsLmNvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxob2RlbC9qdG9vbHNcbiAqL1xuIFxualN1aXRlcy5kaWFsb2cgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIG9iai5vcHRpb25zID0ge307XG5cbiAgICB2YXIgZGlhbG9nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGlhbG9nLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnOTAxJyk7XG4gICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdqZGlhbG9nJztcbiAgICBkaWFsb2cuaWQgPSAnZGlhbG9nJztcblxuICAgIHZhciBkaWFsb2dIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaWFsb2dIZWFkZXIuY2xhc3NOYW1lID0gJ2pkaWFsb2ctaGVhZGVyJztcblxuICAgIHZhciBkaWFsb2dUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpYWxvZ1RpdGxlLmNsYXNzTmFtZSA9ICdqZGlhbG9nLXRpdGxlJztcbiAgICBkaWFsb2dIZWFkZXIuYXBwZW5kQ2hpbGQoZGlhbG9nVGl0bGUpO1xuXG4gICAgdmFyIGRpYWxvZ01lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaWFsb2dNZXNzYWdlLmNsYXNzTmFtZSA9ICdqZGlhbG9nLW1lc3NhZ2UnO1xuICAgIGRpYWxvZ0hlYWRlci5hcHBlbmRDaGlsZChkaWFsb2dNZXNzYWdlKTtcblxuICAgIHZhciBkaWFsb2dGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaWFsb2dGb290ZXIuY2xhc3NOYW1lID0gJ2pkaWFsb2ctZm9vdGVyJztcblxuICAgIHZhciBkaWFsb2dDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaWFsb2dDb250YWluZXIuY2xhc3NOYW1lID0gJ2pkaWFsb2ctY29udGFpbmVyJztcbiAgICBkaWFsb2dDb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nSGVhZGVyKTtcbiAgICBkaWFsb2dDb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nRm9vdGVyKTtcblxuICAgIC8vIENvbmZpcm1cbiAgICB2YXIgZGlhbG9nQ29uZmlybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBkaWFsb2dDb25maXJtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkaWFsb2dDb25maXJtQnV0dG9uLnZhbHVlID0gb2JqLm9wdGlvbnMuY29uZmlybUxhYmVsO1xuICAgIGRpYWxvZ0NvbmZpcm1CdXR0b24udHlwZSA9ICdidXR0b24nO1xuICAgIGRpYWxvZ0NvbmZpcm1CdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uY29uZmlybSkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jb25maXJtKCk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmNsb3NlKCk7XG4gICAgfTtcbiAgICBkaWFsb2dDb25maXJtLmFwcGVuZENoaWxkKGRpYWxvZ0NvbmZpcm1CdXR0b24pO1xuICAgIGRpYWxvZ0Zvb3Rlci5hcHBlbmRDaGlsZChkaWFsb2dDb25maXJtKTtcblxuICAgIC8vIENhbmNlbFxuICAgIHZhciBkaWFsb2dDYW5jZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGlhbG9nQ2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkaWFsb2dDYW5jZWxCdXR0b24udmFsdWUgPSBvYmoub3B0aW9ucy5jYW5jZWxMYWJlbDtcbiAgICBkaWFsb2dDYW5jZWxCdXR0b24udHlwZSA9ICdidXR0b24nO1xuICAgIGRpYWxvZ0NhbmNlbEJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jYW5jZWwpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmNsb3NlKCk7XG4gICAgfVxuICAgIGRpYWxvZ0NhbmNlbC5hcHBlbmRDaGlsZChkaWFsb2dDYW5jZWxCdXR0b24pO1xuICAgIGRpYWxvZ0Zvb3Rlci5hcHBlbmRDaGlsZChkaWFsb2dDYW5jZWwpO1xuXG4gICAgLy8gRGlhbG9nXG4gICAgZGlhbG9nLmFwcGVuZENoaWxkKGRpYWxvZ0NvbnRhaW5lcik7XG5cbiAgICBvYmoub3BlbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgb2JqLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy50aXRsZSkge1xuICAgICAgICAgICAgZGlhbG9nVGl0bGUuaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMudGl0bGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqLm9wdGlvbnMubWVzc2FnZSkge1xuICAgICAgICAgICAgZGlhbG9nTWVzc2FnZS5pbm5lckhUTUwgPSBvYmoub3B0aW9ucy5tZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY29uZmlybUxhYmVsKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5jb25maXJtTGFiZWwgPSAnT0snO1xuICAgICAgICB9XG4gICAgICAgIGRpYWxvZ0NvbmZpcm1CdXR0b24udmFsdWUgPSBvYmoub3B0aW9ucy5jb25maXJtTGFiZWw7XG5cbiAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY2FuY2VsTGFiZWwpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLmNhbmNlbExhYmVsID0gJ0NhbmNlbCc7XG4gICAgICAgIH1cbiAgICAgICAgZGlhbG9nQ2FuY2VsQnV0dG9uLnZhbHVlID0gb2JqLm9wdGlvbnMuY2FuY2VsTGFiZWw7XG5cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLnR5cGUgPT0gJ2NvbmZpcm0nKSB7XG4gICAgICAgICAgICBkaWFsb2dDYW5jZWxCdXR0b24ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWFsb2dDYW5jZWxCdXR0b24ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGVsZW1lbnQgdG8gdGhlIGFwcFxuICAgICAgICBkaWFsb2cuc3R5bGUub3BhY2l0eSA9IDEwMDtcblxuICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIHBhZ2VcbiAgICAgICAgaWYgKGpTdWl0ZXMuZWwpIHtcbiAgICAgICAgICAgIGpTdWl0ZXMuZWwuYXBwZW5kQ2hpbGQoZGlhbG9nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGlhbG9nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvY3VzXG4gICAgICAgIGRpYWxvZy5mb2N1cygpO1xuXG4gICAgICAgIC8vIFNob3dcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRpYWxvZ0NvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gMTAwO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuXG4gICAgb2JqLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRpYWxvZy5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgZGlhbG9nQ29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGlhbG9nLnJlbW92ZSgpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH07XG5cbiAgICByZXR1cm4gb2JqO1xufSkoKTtcblxualN1aXRlcy5jb25maXJtID0gKGZ1bmN0aW9uKG1lc3NhZ2UsIG9uY29uZmlybSkge1xuICAgIGlmIChqU3VpdGVzLmdldFdpbmRvd1dpZHRoKCkgPCA4MDApIHtcbiAgICAgICAgalN1aXRlcy5kaWFsb2cub3Blbih7XG4gICAgICAgICAgICB0eXBlOiAnY29uZmlybScsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgdGl0bGU6ICdDb25maXJtYXRpb24nLFxuICAgICAgICAgICAgb25jb25maXJtOiBvbmNvbmZpcm0sXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICBvbmNvbmZpcm0oKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5qU3VpdGVzLmFsZXJ0ID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIGlmIChqU3VpdGVzLmdldFdpbmRvd1dpZHRoKCkgPCA4MDApIHtcbiAgICAgICAgalN1aXRlcy5kaWFsb2cub3Blbih7XG4gICAgICAgICAgICB0aXRsZTonQWxlcnQnLFxuICAgICAgICAgICAgbWVzc2FnZTptZXNzYWdlLFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydChtZXNzYWdlKTtcbiAgICB9XG59XG5cclxuXHJcbmpTdWl0ZXMuZHJvcGRvd24gPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcblxuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIGEgU0VMRUNUIHRhZywgY3JlYXRlIGEgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICBpZiAoZWwudGFnTmFtZSA9PSAnU0VMRUNUJykge1xuICAgICAgICB2YXIgcmV0ID0galN1aXRlcy5kcm9wZG93bi5leHRyYWN0RnJvbURvbShlbCwgb3B0aW9ucyk7XG4gICAgICAgIGVsID0gcmV0LmVsO1xuICAgICAgICBvcHRpb25zID0gcmV0Lm9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBtdWx0aXBsZTogZmFsc2UsXG4gICAgICAgIGF1dG9jb21wbGV0ZTogZmFsc2UsXG4gICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICBvcGVuZWQ6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgICBwb3NpdGlvbjogZmFsc2UsXG4gICAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgICBvbmxvYWQ6IG51bGwsXG4gICAgICAgIG9ub3BlbjogbnVsbCxcbiAgICAgICAgb25jbG9zZTogbnVsbCxcbiAgICAgICAgb25ibHVyOiBudWxsLFxuICAgIH07XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIG9iamVjdFxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdsb2JhbCBjb250YWluZXJcbiAgICBpZiAoISBqU3VpdGVzLmRyb3Bkb3duLmN1cnJlbnQpIHtcbiAgICAgICAgalN1aXRlcy5kcm9wZG93bi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDb250YWluZXJzXG4gICAgb2JqLml0ZW1zID0gW107XG4gICAgb2JqLmdyb3VwcyA9IFtdO1xuICAgIG9iai5zZWxlY3RlZCA9IFtdO1xuXG4gICAgLy8gQ3JlYXRlIGRyb3Bkb3duXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duJyk7XG4gXG4gICAgaWYgKG9iai5vcHRpb25zLnR5cGUgPT0gJ3NlYXJjaGJhcicpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLXNlYXJjaGJhcicpO1xuICAgIH0gZWxzZSBpZiAob2JqLm9wdGlvbnMudHlwZSA9PSAnbGlzdCcpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLWxpc3QnKTtcbiAgICB9IGVsc2UgaWYgKG9iai5vcHRpb25zLnR5cGUgPT0gJ3BpY2tlcicpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLXBpY2tlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChqU3VpdGVzLmdldFdpbmRvd1dpZHRoKCkgPCA4MDApIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pkcm9wZG93bi1waWNrZXInKTtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLnR5cGUgPSAncGlja2VyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy53aWR0aCkge1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gb2JqLm9wdGlvbnMud2lkdGg7XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUubWluV2lkdGggPSBvYmoub3B0aW9ucy53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pkcm9wZG93bi1kZWZhdWx0Jyk7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy50eXBlID0gJ2RlZmF1bHQnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGVhZGVyIGNvbnRhaW5lclxuICAgIHZhciBjb250YWluZXJIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXJIZWFkZXIuY2xhc3NOYW1lID0gJ2pkcm9wZG93bi1jb250YWluZXItaGVhZGVyJztcblxuICAgIC8vIEhlYWRlclxuICAgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGhlYWRlci5jbGFzc05hbWUgPSAnamRyb3Bkb3duLWhlYWRlcic7XG4gICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJsdXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaGVhZGVyLm9uYmx1ciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25ibHVyKGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnRhaW5lclxuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2pkcm9wZG93bi1jb250YWluZXInO1xuXG4gICAgLy8gRHJvcGRvd24gY29udGVudFxuICAgIHZhciBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGVudC5jbGFzc05hbWUgPSAnamRyb3Bkb3duLWNvbnRlbnQnO1xuXG4gICAgLy8gQ2xvc2UgYnV0dG9uXG4gICAgdmFyIGNsb3NlQnV0dG9uICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNsb3NlQnV0dG9uLmNsYXNzTmFtZSA9ICdqZHJvcGRvd24tY2xvc2UnO1xuICAgIGNsb3NlQnV0dG9uLmlubmVySFRNTCA9ICdEb25lJztcblxuICAgIC8vIENyZWF0ZSBiYWNrZHJvcFxuICAgIHZhciBiYWNrZHJvcCAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBiYWNrZHJvcC5jbGFzc05hbWUgPSAnamRyb3Bkb3duLWJhY2tkcm9wJztcblxuICAgIC8vIEF1dG9jb21wbGV0ZVxuICAgIGlmIChvYmoub3B0aW9ucy5hdXRvY29tcGxldGUgPT0gdHJ1ZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXV0b2NvbXBsZXRlJywgdHJ1ZSk7XG5cbiAgICAgICAgLy8gSGFuZGxlclxuICAgICAgICB2YXIga2V5VGltZXIgPSBudWxsO1xuICAgICAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoa2V5VGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoa2V5VGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG9iai5maW5kKGhlYWRlci52YWx1ZSk7XG4gICAgICAgICAgICAgICAga2V5VGltZXIgPSBudWxsO1xuICAgICAgICAgICAgfSwgNTAwKTtcblxuICAgICAgICAgICAgaWYgKCEgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZHJvcGRvd24tZm9jdXMnKSkge1xuICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID4gNjUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYWRlci5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJ3JlYWRvbmx5Jyk7XG4gICAgfVxuXG4gICAgLy8gUGxhY2UgaG9sZGVyXG4gICAgaWYgKCEgb2JqLm9wdGlvbnMucGxhY2Vob2xkZXIgJiYgZWwuZ2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicpKSB7XG4gICAgICAgIG9iai5vcHRpb25zLnBsYWNlaG9sZGVyID0gZWwuZ2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicpO1xuICAgIH1cblxuICAgIGlmIChvYmoub3B0aW9ucy5wbGFjZWhvbGRlcikge1xuICAgICAgICBoZWFkZXIuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIG9iai5vcHRpb25zLnBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICAvLyBBcHBlbmQgZWxlbWVudHNcbiAgICBjb250YWluZXJIZWFkZXIuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcbiAgICBpZiAob2JqLm9wdGlvbnMudHlwZSA9PSAnc2VhcmNoYmFyJykge1xuICAgICAgICBjb250YWluZXJIZWFkZXIuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgfVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICBlbC5hcHBlbmRDaGlsZChjb250YWluZXJIZWFkZXIpO1xuICAgIGVsLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgZWwuYXBwZW5kQ2hpbGQoYmFja2Ryb3ApO1xuXG4gICAgLyoqXG4gICAgICogSW5pdCBkcm9wZG93blxuICAgICAqL1xuICAgIG9iai5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy51cmwpIHtcbiAgICAgICAgICAgIGpTdWl0ZXMuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0RGF0YShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0VmFsdWUob2JqLm9wdGlvbnMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25sb2FkIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmxvYWQpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmxvYWQoZWwsIG9iaiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNldCBkYXRhXG4gICAgICAgICAgICBvYmouc2V0RGF0YSgpO1xuICAgICAgICAgICAgLy8gU2V0IHZhbHVlXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9iai5zZXRWYWx1ZShvYmoub3B0aW9ucy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPbmxvYWRcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25sb2FkKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25sb2FkKGVsLCBvYmosIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3BlbiBkcm9wZG93blxuICAgICAgICBpZiAob2JqLm9wdGlvbnMub3BlbmVkID09IHRydWUpIHtcbiAgICAgICAgICAgIG9iai5vcGVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouZ2V0VXJsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvYmoub3B0aW9ucy51cmw7XG4gICAgfVxuXG4gICAgb2JqLnNldFVybCA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICBvYmoub3B0aW9ucy51cmwgPSB1cmw7XG5cbiAgICAgICAgalN1aXRlcy5hamF4KHtcbiAgICAgICAgICAgIHVybDogb2JqLm9wdGlvbnMudXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBpdGVtXG4gICAgICovXG4gICAgb2JqLmNyZWF0ZUl0ZW0gPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8vIENyZWF0ZSBpdGVtXG4gICAgICAgIHZhciBpdGVtID0ge307XG4gICAgICAgIGl0ZW0uZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpdGVtLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2pkcm9wZG93bi1pdGVtJztcbiAgICAgICAgaXRlbS52YWx1ZSA9IGRhdGEuaWQ7XG4gICAgICAgIGl0ZW0udGV4dCA9IGRhdGEubmFtZTtcbiAgICAgICAgaXRlbS50ZXh0TG93ZXJDYXNlID0gJycgKyBkYXRhLm5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAvLyBJbWFnZVxuICAgICAgICBpZiAoZGF0YS5pbWFnZSkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICBpbWFnZS5jbGFzc05hbWUgPSAnamRyb3Bkb3duLWltYWdlJztcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IGRhdGEuaW1hZ2U7XG4gICAgICAgICAgICBpZiAoISBkYXRhLnRpdGxlKSB7XG4gICAgICAgICAgICAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKCdqZHJvcGRvd24taW1hZ2Utc21hbGwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0uZWxlbWVudC5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgY29udGVudFxuICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBub2RlLmNsYXNzTmFtZSA9ICdqZHJvcGRvd24tZGVzY3JpcHRpb24nO1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IGRhdGEubmFtZTtcblxuICAgICAgICAvLyBUaXRsZVxuICAgICAgICBpZiAoZGF0YS50aXRsZSkge1xuICAgICAgICAgICAgdmFyIHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aXRsZS5jbGFzc05hbWUgPSAnamRyb3Bkb3duLXRpdGxlJztcbiAgICAgICAgICAgIHRpdGxlLmlubmVySFRNTCA9IGRhdGEudGl0bGU7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBub2RlIHRvIGl0ZW1cbiAgICAgICAgaXRlbS5lbGVtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIG9iai5zZXREYXRhID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAvLyBVcGRhdGUgZGF0YVxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMuZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEYXRhXG4gICAgICAgIHZhciBkYXRhID0gb2JqLm9wdGlvbnMuZGF0YTtcblxuICAgICAgICAvLyBSZW1vdmUgY29udGVudCBmcm9tIHRoZSBET01cbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRlbnQpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY29udGVudCBjb250YWluZXIgaXMgYmxhbmtcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAvLyBSZXNldFxuICAgICAgICBvYmoucmVzZXQoKTtcblxuICAgICAgICAvLyBSZXNldCBpdGVtc1xuICAgICAgICBvYmouaXRlbXMgPSBbXTtcblxuICAgICAgICAvLyBIZWxwZXJzXG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICB2YXIgZ3JvdXBzID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIGVsZW1lbnRzXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gUHJlcGFyZSBkYXRhXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBDb21wYXRpYmlsaXR5XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihkYXRhW2ldKSAhPSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5kYXRhW2ldID0gZGF0YVtpXSA9IHsgaWQ6IGRhdGFbaV0sIG5hbWU6IGRhdGFbaV0gfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGdyb3Vwc1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIGdyb3Vwc1tkYXRhW2ldLmdyb3VwXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBzW2RhdGFbaV0uZ3JvdXBdID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBzW2RhdGFbaV0uZ3JvdXBdLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdyb3Vwc1xuICAgICAgICAgICAgdmFyIGdyb3VwTmFtZXMgPSBPYmplY3Qua2V5cyhncm91cHMpO1xuXG4gICAgICAgICAgICAvLyBBcHBlbmQgZ3JvdXBzIGluIGNhc2UgZXhpc3RzXG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdyb3VwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2xhc3NOYW1lID0gJ2pkcm9wZG93bi1ncm91cCc7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdyb3VwIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBncm91cE5hbWUuY2xhc3NOYW1lID0gJ2pkcm9wZG93bi1ncm91cC1uYW1lJztcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBOYW1lLmlubmVySFRNTCA9IGdyb3VwTmFtZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIC8vIEdyb3VwIGFycm93XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cEFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgICAgICAgICBncm91cEFycm93LmNsYXNzTmFtZSA9ICdqZHJvcGRvd24tZ3JvdXAtYXJyb3cgamRyb3Bkb3duLWdyb3VwLWFycm93LWRvd24nO1xuICAgICAgICAgICAgICAgICAgICBncm91cE5hbWUuYXBwZW5kQ2hpbGQoZ3JvdXBBcnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdyb3VwIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb250ZW50LmNsYXNzTmFtZSA9ICdqZHJvcGRvd24tZ3JvdXAtaXRlbXMnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdyb3Vwc1tncm91cE5hbWVzW2ldXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBvYmouY3JlYXRlSXRlbShkYXRhW2dyb3Vwc1tncm91cE5hbWVzW2ldXVtqXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb250ZW50LmFwcGVuZENoaWxkKGl0ZW0uZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gR3JvdXAgaXRlbnNcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kQ2hpbGQoZ3JvdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kQ2hpbGQoZ3JvdXBBcnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZENoaWxkKGdyb3VwQ29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBvYmouY3JlYXRlSXRlbShkYXRhW2l0ZW1zW2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGl0ZW0uZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIEluZGV4ZXNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb2JqLml0ZW1zW2ldLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZS1pbnNlcnQgdGhlIGNvbnRlbnQgdG8gdGhlIGNvbnRhaW5lclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfVxuXG4gICAgb2JqLmdldFRleHQgPSBmdW5jdGlvbihhc0FycmF5KSB7XG4gICAgICAgIC8vIFJlc3VsdFxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIC8vIEFwcGVuZCBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLnNlbGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zW29iai5zZWxlY3RlZFtpXV0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvYmouaXRlbXNbb2JqLnNlbGVjdGVkW2ldXS50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCc7ICcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmdldFZhbHVlID0gZnVuY3Rpb24oYXNBcnJheSkge1xuICAgICAgICAvLyBSZXN1bHRcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAvLyBBcHBlbmQgb3B0aW9uc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5zZWxlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9iai5pdGVtc1tvYmouc2VsZWN0ZWRbaV1dKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2JqLml0ZW1zW29iai5zZWxlY3RlZFtpXV0udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFzQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJzsnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9iai5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIFJlbW92ZSB2YWx1ZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouc2VsZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9iai5pdGVtc1tvYmouc2VsZWN0ZWRbaV1dLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnamRyb3Bkb3duLXNlbGVjdGVkJylcbiAgICAgICAgfSBcblxuICAgICAgICAvLyBSZXNldCBzZWxlY3RlZFxuICAgICAgICBvYmouc2VsZWN0ZWQgPSBbXTtcblxuICAgICAgICAvLyBTZXQgdmFsdWVzXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLml0ZW1zW2ldLnZhbHVlID09IHZhbHVlW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZWxlY3RlZC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZpc3VhbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaV0uZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdqZHJvcGRvd24tc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5pdGVtc1tpXS52YWx1ZSA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlbGVjdGVkLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWaXN1YWwgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaV0uZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdqZHJvcGRvd24tc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBsYWJlbHNcbiAgICAgICAgb2JqLnVwZGF0ZUxhYmVsKCk7XG4gICAgfVxuXG4gICAgb2JqLnNlbGVjdEluZGV4ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgLy8gT25seSBzZWxlY3QgdGhvc2UgZXhpc3RpbmcgZWxlbWVudHNcbiAgICAgICAgaWYgKG9iai5pdGVtcyAmJiBvYmouaXRlbXNbaW5kZXhdKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpbmRleCA9IHBhcnNlSW50KGluZGV4KTtcbiAgICAgICAgICAgIC8vIEN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBvYmouZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIHZhciBvbGRMYWJlbCA9IG9iai5nZXRUZXh0KCk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJzb3Igc3R5bGVcbiAgICAgICAgICAgIGlmIChvYmouY3VycmVudEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmouaXRlbXNbb2JqLmN1cnJlbnRJbmRleF0uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdqZHJvcGRvd24tY3Vyc29yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgY3Vyc29yIHN0eWxlXG4gICAgICAgICAgICBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLWN1cnNvcicpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgICAgICBvYmouY3VycmVudEluZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgICAgIC8vIEZvY3VzIGJlaGF2aW91clxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAvLyBVbnNlbGVjdCBvcHRpb25cbiAgICAgICAgICAgICAgICBpZiAob2JqLml0ZW1zW2luZGV4XS5lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLXNlbGVjdGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlc2V0U2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBvYmoucmVzZXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc2VsZWN0ZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgc2VsZWN0ZWQgbGlzdFxuICAgICAgICAgICAgICAgICAgICBvYmouc2VsZWN0ZWQucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsb3NlXG4gICAgICAgICAgICAgICAgICAgIG9iai5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIG9wdGlvblxuICAgICAgICAgICAgICAgIGlmIChvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZHJvcGRvd24tc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnamRyb3Bkb3duLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIHNlbGVjdGVkIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4VG9SZW1vdmUgPSBvYmouc2VsZWN0ZWQuaW5kZXhPZihpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNlbGVjdGVkLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgc2VsZWN0ZWQgbGlzdFxuICAgICAgICAgICAgICAgICAgICBvYmouc2VsZWN0ZWQucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGxhYmVscyBmb3IgbXVsdGlwbGUgZHJvcGRvd25cbiAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5hdXRvY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVwZGF0ZUxhYmVsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gb2JqLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB2YXIgbmV3TGFiZWwgPSBvYmouZ2V0VGV4dCgpO1xuXG4gICAgICAgICAgICAvLyBFdmVudHNcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2UpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmNoYW5nZShlbCwgaW5kZXgsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgb2xkTGFiZWwsIG5ld0xhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9iai5zZWxlY3RJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpZiAoalN1aXRlcy5kcm9wZG93bi5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmouc2VsZWN0SW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JqLmZpbmQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgLy8gRm9yY2UgbG93ZXJjYXNlXG4gICAgICAgIHZhciBzdHIgPSBzdHIgPyBzdHIudG9Mb3dlckNhc2UoKSA6IG51bGw7XG5cbiAgICAgICAgLy8gQXBwZW5kIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzdHIgPT0gbnVsbCB8fCBvYmouaXRlbXNbaV0udGV4dExvd2VyQ2FzZS5pbmRleE9mKHN0cikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvYmouaXRlbXNbaV0uZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvYmouc2VsZWN0ZWQuaW5kZXhPZihpKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBvYmouaXRlbXNbaV0uZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5pdGVtc1tpXS5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbnVtVmlzaWJsZUl0ZW1zID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgICAgICAgIHZhciB2aXNpYmxlID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbXNbal0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2aXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGlkZSBncm91cHNcbiAgICAgICAgLypmb3IgKHZhciBpID0gMDsgaSA8IG9iai5ncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChudW1WaXNpYmxlSXRlbXMob2JqLmdyb3Vwc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCcuamRyb3Bkb3duLWl0ZW0nKSkpIHtcbiAgICAgICAgICAgICAgICBvYmouZ3JvdXBzW2ldLmNoaWxkcmVuWzBdLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLmdyb3Vwc1tpXS5jaGlsZHJlblswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9Ki9cbiAgICB9XG5cbiAgICBvYmoudXBkYXRlTGFiZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXBkYXRlIGxhYmVsXG4gICAgICAgIGhlYWRlci52YWx1ZSA9IG9iai5nZXRUZXh0KCk7XG4gICAgfVxuXG4gICAgb2JqLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGpTdWl0ZXMuZHJvcGRvd24uY3VycmVudCAhPSBlbCkge1xuICAgICAgICAgICAgaWYgKGpTdWl0ZXMuZHJvcGRvd24uY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGpTdWl0ZXMuZHJvcGRvd24uY3VycmVudC5kcm9wZG93bi5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalN1aXRlcy5kcm9wZG93bi5jdXJyZW50ID0gZWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb2N1c1xuICAgICAgICBpZiAoISBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1mb2N1cycpKSB7XG4gICAgICAgICAgICAvLyBBZGQgZm9jdXNcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pkcm9wZG93bi1mb2N1cycpO1xuXG4gICAgICAgICAgICAvLyBBbmltYXRpb25cbiAgICAgICAgICAgIGlmIChqU3VpdGVzLmdldFdpbmRvd1dpZHRoKCkgPCA4MDApIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudHlwZSA9PSBudWxsIHx8IG9iai5vcHRpb25zLnR5cGUgPT0gJ3BpY2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5zbGlkZUJvdHRvbShjb250YWluZXIsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlsdGVyXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuYXV0b2NvbXBsZXRlID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWRvIHNlYXJjaFxuICAgICAgICAgICAgICAgIG9iai5maW5kKCk7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgc2VhcmNoIGZpZWxkXG4gICAgICAgICAgICAgICAgaGVhZGVyLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgaGVhZGVyLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBjdXJzb3IgZm9yIHRoZSBmaXJzdCBvciBmaXJzdCBzZWxlY3RlZCBlbGVtZW50XG4gICAgICAgICAgICB2YXIgY3Vyc29yID0gKG9iai5zZWxlY3RlZCAmJiBvYmouc2VsZWN0ZWRbMF0pID8gb2JqLnNlbGVjdGVkWzBdIDogMDtcbiAgICAgICAgICAgIG9iai51cGRhdGVDdXJzb3IoY3Vyc29yKTtcblxuICAgICAgICAgICAgLy8gQ29udGFpbmVyIFNpemVcbiAgICAgICAgICAgIGlmICghIG9iai5vcHRpb25zLnR5cGUgfHwgb2JqLm9wdGlvbnMudHlwZSA9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdENvbnRhaW5lciA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgcmVjdC5ib3R0b20gKyByZWN0Q29udGFpbmVyLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgLSByZWN0LnRvcCApICsgMSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUudG9wID0gcmVjdC5ib3R0b20gKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gcmVjdC5sZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgcmVjdC5ib3R0b20gKyByZWN0Q29udGFpbmVyLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9IHJlY3QuaGVpZ2h0ICsgMSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUudG9wID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUubWluV2lkdGggPSByZWN0LndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV2ZW50c1xuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9ub3BlbikgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25vcGVuKGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9iai5jbG9zZSA9IGZ1bmN0aW9uKGlnbm9yZUV2ZW50cykge1xuICAgICAgICBpZiAoalN1aXRlcy5kcm9wZG93bi5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgY29udHJvbGxlclxuICAgICAgICAgICAgalN1aXRlcy5kcm9wZG93bi5jdXJyZW50ID0gbnVsbFxuICAgICAgICAgICAgLy8gUmVtb3ZlIGN1cnNvclxuICAgICAgICAgICAgb2JqLnJlc2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbGFiZWxzXG4gICAgICAgICAgICBvYmoudXBkYXRlTGFiZWwoKTtcbiAgICAgICAgICAgIC8vIEV2ZW50c1xuICAgICAgICAgICAgaWYgKCEgaWdub3JlRXZlbnRzICYmIHR5cGVvZihvYmoub3B0aW9ucy5vbmNsb3NlKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jbG9zZShlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBCbHVyXG4gICAgICAgICAgICBpZiAoaGVhZGVyLmJsdXIpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXIuYmx1cigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZvY3VzXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdqZHJvcGRvd24tZm9jdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmouZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgcG9zaXRpb24gY3Vyc29yXG4gICAgICovXG4gICAgb2JqLnVwZGF0ZUN1cnNvciA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIC8vIFNldCBuZXcgY3Vyc29yXG4gICAgICAgIGlmIChvYmouaXRlbXMgJiYgb2JqLml0ZW1zW2luZGV4XSAmJiBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGN1cnNvclxuICAgICAgICAgICAgb2JqLnJlc2V0Q3Vyc29yKCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBuZXcgY3Vyc29yXG4gICAgICAgICAgICBvYmouaXRlbXNbaW5kZXhdLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLWN1cnNvcicpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcG9zaXRpb25cbiAgICAgICAgICAgIG9iai5jdXJyZW50SW5kZXggPSBwYXJzZUludChpbmRleCk7XG4gICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2Nyb2xsIHRvIHRoZSBjdXJzb3IgZWxlbWVudFxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGNvbnRlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBvYmouaXRlbXNbb2JqLmN1cnJlbnRJbmRleF0uZWxlbWVudDtcbiAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gZWxlbWVudC5vZmZzZXRUb3AgLSBlbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnQuY2xpZW50VG9wIC0gOTU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBjdXJzb3JcbiAgICAgKi9cbiAgICBvYmoucmVzZXRDdXJzb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGN1cnJlbnQgY3Vyc29yXG4gICAgICAgIGlmIChvYmouY3VycmVudEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB2aXN1YWwgY3Vyc29yXG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zICYmIG9iai5pdGVtc1tvYmouY3VycmVudEluZGV4XSkge1xuICAgICAgICAgICAgICAgIG9iai5pdGVtc1tvYmouY3VycmVudEluZGV4XS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2pkcm9wZG93bi1jdXJzb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlc2V0IGN1cnNvclxuICAgICAgICAgICAgb2JqLmN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBjdXJzb3JcbiAgICAgKi9cbiAgICBvYmoucmVzZXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVbnNlbGVjdGVkIGFsbFxuICAgICAgICBpZiAob2JqLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdmlzdWFsIHNlbGVjdGlvblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmouc2VsZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLml0ZW1zW29iai5zZWxlY3RlZFtpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLml0ZW1zW29iai5zZWxlY3RlZFtpXV0uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdqZHJvcGRvd24tc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXNldCBjdXJyZW50IHNlbGVjdGVkIGl0ZW1zXG4gICAgICAgICAgICBvYmouc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IGN1cnNvciBhbmQgc2VsZWN0ZWQgaXRlbXNcbiAgICAgKi9cbiAgICBvYmoucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gUmVzZXQgY3Vyc29yXG4gICAgICAgIG9iai5yZXNldEN1cnNvcigpO1xuXG4gICAgICAgIC8vIFJlc2V0IHNlbGVjdGVkXG4gICAgICAgIG9iai5yZXNldFNlbGVjdGVkKCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGxhYmVsc1xuICAgICAgICBvYmoudXBkYXRlTGFiZWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJzdCB2aXNpYmxlIGl0ZW1cbiAgICAgKi9cbiAgICBvYmouZmlyc3RWaXNpYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuZXdJbmRleCA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zW2ldLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZUN1cnNvcihuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTmF2aWdhdGlvblxuICAgICAqL1xuICAgIG9iai5maXJzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmV3SW5kZXggPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBpID0gb2JqLmN1cnJlbnRJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zW2ldLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZUN1cnNvcihuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgb2JqLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IG9iai5jdXJyZW50SW5kZXggKyAxOyBpIDwgb2JqLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zW2ldLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZUN1cnNvcihuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgb2JqLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IG9iai5jdXJyZW50SW5kZXggKyAxOyBpIDwgb2JqLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqLml0ZW1zW2ldLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnVwZGF0ZUN1cnNvcihuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgb2JqLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IG9iai5jdXJyZW50SW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKG9iai5pdGVtc1tpXS5lbGVtZW50LnN0eWxlLmRpc3BsYXkgIT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgbmV3SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0luZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai51cGRhdGVDdXJzb3IobmV3SW5kZXgpO1xuICAgIH1cblxuICAgIGlmICghIGpTdWl0ZXMuZHJvcGRvd24uaGFzRXZlbnRzKSB7XG4gICAgICAgIGlmICgnb250b3VjaHNlbmQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzZW5kJywgalN1aXRlcy5kcm9wZG93bi5tb3VzZXVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBqU3VpdGVzLmRyb3Bkb3duLm1vdXNldXApO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBqU3VpdGVzLmRyb3Bkb3duLm9ua2V5ZG93bik7XG5cbiAgICAgICAgalN1aXRlcy5kcm9wZG93bi5oYXNFdmVudHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFN0YXJ0IGRyb3Bkb3duXG4gICAgb2JqLmluaXQoKTtcblxuICAgIC8vIEtlZXAgb2JqZWN0IGF2YWlsYWJsZSBmcm9tIHRoZSBub2RlXG4gICAgZWwuZHJvcGRvd24gPSBvYmo7XG5cbiAgICByZXR1cm4gb2JqO1xufSk7XG5cbmpTdWl0ZXMuZHJvcGRvd24uaGFzRXZlbnRzID0gZmFsc2U7XG5cbmpTdWl0ZXMuZHJvcGRvd24ubW91c2V1cCA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGpTdWl0ZXMuZ2V0RWxlbWVudChlLnRhcmdldCwgJ2pkcm9wZG93bicpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBkcm9wZG93biA9IGVsZW1lbnQuZHJvcGRvd247XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1oZWFkZXInKSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZHJvcGRvd24tZm9jdXMnKSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLWRlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1ncm91cC1uYW1lJykpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGUudGFyZ2V0Lm5leHRTaWJsaW5nLmNoaWxkcmVuO1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lm5leHRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgIT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNbaV0uc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLnNlbGVjdEl0ZW0oaXRlbXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLWdyb3VwLWFycm93JykpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1ncm91cC1hcnJvdy1kb3duJykpIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdqZHJvcGRvd24tZ3JvdXAtYXJyb3ctZG93bicpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2pkcm9wZG93bi1ncm91cC1hcnJvdy11cCcpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUubmV4dFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnamRyb3Bkb3duLWdyb3VwLWFycm93LXVwJyk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnamRyb3Bkb3duLWdyb3VwLWFycm93LWRvd24nKTtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLm5leHRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1pdGVtJykpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnNlbGVjdEl0ZW0oZS50YXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLWltYWdlJykpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnNlbGVjdEluZGV4KGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpO1xuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLWRlc2NyaXB0aW9uJykpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnNlbGVjdEluZGV4KGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpO1xuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnamRyb3Bkb3duLXRpdGxlJykpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnNlbGVjdEluZGV4KGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqZHJvcGRvd24tY2xvc2UnKSB8fCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pkcm9wZG93bi1iYWNrZHJvcCcpKSB7XG4gICAgICAgICAgICAvLyBDbG9zZVxuICAgICAgICAgICAgZHJvcGRvd24uY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoalN1aXRlcy5kcm9wZG93bi5jdXJyZW50KSB7XG4gICAgICAgICAgICBqU3VpdGVzLmRyb3Bkb3duLmN1cnJlbnQuZHJvcGRvd24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLyBLZXlkb3duIGNvbnRyb2xzXG5qU3VpdGVzLmRyb3Bkb3duLm9ua2V5ZG93biA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoalN1aXRlcy5kcm9wZG93bi5jdXJyZW50KSB7XG4gICAgICAgIC8vIEVsZW1lbnRcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBqU3VpdGVzLmRyb3Bkb3duLmN1cnJlbnQuZHJvcGRvd247XG4gICAgICAgIC8vIEluZGV4XG4gICAgICAgIHZhciBpbmRleCA9IGVsZW1lbnQuY3VycmVudEluZGV4O1xuXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDEzIHx8IGUud2hpY2ggPT0gMjcgfHwgZS53aGljaCA9PSAzNSB8fCBlLndoaWNoID09IDM2IHx8IGUud2hpY2ggPT0gMzggfHwgZS53aGljaCA9PSA0MCkge1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgY3Vyc29yXG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZWxlY3RJbmRleChpbmRleClcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmlyc3RWaXNpYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnByZXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5maXJzdFZpc2libGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCArIDEgPCBlbGVtZW50Lm9wdGlvbnMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDM2KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmlyc3QoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5sYXN0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxualN1aXRlcy5kcm9wZG93bi5leHRyYWN0RnJvbURvbSA9IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG4gICAgLy8gS2VlcCByZWZlcmVuY2VcbiAgICB2YXIgc2VsZWN0ID0gZWw7XG4gICAgaWYgKCEgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIC8vIFByZXBhcmUgY29uZmlndXJhdGlvblxuICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ211bHRpcGxlJykgJiYgKCEgb3B0aW9ucyB8fCBvcHRpb25zLm11bHRpcGxlID09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgb3B0aW9ucy5tdWx0aXBsZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykgJiYgKCEgb3B0aW9ucyB8fCBvcHRpb25zLnBsYWNlaG9sZGVyID09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IGVsLmdldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInKTtcbiAgICB9XG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hdXRvY29tcGxldGUnKSAmJiAoISBvcHRpb25zIHx8IG9wdGlvbnMuYXV0b2NvbXBsZXRlID09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgb3B0aW9ucy5hdXRvY29tcGxldGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoISBvcHRpb25zIHx8IG9wdGlvbnMud2lkdGggPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMud2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICB9XG4gICAgaWYgKGVsLnZhbHVlICYmICghIG9wdGlvbnMgfHwgb3B0aW9ucy52YWx1ZSA9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG9wdGlvbnMudmFsdWUgPSBlbC52YWx1ZTtcbiAgICB9XG4gICAgaWYgKCEgb3B0aW9ucyB8fCBvcHRpb25zLmRhdGEgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoZWwuY2hpbGRyZW5bal0udGFnTmFtZSA9PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZHJlbltqXS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZWwuY2hpbGRyZW5bal0uY2hpbGRyZW5baV0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbC5jaGlsZHJlbltqXS5jaGlsZHJlbltpXS5pbm5lckhUTUwsXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZWwuY2hpbGRyZW5bal0uZ2V0QXR0cmlidXRlKCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsLmNoaWxkcmVuW2pdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbC5jaGlsZHJlbltqXS5pbm5lckhUTUwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEgb3B0aW9ucyB8fCBvcHRpb25zLm9uY2hhbmdlID09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLm9uY2hhbmdlID0gZnVuY3Rpb24oYSxiLGMsZCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaXRlbXNbYl0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqZHJvcGRvd24tc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Qub3B0aW9uc1tiXS5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Lm9wdGlvbnNbYl0ucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0LnZhbHVlID0gZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDcmVhdGUgRElWXG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgZWwpO1xuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgZWwgPSBkaXY7XG5cbiAgICByZXR1cm4geyBlbDplbCwgb3B0aW9uczpvcHRpb25zIH07XG59XHJcblxyXG4vKipcbiAqIChjKSBqVG9vbHMgVGV4dCBFZGl0b3JcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsaG9kZWwvanRvb2xzXG4gKlxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XG4gKiBAZGVzY3JpcHRpb246IElubGluZSByaWNodGV4dCBlZGl0b3JcbiAqL1xuXG5qU3VpdGVzLmVkaXRvciA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBvYmoub3B0aW9ucyA9IHt9O1xuXG4gICAgLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAvLyBJbml0aWFsIEhUTUwgY29udGVudFxuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgLy8gSW5pdGlhbCBzbmlwcGV0XG4gICAgICAgIHNuaXBwZXQ6IG51bGwsXG4gICAgICAgIC8vIEFkZCB0b29sYmFyXG4gICAgICAgIHRvb2xiYXI6IG51bGwsXG4gICAgICAgIC8vIE1heCBoZWlnaHRcbiAgICAgICAgbWF4SGVpZ2h0OiBudWxsLFxuICAgICAgICAvLyBXZWJzaXRlIHBhcnNlciBpcyB0byByZWFkIHdlYnNpdGVzIGFuZCBpbWFnZXMgZnJvbSBjcm9zcyBkb21haW5cbiAgICAgICAgcmVtb3RlUGFyc2VyOiBudWxsLFxuICAgICAgICAvLyBLZXkgZnJvbSB5b3V0dWJlIHRvIHJlYWQgcHJvcGVydGllcyBmcm9tIFVSTFxuICAgICAgICB5b3V0dWJlS2V5OiBudWxsLFxuICAgICAgICAvLyBVc2VyIGxpc3RcbiAgICAgICAgdXNlclNlYXJjaDogbnVsbCxcbiAgICAgICAgLy8gUGFyc2UgVVJMXG4gICAgICAgIHBhcnNlVVJMOiBmYWxzZSxcbiAgICAgICAgLy8gQWNjZXB0IGRyb3AgZmlsZXNcbiAgICAgICAgZHJvcFpvbmU6IHRydWUsXG4gICAgICAgIGRyb3BBc0F0dGFjaG1lbnQ6IGZhbHNlLFxuICAgICAgICBhY2NlcHRJbWFnZXM6IHRydWUsXG4gICAgICAgIGFjY2VwdEZpbGVzOiBmYWxzZSxcbiAgICAgICAgbWF4RmlsZVNpemU6IDUwMDAwMDAsIFxuICAgICAgICAvLyBCb3JkZXJcbiAgICAgICAgYm9yZGVyOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiB0cnVlLFxuICAgICAgICBmb2N1czogZmFsc2UsXG4gICAgICAgIC8vIEV2ZW50c1xuICAgICAgICBvbmNsaWNrOiBudWxsLFxuICAgICAgICBvbmZvY3VzOiBudWxsLFxuICAgICAgICBvbmJsdXI6IG51bGwsXG4gICAgICAgIG9ubG9hZDogbnVsbCxcbiAgICAgICAgb25lbnRlcjogbnVsbCxcbiAgICAgICAgb25rZXl1cDogbnVsbCxcbiAgICAgICAgb25rZXlkb3duOiBudWxsLFxuICAgIH07XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIG9iamVjdFxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByaXZhdGUgY29udHJvbGxlcnNcbiAgICB2YXIgaW1hZ2VSZXNpemUgPSAwO1xuICAgIHZhciBlZGl0b3JUaW1lciA9IG51bGw7XG4gICAgdmFyIGVkaXRvckFjdGlvbiA9IG51bGw7XG5cbiAgICAvLyBNYWtlIHN1cmUgZWxlbWVudCBpcyBlbXB0eVxuICAgIGVsLmlubmVySFRNTCA9ICcnO1xuXG4gICAgLy8gUHJlcGFyZSBjb250YWluZXJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKCdqZWRpdG9yLWNvbnRhaW5lcicpO1xuXG4gICAgLy8gUGFkZGluZ1xuICAgIGlmIChvYmoub3B0aW9ucy5wYWRkaW5nID09IHRydWUpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnamVkaXRvci1wYWRkaW5nJyk7XG4gICAgfVxuXG4gICAgLy8gQm9yZGVyXG4gICAgaWYgKG9iai5vcHRpb25zLmJvcmRlciA9PSBmYWxzZSkge1xuICAgICAgICBlbC5zdHlsZS5ib3JkZXIgPSAnMHB4JztcbiAgICB9XG5cbiAgICAvLyBTbmlwcGV0XG4gICAgdmFyIHNuaXBwZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzbmlwcGV0LmNsYXNzTmFtZSA9ICdzbmlwcGV0JztcbiAgICBzbmlwcGV0LnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xuXG4gICAgLy8gVG9vbGJhclxuICAgIHZhciB0b29sYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdG9vbGJhci5jbGFzc05hbWUgPSAnamVkaXRvci10b29sYmFyJztcblxuICAgIC8vIENyZWF0ZSBlZGl0b3JcbiAgICB2YXIgZWRpdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWRpdG9yLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XG4gICAgZWRpdG9yLnNldEF0dHJpYnV0ZSgnc3BlbGxjaGVjaycsIGZhbHNlKTtcbiAgICBlZGl0b3IuY2xhc3NOYW1lID0gJ2plZGl0b3InO1xuXG4gICAgLy8gTWF4IGhlaWdodFxuICAgIGlmIChvYmoub3B0aW9ucy5tYXhIZWlnaHQpIHtcbiAgICAgICAgZWRpdG9yLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJztcbiAgICAgICAgZWRpdG9yLnN0eWxlLm1heEhlaWdodCA9IG9iai5vcHRpb25zLm1heEhlaWdodDtcbiAgICB9XG5cbiAgICAvLyBTZXQgZWRpdG9yIGluaXRpYWwgdmFsdWVcbiAgICBpZiAob2JqLm9wdGlvbnMudmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqLm9wdGlvbnMudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZWwuaW5uZXJIVE1MID8gZWwuaW5uZXJIVE1MIDogJyc7IFxuICAgIH1cblxuICAgIGlmICghIHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICc8YnI+JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IGltYWdlcyBmcm9tIGEgSFRNTCBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgZXh0cmFjdEltYWdlRnJvbUh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0ZW1wIGVsZW1lbnRcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgICAvLyBFeHRyYWN0IGltYWdlc1xuICAgICAgICB2YXIgaW1nID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuXG4gICAgICAgIGlmIChpbWcubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGltZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG9iai5hZGRJbWFnZShpbWdbaV0uc3JjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydCBub2RlIGF0IGNhcmV0XG4gICAgICovXG4gICAgdmFyIGluc2VydE5vZGVBdENhcmV0ID0gZnVuY3Rpb24obmV3Tm9kZSkge1xuICAgICAgICB2YXIgc2VsLCByYW5nZTtcblxuICAgICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHNlbC5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUZXh0ID0gcmFuZ2UudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUobmV3Tm9kZSk7IFxuICAgICAgICAgICAgICAgIC8vIG1vdmUgdGhlIGN1cnNvciBhZnRlciBlbGVtZW50XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcihuZXdOb2RlKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmRBZnRlcihuZXdOb2RlKTsgXG4gICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmQgc25pcHBldCBvciB0aHVtYnMgaW4gdGhlIGVkaXRvclxuICAgICAqIEBQYXJhbSBvYmplY3QgZGF0YVxuICAgICAqL1xuICAgIHZhciBhcHBlbmRFbGVtZW50ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAvLyBSZXNldCBzbmlwcGV0XG4gICAgICAgIHNuaXBwZXQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgaWYgKGRhdGEuaW1hZ2UpIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRpdi5jbGFzc05hbWUgPSAnc25pcHBldC1pbWFnZSc7XG4gICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWsnLCAnaW1hZ2UnKTtcbiAgICAgICAgICAgIHNuaXBwZXQuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgICAgICAgICAgdmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICBpbWFnZS5zcmMgPSBkYXRhLmltYWdlO1xuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdzbmlwcGV0LXRpdGxlJztcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1rJywgJ3RpdGxlJyk7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBkYXRhLnRpdGxlO1xuICAgICAgICBzbmlwcGV0LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ3NuaXBwZXQtZGVzY3JpcHRpb24nO1xuICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWsnLCAnZGVzY3JpcHRpb24nKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGRhdGEuZGVzY3JpcHRpb247XG4gICAgICAgIHNuaXBwZXQuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAnc25pcHBldC1ob3N0JztcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1rJywgJ2hvc3QnKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGRhdGEuaG9zdDtcbiAgICAgICAgc25pcHBldC5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdzbmlwcGV0LXVybCc7XG4gICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaycsICd1cmwnKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGRhdGEudXJsO1xuICAgICAgICBzbmlwcGV0LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgZWRpdG9yLmFwcGVuZENoaWxkKHNuaXBwZXQpO1xuICAgIH1cblxuICAgIHZhciB2ZXJpZnlFZGl0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGVkaXRvclRpbWVyKTtcbiAgICAgICAgZWRpdG9yVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNuaXBwZXQgPSBlZGl0b3IucXVlcnlTZWxlY3RvcignLnNuaXBwZXQnKTtcbiAgICAgICAgICAgIHZhciB0aHVtYnNDb250YWluZXIgPSBlbC5xdWVyeVNlbGVjdG9yKCcuamVkaXRvci10aHVtYnMtY29udGFpbmVyJyk7XG5cbiAgICAgICAgICAgIGlmICghIHNuaXBwZXQgJiYgISB0aHVtYnNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IGVkaXRvci5pbm5lckhUTUwucmVwbGFjZSgvXFxuL2csICcgJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgICAgIHZhciB0aHVtYnNDb250YWluZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLmplZGl0b3ItdGh1bWJzLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgIGlmICh0aHVtYnNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJzQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGNvbnRhaW5lci5pbm5lclRleHQ7IFxuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBqU3VpdGVzLmVkaXRvci5kZXRlY3RVcmwodGV4dCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmxbMF0uc3Vic3RyKC0zKSA9PSAnanBnJyB8fCB1cmxbMF0uc3Vic3RyKC0zKSA9PSAncG5nJyB8fCB1cmxbMF0uc3Vic3RyKC0zKSA9PSAnZ2lmJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpTdWl0ZXMuZWRpdG9yLmdldERvbWFpbih1cmxbMF0pID09IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5pbXBvcnRJbWFnZSh1cmxbMF0sICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmltcG9ydEltYWdlKG9iai5vcHRpb25zLnJlbW90ZVBhcnNlciArIHVybFswXSwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0galN1aXRlcy5lZGl0b3IueW91dHViZVBhcnNlcih1cmxbMF0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0WW91dHViZShpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5nZXRXZWJzaXRlKHVybFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIG9iai5wYXJzZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmVyaWZ5RWRpdG9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IG1ldGFkYXRhIGZyb20gYSB5b3V0dWJlIHZpZGVvXG4gICAgICovXG4gICAgb2JqLmdldFlvdXR1YmUgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICBpZiAoISBvYmoub3B0aW9ucy55b3V0dWJlS2V5KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUaGUgeW91dHViZUtleSBpcyBub3QgZGVmaW5lZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgalN1aXRlcy5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS95b3V0dWJlL3YzL3ZpZGVvcz9wYXJ0PXNuaXBwZXQsc3RhdGlzdGljcyZrZXk9JyArIG9iai5vcHRpb25zLnlvdXR1YmVLZXkgKyAnJmlkPScgKyBpZCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgdmFsaWQgZWxlbWVudHMgdG8gYmUgYXBwZW5kZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pdGVtcyAmJiByZXN1bHQuaXRlbXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6ICd3d3cueW91dHViZS5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tP3dhdGNoPScgKyBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXRlbXNbMF0uc25pcHBldC50aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAudGl0bGUgPSByZXN1bHQuaXRlbXNbMF0uc25pcHBldC50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXRlbXNbMF0uc25pcHBldC5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZGVzY3JpcHRpb24gPSByZXN1bHQuaXRlbXNbMF0uc25pcHBldC5kZXNjcmlwdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDE1MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmRlc2NyaXB0aW9uID0gcC5kZXNjcmlwdGlvbi5zdWJzdHIoMCwgMTUwKSArICcuLi4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXRlbXNbMF0uc25pcHBldC50aHVtYm5haWxzLm1lZGl1bS51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmltYWdlID0gcmVzdWx0Lml0ZW1zWzBdLnNuaXBwZXQudGh1bWJuYWlscy5tZWRpdW0udXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRFbGVtZW50KHApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWV0YSBpbmZvcm1hdGlvbiBmcm9tIGEgd2Vic2l0ZVxuICAgICAqL1xuICAgIG9iai5nZXRXZWJzaXRlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIGlmICghIG9iai5vcHRpb25zLnJlbW90ZVBhcnNlcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSByZW1vdGVQYXJzZXIgaXMgbm90IGRlZmluZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpTdWl0ZXMuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy5yZW1vdGVQYXJzZXIgKyBlbmNvZGVVUkkodXJsLnRyaW0oKSksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC50aXRsZSA9IHJlc3VsdC50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmRlc2NyaXB0aW9uID0gcmVzdWx0LmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuaW1hZ2UgPSByZXN1bHQuaW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0WydvZzppbWFnZSddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmltYWdlID0gcmVzdWx0WydvZzppbWFnZSddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5ob3N0ID0gcmVzdWx0Lmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAudXJsID0gcmVzdWx0LnVybDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZEVsZW1lbnQocCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgZWRpdG9yIHZhbHVlXG4gICAgICovXG4gICAgb2JqLnNldERhdGEgPSBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgIGVkaXRvci5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICBjdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgZWRpdG9yIGRhdGFcbiAgICAgKi9cbiAgICBvYmouZ2V0RGF0YSA9IGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgaWYgKCEganNvbikge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBlZGl0b3IuaW5uZXJIVE1MO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA6ICcnLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGFnIHVzZXJzXG4gICAgICAgICAgICB2YXIgdGFnZ2VkID0gZWRpdG9yLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3N0LXRhZycpO1xuICAgICAgICAgICAgaWYgKHRhZ2dlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnVzZXJzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWdnZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJJZCA9IHRhZ2dlZFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVzZXJzLnB1c2godXNlcklkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLnVzZXJzID0gZGF0YS51c2Vycy5qb2luKCcsJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbmlwcGV0LmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgZGF0YS5zbmlwcGV0ID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbmlwcGV0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBrZXkgZnJvbSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBzbmlwcGV0LmNoaWxkcmVuW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1rJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc25pcHBldC5pbWFnZSA9IHNuaXBwZXQuY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zbmlwcGV0W2tleV0gPSBzbmlwcGV0LmNoaWxkcmVuW2ldLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNuaXBwZXQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgc25pcHBldC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRleHQgPSBlZGl0b3IuaW5uZXJIVE1MO1xuICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvPGJyPi9nLCBcIlxcblwiKTtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzxcXC9kaXY+L2csIFwiPFxcL2Rpdj5cXG5cIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88KD86LnxcXG4pKj8+L2dtLCBcIlwiKTtcbiAgICAgICAgICAgIGRhdGEuY29udGVudCA9IHRleHQudHJpbSgpO1xuICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLy8gUmVzZXRcbiAgICBvYmoucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWRpdG9yLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIG9iai5hZGRQZGYgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLnJlc3VsdC5zdWJzdHIoMCw0KSAhPSAnZGF0YScpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgc291cmNlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSA2MDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSA2MDtcblxuICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IoZnVuY3Rpb24oYmxvYikge1xuICAgICAgICAgICAgICAgIHZhciBuZXdJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICAgICAgICAgIG5ld0ltYWdlLnNyYyA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIG5ld0ltYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1leHRlbnNpb24nLCAncGRmJyk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIGRhdGEubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW1hZ2Uuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBkYXRhLnNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0ltYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRlJywgZGF0YS5kYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3SW1hZ2UuY2xhc3NOYW1lID0gJ2pmaWxlIHBkZic7XG5cbiAgICAgICAgICAgICAgICBpbnNlcnROb2RlQXRDYXJldChuZXdJbWFnZSk7XG4gICAgICAgICAgICAgICAgalN1aXRlcy5maWxlc1tuZXdJbWFnZS5zcmNdID0gZGF0YS5yZXN1bHQuc3Vic3RyKGRhdGEucmVzdWx0LmluZGV4T2YoJywnKSArIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouYWRkSW1hZ2UgPSBmdW5jdGlvbihzcmMsIG5hbWUsIHNpemUsIGRhdGUpIHtcbiAgICAgICAgaWYgKHNyYy5zdWJzdHIoMCw0KSAhPSAnZGF0YScgJiYgISBvYmoub3B0aW9ucy5yZW1vdGVQYXJzZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3JlbW90ZVBhcnNlciBub3QgZGVmaW5lZCBpbiB5b3VyIGluaXRpYWxpemF0aW9uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRvIHByb2Nlc3MgY3Jvc3MgZG9tYWluIGltYWdlc1xuICAgICAgICAgICAgaWYgKHNyYy5zdWJzdHIoMCw0KSA9PSAnZGF0YScpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gc3JjLnNwbGl0KCc7JylcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb25bMF0uc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb25bMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb24gPSBzcmMuc3Vic3RyKHNyYy5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgICAgICAgICAgICAgLy8gV29yayBmb3IgY3Jvc3MgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICBzcmMgPSBvYmoub3B0aW9ucy5yZW1vdGVQYXJzZXIgKyBzcmM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uIG9ubG9hZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgY2FudmFzLnRvQmxvYihmdW5jdGlvbihibG9iKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICAgICAgICAgICAgICBuZXdJbWFnZS5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW1hZ2Uuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICc5MDAnKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW1hZ2Uuc2V0QXR0cmlidXRlKCdkYXRhLWV4dGVuc2lvbicsIGV4dGVuc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScsIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld0ltYWdlLmNsYXNzTmFtZSA9ICdqZmlsZSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnROb2RlQXRDYXJldChuZXdJbWFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5maWxlc1tuZXdJbWFnZS5zcmNdID0gY29udGVudC5zdWJzdHIoY29udGVudC5pbmRleE9mKCcsJykgKyAxKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYmouYWRkRmlsZSA9IGZ1bmN0aW9uKGZpbGVzKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZmlsZXNbaV0uc2l6ZSA+IG9iai5vcHRpb25zLm1heEZpbGVTaXplKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1RoZSBmaWxlIGlzIHRvbyBiaWcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBQREYgb3IgSW1hZ2VzXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBmaWxlc1tpXS50eXBlLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZVswXSA9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZVsxXSA9PSAncGRmJykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZmlsZVxuICAgICAgICAgICAgICAgICAgICByZWFkZXJbaV0gPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICByZWFkZXJbaV0uaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICByZWFkZXJbaV0udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlcltpXS5uYW1lID0gZmlsZXNbaV0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyW2ldLmRhdGUgPSBmaWxlc1tpXS5sYXN0TW9kaWZpZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlcltpXS5zaXplID0gZmlsZXNbaV0uc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YXJnZXQudHlwZSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFjY2VwdEZpbGVzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmFkZFBkZihkYXRhLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYWRkSW1hZ2UoZGF0YS50YXJnZXQucmVzdWx0LCBkYXRhLnRhcmdldC5uYW1lLCBkYXRhLnRvdGFsLCBkYXRhLnRhcmdldC5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyW2ldLnJlYWRBc0RhdGFVUkwoZmlsZXNbaV0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1RoZSBleHRlbnNpb24gaXMgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZXN0cm95XG4gICAgb2JqLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWRpdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlZGl0b3JNb3VzZVVwKTtcbiAgICAgICAgZWRpdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGVkaXRvck1vdXNlRG93bik7XG4gICAgICAgIGVkaXRvci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBlZGl0b3JNb3VzZU1vdmUpO1xuICAgICAgICBlZGl0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBlZGl0b3JLZXlVcCk7XG4gICAgICAgIGVkaXRvci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZWRpdG9yS2V5RG93bik7XG4gICAgICAgIGVkaXRvci5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBlZGl0b3JEcmFnU3RhcnQpO1xuICAgICAgICBlZGl0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgZWRpdG9yRHJhZ0VudGVyKTtcbiAgICAgICAgZWRpdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZWRpdG9yRHJhZ092ZXIpO1xuICAgICAgICBlZGl0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIGVkaXRvckRyb3ApO1xuICAgICAgICBlZGl0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBlZGl0b3JQYXN0ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJsdXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGVkaXRvci5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZWRpdG9yQmx1cik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmZvY3VzKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBlZGl0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBlZGl0b3JGb2N1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbC5lZGl0b3IgPSBudWxsO1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdqZWRpdG9yLWNvbnRhaW5lcicpO1xuXG4gICAgICAgIHRvb2xiYXIucmVtb3ZlKCk7XG4gICAgICAgIHNuaXBwZXQucmVtb3ZlKCk7XG4gICAgICAgIGVkaXRvci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHZhciByZWdleCA9IC8oW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10rKS9nO1xuICAgICAgICByZXR1cm4gc3RyLm1hdGNoKHJlZ2V4KSA/IDEgOiAwO1xuICAgIH1cblxuICAgIC8vIEV2ZW50IGhhbmRsZXJzXG4gICAgdmFyIGVkaXRvck1vdXNlVXAgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGVkaXRvckFjdGlvbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBlZGl0b3JNb3VzZURvd24gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBjbG9zZSA9IGZ1bmN0aW9uKHNuaXBwZXQpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc25pcHBldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGlmIChyZWN0LndpZHRoIC0gKGUuY2xpZW50WCAtIHJlY3QubGVmdCkgPCA0MCAmJiBlLmNsaWVudFkgLSByZWN0LnRvcCA8IDQwKSB7XG4gICAgICAgICAgICAgICAgc25pcHBldC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICBzbmlwcGV0LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT0gJ0lNRycpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5zdHlsZS5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGVkaXRvckFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZTogZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHg6IGUuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgeTogZS5jbGllbnRZLFxuICAgICAgICAgICAgICAgICAgICB3OiByZWN0LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoOiByZWN0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgZDogZS50YXJnZXQuc3R5bGUuY3Vyc29yLFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghIGUudGFyZ2V0LnN0eWxlLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCEgZS50YXJnZXQuc3R5bGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmhlaWdodCA9IHJlY3QuaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcyA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocy5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5yYW5nZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucmVtb3ZlUmFuZ2Uocy5nZXRSYW5nZUF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWRpdG9yQWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbmlwcGV0JykpIHtcbiAgICAgICAgICAgICAgICBjbG9zZShlLnRhcmdldCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbmlwcGV0JykpIHtcbiAgICAgICAgICAgICAgICBjbG9zZShlLnRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWRpdG9yQWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZGl0b3JNb3VzZU1vdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09ICdJTUcnKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5jbGllbnRZIC0gcmVjdC50b3AgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWN0LndpZHRoIC0gKGUuY2xpZW50WCAtIHJlY3QubGVmdCkgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5jdXJzb3IgPSAnbmUtcmVzaXplJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmNsaWVudFggLSByZWN0LmxlZnQgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5jdXJzb3IgPSAnbnctcmVzaXplJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmN1cnNvciA9ICduLXJlc2l6ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlY3QuaGVpZ2h0IC0gKGUuY2xpZW50WSAtIHJlY3QudG9wKSA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3Qud2lkdGggLSAoZS5jbGllbnRYIC0gcmVjdC5sZWZ0KSA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmN1cnNvciA9ICdzZS1yZXNpemUnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuY2xpZW50WCAtIHJlY3QubGVmdCA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmN1cnNvciA9ICdzdy1yZXNpemUnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuY3Vyc29yID0gJ3MtcmVzaXplJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjdC53aWR0aCAtIChlLmNsaWVudFggLSByZWN0LmxlZnQpIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5jdXJzb3IgPSAnZS1yZXNpemUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5jbGllbnRYIC0gcmVjdC5sZWZ0IDwgNSkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5jdXJzb3IgPSAndy1yZXNpemUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmN1cnNvciA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmVcbiAgICAgICAgaWYgKGUud2hpY2ggPT0gMSAmJiBlZGl0b3JBY3Rpb24gJiYgZWRpdG9yQWN0aW9uLmQpIHtcbiAgICAgICAgICAgIGlmIChlZGl0b3JBY3Rpb24uZCA9PSAnZS1yZXNpemUnIHx8IGVkaXRvckFjdGlvbi5kID09ICduZS1yZXNpemUnIHx8ICBlZGl0b3JBY3Rpb24uZCA9PSAnc2UtcmVzaXplJykge1xuICAgICAgICAgICAgICAgIGVkaXRvckFjdGlvbi5lLnN0eWxlLndpZHRoID0gKGVkaXRvckFjdGlvbi53ICsgKGUuY2xpZW50WCAtIGVkaXRvckFjdGlvbi54KSkgKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IChlLmNsaWVudFggLSBlZGl0b3JBY3Rpb24ueCkgKiAoZWRpdG9yQWN0aW9uLmggLyBlZGl0b3JBY3Rpb24udyk7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckFjdGlvbi5lLnN0eWxlLmhlaWdodCA9IGVkaXRvckFjdGlvbi5oICsgbmV3SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISBuZXdIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWRpdG9yQWN0aW9uLmQgPT0gJ3MtcmVzaXplJyB8fCBlZGl0b3JBY3Rpb24uZCA9PSAnc2UtcmVzaXplJyB8fCBlZGl0b3JBY3Rpb24uZCA9PSAnc3ctcmVzaXplJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISBlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JBY3Rpb24uZS5zdHlsZS5oZWlnaHQgPSBlZGl0b3JBY3Rpb24uaCArIChlLmNsaWVudFkgLSBlZGl0b3JBY3Rpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZWRpdG9yS2V5VXAgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghIGVkaXRvci5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgIGVkaXRvci5pbm5lckhUTUwgPSAnPGRpdj48YnI+PC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25rZXl1cCkgPT0gJ2Z1bmN0aW9uJykgeyBcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9ua2V5dXAoZSwgZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgZWRpdG9yS2V5RG93biA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIFVSTFxuICAgICAgICBpZiAob2JqLm9wdGlvbnMucGFyc2VVUkwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmVyaWZ5RWRpdG9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbG9zYWJsZVxuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uZW50ZXIpID09ICdmdW5jdGlvbicgJiYgZS53aGljaCA9PSAxMykge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBvYmouZ2V0RGF0YSgpO1xuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25lbnRlcihvYmosIGVsLCBkYXRhLCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25rZXlkb3duKSA9PSAnZnVuY3Rpb24nKSB7IFxuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25rZXlkb3duKGUsIGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZGl0b3JQYXN0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUuY2xpcGJvYXJkRGF0YSB8fCBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSAoZS5vcmlnaW5hbEV2ZW50IHx8IGUpLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9odG1sJyk7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IChlLm9yaWdpbmFsRXZlbnQgfHwgZSkuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IChlLm9yaWdpbmFsRXZlbnQgfHwgZSkuY2xpcGJvYXJkRGF0YS5maWxlc1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhKSB7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ0h0bWwnKTtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnVGV4dCcpO1xuICAgICAgICAgICAgdmFyIGZpbGUgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YS5maWxlc1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBQYXN0ZSBhIGltYWdlIGZyb20gdGhlIGNsaXBib2FyZFxuICAgICAgICAgICAgb2JqLmFkZEZpbGUoZmlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBQYXN0ZSB0ZXh0XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQubm9kZU5hbWUgPT0gJ0RJVicgJiYgISBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2plZGl0b3InKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRleHRbaV0gKyBcIjxicj5cXHJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJzxkaXY+JyArIHRleHRbaV0gKyAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnPGRpdj48YnI+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEluc2VydCB0ZXh0XG4gICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5zZXJ0SHRtbCcsIGZhbHNlLCBzdHIpO1xuXG4gICAgICAgICAgICAvLyBFeHRyYSBpbWFnZXMgZnJvbSB0aGUgcGFzdGVcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5hY2NlcHRJbWFnZXMgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGV4dHJhY3RJbWFnZUZyb21IdG1sKGh0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciBlZGl0b3JEcmFnU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlZGl0b3JBY3Rpb24gJiYgZWRpdG9yQWN0aW9uLmUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZGl0b3JEcmFnRW50ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlZGl0b3JBY3Rpb24gfHwgb2JqLm9wdGlvbnMuZHJvcFpvbmUgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2plZGl0b3ItZHJhZ2dpbmcnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZGl0b3JEcmFnT3ZlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGVkaXRvckFjdGlvbiB8fCBvYmoub3B0aW9ucy5kcm9wWm9uZSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVkaXRvclRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGVkaXRvclRpbWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWRpdG9yVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2plZGl0b3ItZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZWRpdG9yRHJvcCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGVkaXRvckFjdGlvbiB8fCBvYmoub3B0aW9ucy5kcm9wWm9uZSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUG9zaXRpb24gY2FyZXQgb24gdGhlIGRyb3BcbiAgICAgICAgICAgIHZhciByYW5nZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludCkge1xuICAgICAgICAgICAgICAgIHJhbmdlPWRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnJhbmdlUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2U9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChlLnJhbmdlUGFyZW50LGUucmFuZ2VPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICBzZWwuYW5jaG9yTm9kZS5wYXJlbnROb2RlLmZvY3VzKCk7XG5cbiAgICAgICAgICAgIHZhciBodG1sID0gKGUub3JpZ2luYWxFdmVudCB8fCBlKS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9odG1sJyk7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IChlLm9yaWdpbmFsRXZlbnQgfHwgZSkuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcbiAgICAgICAgICAgIHZhciBmaWxlID0gKGUub3JpZ2luYWxFdmVudCB8fCBlKS5kYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgXG4gICAgICAgICAgICBpZiAoZmlsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvYmouYWRkRmlsZShmaWxlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGV4dCkge1xuICAgICAgICAgICAgICAgIGV4dHJhY3RJbWFnZUZyb21IdG1sKGh0bWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdqZWRpdG9yLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZWRpdG9yQmx1ciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmoub3B0aW9ucy5vbmJsdXIob2JqLCBlbCwgb2JqLmdldERhdGEoKSk7XG4gICAgfVxuXG4gICAgdmFyIGVkaXRvckZvY3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG9iai5vcHRpb25zLm9uZm9jdXMob2JqLCBlbCwgb2JqLmdldERhdGEoKSk7XG4gICAgfVxuXG4gICAgZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlZGl0b3JNb3VzZVVwKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZWRpdG9yTW91c2VEb3duKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZWRpdG9yTW91c2VNb3ZlKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBlZGl0b3JLZXlVcCk7XG4gICAgZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlZGl0b3JLZXlEb3duKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgZWRpdG9yRHJhZ1N0YXJ0KTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgZWRpdG9yRHJhZ0VudGVyKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBlZGl0b3JEcmFnT3Zlcik7XG4gICAgZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBlZGl0b3JEcm9wKTtcbiAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBlZGl0b3JQYXN0ZSk7XG5cbiAgICAvLyBCbHVyXG4gICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmJsdXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlZGl0b3JCbHVyKTtcbiAgICB9XG5cbiAgICAvLyBGb2N1c1xuICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25mb2N1cykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBlZGl0b3JGb2N1cyk7XG4gICAgfVxuXG4gICAgLy8gT25sb2FkXG4gICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmxvYWQpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqLm9wdGlvbnMub25sb2FkKGVsLCBlZGl0b3IpO1xuICAgIH1cblxuICAgIC8vIFNldCB2YWx1ZSB0byB0aGUgZWRpdG9yXG4gICAgZWRpdG9yLmlubmVySFRNTCA9IHZhbHVlO1xuXG4gICAgLy8gQXBwZW5kIGVkaXRvciB0byB0aGUgY29udGFpbnJlXG4gICAgZWwuYXBwZW5kQ2hpbGQoZWRpdG9yKTtcblxuICAgIC8vIFNuaXBwZXRcbiAgICBpZiAob2JqLm9wdGlvbnMuc25pcHBldCkge1xuICAgICAgICBhcHBlbmRFbGVtZW50KG9iai5vcHRpb25zLnNuaXBwZXQpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG9vbGJhclxuICAgIGlmIChvYmoub3B0aW9ucy50b29sYmFyID09IG51bGwpIHtcbiAgICAgICAgb2JqLm9wdGlvbnMudG9vbGJhciA9IGpTdWl0ZXMuZWRpdG9yLmdldERlZmF1bHRUb29sYmFyKCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHRvb2xiYXJcbiAgICBpZiAob2JqLm9wdGlvbnMudG9vbGJhcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5vcHRpb25zLnRvb2xiYXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy50b29sYmFyW2ldLmljb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUudXNlclNlbGVjdCA9ICdub25lJztcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICAgICAgaXRlbUljb24uY2xhc3NOYW1lID0gJ21hdGVyaWFsLWljb25zJztcbiAgICAgICAgICAgICAgICBpdGVtSWNvbi5pbm5lckhUTUwgPSBvYmoub3B0aW9ucy50b29sYmFyW2ldLmljb247XG4gICAgICAgICAgICAgICAgaXRlbUljb24ub25jbGljayA9IChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy50b29sYmFyW2JdLm9uY2xpY2soZWwsIG9iaiwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KShpKTtcbiAgICAgICAgICAgICAgICBpdGVtLmFwcGVuZENoaWxkKGl0ZW1JY29uKTtcbiAgICAgICAgICAgICAgICB0b29sYmFyLmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMudG9vbGJhcltpXS50eXBlID09ICdkaXZpc29yJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTmFtZSA9ICdqZWRpdG9yLXRvb2xiYXItZGl2aXNvcic7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy50b29sYmFyW2ldLnR5cGUgPT0gJ2J1dHRvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdqZWRpdG9yLXRvb2xiYXItYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMudG9vbGJhcltpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBlbC5hcHBlbmRDaGlsZCh0b29sYmFyKTtcbiAgICB9XG5cbiAgICAvLyBGb2N1cyB0byB0aGUgZWRpdG9yXG4gICAgaWYgKG9iai5vcHRpb25zLmZvY3VzKSB7XG4gICAgICAgIGpTdWl0ZXMuZWRpdG9yLnNldEN1cnNvcihlZGl0b3IsIG9iai5vcHRpb25zLmZvY3VzID09ICdpbml0aWFsJyA/IHRydWUgOiBmYWxzZSk7XG4gICAgfVxuXG4gICAgZWwuZWRpdG9yID0gb2JqO1xuXG4gICAgcmV0dXJuIG9iajtcbn0pO1xuXG5qU3VpdGVzLmVkaXRvci5zZXRDdXJzb3IgPSBmdW5jdGlvbihlbGVtZW50LCBmaXJzdCkge1xuICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnc2VsZWN0QWxsJyk7XG4gICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICBpZiAoZmlyc3QgPT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgICAgICB2YXIgc2l6ZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5vZGUgPSByYW5nZS5lbmRDb250YWluZXI7XG4gICAgICAgIHZhciBzaXplID0gbm9kZS5sZW5ndGg7XG4gICAgfVxuICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIHNpemUpO1xuICAgIHJhbmdlLnNldEVuZChub2RlLCBzaXplKTtcbiAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbn1cblxualN1aXRlcy5lZGl0b3IuZ2V0RG9tYWluID0gZnVuY3Rpb24odXJsKSB7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKCdodHRwOi8vJywnJykucmVwbGFjZSgnaHR0cHM6Ly8nLCcnKS5yZXBsYWNlKCd3d3cuJywnJykuc3BsaXQoL1svPyNdLylbMF0uc3BsaXQoLzovZylbMF07XG59XG5cbmpTdWl0ZXMuZWRpdG9yLmRldGVjdFVybCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgZXhwcmVzc2lvbiA9IC8oKChodHRwcz86XFwvXFwvKXwod3d3XFwuKSlbLUEtWjAtOSsmQCNcXC8lPz1+X3whOiwuO10qWy1BLVowLTkrJkAjXFwvJT1+X3xdKykvaWc7XG4gICAgdmFyIGxpbmtzID0gdGV4dC5tYXRjaChleHByZXNzaW9uKTtcblxuICAgIGlmIChsaW5rcykge1xuICAgICAgICBpZiAobGlua3NbMF0uc3Vic3RyKDAsMykgPT0gJ3d3dycpIHtcbiAgICAgICAgICAgIGxpbmtzWzBdID0gJ2h0dHA6Ly8nICsgbGlua3NbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmpTdWl0ZXMuZWRpdG9yLnlvdXR1YmVQYXJzZXIgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcmVnRXhwID0gL14uKigoeW91dHUuYmVcXC8pfCh2XFwvKXwoXFwvdVxcL1xcd1xcLyl8KGVtYmVkXFwvKXwod2F0Y2hcXD8pKVxcPz92Pz0/KFteI1xcJlxcP10qKS4qLztcbiAgICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2gocmVnRXhwKTtcblxuICAgIHJldHVybiAobWF0Y2ggJiYgbWF0Y2hbN10ubGVuZ3RoID09IDExKSA/IG1hdGNoWzddIDogZmFsc2U7XG59XG5cbmpTdWl0ZXMuZWRpdG9yLmdldERlZmF1bHRUb29sYmFyID0gZnVuY3Rpb24oKSB7IFxuICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGljb246J3VuZG8nLFxuICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ3VuZG8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWNvbjoncmVkbycsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgncmVkbycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOidkaXZpc29yJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfYm9sZCcsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbihhLGIsYykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdib2xkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUoXCJib2xkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfaXRhbGljJyxcbiAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uKGEsYixjKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2l0YWxpYycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwiaXRhbGljXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfdW5kZXJsaW5lJyxcbiAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uKGEsYixjKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ3VuZGVybGluZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwidW5kZXJsaW5lXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOidkaXZpc29yJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfbGlzdF9idWxsZXRlZCcsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbihhLGIsYykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdpbnNlcnRVbm9yZGVyZWRMaXN0Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUoXCJpbnNlcnRVbm9yZGVyZWRMaXN0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfbGlzdF9udW1iZXJlZCcsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbihhLGIsYykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdpbnNlcnRPcmRlcmVkTGlzdCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwiaW5zZXJ0T3JkZXJlZExpc3RcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGljb246J2Zvcm1hdF9pbmRlbnRfaW5jcmVhc2UnLFxuICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oYSxiLGMpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5kZW50JywgdHJ1ZSwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUoXCJpbmRlbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGMuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGljb246J2Zvcm1hdF9pbmRlbnRfZGVjcmVhc2UnLFxuICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oYSxiLGMpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnb3V0ZGVudCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwib3V0ZGVudFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYy5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKntcbiAgICAgICAgICAgIHR5cGU6J3NlbGVjdCcsXG4gICAgICAgICAgICBpdGVtczogWydWZXJkYW5hJywnQXJpYWwnLCdDb3VyaWVyIE5ldyddLFxuICAgICAgICAgICAgb25jaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOidzZWxlY3QnLFxuICAgICAgICAgICAgaXRlbXM6IFsnMTBweCcsJzEycHgnLCcxNHB4JywnMTZweCcsJzE4cHgnLCcyMHB4JywnMjJweCddLFxuICAgICAgICAgICAgb25jaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfYWxpZ25fbGVmdCcsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnSnVzdGlmeUxlZnQnKTtcblxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZShcIkp1c3RpZnlMZWZ0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfYWxpZ25fY2VudGVyJyxcbiAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdqdXN0aWZ5Q2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUoXCJqdXN0aWZ5Q2VudGVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfYWxpZ25fcmlnaHQnLFxuICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2p1c3RpZnlSaWdodCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwianVzdGlmeVJpZ2h0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfYWxpZ25fanVzdGlmeScsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnanVzdGlmeUZ1bGwnKTtcblxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZShcImp1c3RpZnlGdWxsXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpY29uOidmb3JtYXRfbGlzdF9idWxsZXRlZCcsXG4gICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5zZXJ0VW5vcmRlcmVkTGlzdCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwiaW5zZXJ0VW5vcmRlcmVkTGlzdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSovXG4gICAgXTtcbn1cblxyXG5cclxualN1aXRlcy5pbWFnZSA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgICBtaW5XaWR0aDogZmFsc2UsXHJcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXHJcbiAgICAgICAgc2luZ2xlRmlsZTogdHJ1ZSxcclxuICAgICAgICByZW1vdGVQYXJzZXI6IG51bGwsXHJcbiAgICAgICAgdGV4dDp7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbk5vdEFsbG93ZWQ6J1RoZSBleHRlbnNpb24gaXMgbm90IGFsbG93ZWQnLFxyXG4gICAgICAgICAgICBpbWFnZVRvb1NtYWxsOidUaGUgcmVzb2x1dGlvbiBpcyB0b28gbG93LCB0cnkgYSBpbWFnZSB3aXRoIGEgYmV0dGVyIHJlc29sdXRpb24uIHdpZHRoID4gODAwcHgnLFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIG91ciBvYmplY3RcclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGxvYWQgaWNvblxyXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnanVwbG9hZCcpO1xyXG5cclxuICAgIC8vIEFkZCBpbWFnZVxyXG4gICAgb2JqLmFkZEltYWdlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIGlmICghIGZpbGUuZGF0ZSkge1xyXG4gICAgICAgICAgICBmaWxlLmRhdGUgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScsIGZpbGUubGFzdG1vZGlmaWVkID8gZmlsZS5sYXN0bW9kaWZpZWQgOiBmaWxlLmRhdGUpO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIGZpbGUubmFtZSk7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgZmlsZS5zaXplKTtcclxuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdkYXRhLXNtYWxsJywgZmlsZS5zbWFsbCA/IGZpbGUuc21hbGwgOiAnJyk7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1jb3ZlcicsIGZpbGUuY292ZXIgPyAxIDogMCk7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1leHRlbnNpb24nLCBmaWxlLmV4dGVuc2lvbik7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgZmlsZS5maWxlKTtcclxuICAgICAgICBpbWcuY2xhc3NOYW1lID0gJ2pmaWxlJztcclxuICAgICAgICBpbWcuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblxyXG4gICAgICAgIHJldHVybiBpbWc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIGltYWdlXHJcbiAgICBvYmouYWRkSW1hZ2VzID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2luZ2xlRmlsZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChvYmouYWRkSW1hZ2UoZmlsZXNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmFkZEZyb21GaWxlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIHZhciB0eXBlID0gZmlsZS50eXBlLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgaWYgKHR5cGVbMF0gPT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuc2luZ2xlRmlsZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGltYWdlRmlsZSA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIGltYWdlRmlsZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAodikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gb25sb2FkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGNhbnZhcy50b0RhdGFVUkwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uOiBmaWxlLm5hbWUuc3Vic3RyKGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpICsgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0bW9kaWZpZWQ6IGZpbGUubGFzdE1vZGlmaWVkLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SW1hZ2UgPSBvYmouYWRkSW1hZ2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQobmV3SW1hZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBPbmNoYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2UpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UobmV3SW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IHYuc3JjRWxlbWVudC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaW1hZ2VGaWxlLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWxlcnQodGV4dC5leHRlbnRpb25Ob3RBbGxvd2VkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmFkZEZyb21VcmwgPSBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICBpZiAoc3JjLnN1YnN0cigwLDQpICE9ICdkYXRhJyAmJiAhIG9iai5vcHRpb25zLnJlbW90ZVBhcnNlcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZW1vdGVQYXJzZXIgbm90IGRlZmluZWQgaW4geW91ciBpbml0aWFsaXphdGlvbicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdG8gcHJvY2VzcyBjcm9zcyBkb21haW4gaW1hZ2VzXHJcbiAgICAgICAgICAgIGlmIChzcmMuc3Vic3RyKDAsNCkgPT0gJ2RhdGEnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gc3JjLnNwbGl0KCc7JylcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IGV4dGVuc2lvblswXS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IHNyYy5zdWJzdHIoc3JjLmxhc3RJbmRleE9mKCcuJykgKyAxKTtcclxuICAgICAgICAgICAgICAgIC8vIFdvcmsgZm9yIGNyb3NzIGJyb3dzZXJzXHJcbiAgICAgICAgICAgICAgICBzcmMgPSBvYmoub3B0aW9ucy5yZW1vdGVQYXJzZXIgKyBzcmM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiBvbmxvYWQoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYW52YXMudG9CbG9iKGZ1bmN0aW9uKGJsb2IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbjogZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJbWFnZSA9IG9iai5hZGRJbWFnZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChuZXdJbWFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgYmFzZTY0IHJlYWR5IHRvIGdvXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5maWxlc1tkYXRhLmZpbGVdID0gY29udGVudC5zdWJzdHIoY29udGVudC5pbmRleE9mKCcsJykgKyAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT25jaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uY2hhbmdlKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2hhbmdlKG5ld0ltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBhdHRhY2htZW50SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgYXR0YWNobWVudElucHV0LnR5cGUgPSAnZmlsZSc7XHJcbiAgICBhdHRhY2htZW50SW5wdXQuc2V0QXR0cmlidXRlKCdhY2NlcHQnLCAnaW1hZ2UvKicpO1xyXG4gICAgYXR0YWNobWVudElucHV0Lm9uY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9iai5hZGRGcm9tRmlsZSh0aGlzLmZpbGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBqU3VpdGVzLmNsaWNrKGF0dGFjaG1lbnRJbnB1dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZWwuc3R5bGUuYm9yZGVyID0gJzFweCBkYXNoZWQgIzAwMCc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZWwuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjZWVlJztcclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdG9wJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGVsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2VlZSc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgIFxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cclxuICAgICAgICB2YXIgaHRtbCA9IChlLm9yaWdpbmFsRXZlbnQgfHwgZSkuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvaHRtbCcpO1xyXG4gICAgICAgIHZhciBmaWxlID0gKGUub3JpZ2luYWxFdmVudCB8fCBlKS5kYXRhVHJhbnNmZXIuZmlsZXM7XHJcblxyXG4gICAgICAgIGlmIChmaWxlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouYWRkRnJvbUZpbGUoZS5kYXRhVHJhbnNmZXIuZmlsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChodG1sKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5zaW5nbGVGaWxlID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGVtcCBlbGVtZW50XHJcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IGltYWdlc1xyXG4gICAgICAgICAgICB2YXIgaW1nID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGltZy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW1nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFkZEZyb21VcmwoaW1nW2ldLnNyYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2VlZSc7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmltYWdlID0gb2JqO1xyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pO1xyXG5cclxuLyoqXG4gKiAoYykgakxvYWRpbmdcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsaG9kZWwvanRvb2xzXG4gKlxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XG4gKiBAZGVzY3JpcHRpb246IFBhZ2UgbG9hZGluZyBzcGluXG4gKi9cblxualN1aXRlcy5sb2FkaW5nID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSB7fTtcblxuICAgIHZhciBsb2FkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbG9hZGluZy5jbGFzc05hbWUgPSAnamxvYWRpbmcnO1xuXG4gICAgb2JqLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsb2FkaW5nKTtcbiAgICB9O1xuXG4gICAgb2JqLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsb2FkaW5nKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9iajtcbn0pKCk7XHJcblxyXG4vKipcbiAqIChjKSBqTG9naW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsaG9kZWwvanRvb2xzXG4gKlxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XG4gKiBAZGVzY3JpcHRpb246IExvZ2luIGhlbHBlclxuICovXG5cbmpTdWl0ZXMubG9naW4gPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcblxuICAgIC8vIERlZmF1bHQgY29uZmlndXJhdGlvblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgcHJlcGFyZVJlcXVlc3Q6IG51bGwsXG4gICAgICAgIGFjY2Vzc1Rva2VuOiBudWxsLFxuICAgICAgICBkZXZpY2VUb2tlbjogbnVsbCxcbiAgICAgICAgZmFjZWJvb2tVcmw6IG51bGwsXG4gICAgICAgIGZhY2Vib29rQXV0aGVudGljYXRpb246IG51bGwsXG4gICAgICAgIG1heEhlaWdodDogbnVsbCxcbiAgICAgICAgb25sb2FkOiBudWxsLFxuICAgICAgICBvbnN1Y2Nlc3M6IG51bGwsXG4gICAgICAgIG9uZXJyb3I6IG51bGwsXG4gICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgIGxvZ286IG51bGwsXG4gICAgICAgIG5ld1Byb2ZpbGU6IGZhbHNlLFxuICAgICAgICBuZXdQcm9maWxlVXJsOiBmYWxzZSxcbiAgICAgICAgbmV3UHJvZmlsZUxvZ2luOiBmYWxzZSxcbiAgICAgICAgZnVsbHNjcmVlbjogZmFsc2UsXG4gICAgICAgIG5ld1Bhc3N3b3JkVmFsaWRhdGlvbjogbnVsbCxcbiAgICB9O1xuXG4gICAgLy8gTG9vcCB0aHJvdWdoIG91ciBvYmplY3RcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkZWZhdWx0cykge1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBkZWZhdWx0c1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXNzYWdlIGNvbnNvbGUgY29udGFpbmVyXG4gICAgaWYgKCEgb2JqLm9wdGlvbnMubWVzc2FnZSkge1xuICAgICAgICB2YXIgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVzc2FnZScpO1xuICAgICAgICBpZiAobWVzc2FnZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm1lc3NhZ2UgPSBtZXNzYWdlRWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFjdGlvblxuICAgIHZhciBhY3Rpb24gPSBudWxsO1xuXG4gICAgLy8gQ29udGFpbmVyXG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICBlbC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgLy8gTG9nb1xuICAgIHZhciBkaXZMb2dvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2TG9nby5jbGFzc05hbWUgPSAnamxvZ2luLWxvZ28nXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkxvZ28pO1xuXG4gICAgaWYgKG9iai5vcHRpb25zLmxvZ28pIHtcbiAgICAgICAgdmFyIGxvZ28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgbG9nby5zcmMgPSBvYmoub3B0aW9ucy5sb2dvO1xuICAgICAgICBkaXZMb2dvLmFwcGVuZENoaWxkKGxvZ28pO1xuICAgIH1cblxuICAgIC8vIENvZGVcbiAgICB2YXIgbGFiZWxDb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBsYWJlbENvZGUuaW5uZXJIVE1MID0gJ1BsZWFzZSBlbnRlciBoZXJlIHRoZSBjb2RlIHJlY2VpdmVkJztcbiAgICB2YXIgaW5wdXRDb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBpbnB1dENvZGUudHlwZSA9ICdudW1iZXInO1xuICAgIGlucHV0Q29kZS5pZCA9ICdjb2RlJztcbiAgICBpbnB1dENvZGUuc2V0QXR0cmlidXRlKCdtYXhsZW5ndGgnLCA2KTtcbiAgICB2YXIgZGl2Q29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdkNvZGUuYXBwZW5kQ2hpbGQobGFiZWxDb2RlKTtcbiAgICBkaXZDb2RlLmFwcGVuZENoaWxkKGlucHV0Q29kZSk7XG5cbiAgICAvLyBIYXNoXG4gICAgdmFyIGlucHV0SGFzaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRIYXNoLnR5cGUgPSAnaGlkZGVuJztcbiAgICBpbnB1dEhhc2gubmFtZSA9ICdoJztcbiAgICB2YXIgZGl2SGFzaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdkhhc2guYXBwZW5kQ2hpbGQoaW5wdXRIYXNoKTtcblxuICAgIC8vIFJlY292ZXJ5XG4gICAgdmFyIGlucHV0UmVjb3ZlcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGlucHV0UmVjb3ZlcnkudHlwZSA9ICdoaWRkZW4nO1xuICAgIGlucHV0UmVjb3ZlcnkubmFtZSA9ICdyZWNvdmVyeSc7XG4gICAgaW5wdXRSZWNvdmVyeS52YWx1ZSA9ICcxJztcbiAgICB2YXIgZGl2UmVjb3ZlcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZSZWNvdmVyeS5hcHBlbmRDaGlsZChpbnB1dFJlY292ZXJ5KTtcblxuICAgIC8vIExvZ2luXG4gICAgdmFyIGxhYmVsTG9naW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsTG9naW4uaW5uZXJIVE1MID0gJ0xvZ2luJztcbiAgICB2YXIgaW5wdXRMb2dpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRMb2dpbi50eXBlID0gJ3RleHQnO1xuICAgIGlucHV0TG9naW4ubmFtZSA9ICdsb2dpbic7XG4gICAgaW5wdXRMb2dpbi5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICdvZmYnKTtcbiAgICBpbnB1dExvZ2luLm9ua2V5dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtekEtWjAtOV8rXSsvZ2ksICcnKTtcbiAgICB9IFxuICAgIHZhciBkaXZMb2dpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdkxvZ2luLmFwcGVuZENoaWxkKGxhYmVsTG9naW4pO1xuICAgIGRpdkxvZ2luLmFwcGVuZENoaWxkKGlucHV0TG9naW4pO1xuXG4gICAgLy8gTmFtZVxuICAgIHZhciBsYWJlbE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsTmFtZS5pbm5lckhUTUwgPSAnTmFtZSc7XG4gICAgdmFyIGlucHV0TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXROYW1lLnR5cGUgPSAndGV4dCc7XG4gICAgaW5wdXROYW1lLm5hbWUgPSAnbmFtZSc7XG4gICAgdmFyIGRpdk5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZOYW1lLmFwcGVuZENoaWxkKGxhYmVsTmFtZSk7XG4gICAgZGl2TmFtZS5hcHBlbmRDaGlsZChpbnB1dE5hbWUpO1xuXG4gICAgLy8gRW1haWxcbiAgICB2YXIgbGFiZWxVc2VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWxVc2VybmFtZS5pbm5lckhUTUwgPSAnRS1tYWlsJztcbiAgICB2YXIgaW5wdXRVc2VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRVc2VybmFtZS50eXBlID0gJ3RleHQnO1xuICAgIGlucHV0VXNlcm5hbWUubmFtZSA9ICd1c2VybmFtZSc7XG4gICAgaW5wdXRVc2VybmFtZS5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICduZXctdXNlcm5hbWUnKTtcbiAgICB2YXIgZGl2VXNlcm5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZVc2VybmFtZS5hcHBlbmRDaGlsZChsYWJlbFVzZXJuYW1lKTtcbiAgICBkaXZVc2VybmFtZS5hcHBlbmRDaGlsZChpbnB1dFVzZXJuYW1lKTtcblxuICAgIC8vIFBhc3N3b3JkXG4gICAgdmFyIGxhYmVsUGFzc3dvcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsUGFzc3dvcmQuaW5uZXJIVE1MID0gJ05ldyBwYXNzd29yZCc7XG4gICAgdmFyIGlucHV0UGFzc3dvcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGlucHV0UGFzc3dvcmQudHlwZSA9ICdwYXNzd29yZCc7XG4gICAgaW5wdXRQYXNzd29yZC5uYW1lID0gJ3Bhc3N3b3JkJztcbiAgICBpbnB1dFBhc3N3b3JkLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ25ldy1wYXNzd29yZCcpO1xuICAgIHZhciBkaXZQYXNzd29yZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdlBhc3N3b3JkLmFwcGVuZENoaWxkKGxhYmVsUGFzc3dvcmQpO1xuICAgIGRpdlBhc3N3b3JkLmFwcGVuZENoaWxkKGlucHV0UGFzc3dvcmQpO1xuICAgIGRpdlBhc3N3b3JkLm9ua2V5ZG93biA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xuICAgICAgICAgICAgb2JqLmV4ZWN1dGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlcGVhdCBwYXNzd29yZFxuICAgIHZhciBsYWJlbFJlcGVhdFBhc3N3b3JkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBsYWJlbFJlcGVhdFBhc3N3b3JkLmlubmVySFRNTCA9ICdSZXBlYXQgdGhlIG5ldyBwYXNzd29yZCc7XG4gICAgdmFyIGlucHV0UmVwZWF0UGFzc3dvcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGlucHV0UmVwZWF0UGFzc3dvcmQudHlwZSA9ICdwYXNzd29yZCc7XG4gICAgaW5wdXRSZXBlYXRQYXNzd29yZC5uYW1lID0gJ3Bhc3N3b3JkJztcbiAgICB2YXIgZGl2UmVwZWF0UGFzc3dvcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZSZXBlYXRQYXNzd29yZC5hcHBlbmRDaGlsZChsYWJlbFJlcGVhdFBhc3N3b3JkKTtcbiAgICBkaXZSZXBlYXRQYXNzd29yZC5hcHBlbmRDaGlsZChpbnB1dFJlcGVhdFBhc3N3b3JkKTtcblxuICAgIC8vIFJlbWVtYmVyIGNoZWNrYm94XG4gICAgdmFyIGxhYmVsUmVtZW1iZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsUmVtZW1iZXIuaW5uZXJIVE1MID0gJ1JlbWVtYmVyIG1lIG9uIHRoaXMgZGV2aWNlJztcbiAgICB2YXIgaW5wdXRSZW1lbWJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRSZW1lbWJlci50eXBlID0gJ2NoZWNrYm94JztcbiAgICBpbnB1dFJlbWVtYmVyLm5hbWUgPSAncmVtZW1iZXInO1xuICAgIGlucHV0UmVtZW1iZXIudmFsdWUgPSAnMSc7XG4gICAgbGFiZWxSZW1lbWJlci5hcHBlbmRDaGlsZChpbnB1dFJlbWVtYmVyKTtcbiAgICB2YXIgZGl2UmVtZW1iZXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZSZW1lbWJlckJ1dHRvbi5jbGFzc05hbWUgPSAncmVtZW1iZXJCdXR0b24nO1xuICAgIGRpdlJlbWVtYmVyQnV0dG9uLmFwcGVuZENoaWxkKGxhYmVsUmVtZW1iZXIpO1xuXG4gICAgLy8gTG9naW4gYnV0dG9uXG4gICAgdmFyIGFjdGlvbkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgYWN0aW9uQnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcbiAgICBhY3Rpb25CdXR0b24udmFsdWUgPSAnTG9nIEluJztcbiAgICBhY3Rpb25CdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmouZXhlY3V0ZSgpO1xuICAgIH1cbiAgICB2YXIgZGl2QWN0aW9uQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2QWN0aW9uQnV0dG9uLmFwcGVuZENoaWxkKGFjdGlvbkJ1dHRvbik7XG5cbiAgICAvLyBDYW5jZWwgYnV0dG9uXG4gICAgdmFyIGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbmNlbEJ1dHRvbi5pbm5lckhUTUwgPSAnQ2FuY2VsJztcbiAgICBjYW5jZWxCdXR0b24uY2xhc3NOYW1lID0gJ2NhbmNlbEJ1dHRvbic7XG4gICAgY2FuY2VsQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqLnJlcXVlc3RBY2Nlc3MoKTtcbiAgICB9XG4gICAgdmFyIGRpdkNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdkNhbmNlbEJ1dHRvbi5hcHBlbmRDaGlsZChjYW5jZWxCdXR0b24pO1xuXG4gICAgLy8gQ2FwdGNoYVxuICAgIHZhciBsYWJlbENhcHRjaGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsQ2FwdGNoYS5pbm5lckhUTUwgPSAnUGxlYXNlIHR5cGUgaGVyZSB0aGUgY29kZSBiZWxvdyc7XG4gICAgdmFyIGlucHV0Q2FwdGNoYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaW5wdXRDYXB0Y2hhLnR5cGUgPSAndGV4dCc7XG4gICAgaW5wdXRDYXB0Y2hhLm5hbWUgPSAnY2FwdGNoYSc7XG4gICAgdmFyIGltYWdlQ2FwdGNoYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIHZhciBkaXZDYXB0Y2hhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2Q2FwdGNoYS5jbGFzc05hbWUgPSAnamxvZ2luLWNhcHRjaGEnO1xuICAgIGRpdkNhcHRjaGEuYXBwZW5kQ2hpbGQobGFiZWxDYXB0Y2hhKTtcbiAgICBkaXZDYXB0Y2hhLmFwcGVuZENoaWxkKGlucHV0Q2FwdGNoYSk7XG4gICAgZGl2Q2FwdGNoYS5hcHBlbmRDaGlsZChpbWFnZUNhcHRjaGEpO1xuXG4gICAgLy8gRmFjZWJvb2tcbiAgICB2YXIgZmFjZWJvb2tCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBmYWNlYm9va0J1dHRvbi5pbm5lckhUTUwgPSAnTG9naW4gd2l0aCBGYWNlYm9vayc7XG4gICAgZmFjZWJvb2tCdXR0b24uY2xhc3NOYW1lID0gJ2ZhY2Vib29rQnV0dG9uJztcbiAgICB2YXIgZGl2RmFjZWJvb2tCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXZGYWNlYm9va0J1dHRvbi5hcHBlbmRDaGlsZChmYWNlYm9va0J1dHRvbik7XG4gICAgZGl2RmFjZWJvb2tCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmoucmVxdWVzdExvZ2luVmlhRmFjZWJvb2soKTtcbiAgICB9XG4gICAgLy8gRm9yZ290IHBhc3N3b3JkXG4gICAgdmFyIGlucHV0UmVxdWVzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBpbnB1dFJlcXVlc3QuaW5uZXJIVE1MID0gJ1JlcXVlc3QgYSBuZXcgcGFzc3dvcmQnO1xuICAgIHZhciBkaXZSZXF1ZXN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2UmVxdWVzdEJ1dHRvbi5jbGFzc05hbWUgPSAncmVxdWVzdEJ1dHRvbic7XG4gICAgZGl2UmVxdWVzdEJ1dHRvbi5hcHBlbmRDaGlsZChpbnB1dFJlcXVlc3QpO1xuICAgIGRpdlJlcXVlc3RCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvYmoucmVxdWVzdE5ld1Bhc3N3b3JkKCk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIG5ldyBQcm9maWxlXG4gICAgdmFyIGlucHV0TmV3UHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBpbnB1dE5ld1Byb2ZpbGUuaW5uZXJIVE1MID0gJ0NyZWF0ZSBhIG5ldyBwcm9maWxlJztcbiAgICB2YXIgZGl2TmV3UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdk5ld1Byb2ZpbGVCdXR0b24uY2xhc3NOYW1lID0gJ25ld1Byb2ZpbGVCdXR0b24nO1xuICAgIGRpdk5ld1Byb2ZpbGVCdXR0b24uYXBwZW5kQ2hpbGQoaW5wdXROZXdQcm9maWxlKTtcbiAgICBkaXZOZXdQcm9maWxlQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqLm5ld1Byb2ZpbGUoKTtcbiAgICB9XG5cbiAgICBlbC5jbGFzc05hbWUgPSAnamxvZ2luJztcblxuICAgIGlmIChvYmoub3B0aW9ucy5mdWxsc2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnamxvZ2luLWZ1bGxzY3JlZW4nKTtcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogU2hvdyBtZXNzYWdlXG4gICAgICovXG4gICAgb2JqLnNob3dNZXNzYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICh0eXBlb2YoZGF0YSkgPT0gJ29iamVjdCcpID8gZGF0YS5tZXNzYWdlIDogZGF0YTtcblxuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLnNob3dNZXNzYWdlKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmoub3B0aW9ucy5zaG93TWVzc2FnZShkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpTdWl0ZXMuYWxlcnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOZXcgcHJvZmlsZVxuICAgICAqL1xuICAgIG9iai5uZXdQcm9maWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkxvZ28pO1xuICAgICAgICBpZiAob2JqLm9wdGlvbnMubmV3UHJvZmlsZUxvZ2luKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2TG9naW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZOYW1lKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdlVzZXJuYW1lKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkFjdGlvbkJ1dHRvbik7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5mYWNlYm9va0F1dGhlbnRpY2F0aW9uID09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZGYWNlYm9va0J1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkNhbmNlbEJ1dHRvbik7XG5cbiAgICAgICAgLy8gUmVzZXQgaW5wdXRzXG4gICAgICAgIGlucHV0TG9naW4udmFsdWUgPSAnJztcbiAgICAgICAgaW5wdXRVc2VybmFtZS52YWx1ZSA9ICcnO1xuICAgICAgICBpbnB1dFBhc3N3b3JkLnZhbHVlID0gJyc7XG5cbiAgICAgICAgLy8gQnV0dG9uXG4gICAgICAgIGFjdGlvbkJ1dHRvbi52YWx1ZSA9ICdDcmVhdGUgbmV3IHByb2ZpbGUnO1xuXG4gICAgICAgIC8vIEFjdGlvblxuICAgICAgICBhY3Rpb24gPSAnbmV3UHJvZmlsZSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0aGUgZW1haWwgd2l0aCB0aGUgcmVjb3ZlcnkgaW5zdHJ1Y3Rpb25zXG4gICAgICovXG4gICAgb2JqLnJlcXVlc3ROZXdQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGRpdkNhcHRjaGEpID49IDApIHtcbiAgICAgICAgICAgIHZhciBjYXB0Y2hhID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkxvZ28pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2UmVjb3ZlcnkpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2VXNlcm5hbWUpO1xuICAgICAgICBpZiAoY2FwdGNoYSkge1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkNhcHRjaGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZBY3Rpb25CdXR0b24pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2Q2FuY2VsQnV0dG9uKTtcbiAgICAgICAgYWN0aW9uQnV0dG9uLnZhbHVlID0gJ1JlcXVlc3QgYSBuZXcgcGFzc3dvcmQnO1xuICAgICAgICBpbnB1dFJlY292ZXJ5LnZhbHVlID0gMTtcblxuICAgICAgICAvLyBBY3Rpb25cbiAgICAgICAgYWN0aW9uID0gJ3JlcXVlc3ROZXdQYXNzd29yZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlybSByZWNvdmVyeSBjb2RlXG4gICAgICovXG4gICAgb2JqLmNvZGVDb25maXJtYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2TG9nbyk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZIYXNoKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkNvZGUpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2QWN0aW9uQnV0dG9uKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkNhbmNlbEJ1dHRvbik7XG4gICAgICAgIGFjdGlvbkJ1dHRvbi52YWx1ZSA9ICdDb25maXJtIGNvZGUnO1xuICAgICAgICBpbnB1dFJlY292ZXJ5LnZhbHVlID0gMjtcblxuICAgICAgICAvLyBBY3Rpb25cbiAgICAgICAgYWN0aW9uID0gJ2NvZGVDb25maXJtYXRpb24nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBteSBwYXNzd29yZFxuICAgICAqL1xuICAgIG9iai5jaGFuZ2VNeVBhc3N3b3JkID0gZnVuY3Rpb24oaGFzaCkge1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZMb2dvKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkhhc2gpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2UGFzc3dvcmQpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2UmVwZWF0UGFzc3dvcmQpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2QWN0aW9uQnV0dG9uKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkNhbmNlbEJ1dHRvbik7XG4gICAgICAgIGFjdGlvbkJ1dHRvbi52YWx1ZSA9ICdDaGFuZ2UgbXkgcGFzc3dvcmQnO1xuICAgICAgICBpbnB1dEhhc2gudmFsdWUgPSBoYXNoO1xuXG4gICAgICAgIC8vIEFjdGlvblxuICAgICAgICBhY3Rpb24gPSAnY2hhbmdlTXlQYXNzd29yZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBhY2Nlc3MgZGVmYXVsdCBtZXRob2RcbiAgICAgKi9cbiAgICBvYmoucmVxdWVzdEFjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZMb2dvKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdlVzZXJuYW1lKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdlBhc3N3b3JkKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdkFjdGlvbkJ1dHRvbik7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5mYWNlYm9va0F1dGhlbnRpY2F0aW9uID09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZGYWNlYm9va0J1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdlJlcXVlc3RCdXR0b24pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2UmVtZW1iZXJCdXR0b24pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2UmVxdWVzdEJ1dHRvbik7XG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5uZXdQcm9maWxlID09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZOZXdQcm9maWxlQnV0dG9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1dHRvblxuICAgICAgICBhY3Rpb25CdXR0b24udmFsdWUgPSAnTG9naW4nO1xuXG4gICAgICAgIC8vIFBhc3N3b3JkXG4gICAgICAgIGlucHV0UGFzc3dvcmQudmFsdWUgPSAnJztcblxuICAgICAgICAvLyBFbWFpbCBwZXJzaXN0ZW5jZVxuICAgICAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VybmFtZScpKSB7XG4gICAgICAgICAgICBpbnB1dFVzZXJuYW1lLnZhbHVlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VybmFtZScpO1xuICAgICAgICAgICAgaW5wdXRQYXNzd29yZC5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRVc2VybmFtZS5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWN0aW9uXG4gICAgICAgIGFjdGlvbiA9ICdyZXF1ZXN0QWNjZXNzJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGxvZ2luIHZpYSBmYWNlYm9va1xuICAgICAqL1xuICAgIG9iai5yZXF1ZXN0TG9naW5WaWFGYWNlYm9vayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodHlwZW9mKGRldmljZU5vdGlmaWNhdGlvblRva2VuKSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgRkIuZ2V0TG9naW5TdGF0dXMoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoISByZXNwb25zZS5zdGF0dXMgfHwgcmVzcG9uc2Uuc3RhdHVzICE9ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIEZCLmxvZ2luKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYXV0aFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmV4ZWN1dGUoeyBmOnJlc3BvbnNlLmF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dNZXNzYWdlKCdOb3QgYXV0aG9yaXplZCBieSBmYWNlYm9vaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB7c2NvcGU6ICdwdWJsaWNfcHJvZmlsZSxlbWFpbCd9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYmouZXhlY3V0ZSh7IGY6cmVzcG9uc2UuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgakRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmYkxvZ2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGpTdGFydCk7XG4gICAgICAgICAgICAgICAgZmJMb2dpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZXJyb3InLCBqRXJyb3IpO1xuICAgICAgICAgICAgICAgIGZiTG9naW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXhpdCcsIGpFeGl0KTtcbiAgICAgICAgICAgICAgICBmYkxvZ2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgZmJMb2dpbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGpTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGV2ZW50LnVybDtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoXCJhY2Nlc3NfdG9rZW5cIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHVybC5tYXRjaCgvPSguKj8pJi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVbMV0ubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZXhlY3V0ZSh7IGY6dVsxXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGpEZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgfSw1MDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihcImVycm9yPWFjY2Vzc19kZW5pZWRcIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoakRlc3Ryb3kgLDUwMCk7XG4gICAgICAgICAgICAgICAgICAgLy8gTm90IGF1dGhvcml6ZWQgYnkgZmFjZWJvb2tcbiAgICAgICAgICAgICAgICAgICBvYmouc2hvd01lc3NhZ2UoJ05vdCBhdXRob3JpemVkIGJ5IGZhY2Vib29rJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqRXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGpEZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgakV4aXQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGpEZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZiTG9naW4gPSB3aW5kb3cub3BlbihvYmoub3B0aW9ucy5mYWNlYm9va1VybCwgXCJfYmxhbmtcIiwgXCJsb2NhdGlvbj1ubyxjbG9zZWJ1dHRvbmNhcHRpb249RXhpdCxkaXNhbGxvd292ZXJzY3JvbGw9eWVzLHRvb2xiYXI9bm9cIik7XG4gICAgICAgICAgICBmYkxvZ2luLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGpTdGFydCk7XG4gICAgICAgICAgICBmYkxvZ2luLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlcnJvcicsIGpFcnJvcik7XG4gICAgICAgICAgICBmYkxvZ2luLmFkZEV2ZW50TGlzdGVuZXIoJ2V4aXQnLCBqRXhpdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBY3Rpb25cbiAgICAgICAgYWN0aW9uID0gJ3JlcXVlc3RMb2dpblZpYUZhY2Vib29rJztcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIHJlcXVlc3RcbiAgICBvYmouZXhlY3V0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLy8gTmV3IHByb2ZpbGVcbiAgICAgICAgaWYgKGFjdGlvbiA9PSAnbmV3UHJvZmlsZScpIHtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgvXihbXFx3LVxcLl0rQChbXFx3LV0rXFwuKStbXFx3LV17Miw0fSk/JC8pO1xuICAgICAgICAgICAgaWYgKCEgaW5wdXRVc2VybmFtZS52YWx1ZSB8fCAhIHBhdHRlcm4udGVzdChpbnB1dFVzZXJuYW1lLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ0ludmFsaWQgZS1tYWlsIGFkZHJlc3MnOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKC9eW2EtekEtWjAtOVxcX1xcLVxcLlxccytdKyQvKTtcbiAgICAgICAgICAgIGlmICghIGlucHV0TG9naW4udmFsdWUgfHwgISBwYXR0ZXJuLnRlc3QoaW5wdXRMb2dpbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdJbnZhbGlkIHVzZXJuYW1lLCBwbGVhc2UgdXNlIG9ubHkgY2hhcmFjdGVycyBhbmQgbnVtYmVycyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgb2JqLnNob3dNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2NoYW5nZU15UGFzc3dvcmQnKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFBhc3N3b3JkLnZhbHVlLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ1Bhc3N3b3JkIGlzIHRvbyBzaG9ydCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSAgaWYgKGlucHV0UGFzc3dvcmQudmFsdWUgIT0gaW5wdXRSZXBlYXRQYXNzd29yZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnUGFzc3dvcmQgc2hvdWxkIG1hdGNoJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMubmV3UGFzc3dvcmRWYWxpZGF0aW9uKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IG9iai5vcHRpb25zLm5ld1Bhc3N3b3JkVmFsaWRhdGlvbihvYmosIGlucHV0UGFzc3dvcmQudmFsdWUsIGlucHV0UGFzc3dvcmQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouc2hvd01lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcCBlbWFpbFxuICAgICAgICBpZiAoaW5wdXRVc2VybmFtZS52YWx1ZSAhPSAnJykge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VybmFtZScsIGlucHV0VXNlcm5hbWUudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FwdGNoYVxuICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGRpdkNhcHRjaGEpID49IDApIHtcbiAgICAgICAgICAgIGlmIChpbnB1dENhcHRjaGEudmFsdWUgPT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmouc2hvd01lc3NhZ2UoJ1BsZWFzZSBlbnRlciB0aGUgY2FwdGNoIGNvZGUgYmVsb3cnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcmxcbiAgICAgICAgdmFyIHVybCA9IG9iai5vcHRpb25zLnVybDtcblxuICAgICAgICAvLyBEZXZpY2UgdG9rZW5cbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmRldmljZVRva2VuKSB7XG4gICAgICAgICAgICB1cmwgKz0gJz90b2tlbj0nICsgb2JqLm9wdGlvbnMuZGV2aWNlVG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICB2YXIgb25zdWNjZXNzID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bGx5IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3ZlcnkgcHJvY2Vzc1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09ICdyZXF1ZXN0TmV3UGFzc3dvcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY29kZUNvbmZpcm1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSAnY29kZUNvbmZpcm1hdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZXF1ZXN0QWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09ICduZXdQcm9maWxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJlcXVlc3RBY2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyBwcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQubmV3UHJvZmlsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBUb2tlblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLmFjY2Vzc1Rva2VuID0gcmVzdWx0LnRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdBY2Nlc3MtVG9rZW4nLCByZXN1bHQudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBtZXNzYWdlXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3cgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICBvYmouc2hvd01lc3NhZ2UocmVzdWx0Lm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBjYXB0Y2hhIGNvZGVcbiAgICAgICAgICAgICAgICBpZiAoISByZXN1bHQuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGRpdkNhcHRjaGEpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdkNhcHRjaGEucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKGRpdkNhcHRjaGEsIGRpdkFjdGlvbkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlQ2FwdGNoYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBHaXZlIHRpbWUgdG8gdXNlciBzZWUgdGhlIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgIG9iai5jaGFuZ2VNeVBhc3N3b3JkKHJlc3VsdC5oYXNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwIGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uc3VjY2VzcykgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXN1bHQudXJsOyB9LCAyMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlc3VsdC51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmVycm9yKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25lcnJvcihyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFzc3dvcmRcbiAgICAgICAgaWYgKCEgZGF0YSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBqU3VpdGVzLmdldEZvcm1FbGVtZW50cyhlbCk7XG4gICAgICAgICAgICAvLyBFbmNvZGUgcGFzc3dvcmZkXG4gICAgICAgICAgICBpZiAoZGF0YS5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIGRhdGEucGFzc3dvcmQgPSBqU3VpdGVzLmxvZ2luLnNoYTUxMihkYXRhLnBhc3N3b3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlY292ZXJ5IGNvZGVcbiAgICAgICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZGl2Q29kZSkgPj0gMCAmJiBpbnB1dENvZGUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmggPSBqU3VpdGVzLmxvZ2luLnNoYTUxMihpbnB1dENvZGUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9hZGluZ1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdqbG9naW4tbG9hZGluZycpO1xuXG4gICAgICAgIC8vIFVybFxuICAgICAgICB2YXIgdXJsID0gKGFjdGlvbiA9PSAnbmV3UHJvZmlsZScgJiYgb2JqLm9wdGlvbnMubmV3UHJvZmlsZVVybCkgPyBvYmoub3B0aW9ucy5uZXdQcm9maWxlVXJsIDogb2JqLm9wdGlvbnMudXJsO1xuXG4gICAgICAgIC8vIFJlbW90ZSBjYWxsXG4gICAgICAgIGpTdWl0ZXMuYWpheCh7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgbG9hZGluZ1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2psb2dpbi1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICBvbnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy8gRXJyb3JcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdqbG9naW4tbG9hZGluZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmVycm9yKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uZXJyb3IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCc/Jyk7XHJcbiAgICBpZiAocXVlcnlTdHJpbmdbMV0gJiYgcXVlcnlTdHJpbmdbMV0ubGVuZ3RoID09IDEzMCAmJiBxdWVyeVN0cmluZ1sxXS5zdWJzdHIoMCwyKSA9PSAnaD0nKSB7XHJcbiAgICAgICAgb2JqLmNoYW5nZU15UGFzc3dvcmQocXVlcnlTdHJpbmdbMV0uc3Vic3RyKDIpKTtcclxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9iai5yZXF1ZXN0QWNjZXNzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn0pO1xuXG5qU3VpdGVzLmxvZ2luLnNoYTUxMiA9IChmdW5jdGlvbihzdHIpIHtcbiAgICBmdW5jdGlvbiBpbnQ2NChtc2ludF8zMiwgbHNpbnRfMzIpIHtcbiAgICAgICAgdGhpcy5oaWdoT3JkZXIgPSBtc2ludF8zMjtcbiAgICAgICAgdGhpcy5sb3dPcmRlciA9IGxzaW50XzMyO1xuICAgIH1cblxuICAgIHZhciBIID0gW25ldyBpbnQ2NCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IGludDY0KDB4YmI2N2FlODUsIDB4ODRjYWE3M2IpLFxuICAgICAgICBuZXcgaW50NjQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBpbnQ2NCgweGE1NGZmNTNhLCAweDVmMWQzNmYxKSxcbiAgICAgICAgbmV3IGludDY0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgaW50NjQoMHg5YjA1Njg4YywgMHgyYjNlNmMxZiksXG4gICAgICAgIG5ldyBpbnQ2NCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IGludDY0KDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkpXTtcblxuICAgIHZhciBLID0gW25ldyBpbnQ2NCgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgbmV3IGludDY0KDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLFxuICAgICAgICBuZXcgaW50NjQoMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiksIG5ldyBpbnQ2NCgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcbiAgICAgICAgbmV3IGludDY0KDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBuZXcgaW50NjQoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksXG4gICAgICAgIG5ldyBpbnQ2NCgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgbmV3IGludDY0KDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLFxuICAgICAgICBuZXcgaW50NjQoMHhkODA3YWE5OCwgMHhhMzAzMDI0MiksIG5ldyBpbnQ2NCgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcbiAgICAgICAgbmV3IGludDY0KDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBuZXcgaW50NjQoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksXG4gICAgICAgIG5ldyBpbnQ2NCgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgbmV3IGludDY0KDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLFxuICAgICAgICBuZXcgaW50NjQoMHg5YmRjMDZhNywgMHgyNWM3MTIzNSksIG5ldyBpbnQ2NCgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcbiAgICAgICAgbmV3IGludDY0KDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBuZXcgaW50NjQoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksXG4gICAgICAgIG5ldyBpbnQ2NCgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgbmV3IGludDY0KDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLFxuICAgICAgICBuZXcgaW50NjQoMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSksIG5ldyBpbnQ2NCgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcbiAgICAgICAgbmV3IGludDY0KDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBuZXcgaW50NjQoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksXG4gICAgICAgIG5ldyBpbnQ2NCgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgbmV3IGludDY0KDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLFxuICAgICAgICBuZXcgaW50NjQoMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiksIG5ldyBpbnQ2NCgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcbiAgICAgICAgbmV3IGludDY0KDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBuZXcgaW50NjQoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksXG4gICAgICAgIG5ldyBpbnQ2NCgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgbmV3IGludDY0KDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLFxuICAgICAgICBuZXcgaW50NjQoMHgyN2I3MGE4NSwgMHg0NmQyMmZmYyksIG5ldyBpbnQ2NCgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcbiAgICAgICAgbmV3IGludDY0KDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBuZXcgaW50NjQoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksXG4gICAgICAgIG5ldyBpbnQ2NCgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgbmV3IGludDY0KDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLFxuICAgICAgICBuZXcgaW50NjQoMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiksIG5ldyBpbnQ2NCgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcbiAgICAgICAgbmV3IGludDY0KDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBuZXcgaW50NjQoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksXG4gICAgICAgIG5ldyBpbnQ2NCgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgbmV3IGludDY0KDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLFxuICAgICAgICBuZXcgaW50NjQoMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCksIG5ldyBpbnQ2NCgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcbiAgICAgICAgbmV3IGludDY0KDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBuZXcgaW50NjQoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksXG4gICAgICAgIG5ldyBpbnQ2NCgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgbmV3IGludDY0KDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLFxuICAgICAgICBuZXcgaW50NjQoMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSksIG5ldyBpbnQ2NCgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcbiAgICAgICAgbmV3IGludDY0KDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBuZXcgaW50NjQoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksXG4gICAgICAgIG5ldyBpbnQ2NCgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgbmV3IGludDY0KDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLFxuICAgICAgICBuZXcgaW50NjQoMHg3NDhmODJlZSwgMHg1ZGVmYjJmYyksIG5ldyBpbnQ2NCgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcbiAgICAgICAgbmV3IGludDY0KDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBuZXcgaW50NjQoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksXG4gICAgICAgIG5ldyBpbnQ2NCgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgbmV3IGludDY0KDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLFxuICAgICAgICBuZXcgaW50NjQoMHhiZWY5YTNmNywgMHhiMmM2NzkxNSksIG5ldyBpbnQ2NCgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcbiAgICAgICAgbmV3IGludDY0KDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBuZXcgaW50NjQoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksXG4gICAgICAgIG5ldyBpbnQ2NCgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgbmV3IGludDY0KDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLFxuICAgICAgICBuZXcgaW50NjQoMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSksIG5ldyBpbnQ2NCgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcbiAgICAgICAgbmV3IGludDY0KDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBuZXcgaW50NjQoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksXG4gICAgICAgIG5ldyBpbnQ2NCgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgbmV3IGludDY0KDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLFxuICAgICAgICBuZXcgaW50NjQoMHgzYzllYmUwYSwgMHgxNWM5YmViYyksIG5ldyBpbnQ2NCgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcbiAgICAgICAgbmV3IGludDY0KDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBuZXcgaW50NjQoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksXG4gICAgICAgIG5ldyBpbnQ2NCgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgbmV3IGludDY0KDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXTtcblxuICAgIHZhciBXID0gbmV3IEFycmF5KDY0KTtcbiAgICB2YXIgYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaSwgajtcbiAgICB2YXIgVDEsIFQyO1xuICAgIHZhciBjaGFyc2l6ZSA9IDg7XG5cbiAgICBmdW5jdGlvbiB1dGY4X2VuY29kZShzdHIpIHtcbiAgICAgICAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHIyYmluYihzdHIpIHtcbiAgICAgICAgdmFyIGJpbiA9IFtdO1xuICAgICAgICB2YXIgbWFzayA9ICgxIDw8IGNoYXJzaXplKSAtIDE7XG4gICAgICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoICogY2hhcnNpemU7XG4gICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IGNoYXJzaXplKSB7XG4gICAgICAgICAgICBiaW5baSA+PiA1XSB8PSAoc3RyLmNoYXJDb2RlQXQoaSAvIGNoYXJzaXplKSAmIG1hc2spIDw8ICgzMiAtIGNoYXJzaXplIC0gKGkgJSAzMikpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBiaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluYjJoZXgoYmluYXJyYXkpIHtcbiAgICAgICAgdmFyIGhleF90YWIgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbiAgICAgICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgICAgIHZhciBsZW5ndGggPSBiaW5hcnJheS5sZW5ndGggKiA0O1xuICAgICAgICB2YXIgc3JjQnl0ZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBzcmNCeXRlID0gYmluYXJyYXlbaSA+PiAyXSA+PiAoKDMgLSAoaSAlIDQpKSAqIDgpO1xuICAgICAgICAgICAgc3RyICs9IGhleF90YWIuY2hhckF0KChzcmNCeXRlID4+IDQpICYgMHhGKSArIGhleF90YWIuY2hhckF0KHNyY0J5dGUgJiAweEYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzYWZlX2FkZF8yKHgsIHkpIHtcbiAgICAgICAgdmFyIGxzdywgbXN3LCBsb3dPcmRlciwgaGlnaE9yZGVyO1xuXG4gICAgICAgIGxzdyA9ICh4Lmxvd09yZGVyICYgMHhGRkZGKSArICh5Lmxvd09yZGVyICYgMHhGRkZGKTtcbiAgICAgICAgbXN3ID0gKHgubG93T3JkZXIgPj4+IDE2KSArICh5Lmxvd09yZGVyID4+PiAxNikgKyAobHN3ID4+PiAxNik7XG4gICAgICAgIGxvd09yZGVyID0gKChtc3cgJiAweEZGRkYpIDw8IDE2KSB8IChsc3cgJiAweEZGRkYpO1xuXG4gICAgICAgIGxzdyA9ICh4LmhpZ2hPcmRlciAmIDB4RkZGRikgKyAoeS5oaWdoT3JkZXIgJiAweEZGRkYpICsgKG1zdyA+Pj4gMTYpO1xuICAgICAgICBtc3cgPSAoeC5oaWdoT3JkZXIgPj4+IDE2KSArICh5LmhpZ2hPcmRlciA+Pj4gMTYpICsgKGxzdyA+Pj4gMTYpO1xuICAgICAgICBoaWdoT3JkZXIgPSAoKG1zdyAmIDB4RkZGRikgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBpbnQ2NChoaWdoT3JkZXIsIGxvd09yZGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzYWZlX2FkZF80KGEsIGIsIGMsIGQpIHtcbiAgICAgICAgdmFyIGxzdywgbXN3LCBsb3dPcmRlciwgaGlnaE9yZGVyO1xuXG4gICAgICAgIGxzdyA9IChhLmxvd09yZGVyICYgMHhGRkZGKSArIChiLmxvd09yZGVyICYgMHhGRkZGKSArIChjLmxvd09yZGVyICYgMHhGRkZGKSArIChkLmxvd09yZGVyICYgMHhGRkZGKTtcbiAgICAgICAgbXN3ID0gKGEubG93T3JkZXIgPj4+IDE2KSArIChiLmxvd09yZGVyID4+PiAxNikgKyAoYy5sb3dPcmRlciA+Pj4gMTYpICsgKGQubG93T3JkZXIgPj4+IDE2KSArIChsc3cgPj4+IDE2KTtcbiAgICAgICAgbG93T3JkZXIgPSAoKG1zdyAmIDB4RkZGRikgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7XG5cbiAgICAgICAgbHN3ID0gKGEuaGlnaE9yZGVyICYgMHhGRkZGKSArIChiLmhpZ2hPcmRlciAmIDB4RkZGRikgKyAoYy5oaWdoT3JkZXIgJiAweEZGRkYpICsgKGQuaGlnaE9yZGVyICYgMHhGRkZGKSArIChtc3cgPj4+IDE2KTtcbiAgICAgICAgbXN3ID0gKGEuaGlnaE9yZGVyID4+PiAxNikgKyAoYi5oaWdoT3JkZXIgPj4+IDE2KSArIChjLmhpZ2hPcmRlciA+Pj4gMTYpICsgKGQuaGlnaE9yZGVyID4+PiAxNikgKyAobHN3ID4+PiAxNik7XG4gICAgICAgIGhpZ2hPcmRlciA9ICgobXN3ICYgMHhGRkZGKSA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcblxuICAgICAgICByZXR1cm4gbmV3IGludDY0KGhpZ2hPcmRlciwgbG93T3JkZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhZmVfYWRkXzUoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICB2YXIgbHN3LCBtc3csIGxvd09yZGVyLCBoaWdoT3JkZXI7XG5cbiAgICAgICAgbHN3ID0gKGEubG93T3JkZXIgJiAweEZGRkYpICsgKGIubG93T3JkZXIgJiAweEZGRkYpICsgKGMubG93T3JkZXIgJiAweEZGRkYpICsgKGQubG93T3JkZXIgJiAweEZGRkYpICsgKGUubG93T3JkZXIgJiAweEZGRkYpO1xuICAgICAgICBtc3cgPSAoYS5sb3dPcmRlciA+Pj4gMTYpICsgKGIubG93T3JkZXIgPj4+IDE2KSArIChjLmxvd09yZGVyID4+PiAxNikgKyAoZC5sb3dPcmRlciA+Pj4gMTYpICsgKGUubG93T3JkZXIgPj4+IDE2KSArIChsc3cgPj4+IDE2KTtcbiAgICAgICAgbG93T3JkZXIgPSAoKG1zdyAmIDB4RkZGRikgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7XG5cbiAgICAgICAgbHN3ID0gKGEuaGlnaE9yZGVyICYgMHhGRkZGKSArIChiLmhpZ2hPcmRlciAmIDB4RkZGRikgKyAoYy5oaWdoT3JkZXIgJiAweEZGRkYpICsgKGQuaGlnaE9yZGVyICYgMHhGRkZGKSArIChlLmhpZ2hPcmRlciAmIDB4RkZGRikgKyAobXN3ID4+PiAxNik7XG4gICAgICAgIG1zdyA9IChhLmhpZ2hPcmRlciA+Pj4gMTYpICsgKGIuaGlnaE9yZGVyID4+PiAxNikgKyAoYy5oaWdoT3JkZXIgPj4+IDE2KSArIChkLmhpZ2hPcmRlciA+Pj4gMTYpICsgKGUuaGlnaE9yZGVyID4+PiAxNikgKyAobHN3ID4+PiAxNik7XG4gICAgICAgIGhpZ2hPcmRlciA9ICgobXN3ICYgMHhGRkZGKSA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcblxuICAgICAgICByZXR1cm4gbmV3IGludDY0KGhpZ2hPcmRlciwgbG93T3JkZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haih4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiBuZXcgaW50NjQoXG4gICAgICAgICAgICAoeC5oaWdoT3JkZXIgJiB5LmhpZ2hPcmRlcikgXiAoeC5oaWdoT3JkZXIgJiB6LmhpZ2hPcmRlcikgXiAoeS5oaWdoT3JkZXIgJiB6LmhpZ2hPcmRlciksXG4gICAgICAgICAgICAoeC5sb3dPcmRlciAmIHkubG93T3JkZXIpIF4gKHgubG93T3JkZXIgJiB6Lmxvd09yZGVyKSBeICh5Lmxvd09yZGVyICYgei5sb3dPcmRlcilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaCh4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiBuZXcgaW50NjQoXG4gICAgICAgICAgICAoeC5oaWdoT3JkZXIgJiB5LmhpZ2hPcmRlcikgXiAofnguaGlnaE9yZGVyICYgei5oaWdoT3JkZXIpLFxuICAgICAgICAgICAgKHgubG93T3JkZXIgJiB5Lmxvd09yZGVyKSBeICh+eC5sb3dPcmRlciAmIHoubG93T3JkZXIpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90cih4LCBuKSB7XG4gICAgICAgIGlmIChuIDw9IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGludDY0KFxuICAgICAgICAgICAgICh4LmhpZ2hPcmRlciA+Pj4gbikgfCAoeC5sb3dPcmRlciA8PCAoMzIgLSBuKSksXG4gICAgICAgICAgICAgKHgubG93T3JkZXIgPj4+IG4pIHwgKHguaGlnaE9yZGVyIDw8ICgzMiAtIG4pKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaW50NjQoXG4gICAgICAgICAgICAgKHgubG93T3JkZXIgPj4+IG4pIHwgKHguaGlnaE9yZGVyIDw8ICgzMiAtIG4pKSxcbiAgICAgICAgICAgICAoeC5oaWdoT3JkZXIgPj4+IG4pIHwgKHgubG93T3JkZXIgPDwgKDMyIC0gbikpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2lnbWEwKHgpIHtcbiAgICAgICAgdmFyIHJvdHIyOCA9IHJvdHIoeCwgMjgpO1xuICAgICAgICB2YXIgcm90cjM0ID0gcm90cih4LCAzNCk7XG4gICAgICAgIHZhciByb3RyMzkgPSByb3RyKHgsIDM5KTtcblxuICAgICAgICByZXR1cm4gbmV3IGludDY0KFxuICAgICAgICAgICAgcm90cjI4LmhpZ2hPcmRlciBeIHJvdHIzNC5oaWdoT3JkZXIgXiByb3RyMzkuaGlnaE9yZGVyLFxuICAgICAgICAgICAgcm90cjI4Lmxvd09yZGVyIF4gcm90cjM0Lmxvd09yZGVyIF4gcm90cjM5Lmxvd09yZGVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2lnbWExKHgpIHtcbiAgICAgICAgdmFyIHJvdHIxNCA9IHJvdHIoeCwgMTQpO1xuICAgICAgICB2YXIgcm90cjE4ID0gcm90cih4LCAxOCk7XG4gICAgICAgIHZhciByb3RyNDEgPSByb3RyKHgsIDQxKTtcblxuICAgICAgICByZXR1cm4gbmV3IGludDY0KFxuICAgICAgICAgICAgcm90cjE0LmhpZ2hPcmRlciBeIHJvdHIxOC5oaWdoT3JkZXIgXiByb3RyNDEuaGlnaE9yZGVyLFxuICAgICAgICAgICAgcm90cjE0Lmxvd09yZGVyIF4gcm90cjE4Lmxvd09yZGVyIF4gcm90cjQxLmxvd09yZGVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2FtbWEwKHgpIHtcbiAgICAgICAgdmFyIHJvdHIxID0gcm90cih4LCAxKSwgcm90cjggPSByb3RyKHgsIDgpLCBzaHI3ID0gc2hyKHgsIDcpO1xuXG4gICAgICAgIHJldHVybiBuZXcgaW50NjQoXG4gICAgICAgICAgICByb3RyMS5oaWdoT3JkZXIgXiByb3RyOC5oaWdoT3JkZXIgXiBzaHI3LmhpZ2hPcmRlcixcbiAgICAgICAgICAgIHJvdHIxLmxvd09yZGVyIF4gcm90cjgubG93T3JkZXIgXiBzaHI3Lmxvd09yZGVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2FtbWExKHgpIHtcbiAgICAgICAgdmFyIHJvdHIxOSA9IHJvdHIoeCwgMTkpO1xuICAgICAgICB2YXIgcm90cjYxID0gcm90cih4LCA2MSk7XG4gICAgICAgIHZhciBzaHI2ID0gc2hyKHgsIDYpO1xuXG4gICAgICAgIHJldHVybiBuZXcgaW50NjQoXG4gICAgICAgICAgICByb3RyMTkuaGlnaE9yZGVyIF4gcm90cjYxLmhpZ2hPcmRlciBeIHNocjYuaGlnaE9yZGVyLFxuICAgICAgICAgICAgcm90cjE5Lmxvd09yZGVyIF4gcm90cjYxLmxvd09yZGVyIF4gc2hyNi5sb3dPcmRlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNocih4LCBuKSB7XG4gICAgICAgIGlmIChuIDw9IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGludDY0KFxuICAgICAgICAgICAgICAgIHguaGlnaE9yZGVyID4+PiBuLFxuICAgICAgICAgICAgICAgIHgubG93T3JkZXIgPj4+IG4gfCAoeC5oaWdoT3JkZXIgPDwgKDMyIC0gbikpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBpbnQ2NChcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIHguaGlnaE9yZGVyIDw8ICgzMiAtIG4pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0ciA9IHV0ZjhfZW5jb2RlKHN0cik7XG4gICAgdmFyIHN0cmxlbiA9IHN0ci5sZW5ndGgqY2hhcnNpemU7XG4gICAgc3RyID0gc3RyMmJpbmIoc3RyKTtcblxuICAgIHN0cltzdHJsZW4gPj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBzdHJsZW4gJSAzMik7XG4gICAgc3RyWygoKHN0cmxlbiArIDEyOCkgPj4gMTApIDw8IDUpICsgMzFdID0gc3RybGVuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDMyKSB7XG4gICAgICAgIGEgPSBIWzBdO1xuICAgICAgICBiID0gSFsxXTtcbiAgICAgICAgYyA9IEhbMl07XG4gICAgICAgIGQgPSBIWzNdO1xuICAgICAgICBlID0gSFs0XTtcbiAgICAgICAgZiA9IEhbNV07XG4gICAgICAgIGcgPSBIWzZdO1xuICAgICAgICBoID0gSFs3XTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChqIDwgMTYpIHtcbiAgICAgICAgICAgICAgICBXW2pdID0gbmV3IGludDY0KHN0cltqKjIgKyBpXSwgc3RyW2oqMiArIGkgKyAxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFdbal0gPSBzYWZlX2FkZF80KGdhbW1hMShXW2ogLSAyXSksIFdbaiAtIDddLCBnYW1tYTAoV1tqIC0gMTVdKSwgV1tqIC0gMTZdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVDEgPSBzYWZlX2FkZF81KGgsIHNpZ21hMShlKSwgY2goZSwgZiwgZyksIEtbal0sIFdbal0pO1xuICAgICAgICAgICAgVDIgPSBzYWZlX2FkZF8yKHNpZ21hMChhKSwgbWFqKGEsIGIsIGMpKTtcbiAgICAgICAgICAgIGggPSBnO1xuICAgICAgICAgICAgZyA9IGY7XG4gICAgICAgICAgICBmID0gZTtcbiAgICAgICAgICAgIGUgPSBzYWZlX2FkZF8yKGQsIFQxKTtcbiAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgYyA9IGI7XG4gICAgICAgICAgICBiID0gYTtcbiAgICAgICAgICAgIGEgPSBzYWZlX2FkZF8yKFQxLCBUMik7XG4gICAgICAgIH1cblxuICAgICAgICBIWzBdID0gc2FmZV9hZGRfMihhLCBIWzBdKTtcbiAgICAgICAgSFsxXSA9IHNhZmVfYWRkXzIoYiwgSFsxXSk7XG4gICAgICAgIEhbMl0gPSBzYWZlX2FkZF8yKGMsIEhbMl0pO1xuICAgICAgICBIWzNdID0gc2FmZV9hZGRfMihkLCBIWzNdKTtcbiAgICAgICAgSFs0XSA9IHNhZmVfYWRkXzIoZSwgSFs0XSk7XG4gICAgICAgIEhbNV0gPSBzYWZlX2FkZF8yKGYsIEhbNV0pO1xuICAgICAgICBIWzZdID0gc2FmZV9hZGRfMihnLCBIWzZdKTtcbiAgICAgICAgSFs3XSA9IHNhZmVfYWRkXzIoaCwgSFs3XSk7XG4gICAgfVxuXG4gICAgdmFyIGJpbmFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBILmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJpbmFycmF5LnB1c2goSFtpXS5oaWdoT3JkZXIpO1xuICAgICAgICBiaW5hcnJheS5wdXNoKEhbaV0ubG93T3JkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5iMmhleChiaW5hcnJheSk7XG59KTtcclxuXHJcbi8qKlxyXG4gKiAoYykgalRvb2xzIElucHV0IE1hc2tcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxob2RlbC9qdG9vbHNcclxuICpcclxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XHJcbiAqIEBkZXNjcmlwdGlvbjogSW5wdXQgbWFza1xyXG4gKi9cclxuXHJcbmpTdWl0ZXMubWFzayA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICB2YXIgdmFsdWVzID0gW11cclxuICAgIHZhciBwaWVjZXMgPSBbXTtcclxuXHJcbiAgICBvYmoucnVuID0gZnVuY3Rpb24odmFsdWUsIG1hc2ssIGRlY2ltYWwpIHtcclxuICAgICAgICBpZiAodmFsdWUgJiYgbWFzaykge1xyXG4gICAgICAgICAgICBpZiAoISBkZWNpbWFsKSB7XHJcbiAgICAgICAgICAgICAgICBkZWNpbWFsID0gJy4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBOdW1iZXIodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gKCcnK3ZhbHVlKS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbnVtYmVyWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlRGVjaW1hbCA9IG51bWJlclsxXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gJycgKyB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbWFzayB0b2tlblxyXG4gICAgICAgICAgICBvYmoucHJlcGFyZShtYXNrKTtcclxuICAgICAgICAgICAgLy8gQ3VycmVudCB2YWx1ZVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGN1cnJlbnQgdmFsdWVcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZVtpXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5wcm9jZXNzKGN1cnJlbnRWYWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZURlY2ltYWwpIHtcclxuICAgICAgICAgICAgICAgIG9iai5wcm9jZXNzKGRlY2ltYWwpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHZhbHVlRGVjaW1hbDtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVja2luZyBjdXJyZW50IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZVtpXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoucHJvY2VzcyhjdXJyZW50VmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEZvcm1hdHRlZCB2YWx1ZVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLmpvaW4oJycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmFwcGx5ID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCAmJiAhIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkge1xyXG4gICAgICAgICAgICB2YXIgbWFzayA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1tYXNrJyk7XHJcbiAgICAgICAgICAgIGlmIChtYXNrICYmIGUua2V5Q29kZSA+IDQ2KSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBtYXNrIHRva2VuXHJcbiAgICAgICAgICAgICAgICBvYmoucHJlcGFyZShtYXNrKTtcclxuICAgICAgICAgICAgICAgIC8vIEN1cnJlbnQgdmFsdWVcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5zZWxlY3Rpb25TdGFydCA8IGUudGFyZ2V0LnNlbGVjdGlvbkVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBlLnRhcmdldC52YWx1ZS5zdWJzdHJpbmcoMCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQpOyBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGN1cnJlbnQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRWYWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlW2ldICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5wcm9jZXNzKGN1cnJlbnRWYWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBOZXcgaW5wdXRcclxuICAgICAgICAgICAgICAgIG9iai5wcm9jZXNzKG9iai5mcm9tS2V5Q29kZShlKSk7XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdmFsdWUgdG8gdGhlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlID0gdmFsdWVzLmpvaW4oJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBpZWNlcy5sZW5ndGggPT0gdmFsdWVzLmxlbmd0aCAmJiBwaWVjZXNbcGllY2VzLmxlbmd0aC0xXS5sZW5ndGggPT0gdmFsdWVzW3ZhbHVlcy5sZW5ndGgtMV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLWNvbXBsZXRlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGF0YS1jb21wbGV0ZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyBpbnB1dHMgYW5kIHNhdmUgdG8gdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIG9iai5wcm9jZXNzID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlmIChwaWVjZXNbaW5kZXhdID09ICdtbScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaW5kZXhdID09IG51bGwgfHwgdmFsdWVzW2luZGV4XSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChpbnB1dCkgPiAxICYmIHBhcnNlSW50KGlucHV0KSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSAnMCcgKyBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChpbnB1dCkgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaW5kZXhdID09IDEgJiYgdmFsdWVzW2luZGV4XSA8IDIgJiYgcGFyc2VJbnQoaW5wdXQpIDwgMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdICs9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlc1tpbmRleF0gPT0gMCAmJiB2YWx1ZXNbaW5kZXhdIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSArPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBpZWNlc1tpbmRleF0gPT0gJ2RkJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpbmRleF0gPT0gbnVsbCB8fCB2YWx1ZXNbaW5kZXhdID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGlucHV0KSA+IDMgJiYgcGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9ICcwJyArIGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGlucHV0KSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpbmRleF0gPT0gMyAmJiBwYXJzZUludChpbnB1dCkgPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gKz0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWVzW2luZGV4XSA8IDMgJiYgcGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSArPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBpZWNlc1tpbmRleF0gPT0gJ2hoMjQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2luZGV4XSA9PSBudWxsIHx8IHZhbHVlc1tpbmRleF0gPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoaW5wdXQpID4gMiAmJiBwYXJzZUludChpbnB1dCkgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gJzAnICsgaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2luZGV4XSA9PSAyICYmIHBhcnNlSW50KGlucHV0KSA8IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSArPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXNbaW5kZXhdIDwgMiAmJiBwYXJzZUludChpbnB1dCkgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdICs9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnaGgnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2luZGV4XSA9PSBudWxsIHx8IHZhbHVlc1tpbmRleF0gPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoaW5wdXQpID4gMSAmJiBwYXJzZUludChpbnB1dCkgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gJzAnICsgaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2luZGV4XSA9PSAxICYmIHBhcnNlSW50KGlucHV0KSA8IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSArPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXNbaW5kZXhdIDwgMSAmJiBwYXJzZUludChpbnB1dCkgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdICs9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnbWknIHx8IHBpZWNlc1tpbmRleF0gPT0gJ3NzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpbmRleF0gPT0gbnVsbCB8fCB2YWx1ZXNbaW5kZXhdID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGlucHV0KSA+IDUgJiYgcGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9ICcwJyArIGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGlucHV0KSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGlucHV0KSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gKz0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAneXknIHx8IHBpZWNlc1tpbmRleF0gPT0gJ3l5eXknKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoaW5wdXQpIDwgMTApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2luZGV4XSA9PSBudWxsIHx8IHZhbHVlc1tpbmRleF0gPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gKz0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaW5kZXhdLmxlbmd0aCA9PSBwaWVjZXNbaW5kZXhdLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBpZWNlc1tpbmRleF0gPT0gJyMnIHx8IHBpZWNlc1tpbmRleF0gPT0gJyMuIyMnIHx8IHBpZWNlc1tpbmRleF0gPT0gJyMsIyMnIHx8IHBpZWNlc1tpbmRleF0gPT0gJyMgIyMnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1swLTldL2cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlc1tpbmRleF0gPT0gJyMuIyMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnLic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaWVjZXNbaW5kZXhdID09ICcjLCMjJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJywnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnIyAjIycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaW5kZXhdID09IG51bGwgfHwgdmFsdWVzW2luZGV4XSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSArPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlc1tpbmRleF0ubWF0Y2goL1swLTldL2cpLmpvaW4oJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSB2YWx1ZXNbaW5kZXhdLmxlbmd0aCAtIDE7IGogPj0gMCA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucHVzaCh2YWx1ZXNbaW5kZXhdW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgKHMgJSAzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2goc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdC5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdC5qb2luKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaW5kZXhdLnN1YnN0cigwLDEpID09IHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZXNbaW5kZXhdLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZXNbaW5kZXhdID09ICcjLiMjJyAmJiBpbnB1dCA9PSAnLicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnIywjIycgJiYgaW5wdXQgPT0gJywnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBpZWNlc1tpbmRleF0gPT0gJyMgIyMnICYmIGlucHV0ID09ICcgJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGllY2VzW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZXNbaW5kZXhdID09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlc1tpbmRleF0gPT0gJzAnICYmIHBpZWNlc1tpbmRleCsxXSA9PSBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnMCcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5tYXRjaCgvWzAtOV0vZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBpZWNlc1tpbmRleF0gPT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1thLXpBLVpdL2cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChwaWVjZXNbaW5kZXhdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGllY2VzW2luZGV4XSA9PSAnXFxcXGEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ID0gJ2EnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnXFxcXDAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ID0gJzAnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGllY2VzW2luZGV4XSA9PSAnWy1dJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJy0nIHx8IGlucHV0ID09ICcrJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ID0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBwaWVjZXNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgfSB3aGlsZSAocGllY2VzW2luZGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgdG9rZW5zIGZvciB0aGUgbWFza1xyXG4gICAgICovXHJcbiAgICBvYmoucHJlcGFyZSA9IGZ1bmN0aW9uKG1hc2spIHtcclxuICAgICAgICBwaWVjZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1hc2tbaV0ubWF0Y2goL1swLTldfFthLXpdfFxcXFwvZykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXNrW2ldID09ICd5JyAmJiBtYXNrW2krMV0gPT0gJ3knICYmIG1hc2tbaSsyXSA9PSAneScgJiYgbWFza1tpKzNdID09ICd5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCd5eXl5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICd5JyAmJiBtYXNrW2krMV0gPT0gJ3knKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ3l5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdtJyAmJiBtYXNrW2krMV0gPT0gJ20nICYmIG1hc2tbaSsyXSA9PSAnbScgJiYgbWFza1tpKzNdID09ICdtJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCdtbW1tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdtJyAmJiBtYXNrW2krMV0gPT0gJ20nICYmIG1hc2tbaSsyXSA9PSAnbScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZXMucHVzaCgnbW1tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdtJyAmJiBtYXNrW2krMV0gPT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ21tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdkJyAmJiBtYXNrW2krMV0gPT0gJ2QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ2RkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdoJyAmJiBtYXNrW2krMV0gPT0gJ2gnICYmIG1hc2tbaSsyXSA9PSAnMicgJiYgbWFza1tpKzNdID09ICc0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCdoaDI0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdoJyAmJiBtYXNrW2krMV0gPT0gJ2gnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ2hoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdtJyAmJiBtYXNrW2krMV0gPT0gJ2knKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ21pJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdzJyAmJiBtYXNrW2krMV0gPT0gJ3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ3NzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdhJyAmJiBtYXNrW2krMV0gPT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ2FtJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdwJyAmJiBtYXNrW2krMV0gPT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ3BtJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdcXFxcJyAmJiBtYXNrW2krMV0gPT0gJzAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ1xcXFwwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdcXFxcJyAmJiBtYXNrW2krMV0gPT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goJ1xcXFxhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZXMucHVzaChtYXNrW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXNrW2ldID09ICcjJyAmJiBtYXNrW2krMV0gPT0gJy4nICYmIG1hc2tbaSsyXSA9PSAnIycgJiYgbWFza1tpKzNdID09ICcjJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCcjLiMjJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICcjJyAmJiBtYXNrW2krMV0gPT0gJywnICYmIG1hc2tbaSsyXSA9PSAnIycgJiYgbWFza1tpKzNdID09ICcjJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCcjLCMjJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICcjJyAmJiBtYXNrW2krMV0gPT0gJyAnICYmIG1hc2tbaSsyXSA9PSAnIycgJiYgbWFza1tpKzNdID09ICcjJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKCcjICMjJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrW2ldID09ICdbJyAmJiBtYXNrW2krMV0gPT0gJy0nICYmIG1hc2tbaSsyXSA9PSAnXScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZXMucHVzaCgnWy1dJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZXMucHVzaChtYXNrW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBUaGFua3MgZm9yIHRoZSBjb2xsYWJvcmF0aW9uXHJcbiAgICAgKi9cclxuICAgIG9iai5mcm9tS2V5Q29kZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgX3RvX2FzY2lpID0ge1xyXG4gICAgICAgICAgICAnMTg4JzogJzQ0JyxcclxuICAgICAgICAgICAgJzEwOSc6ICc0NScsXHJcbiAgICAgICAgICAgICcxOTAnOiAnNDYnLFxyXG4gICAgICAgICAgICAnMTkxJzogJzQ3JyxcclxuICAgICAgICAgICAgJzE5Mic6ICc5NicsXHJcbiAgICAgICAgICAgICcyMjAnOiAnOTInLFxyXG4gICAgICAgICAgICAnMjIyJzogJzM5JyxcclxuICAgICAgICAgICAgJzIyMSc6ICc5MycsXHJcbiAgICAgICAgICAgICcyMTknOiAnOTEnLFxyXG4gICAgICAgICAgICAnMTczJzogJzQ1JyxcclxuICAgICAgICAgICAgJzE4Nyc6ICc2MScsIC8vSUUgS2V5IGNvZGVzXHJcbiAgICAgICAgICAgICcxODYnOiAnNTknLCAvL0lFIEtleSBjb2Rlc1xyXG4gICAgICAgICAgICAnMTg5JzogJzQ1JyAgLy9JRSBLZXkgY29kZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzaGlmdFVwcyA9IHtcclxuICAgICAgICAgICAgXCI5NlwiOiBcIn5cIixcclxuICAgICAgICAgICAgXCI0OVwiOiBcIiFcIixcclxuICAgICAgICAgICAgXCI1MFwiOiBcIkBcIixcclxuICAgICAgICAgICAgXCI1MVwiOiBcIiNcIixcclxuICAgICAgICAgICAgXCI1MlwiOiBcIiRcIixcclxuICAgICAgICAgICAgXCI1M1wiOiBcIiVcIixcclxuICAgICAgICAgICAgXCI1NFwiOiBcIl5cIixcclxuICAgICAgICAgICAgXCI1NVwiOiBcIiZcIixcclxuICAgICAgICAgICAgXCI1NlwiOiBcIipcIixcclxuICAgICAgICAgICAgXCI1N1wiOiBcIihcIixcclxuICAgICAgICAgICAgXCI0OFwiOiBcIilcIixcclxuICAgICAgICAgICAgXCI0NVwiOiBcIl9cIixcclxuICAgICAgICAgICAgXCI2MVwiOiBcIitcIixcclxuICAgICAgICAgICAgXCI5MVwiOiBcIntcIixcclxuICAgICAgICAgICAgXCI5M1wiOiBcIn1cIixcclxuICAgICAgICAgICAgXCI5MlwiOiBcInxcIixcclxuICAgICAgICAgICAgXCI1OVwiOiBcIjpcIixcclxuICAgICAgICAgICAgXCIzOVwiOiBcIlxcXCJcIixcclxuICAgICAgICAgICAgXCI0NFwiOiBcIjxcIixcclxuICAgICAgICAgICAgXCI0NlwiOiBcIj5cIixcclxuICAgICAgICAgICAgXCI0N1wiOiBcIj9cIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjID0gZS53aGljaDtcclxuXHJcbiAgICAgICAgaWYgKF90b19hc2NpaS5oYXNPd25Qcm9wZXJ0eShjKSkge1xyXG4gICAgICAgICAgICBjID0gX3RvX2FzY2lpW2NdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFlLnNoaWZ0S2V5ICYmIChjID49IDY1ICYmIGMgPD0gOTApKSB7XHJcbiAgICAgICAgICAgIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMgKyAzMik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5ICYmIHNoaWZ0VXBzLmhhc093blByb3BlcnR5KGMpKSB7XHJcbiAgICAgICAgICAgIGMgPSBzaGlmdFVwc1tjXTtcclxuICAgICAgICB9IGVsc2UgaWYgKDk2IDw9IGMgJiYgYyA8PSAxMDUpIHtcclxuICAgICAgICAgICAgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyAtIDQ4KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pKCk7XHJcblxyXG5qU3VpdGVzLm1vYmlsZSA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICBpZiAoalN1aXRlcy5lbCkge1xyXG4gICAgICAgIGpTdWl0ZXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcHRpb24tdGl0bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG59KSgpO1xyXG5cclxualN1aXRlcy5wYWdlcyA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBjb250YWluZXIgPSBudWxsO1xyXG4gICAgdmFyIGN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIHBhZ2VcclxuICAgIHZhciBjcmVhdGVQYWdlID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcclxuICAgICAgICAvLyBDcmVhdGUgcGFnZVxyXG4gICAgICAgIHZhciBwYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcGFnZS5jbGFzc0xpc3QuYWRkKCdwYWdlJyk7XHJcblxyXG4gICAgICAgIC8vIEFsd2F5cyBoaWRkZW5cclxuICAgICAgICBwYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIC8vIEtlZXAgb3B0aW9uc1xyXG4gICAgICAgIHBhZ2Uub3B0aW9ucyA9IG9wdGlvbnMgPyBvcHRpb25zIDoge307XHJcblxyXG4gICAgICAgIGlmICghIGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBhZ2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUocGFnZSwgY3VycmVudC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBqU3VpdGVzLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHBhZ2Uub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUHVzaCB0byByZWZyZXNoIGNvbnRyb2xzXHJcbiAgICAgICAgICAgICAgICBqU3VpdGVzLnJlZnJlc2gocGFnZSwgcGFnZS5vcHRpb25zLm9ucHVzaCk7XHJcblxuICAgICAgICAgICAgICAgIC8vIE9wZW4gcGFnZVxyXG4gICAgICAgICAgICAgICAgcGFnZS5pbm5lckhUTUwgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgamF2YXNjcmlwdFxyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHBhZ2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xyXG4gICAgICAgICAgICAgICAgLy8gUnVuIHBvc3NpYmxlIGlubGluZSBzY3JpcHRzXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBzY3JpcHRbaV0uZ2V0QXR0cmlidXRlKCd0eXBlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgdHlwZSB8fCB0eXBlID09ICd0ZXh0L2phdmFzY3JpcHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoc2NyaXB0W2ldLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRpdGxlXHJcbiAgICAgICAgICAgICAgICBwYWdlLnNldFRpdGxlID0gZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0uaW5uZXJIVE1MID0gdGV4dDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFNob3cgcGFnZVxyXG4gICAgICAgICAgICAgICAgaWYgKCEgcGFnZS5vcHRpb25zLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dQYWdlKHBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gT25sb2FkIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHBhZ2Uub3B0aW9ucy5vbmxvYWQpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlLm9wdGlvbnMub25sb2FkKHBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRm9yY2UgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoY2FsbGJhY2spID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhwYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFnZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2hvd1BhZ2UgPSBmdW5jdGlvbihwYWdlLCBpZ25vcmVIaXN0b3J5LCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50ID09IHBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwYWdlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gS2VlcCBzY3JvbGwgaW4gdGhlIHRvcFxyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNob3cgcGFnZVxyXG4gICAgICAgICAgICAgICAgcGFnZS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBwYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBMZWF2ZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihjdXJyZW50Lm9wdGlvbnMub25sZWF2ZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQub3B0aW9ucy5vbmxlYXZlKGN1cnJlbnQsIHBhZ2UsIGlnbm9yZUhpc3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGpTdWl0ZXMuc2xpZGVMZWZ0KGNvbnRhaW5lciwgKGEgPCBiID8gMCA6IDEpLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHBhZ2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFbnRlclxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihwYWdlLm9wdGlvbnMub25lbnRlcikgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2Uub3B0aW9ucy5vbmVudGVyKHBhZ2UsIGN1cnJlbnQsIGlnbm9yZUhpc3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gU2hvd1xyXG4gICAgICAgICAgICBwYWdlLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHJcbiAgICAgICAgICAgIC8vIEtlZXAgY3VycmVudFxyXG4gICAgICAgICAgICBjdXJyZW50ID0gcGFnZTtcclxuXHJcbiAgICAgICAgICAgIC8vIEVudGVyXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YocGFnZS5vcHRpb25zLm9uZW50ZXIpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHBhZ2Uub3B0aW9ucy5vbmVudGVyKHBhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgaGlzdG9yeVxyXG4gICAgICAgIGlmICghIGlnbm9yZUhpc3RvcnkpIHtcclxuICAgICAgICAgICAgLy8gQWRkIGhpc3RvcnlcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgcm91dGU6IHBhZ2Uub3B0aW9ucy5yb3V0ZSB9LCBwYWdlLm9wdGlvbnMudGl0bGUsIHBhZ2Uub3B0aW9ucy5yb3V0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDYWxsYmFja1xyXG4gICAgICAgIGlmICh0eXBlb2YoY2FsbGJhY2spID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2socGFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXQgbWV0aG9kXHJcbiAgICB2YXIgb2JqID0gZnVuY3Rpb24ocm91dGUsIG1peGVkKSB7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBwYWdlIGNvbnRhaW5lclxyXG4gICAgICAgIGlmICghIGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZXMnKTtcclxuICAgICAgICAgICAgaWYgKCEgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAncGFnZXMnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgY29udGFpbmVyIHRvIHRoZSBhcHBsaWNhdGlvblxyXG4gICAgICAgICAgICBpZiAoalN1aXRlcy5lbCkge1xyXG4gICAgICAgICAgICAgICAgalN1aXRlcy5lbC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoISBvYmoucGFnZXNbcm91dGVdKSB7XHJcbiAgICAgICAgICAgIGlmICghIHJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnRXJyb3IsIG5vIHJvdXRlIHByb3ZpZGVkJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG1peGVkKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBtaXhlZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFnZSBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBtaXhlZCA/IG1peGVkIDoge307XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2xvc2VkXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNsb3NlZCA9IG1peGVkICYmIG1peGVkLmNsb3NlZCA/IDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgLy8gS2VlcCBSb3V0ZVxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yb3V0ZSA9IHJvdXRlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE5ldyBwYWdlIHVybFxyXG4gICAgICAgICAgICAgICAgaWYgKCEgb3B0aW9ucy51cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm91dGVQYXRoID0gcm91dGUuc3BsaXQoJyMnKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IGpTdWl0ZXMucGFnZXMucGF0aCArIHJvdXRlUGF0aFswXSArICcuaHRtbCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBUaXRsZVxyXG4gICAgICAgICAgICAgICAgaWYgKCEgb3B0aW9ucy50aXRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudGl0bGUgPSAnVW50aXRsZWQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgcGFnZVxyXG4gICAgICAgICAgICAgICAgb2JqLnBhZ2VzW3JvdXRlXSA9IGNyZWF0ZVBhZ2Uob3B0aW9ucywgY2FsbGJhY2sgPyBjYWxsYmFjayA6IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGNvbmZpZ1xyXG4gICAgICAgICAgICBpZiAobWl4ZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIEhpc3RvcnlcclxuICAgICAgICAgICAgICAgIHZhciBpZ25vcmVIaXN0b3J5ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG1peGVkKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gbWl4ZWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YobWl4ZWQub25lbnRlcikgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucGFnZXNbcm91dGVdLm9wdGlvbnMub25lbnRlciA9IG1peGVkLm9uZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YobWl4ZWQub25sZWF2ZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucGFnZXNbcm91dGVdLm9wdGlvbnMub25sZWF2ZSA9IG1peGVkLm9ubGVhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgaGlzdG9yeVxyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZUhpc3RvcnkgPSBtaXhlZC5pZ25vcmVIaXN0b3J5ID8gMSA6IDA7IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaG93UGFnZShvYmoucGFnZXNbcm91dGVdLCBpZ25vcmVIaXN0b3J5LCBjYWxsYmFjayA/IGNhbGxiYWNrIDogbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5wYWdlcyA9IHt9O1xyXG5cclxuICAgIC8vIEdldCBwYWdlXHJcbiAgICBvYmouZ2V0ID0gZnVuY3Rpb24ocm91dGUpIHtcclxuICAgICAgICBpZiAob2JqLnBhZ2VzW3JvdXRlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqLnBhZ2VzW3JvdXRlXTsgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5nZXRDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gQ3VycmVudCBpcyBudWxsXHJcbiAgICAgICAgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgLy8gRGVzdHJveSBjb250YWluZXJzXHJcbiAgICAgICAgb2JqLnBhZ2VzID0ge307XHJcbiAgICAgICAgLy8gUmVzZXQgY29udGFpbmVyXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pKCk7XHJcblxyXG4vLyBQYXRoXHJcbmpTdWl0ZXMucGFnZXMucGF0aCA9ICdwYWdlcyc7XHJcblxyXG4vLyBQYW5lbFxyXG5qU3VpdGVzLnBhbmVsID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gTm8gaW5pdGlhbCBwYW5lbCBkZWNsYXJlZFxyXG4gICAgdmFyIHBhbmVsID0gbnVsbDtcclxuXHJcbiAgICB2YXIgb2JqID0gZnVuY3Rpb24ocm91dGUpIHtcclxuICAgICAgICBpZiAoISBwYW5lbCkge1xyXG4gICAgICAgICAgICBvYmouY3JlYXRlKGpTdWl0ZXMucGFnZXMucGF0aCArIHJvdXRlICsgJy5odG1sJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaG93IHBhbmVsXHJcbiAgICAgICAgcGFuZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBZGQgYW5pbWF0aW9uXHJcbiAgICAgICAgaWYgKHBhbmVsLmNsYXNzTGlzdC5jb250YWlucygncGFuZWwtbGVmdCcpKSB7XHJcbiAgICAgICAgICAgIGpTdWl0ZXMuc2xpZGVMZWZ0KHBhbmVsLCAxKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlUmlnaHQocGFuZWwsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmouY3JlYXRlID0gZnVuY3Rpb24ocm91dGUpIHtcclxuICAgICAgICBpZiAoISBwYW5lbCkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgZWxlbWVudFxyXG4gICAgICAgICAgICBwYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCdwYW5lbCcpO1xyXG4gICAgICAgICAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCdwYW5lbC1sZWZ0Jyk7XHJcbiAgICAgICAgICAgIHBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBCaW5kIHRvIHRoZSBhcHBcclxuICAgICAgICAgICAgaWYgKGpTdWl0ZXMuZWwpIHtcclxuICAgICAgICAgICAgICAgIGpTdWl0ZXMuZWwuYXBwZW5kQ2hpbGQocGFuZWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwYW5lbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW90ZSBjb250ZW50XHJcbiAgICAgICAgaWYgKHJvdXRlKSB7XHJcblx0ICAgICAgICB2YXIgdXJsID0galN1aXRlcy5wYWdlcy5wYXRoICsgcm91dGUgKyAnLmh0bWwnO1xyXG5cclxuICAgICAgICAgICAgalN1aXRlcy5hamF4KHtcclxuICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwuaW5uZXJIVE1MID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBqYXZhc2NyaXB0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHBhbmVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gcG9zc2libGUgaW5saW5lIHNjcmlwdHNcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHNjcmlwdFtpXS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgdHlwZSB8fCB0eXBlID09ICd0ZXh0L2phdmFzY3JpcHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKHNjcmlwdFtpXS5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHBhbmVsKSB7XHJcbiAgICAgICAgICAgIC8vIEFuaW1hdGlvblxyXG4gICAgICAgICAgICBpZiAocGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdwYW5lbC1sZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIGpTdWl0ZXMuc2xpZGVMZWZ0KHBhbmVsLCAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqU3VpdGVzLnNsaWRlUmlnaHQocGFuZWwsIDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmouZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcGFuZWwucmVtb3ZlKCk7XHJcbiAgICAgICAgcGFuZWwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pKCk7XHJcblxyXG5qU3VpdGVzLnRvb2xiYXIgPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIG9iai5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICBvYmouc2VsZWN0SXRlbSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSB0b29sYmFyQ29udGVudC5jaGlsZHJlbjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGpTdWl0ZXMuc2xpZGVCb3R0b20odG9vbGJhciwgMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouc2hvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIGpTdWl0ZXMuc2xpZGVCb3R0b20odG9vbGJhciwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmdldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0b29sYmFyO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5zZXRCYWRnZSA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgIHRvb2xiYXJDb250ZW50LmNoaWxkcmVuW2luZGV4XS5jaGlsZHJlblsxXS5maXJzdENoaWxkLmlubmVySFRNTCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdG9vbGJhci5yZW1vdmUoKTtcclxuICAgICAgICB0b29sYmFyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdG9vbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdG9vbGJhci5jbGFzc0xpc3QuYWRkKCdqdG9vbGJhcicpO1xyXG4gICAgdG9vbGJhci5vbmNsaWNrID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0galN1aXRlcy5nZXRFbGVtZW50KGUudGFyZ2V0LCAnanRvb2xiYXItaXRlbScpO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIG9iai5zZWxlY3RJdGVtKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgdG9vbGJhckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQodG9vbGJhckNvbnRlbnQpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciB0b29sYmFySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRvb2xiYXJJdGVtLmNsYXNzTGlzdC5hZGQoJ2p0b29sYmFyLWl0ZW0nKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtc1tpXS5yb3V0ZSkge1xyXG4gICAgICAgICAgICB0b29sYmFySXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicsIG9wdGlvbnMuaXRlbXNbaV0ucm91dGUpO1xyXG4gICAgICAgICAgICBqU3VpdGVzLnBhZ2VzKG9wdGlvbnMuaXRlbXNbaV0ucm91dGUsIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9uZW50ZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5zZWxlY3RJdGVtKHRvb2xiYXJJdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtc1tpXS5pY29uKSB7XHJcbiAgICAgICAgICAgIHZhciB0b29sYmFySWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICAgICAgdG9vbGJhckljb24uY2xhc3NMaXN0LmFkZCgnbWF0ZXJpYWwtaWNvbnMnKTtcclxuICAgICAgICAgICAgdG9vbGJhckljb24uaW5uZXJIVE1MID0gb3B0aW9ucy5pdGVtc1tpXS5pY29uO1xyXG4gICAgICAgICAgICB0b29sYmFySXRlbS5hcHBlbmRDaGlsZCh0b29sYmFySWNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdG9vbGJhckJhZGdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG9vbGJhckJhZGdlLmNsYXNzTGlzdC5hZGQoJ2piYWRnZScpO1xyXG4gICAgICAgIHZhciB0b29sYmFyQmFkZ2VDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG9vbGJhckJhZGdlQ29udGVudC5pbm5lckhUTUwgPSBvcHRpb25zLml0ZW1zW2ldLmJhZGdlID8gb3B0aW9ucy5pdGVtc1tpXS5iYWRnZSA6ICcnO1xyXG4gICAgICAgIHRvb2xiYXJCYWRnZS5hcHBlbmRDaGlsZCh0b29sYmFyQmFkZ2VDb250ZW50KTtcclxuICAgICAgICB0b29sYmFySXRlbS5hcHBlbmRDaGlsZCh0b29sYmFyQmFkZ2UpO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtc1tpXS50aXRsZSkge1xyXG4gICAgICAgICAgICB2YXIgdG9vbGJhclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICB0b29sYmFyVGl0bGUuaW5uZXJIVE1MID0gb3B0aW9ucy5pdGVtc1tpXS50aXRsZTtcclxuICAgICAgICAgICAgdG9vbGJhckl0ZW0uYXBwZW5kQ2hpbGQodG9vbGJhclRpdGxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvb2xiYXJDb250ZW50LmFwcGVuZENoaWxkKHRvb2xiYXJJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBlbC50b29sYmFyID0gb2JqO1xyXG5cclxuICAgIGVsLmFwcGVuZENoaWxkKHRvb2xiYXIpO1xyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pO1xyXG5cclxualN1aXRlcy5hY3Rpb25zaGVldCA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBhY3Rpb25zaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYWN0aW9uc2hlZXQuY2xhc3NOYW1lID0gJ2phY3Rpb25zaGVldCc7XHJcbiAgICBhY3Rpb25zaGVldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgIHZhciBhY3Rpb25Db250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBhY3Rpb25Db250ZW50LmNsYXNzTmFtZSA9ICdqYWN0aW9uc2hlZXQtY29udGVudCc7XHJcbiAgICBhY3Rpb25zaGVldC5hcHBlbmRDaGlsZChhY3Rpb25Db250ZW50KTtcclxuXHJcbiAgICB2YXIgb2JqID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IGNvbnRhaW5lclxyXG4gICAgICAgIGFjdGlvbkNvbnRlbnQuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgZWxlbWVudHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5vcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpb25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBhY3Rpb25Hcm91cC5jbGFzc05hbWUgPSAnamFjdGlvbnNoZWV0LWdyb3VwJztcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLm9wdGlvbnNbaV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2ID0gb2JqLm9wdGlvbnNbaV1bal07XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbklucHV0LnR5cGUgPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgICAgIGFjdGlvbklucHV0LnZhbHVlID0gdi50aXRsZTtcclxuICAgICAgICAgICAgICAgIGlmICh2LmNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbklucHV0LmNsYXNzTmFtZSA9IHYuY2xhc3NOYW1lOyBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2Lm9uY2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25JbnB1dC5vbmNsaWNrID0gdi5vbmNsaWNrOyBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2LmFjdGlvbiA9PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbklucHV0LnN0eWxlLmNvbG9yID0gJ3JlZCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25JdGVtLmFwcGVuZENoaWxkKGFjdGlvbklucHV0KTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbkdyb3VwLmFwcGVuZENoaWxkKGFjdGlvbkl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhY3Rpb25Db250ZW50LmFwcGVuZENoaWxkKGFjdGlvbkdyb3VwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNob3dcclxuICAgICAgICBhY3Rpb25zaGVldC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZFxyXG4gICAgICAgIGpTdWl0ZXMuZWwuYXBwZW5kQ2hpbGQoYWN0aW9uc2hlZXQpO1xyXG5cclxuICAgICAgICAvLyBBbmltYXRpb25cclxuICAgICAgICBqU3VpdGVzLnNsaWRlQm90dG9tKGFjdGlvbkNvbnRlbnQsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5jbG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChhY3Rpb25zaGVldC5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGFjdGlvbnNoZWV0XHJcbiAgICAgICAgICAgIGpTdWl0ZXMuc2xpZGVCb3R0b20oYWN0aW9uQ29udGVudCwgZmFsc2UsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uc2hlZXQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25zaGVldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG1vdXNlVXAgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgb2JqLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWN0aW9uc2hlZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xyXG5cclxuICAgIG9iai5vcHRpb25zID0ge307XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiAoYykgalN1aXRlcyBtb2RhbFxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGF1bGhvZGVsL2pzdWl0ZXNcclxuICpcclxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XHJcbiAqIEBkZXNjcmlwdGlvbjogTW9kYWxcclxuICovXHJcblxyXG5qU3VpdGVzLm1vZGFsID0gKGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgb2JqID0ge307XHJcbiAgICBvYmoub3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIC8vIERlZmF1bHQgY29uZmlndXJhdGlvblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgIHVybDogbnVsbCxcclxuICAgICAgICBvbm9wZW46IG51bGwsXHJcbiAgICAgICAgb25jbG9zZTogbnVsbCxcclxuICAgICAgICBjbG9zZWQ6IGZhbHNlLFxyXG4gICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgIGhlaWdodDogbnVsbCxcclxuICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIG91ciBvYmplY3RcclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBUaXRsZVxyXG4gICAgaWYgKCEgb2JqLm9wdGlvbnMudGl0bGUgJiYgZWwuZ2V0QXR0cmlidXRlKCd0aXRsZScpKSB7XHJcbiAgICAgICAgb2JqLm9wdGlvbnMudGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0ZW1wLmFwcGVuZENoaWxkKGVsLmNoaWxkcmVuW2ldKTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgb2JqLmNvbnRlbnQuY2xhc3NOYW1lID0gJ2ptb2RhbF9jb250ZW50JztcclxuICAgIG9iai5jb250ZW50LmlubmVySFRNTCA9IGVsLmlubmVySFRNTDtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXAuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBvYmouY29udGVudC5hcHBlbmRDaGlsZCh0ZW1wLmNoaWxkcmVuW2ldKTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBvYmouY29udGFpbmVyLmNsYXNzTmFtZSA9ICdqbW9kYWwnO1xyXG4gICAgb2JqLmNvbnRhaW5lci5hcHBlbmRDaGlsZChvYmouY29udGVudCk7XHJcblxyXG4gICAgaWYgKG9iai5vcHRpb25zLndpZHRoKSB7XHJcbiAgICAgICAgb2JqLmNvbnRhaW5lci5zdHlsZS53aWR0aCA9IG9iai5vcHRpb25zLndpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYgKG9iai5vcHRpb25zLmhlaWdodCkge1xyXG4gICAgICAgIG9iai5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gb2JqLm9wdGlvbnMuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgaWYgKG9iai5vcHRpb25zLnRpdGxlKSB7XHJcbiAgICAgICAgb2JqLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgb2JqLm9wdGlvbnMudGl0bGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBvYmouY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vLXRpdGxlJyk7XHJcbiAgICB9XHJcbiAgICBlbC5pbm5lckhUTUwgPSAnJztcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBlbC5hcHBlbmRDaGlsZChvYmouY29udGFpbmVyKTtcclxuXHJcbiAgICAvLyBCYWNrZHJvcFxyXG4gICAgdmFyIGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBiYWNrZHJvcC5jbGFzc05hbWUgPSAnam1vZGFsX2JhY2tkcm9wJztcclxuICAgIGVsLmFwcGVuZENoaWxkKGJhY2tkcm9wKTtcclxuXHJcbiAgICBvYmoub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIC8vIEZ1bGxzY3JlZW5cclxuICAgICAgICBjb25zdCByZWN0ID0gb2JqLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBpZiAoalN1aXRlcy5nZXRXaW5kb3dXaWR0aCgpIDwgcmVjdC53aWR0aCkge1xyXG4gICAgICAgICAgICBvYmouY29udGFpbmVyLnN0eWxlLnRvcCA9ICcnO1xyXG4gICAgICAgICAgICBvYmouY29udGFpbmVyLnN0eWxlLmxlZnQgPSAnJztcclxuICAgICAgICAgICAgb2JqLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqbW9kYWxfZnVsbHNjcmVlbicpO1xyXG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlQm90dG9tKG9iai5jb250YWluZXIsIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJhY2tkcm9wLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDdXJyZW50XHJcbiAgICAgICAgalN1aXRlcy5tb2RhbC5jdXJyZW50ID0gb2JqO1xyXG4gICAgICAgIC8vIEV2ZW50XHJcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbm9wZW4pID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25vcGVuKGVsLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmoucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG9iai5jb250YWluZXIuc3R5bGUudG9wID0gJyc7XHJcbiAgICAgICAgb2JqLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBlbC5zdHlsZS5kaXNwbGF5ICE9ICdub25lJyA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouY2xvc2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIC8vIEJhY2tkcm9wXHJcbiAgICAgICAgYmFja2Ryb3Auc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIC8vIEN1cnJlbnRcclxuICAgICAgICBqU3VpdGVzLm1vZGFsLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgIC8vIFJlbW92ZSBmdWxsc2NyZWVuIGNsYXNzXHJcbiAgICAgICAgb2JqLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdqbW9kYWxfZnVsbHNjcmVlbicpO1xyXG4gICAgICAgIC8vIEV2ZW50XHJcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNsb3NlKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2xvc2UoZWwsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghIGpTdWl0ZXMubW9kYWwuaGFzRXZlbnRzKSB7XHJcbiAgICAgICAgalN1aXRlcy5tb2RhbC5jdXJyZW50ID0gb2JqO1xyXG5cclxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGpTdWl0ZXMubW9kYWwubW91c2VEb3duQ29udHJvbHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGpTdWl0ZXMubW9kYWwubW91c2VEb3duQ29udHJvbHMpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBqU3VpdGVzLm1vZGFsLm1vdXNlTW92ZUNvbnRyb2xzKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGpTdWl0ZXMubW9kYWwubW91c2VVcENvbnRyb2xzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBqU3VpdGVzLm1vZGFsLmtleURvd25Db250cm9scyk7XHJcblxyXG4gICAgICAgIGpTdWl0ZXMubW9kYWwuaGFzRXZlbnRzID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqLm9wdGlvbnMudXJsKSB7XHJcbiAgICAgICAgalN1aXRlcy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIG9iai5jb250ZW50LmlubmVySFRNTCA9IGRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgb2JqLm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gS2VlcCBvYmplY3QgYXZhaWxhYmxlIGZyb20gdGhlIG5vZGVcclxuICAgIGVsLm1vZGFsID0gb2JqO1xyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn0pO1xyXG5cclxualN1aXRlcy5tb2RhbC5jdXJyZW50ID0gbnVsbDtcclxualN1aXRlcy5tb2RhbC5wb3NpdGlvbiA9IG51bGw7XHJcblxyXG5qU3VpdGVzLm1vZGFsLmtleURvd25Db250cm9scyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgIGlmIChlLndoaWNoID09IDI3KSB7XHJcbiAgICAgICAgaWYgKGpTdWl0ZXMubW9kYWwuY3VycmVudCkge1xyXG4gICAgICAgICAgICBqU3VpdGVzLm1vZGFsLmN1cnJlbnQuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmpTdWl0ZXMubW9kYWwubW91c2VVcENvbnRyb2xzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgaWYgKGpTdWl0ZXMubW9kYWwuY3VycmVudCkge1xyXG4gICAgICAgIGpTdWl0ZXMubW9kYWwuY3VycmVudC5jb250YWluZXIuc3R5bGUuY3Vyc29yID0gJ2F1dG8nO1xyXG4gICAgfVxyXG4gICAgalN1aXRlcy5tb2RhbC5wb3NpdGlvbiA9IG51bGw7XHJcbn1cclxuXHJcbmpTdWl0ZXMubW9kYWwubW91c2VNb3ZlQ29udHJvbHMgPSBmdW5jdGlvbihlKSB7XHJcbiAgICBpZiAoalN1aXRlcy5tb2RhbC5jdXJyZW50ICYmIGpTdWl0ZXMubW9kYWwucG9zaXRpb24pIHtcclxuICAgICAgICBpZiAoZS53aGljaCA9PSAxIHx8IGUud2hpY2ggPT0gMykge1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBqU3VpdGVzLm1vZGFsLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICBqU3VpdGVzLm1vZGFsLmN1cnJlbnQuY29udGFpbmVyLnN0eWxlLnRvcCA9IChwb3NpdGlvblsxXSArIChlLmNsaWVudFkgLSBwb3NpdGlvblszXSkgKyAocG9zaXRpb25bNV0gLyAyKSkgKyAncHgnO1xyXG4gICAgICAgICAgICBqU3VpdGVzLm1vZGFsLmN1cnJlbnQuY29udGFpbmVyLnN0eWxlLmxlZnQgPSAocG9zaXRpb25bMF0gKyAoZS5jbGllbnRYIC0gcG9zaXRpb25bMl0pICsgKHBvc2l0aW9uWzRdIC8gMikpICsgJ3B4JztcclxuICAgICAgICAgICAgalN1aXRlcy5tb2RhbC5jdXJyZW50LmNvbnRhaW5lci5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgalN1aXRlcy5tb2RhbC5jdXJyZW50LmNvbnRhaW5lci5zdHlsZS5jdXJzb3IgPSAnYXV0byc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5qU3VpdGVzLm1vZGFsLm1vdXNlRG93bkNvbnRyb2xzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgalN1aXRlcy5tb2RhbC5wb3NpdGlvbiA9IFtdO1xyXG5cclxuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ptb2RhbCcpKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHRhcmdldCBpbmZvXHJcbiAgICAgICAgICAgIHZhciByZWN0ID0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgICAgICAgICAgIHZhciB5ID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSBlLmNsaWVudFg7XHJcbiAgICAgICAgICAgICAgICB2YXIgeSA9IGUuY2xpZW50WTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlY3Qud2lkdGggLSAoeCAtIHJlY3QubGVmdCkgPCA1MCAmJiAoeSAtIHJlY3QudG9wKSA8IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpTdWl0ZXMubW9kYWwuY3VycmVudC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgJiYgKHkgLSByZWN0LnRvcCkgPCA1MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggd2luZG93LmdldFNlbGVjdGlvbiApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5tb2RhbC5wb3NpdGlvbiA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN0LnRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jbGllbnRYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNsaWVudFksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAxMDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxualN1aXRlcy5ub3RpZmljYXRpb24gPSAoZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgICBpY29uOiBudWxsLFxyXG4gICAgICAgIG5hbWU6ICdOb3RpZmljYXRpb24nLFxyXG4gICAgICAgIGRhdGU6IG51bGwsXHJcbiAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgbWVzc2FnZTogbnVsbCxcclxuICAgICAgICB0aW1lb3V0OiA0MDAwLFxyXG4gICAgICAgIGF1dG9IaWRlOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlYWJsZTogdHJ1ZSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIG91ciBvYmplY3RcclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgbm90aWZpY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBub3RpZmljYXRpb24uY2xhc3NOYW1lID0gJ2pub3RpZmljYXRpb24nO1xyXG5cclxuICAgIHZhciBub3RpZmljYXRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG5vdGlmaWNhdGlvbkNvbnRhaW5lci5jbGFzc05hbWUgPSAnam5vdGlmaWNhdGlvbi1jb250YWluZXInO1xyXG4gICAgbm90aWZpY2F0aW9uLmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbkNvbnRhaW5lcik7XHJcblxyXG4gICAgdmFyIG5vdGlmaWNhdGlvbkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbm90aWZpY2F0aW9uSGVhZGVyLmNsYXNzTmFtZSA9ICdqbm90aWZpY2F0aW9uLWhlYWRlcic7XHJcbiAgICBub3RpZmljYXRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobm90aWZpY2F0aW9uSGVhZGVyKTtcclxuXHJcbiAgICB2YXIgbm90aWZpY2F0aW9uSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG5vdGlmaWNhdGlvbkltYWdlLmNsYXNzTmFtZSA9ICdqbm90aWZpY2F0aW9uLWltYWdlJztcclxuICAgIG5vdGlmaWNhdGlvbkhlYWRlci5hcHBlbmRDaGlsZChub3RpZmljYXRpb25JbWFnZSk7XHJcblxyXG4gICAgaWYgKG9iai5vcHRpb25zLmljb24pIHtcclxuICAgICAgICB2YXIgbm90aWZpY2F0aW9uSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIG5vdGlmaWNhdGlvbkljb24uc3JjID0gb2JqLm9wdGlvbnMuaWNvbjtcclxuICAgICAgICBub3RpZmljYXRpb25JbWFnZS5hcHBlbmRDaGlsZChub3RpZmljYXRpb25JY29uKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbm90aWZpY2F0aW9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbm90aWZpY2F0aW9uTmFtZS5jbGFzc05hbWUgPSAnam5vdGlmaWNhdGlvbi1uYW1lJztcclxuICAgIG5vdGlmaWNhdGlvbk5hbWUuaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMubmFtZTtcclxuICAgIG5vdGlmaWNhdGlvbkhlYWRlci5hcHBlbmRDaGlsZChub3RpZmljYXRpb25OYW1lKTtcclxuXHJcbiAgICBpZiAob2JqLm9wdGlvbnMuY2xvc2VhYmxlID09IHRydWUpIHtcclxuICAgICAgICB2YXIgbm90aWZpY2F0aW9uQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBub3RpZmljYXRpb25DbG9zZS5jbGFzc05hbWUgPSAnam5vdGlmaWNhdGlvbi1jbG9zZSc7XHJcbiAgICAgICAgbm90aWZpY2F0aW9uQ2xvc2Uub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBvYmouaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZmljYXRpb25IZWFkZXIuYXBwZW5kQ2hpbGQobm90aWZpY2F0aW9uQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBub3RpZmljYXRpb25EYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBub3RpZmljYXRpb25EYXRlLmNsYXNzTmFtZSA9ICdqbm90aWZpY2F0aW9uLWRhdGUnO1xyXG4gICAgbm90aWZpY2F0aW9uSGVhZGVyLmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbkRhdGUpO1xyXG5cclxuICAgIHZhciBub3RpZmljYXRpb25Db250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBub3RpZmljYXRpb25Db250ZW50LmNsYXNzTmFtZSA9ICdqbm90aWZpY2F0aW9uLWNvbnRlbnQnO1xyXG4gICAgbm90aWZpY2F0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbkNvbnRlbnQpO1xyXG5cclxuICAgIGlmIChvYmoub3B0aW9ucy50aXRsZSkge1xyXG4gICAgICAgIHZhciBub3RpZmljYXRpb25UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIG5vdGlmaWNhdGlvblRpdGxlLmNsYXNzTmFtZSA9ICdqbm90aWZpY2F0aW9uLXRpdGxlJztcclxuICAgICAgICBub3RpZmljYXRpb25UaXRsZS5pbm5lckhUTUwgPSBvYmoub3B0aW9ucy50aXRsZTtcclxuICAgICAgICBub3RpZmljYXRpb25Db250ZW50LmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvblRpdGxlKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbm90aWZpY2F0aW9uTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbm90aWZpY2F0aW9uTWVzc2FnZS5jbGFzc05hbWUgPSAnam5vdGlmaWNhdGlvbi1tZXNzYWdlJztcclxuICAgIG5vdGlmaWNhdGlvbk1lc3NhZ2UuaW5uZXJIVE1MID0gb2JqLm9wdGlvbnMubWVzc2FnZTtcclxuICAgIG5vdGlmaWNhdGlvbkNvbnRlbnQuYXBwZW5kQ2hpbGQobm90aWZpY2F0aW9uTWVzc2FnZSk7XHJcblxyXG4gICAgb2JqLnNob3cgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgaWYgKGpTdWl0ZXMuZ2V0V2luZG93V2lkdGgoKSA+IDgwMCkgeyBcclxuICAgICAgICAgICAgalN1aXRlcy5mYWRlSW4obm90aWZpY2F0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlVG9wKG5vdGlmaWNhdGlvbiwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGpTdWl0ZXMuZ2V0V2luZG93V2lkdGgoKSA+IDgwMCkgeyBcclxuICAgICAgICAgICAgalN1aXRlcy5mYWRlT3V0KG5vdGlmaWNhdGlvbiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub3RpZmljYXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBqU3VpdGVzLnNsaWRlVG9wKG5vdGlmaWNhdGlvbiwgMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub3RpZmljYXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIG9iai5zaG93KCk7XHJcblxyXG4gICAgaWYgKG9iai5vcHRpb25zLmF1dG9IaWRlID09IHRydWUpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBvYmouaGlkZSgpO1xyXG4gICAgICAgIH0sIG9iai5vcHRpb25zLnRpbWVvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChqU3VpdGVzLmdldFdpbmRvd1dpZHRoKCkgPCA4MDApIHtcclxuICAgICAgICBub3RpZmljYXRpb24uYWRkRXZlbnRMaXN0ZW5lcihcInN3aXBldXBcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBvYmouaGlkZSgpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSk7XHJcblxyXG5qU3VpdGVzLnJhdGluZyA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgICBudW1iZXI6IDUsXHJcbiAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgdG9vbHRpcDogWyAnVmVyeSBiYWQnLCAnQmFkJywgJ0F2ZXJhZ2UnLCAnR29vZCcsICdWZXJ5IGdvb2QnIF0sXHJcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uXHJcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IG9wdGlvbnNbcHJvcGVydHldO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zW3Byb3BlcnR5XSA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xhc3NcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pyYXRpbmcnKTtcclxuXHJcbiAgICAvLyBBZGQgZWxlbWVudHNcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMubnVtYmVyOyBpKyspIHtcclxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIChpICsgMSkpXHJcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgndGl0bGUnLCBvYmoub3B0aW9ucy50b29sdGlwW2ldKVxyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHZhbHVlXHJcbiAgICBvYmouc2V0VmFsdWUgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMubnVtYmVyOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZCgnanJhdGluZy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZSgnanJhdGluZy1vdmVyJyk7XHJcbiAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKCdqcmF0aW5nLXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9iai5vcHRpb25zLnZhbHVlID0gaW5kZXg7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jaGFuZ2UpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UoZWwsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iai5vcHRpb25zLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvYmoub3B0aW9ucy52YWx1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMubnVtYmVyOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCBvYmoub3B0aW9ucy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZCgnanJhdGluZy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEV2ZW50c1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICBpZiAoaW5kZXggIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PSBvYmoub3B0aW9ucy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgb2JqLnNldFZhbHVlKDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb2JqLnNldFZhbHVlKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMubnVtYmVyOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZCgnanJhdGluZy1vdmVyJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKCdqcmF0aW5nLW92ZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoub3B0aW9ucy5udW1iZXI7IGkrKykge1xyXG4gICAgICAgICAgICBlbC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKCdqcmF0aW5nLW92ZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5yYXRpbmcgPSBvYmo7XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIChjKSBJbWFnZSBzbGlkZXJcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxob2RlbC9qdG9vbHNcclxuICpcclxuICogQGF1dGhvcjogUGF1bCBIb2RlbCA8cGF1bC5ob2RlbEBnbWFpbC5jb20+XHJcbiAqIEBkZXNjcmlwdGlvbjogSW1hZ2UgU2xpZGVyXHJcbiAqL1xyXG5cclxualN1aXRlcy5zbGlkZXIgPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIG9iai5vcHRpb25zID0ge307XHJcbiAgICBvYmouY3VycmVudEltYWdlID0gbnVsbDtcclxuXHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIG9iai5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJdGVtc1xyXG4gICAgb2JqLm9wdGlvbnMuaXRlbXMgPSBbXTtcclxuXHJcbiAgICBpZiAoISBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzbGlkZXInKSkge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pzbGlkZXInKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lclxyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2pzbGlkZXItY29udGFpbmVyJztcclxuXHJcbiAgICAgICAgLy8gTW92ZSBjaGlsZHJlbiBpbnNpZGVcclxuICAgICAgICBpZiAoZWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBLZWVwIGNoaWxkcmVuIGl0ZW1zXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLml0ZW1zLnB1c2goZWwuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYmoub3B0aW9ucy5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLml0ZW1zW2ldLmNsYXNzTGlzdC5hZGQoJ2pmaWxlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBvYmoub3B0aW9ucy5pdGVtc1tpXS5zcmMubGFzdEluZGV4T2YoJy8nKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5pdGVtc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIG9iai5vcHRpb25zLml0ZW1zW2ldLnNyYyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLml0ZW1zW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJywgb2JqLm9wdGlvbnMuaXRlbXNbaV0uc3JjLnN1YnN0cihpbmRleCArIDEpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG9iai5vcHRpb25zLml0ZW1zW2ldLnNyYy5sYXN0SW5kZXhPZignLycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvYmoub3B0aW9ucy5pdGVtc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuICAgICAgICAvLyBBZGQgY2xvc2UgYnV0dG9tXHJcbiAgICAgICAgdmFyIGNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY2xvc2UuY2xhc3NOYW1lID0gJ2pzbGlkZXItY2xvc2UnO1xyXG4gICAgICAgIGNsb3NlLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNsb3NlLm9uY2xpY2sgPSAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIG9iai5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5hcHBlbmRDaGlsZChjbG9zZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBlbC5xdWVyeVNlbGVjdG9yKCdzbGlkZXItY29udGFpbmVyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLnNob3cgPSBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICBpZiAoISB0YXJnZXQpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGNvbnRhaW5lci5jaGlsZHJlblswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghIGNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ2pzbGlkZXItcHJldmlldycpKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqc2xpZGVyLXByZXZpZXcnKTtcclxuICAgICAgICAgICAgY2xvc2Uuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBIaWRlIGFsbCBpbWFnZXNcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb250YWluZXIuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNob3cgY2xpY2tlZCBvbmx5XHJcbiAgICAgICAgdGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAvLyBJcyB0aGVyZSBhbnkgcHJldmlvdXNcclxuICAgICAgICBpZiAodGFyZ2V0LnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnanNsaWRlci1sZWZ0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2pzbGlkZXItbGVmdCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSXMgdGhlcmUgYW55IG5leHRcclxuICAgICAgICBpZiAodGFyZ2V0Lm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqc2xpZGVyLXJpZ2h0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2pzbGlkZXItcmlnaHQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9iai5jdXJyZW50SW1hZ2UgPSB0YXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLm9wZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBvYmouc2hvdygpO1xyXG5cclxuICAgICAgICAvLyBFdmVudFxyXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25vcGVuKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9ub3BlbihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5jbG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdqc2xpZGVyLXByZXZpZXcnKTtcclxuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnanNsaWRlci1sZWZ0Jyk7XHJcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2pzbGlkZXItcmlnaHQnKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsb3NlLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHJcbiAgICAgICAgb2JqLmN1cnJlbnRJbWFnZSA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEV2ZW50XHJcbiAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNsb3NlKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2xvc2UoZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmoucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmFkZEZpbGUgPSBmdW5jdGlvbih2LCBpZ25vcmVFdmVudHMpIHtcclxuICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1sYXN0bW9kaWZpZWQnLCB2Lmxhc3Rtb2RpZmllZCk7XHJcbiAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJywgdi5uYW1lKTtcclxuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCB2LnNpemUpO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXh0ZW5zaW9uJywgdi5leHRlbnNpb24pO1xyXG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtY292ZXInLCB2LmNvdmVyKTtcclxuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdzcmMnLCB2LmZpbGUpO1xyXG4gICAgICAgIGltZy5jbGFzc05hbWUgPSAnamZpbGUnO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgIG9iai5vcHRpb25zLml0ZW1zLnB1c2goaW1nKTtcclxuXHJcbiAgICAgICAgLy8gT25jaGFuZ2VcclxuICAgICAgICBpZiAoISBpZ25vcmVFdmVudHMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UoZWwsIHYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5hZGRGaWxlcyA9IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBvYmouYWRkRmlsZShmaWxlc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5uZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKG9iai5jdXJyZW50SW1hZ2UubmV4dFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgb2JqLnNob3cob2JqLmN1cnJlbnRJbWFnZS5uZXh0U2libGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvYmoucHJldiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChvYmouY3VycmVudEltYWdlLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICBvYmouc2hvdyhvYmouY3VycmVudEltYWdlLnByZXZpb3VzU2libGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5nZXREYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGpTdWl0ZXMuZ2V0RmlsZXMoY29udGFpbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBlbmQgZGF0YVxyXG4gICAgaWYgKG9iai5vcHRpb25zLmRhdGEgJiYgb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5vcHRpb25zLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmRhdGFbaV0pIHtcclxuICAgICAgICAgICAgICAgIG9iai5hZGRGaWxlKG9iai5vcHRpb25zLmRhdGFbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbG93IGluc2VydFxyXG4gICAgaWYgKG9iai5vcHRpb25zLmFsbG93QXR0YWNobWVudCkge1xyXG4gICAgICAgIHZhciBhdHRhY2htZW50SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgIGF0dGFjaG1lbnRJbnB1dC50eXBlID0gJ2ZpbGUnO1xyXG4gICAgICAgIGF0dGFjaG1lbnRJbnB1dC5jbGFzc05hbWUgPSAnc2xpZGVyLWF0dGFjaG1lbnQnO1xyXG4gICAgICAgIGF0dGFjaG1lbnRJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS8qJyk7XHJcbiAgICAgICAgYXR0YWNobWVudElucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgYXR0YWNobWVudElucHV0Lm9uY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmZpbGVzW2ldLnR5cGUuc3BsaXQoJy8nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZVswXSA9PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IHRoaXMuZmlsZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb24uc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb25bZXh0ZW5zaW9uLmxlbmd0aC0xXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHRoaXMuZmlsZXNbaV0uc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5maWxlc1tpXS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb246IGV4dGVuc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY292ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Rtb2RpZmllZDogdGhpcy5maWxlc1tpXS5sYXN0TW9kaWZpZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWFkZXJbaV0gPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlcltpXS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmZpbGUgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5hZGRGaWxlKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyW2ldLnJlYWRBc0RhdGFVUkwodGhpcy5maWxlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGUgZXh0ZW5zaW9uIGlzIG5vdCBhbGxvd2VkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYXR0YWNobWVudEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgYXR0YWNobWVudEljb24uaW5uZXJIVE1MID0gJ2F0dGFjaG1lbnQnO1xyXG4gICAgICAgIGF0dGFjaG1lbnRJY29uLmNsYXNzTmFtZSA9ICdqc2xpZGVyLWF0dGFjaCBtYXRlcmlhbC1pY29ucyc7XHJcbiAgICAgICAgYXR0YWNobWVudEljb24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBqU3VpdGVzLmNsaWNrKGF0dGFjaG1lbnRJbnB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbC5hcHBlbmRDaGlsZChhdHRhY2htZW50SW5wdXQpO1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGF0dGFjaG1lbnRJY29uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdXNoIHRvIHJlZnJlc2hcclxuICAgIHZhciBsb25nVG91Y2hUaW1lciA9IG51bGw7XHJcblxyXG4gICAgdmFyIG1vdXNlRG93biA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSA9PSAnSU1HJykge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmVcclxuICAgICAgICAgICAgdmFyIHRhcmdldEltYWdlID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGxvbmdUb3VjaFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5zcmMuc3Vic3RyKDAsNCkgPT0gJ2RhdGEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2pyZW1vdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdqcmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnanJlbW92ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBPbmNoYW5nZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY2hhbmdlKGVsLCBlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgbW91c2VVcCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAobG9uZ1RvdWNoVGltZXIpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxvbmdUb3VjaFRpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9wZW4gc2xpZGVyXHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT0gJ0lNRycpIHtcclxuICAgICAgICAgICAgaWYgKCEgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcmVtb3ZlJykpIHtcclxuICAgICAgICAgICAgICAgIG9iai5zaG93KGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEFycm93IGNvbnRyb2xzXHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGllbnRXaWR0aCAtIGUub2Zmc2V0WCA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTaG93IG5leHQgaW1hZ2VcclxuICAgICAgICAgICAgICAgIG9iai5uZXh0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5vZmZzZXRYIDwgNDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFNob3cgcHJldmlvdXMgaW1hZ2VcclxuICAgICAgICAgICAgICAgIG9iai5wcmV2KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlRG93bik7XHJcbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdXNlRG93bik7XHJcbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xyXG4gICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgbW91c2VVcCk7XHJcblxyXG4gICAgLy8gQWRkIGdsb2JhbCBldmVudHNcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzd2lwZWxlZnRcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIG9iai5uZXh0KCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwic3dpcGVyaWdodFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgb2JqLnByZXYoKTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBlbC5zbGlkZXIgPSBvYmo7XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSk7XHJcblxyXG4vKipcbiAqIChjKSBqVG9vbHMgdjEuMC4xIC0gRWxlbWVudCBzb3J0aW5nXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGF1bGhvZGVsL2p0b29sc1xuICpcbiAqIEBhdXRob3I6IFBhdWwgSG9kZWwgPHBhdWwuaG9kZWxAZ21haWwuY29tPlxuICogQGRlc2NyaXB0aW9uOiBFbGVtZW50IGRyYWcgYW5kIGRyb3Agc29ydGluZ1xuICovXG5cbmpTdWl0ZXMuc29ydGluZyA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2pzb3J0aW5nJyk7XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgfSk7XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChlLnRhcmdldC5jbGllbnRIZWlnaHQgLyAyID4gZS5vZmZzZXRZKSB7XG4gICAgICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyVG9wID0gJzFweCBkb3R0ZWQgI2NjYyc7XG4gICAgICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyQm90dG9tID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyVG9wID0gJyc7XG4gICAgICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyQm90dG9tID0gJzFweCBkb3R0ZWQgI2NjYyc7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wYXRoWzBdLnN0eWxlLmJvcmRlclRvcCA9ICcnO1xuICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyQm90dG9tID0gJyc7XG4gICAgfSk7XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnBhdGhbMV0ucXVlcnlTZWxlY3RvcignLmRyYWdnaW5nJykuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICB9KTtcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZS5wYXRoWzFdLnF1ZXJ5U2VsZWN0b3IoJy5kcmFnZ2luZycpO1xuXG4gICAgICAgIGlmIChlLnRhcmdldC5jbGllbnRIZWlnaHQgLyAyID4gZS5vZmZzZXRZKSB7XG4gICAgICAgICAgICBlLnBhdGhbMV0uaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGUucGF0aFswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnBhdGhbMV0uaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGUucGF0aFswXS5uZXh0U2libGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBlLnBhdGhbMF0uc3R5bGUuYm9yZGVyVG9wID0gJyc7XG4gICAgICAgIGUucGF0aFswXS5zdHlsZS5ib3JkZXJCb3R0b20gPSAnJztcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWwuY2hpbGRyZW5baV0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZWw7XG59KTtcclxuXHJcbmpTdWl0ZXMudGFicyA9IChmdW5jdGlvbihlbCwgb3B0aW9ucykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgb2JqLm9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgIGFsbG93Q3JlYXRlOiBmYWxzZSxcclxuICAgICAgICBvbmxvYWQ6IG51bGwsXHJcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXHJcbiAgICAgICAgb25jcmVhdGU6IG51bGwsXHJcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZSxcclxuICAgICAgICBjcmVhdGU6IG51bGwsXHJcbiAgICAgICAgYXV0b05hbWU6IGZhbHNlLFxyXG4gICAgICAgIHByZWZpeE5hbWU6ICcnLFxyXG4gICAgICAgIGhpZGVIZWFkZXJzOiBmYWxzZSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBpbml0aWFsIGNvbmZpZ3VyYXRpb25cclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGFzc1xyXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnanRhYnMnKTtcclxuXHJcbiAgICBpZiAob2JqLm9wdGlvbnMuYW5pbWF0aW9uID09IHRydWUpIHtcclxuICAgICAgICAvLyBCb3JkZXJcclxuICAgICAgICB2YXIgYm9yZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYm9yZGVyLmNsYXNzTmFtZSA9ICdqdGFicy1ib3JkZXInO1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGJvcmRlcik7XHJcblxyXG4gICAgICAgIHZhciBzZXRCb3JkZXIgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgcmVjdCA9IGhlYWRlcnMuY2hpbGRyZW5baW5kZXhdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB2YXIgcmVjdENvbnRlbnQgPSBjb250ZW50LmNoaWxkcmVuW2luZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgYm9yZGVyLnN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIGJvcmRlci5zdHlsZS5sZWZ0ID0gKHJlY3QubGVmdCAtIHJlY3RDb250ZW50LmxlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgYm9yZGVyLnN0eWxlLnRvcCA9IHJlY3QuaGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHZhbHVlXHJcbiAgICBvYmoub3BlbiA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkZXJzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZSgnanRhYnMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuY2hpbGRyZW5baV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZSgnanRhYnMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGVhZGVycy5jaGlsZHJlbltpbmRleF0uY2xhc3NMaXN0LmFkZCgnanRhYnMtc2VsZWN0ZWQnKTtcclxuICAgICAgICBpZiAoY29udGVudC5jaGlsZHJlbltpbmRleF0pIHtcclxuICAgICAgICAgICAgY29udGVudC5jaGlsZHJlbltpbmRleF0uY2xhc3NMaXN0LmFkZCgnanRhYnMtc2VsZWN0ZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhpZGVcclxuICAgICAgICBpZiAob2JqLm9wdGlvbnMuaGlkZUhlYWRlcnMgPT0gdHJ1ZSAmJiAoaGVhZGVycy5jaGlsZHJlbi5sZW5ndGggPCAyICYmIG9iai5vcHRpb25zLmFsbG93Q3JlYXRlID09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaGVhZGVycy5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIFNldCBib3JkZXJcclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmFuaW1hdGlvbiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEJvcmRlcihpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5zZWxlY3RJbmRleCA9IGZ1bmN0aW9uKGEpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGhlYWRlcnMuY2hpbGRyZW4sIGEpO1xyXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIG9iai5vcGVuKGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmNyZWF0ZSA9IGZ1bmN0aW9uKHRpdGxlLCBkaXYpIHtcclxuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLmNyZWF0ZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvYmoub3B0aW9ucy5jcmVhdGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmouYXBwZW5kRWxlbWVudCh0aXRsZSwgZGl2KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25jcmVhdGUpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9uY3JlYXRlKGVsLCBkaXYpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JqLmFwcGVuZEVsZW1lbnQgPSBmdW5jdGlvbih0aXRsZSwgZGl2KSB7XHJcbiAgICAgICAgaWYgKCEgdGl0bGUpIHtcclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLmF1dG9OYW1lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IG9iai5vcHRpb25zLnByZWZpeE5hbWU7XHJcbiAgICAgICAgICAgICAgICB0aXRsZSArPSAnICcgKyAocGFyc2VJbnQoY29udGVudC5jaGlsZHJlbi5sZW5ndGgpICsgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBwcm9tcHQoJ1RpdGxlPycsICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgICAgIC8vIEFkZCBoZWFkZXJzXHJcbiAgICAgICAgICAgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaGVhZGVyLmlubmVySFRNTCA9IHRpdGxlO1xyXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuYWxsb3dDcmVhdGUpIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnMuaW5zZXJ0QmVmb3JlKGhlYWRlciwgaGVhZGVycy5sYXN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmRDaGlsZChoZWFkZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgY29udGVudFxyXG4gICAgICAgICAgICBpZiAoISBkaXYpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gICAgICAgICAgICAvLyBPcGVuIG5ldyB0YWJcclxuICAgICAgICAgICAgb2JqLnNlbGVjdEluZGV4KGhlYWRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENyZWF0ZSBmcm9tIGRhdGFcclxuICAgIGlmIChvYmoub3B0aW9ucy5kYXRhKSB7XHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBjb21wb25lbnQgaXMgYmxhbmtcclxuICAgICAgICBlbC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB2YXIgaGVhZGVycyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaGVhZGVycy5jbGFzc0xpc3QuYWRkKCdqdGFicy1oZWFkZXJzJyk7XHJcbiAgICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdqdGFicy1jb250ZW50Jyk7XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaGVhZGVycyk7XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY29udGVudCk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLm9wdGlvbnMuZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaGVhZGVyc0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaGVhZGVycy5hcHBlbmRDaGlsZChoZWFkZXJzSXRlbSk7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGNvbnRlbnRJdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGhlYWRlcnNJdGVtLmlubmVySFRNTCA9IG9iai5vcHRpb25zLmRhdGFbaV0udGl0bGU7XHJcbiAgICAgICAgICAgIGlmIChvYmoub3B0aW9ucy5kYXRhW2ldLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLmlubmVySFRNTCA9IG9iai5vcHRpb25zLmRhdGFbaV0uY29udGVudDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoub3B0aW9ucy5kYXRhW2ldLnVybCkge1xyXG4gICAgICAgICAgICAgICAgalN1aXRlcy5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9iai5vcHRpb25zLmRhdGFbaV0udXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5pbm5lckhUTUwgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25sb2FkKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5vbmxvYWQoZWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcGVuKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGVsLmNoaWxkcmVuWzBdICYmIGVsLmNoaWxkcmVuWzFdKSB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGZyb20gZXhpc3RpbmcgZWxlbWVudHNcclxuICAgICAgICB2YXIgaGVhZGVycyA9IGVsLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gZWwuY2hpbGRyZW5bMV07XHJcbiAgICAgICAgaGVhZGVycy5jbGFzc0xpc3QuYWRkKCdqdGFicy1oZWFkZXJzJyk7XHJcbiAgICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdqdGFicy1jb250ZW50Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIHZhciBoZWFkZXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBoZWFkZXJzLmNsYXNzTGlzdC5hZGQoJ2p0YWJzLWhlYWRlcnMnKTtcclxuICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5hZGQoJ2p0YWJzLWNvbnRlbnQnKTtcclxuICAgICAgICBlbC5hcHBlbmRDaGlsZChoZWFkZXJzKTtcclxuICAgICAgICBlbC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOZXdcclxuICAgIGlmIChvYmoub3B0aW9ucy5hbGxvd0NyZWF0ZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgdmFyIGFkZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICBhZGQuY2xhc3NOYW1lID0gJ2p0YWJzLWFkZCc7XHJcbiAgICAgICAgaGVhZGVycy5hcHBlbmRDaGlsZChhZGQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV2ZW50c1xyXG4gICAgaGVhZGVycy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09ICdESVYnKSB7XHJcbiAgICAgICAgICAgIG9iai5zZWxlY3RJbmRleChlLnRhcmdldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLmNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChoZWFkZXJzLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgIG9iai5vcGVuKDApO1xyXG4gICAgfVxyXG5cclxuICAgIGVsLnRhYnMgPSBvYmo7XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSk7XHJcblxyXG5qU3VpdGVzLnRhZ3MgPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIG9iai5vcHRpb25zID0ge307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBkZWZhdWx0c1xyXG4gICAgICogQHByb3BlcnR5IHsoc3RyaW5nfEFycmF5KX0gdmFsdWUgLSBJbml0aWFsIHZhbHVlIG9mIHRoZSBjb21wb250ZW50XHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gbGltaXQgLSBNYXggbnVtYmVyIG9mIHRhZ3MgaW5zaWRlIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gc2VhcmNoIC0gVGhlIFVSTCBmb3Igc3VnZ2VzdGlvbnNcclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwbGFjZWhvbGRlciAtIFRoZSBkZWZhdWx0IGluc3RydWN0aW9uIHRleHQgb24gdGhlIGVsZW1lbnRcclxuICAgICAqIEBwcm9wZXJ0eSB7dmFsaWRhdGlvbn0gdmFsaWRhdGlvbiAtIE1ldGhvZCB0byB2YWxpZGF0ZSB0aGUgdGFnc1xyXG4gICAgICogQHByb3BlcnR5IHtyZXF1ZXN0Q2FsbGJhY2t9IG9uYmVmb3JlY2hhbmdlIC0gTWV0aG9kIHRvIGJlIGV4ZWN1dGUgYmVmb3JlIGFueSBjaGFuZ2VzIG9uIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcHJvcGVydHkge3JlcXVlc3RDYWxsYmFja30gb25jaGFuZ2UgLSBNZXRob2QgdG8gYmUgZXhlY3V0ZSBhZnRlciBhbnkgY2hhbmdlcyBvbiB0aGUgZWxlbWVudFxyXG4gICAgICogQHByb3BlcnR5IHtyZXF1ZXN0Q2FsbGJhY2t9IG9uZm9jdXMgLSBNZXRob2QgdG8gYmUgZXhlY3V0ZSB3aGVuIG9uIGZvY3VzXHJcbiAgICAgKiBAcHJvcGVydHkge3JlcXVlc3RDYWxsYmFja30gb25ibHVyIC0gTWV0aG9kIHRvIGJlIGV4ZWN1dGUgd2hlbiBvbiBibHVyXHJcbiAgICAgKiBAcHJvcGVydHkge3JlcXVlc3RDYWxsYmFja30gb25sb2FkIC0gTWV0aG9kIHRvIGJlIGV4ZWN1dGUgd2hlbiB0aGUgZWxlbWVudCBpcyBsb2FkZWRcclxuICAgICAqL1xyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIGxpbWl0OiBudWxsLFxyXG4gICAgICAgIGxpbWl0TWVzc2FnZTogJ1RoZSBsaW1pdCBvZiBlbnRyaWVzIGlzOiAnLFxyXG4gICAgICAgIHNlYXJjaDogbnVsbCxcclxuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcclxuICAgICAgICB2YWxpZGF0aW9uOiBudWxsLFxyXG4gICAgICAgIG9uYmVmb3JlY2hhbmdlOiBudWxsLFxyXG4gICAgICAgIG9uY2hhbmdlOiBudWxsLFxyXG4gICAgICAgIG9uZm9jdXM6IG51bGwsXHJcbiAgICAgICAgb25ibHVyOiBudWxsLFxyXG4gICAgICAgIG9ubG9hZDogbnVsbCxcclxuICAgICAgICBjb2xvcnM6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aG91Z2ggdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvblxyXG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGVmYXVsdHMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmoub3B0aW9uc1twcm9wZXJ0eV0gPSBkZWZhdWx0c1twcm9wZXJ0eV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNlYXJjaCBoZWxwZXJzXHJcbiAgICB2YXIgc2VhcmNoQ29udGFpbmVyID0gbnVsbDtcclxuICAgIHZhciBzZWFyY2hUZXJtcyA9IG51bGw7XHJcbiAgICB2YXIgc2VhcmNoSW5kZXggPSAwO1xyXG4gICAgdmFyIHNlYXJjaFRpbWVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIG5ldyB0YWcgdG8gdGhlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7KD9zdHJpbmd8QXJyYXkpfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgbmV3IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgb2JqLmFkZCA9IGZ1bmN0aW9uKHZhbHVlLCBmb2N1cykge1xyXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25iZWZvcmVjaGFuZ2UpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdmFyIHYgPSBvYmoub3B0aW9ucy5vbmJlZm9yZWNoYW5nZShlbCwgb2JqLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICh2ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2xvc2Ugc2VhcmNoXHJcbiAgICAgICAgaWYgKHNlYXJjaENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBzZWFyY2hDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5vcHRpb25zLmxpbWl0ID4gMCAmJiBlbC5jaGlsZHJlbi5sZW5ndGggPj0gb2JqLm9wdGlvbnMubGltaXQpIHtcclxuICAgICAgICAgICAgYWxlcnQob2JqLm9wdGlvbnMubGltaXRNZXNzYWdlICsgJyAnICsgb2JqLm9wdGlvbnMubGltaXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEdldCBub2RlXHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZ2V0U2VsZWN0aW9uU3RhcnQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1peCBhcmd1bWVudCBzdHJpbmcgb3IgYXJyYXlcclxuICAgICAgICAgICAgaWYgKCEgdmFsdWUgfHwgdHlwZW9mKHZhbHVlKSA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IHZhbHVlID8gdmFsdWUgOiAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdqdGFncycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKGRpdiwgbm9kZS5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdqdGFncycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgbm9kZS5pbm5lclRleHQucmVwbGFjZShcIlxcblwiLCBcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5saW1pdCB8fCBlbC5jaGlsZHJlbi5sZW5ndGggPCBvYmoub3B0aW9ucy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSB2YWx1ZVtpXSA/IHZhbHVlW2ldIDogJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGxhY2UgY2FyZXRcclxuICAgICAgICAgICAgaWYgKGZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGRpdik7XHJcbiAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRmlsdGVyXHJcbiAgICAgICAgICAgIGZpbHRlcigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy5vbmNoYW5nZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMub25jaGFuZ2UoZWwsIG9iaiwgdmFsdWUgPyB2YWx1ZSA6ICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGFncyBpbiB0aGUgZWxlbWVudFxyXG4gICAgICogQHJldHVybiB7QXJyYXl9IGRhdGEgLSBBbGwgdGFncyBhcyBhbiBhcnJheVxyXG4gICAgICovXHJcbiAgICBvYmouZ2V0RGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmouZ2V0VmFsdWUoaSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gZWwuY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoISBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goeyBpZDogaWQsIHZhbHVlOiB2YWx1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdmFsdWUgb2Ygb25lIHRhZy4gTnVsbCBmb3IgYWxsIHRhZ3NcclxuICAgICAqIEBwYXJhbSB7P251bWJlcn0gaW5kZXggLSBUYWcgaW5kZXggbnVtYmVyLiBOdWxsIGZvciBhbGwgdGFncy5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdmFsdWUgLSBBbGwgdGFncyBzZXBhcmF0ZWQgYnkgY29tbWFcclxuICAgICAqL1xyXG4gICAgb2JqLmdldFZhbHVlID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBHZXQgb25lIGluZGl2aWR1YWwgdmFsdWVcclxuICAgICAgICAgICAgdmFsdWUgPSBlbC5jaGlsZHJlbltpbmRleF0uaW5uZXJUZXh0LnJlcGxhY2UoXCJcXG5cIiwgXCJcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gR2V0IGFsbFxyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLmNoaWxkcmVuW2ldLmlubmVyVGV4dC5yZXBsYWNlKFwiXFxuXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG9iai5nZXRWYWx1ZShpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFsdWUgPSBkYXRhLmpvaW4oJywnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYmFzZWQgb24gYSBzdHJpbmcgc2VwYXJldGVkIGJ5ICgsfDt8XFxyXFxuKVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gQSBzdHJpbmcgd2l0aCB0aGUgdGFnc1xyXG4gICAgICovXHJcbiAgICBvYmouc2V0VmFsdWUgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHdoaXRlc3BhY2VzXHJcbiAgICAgICAgdGV4dCA9IHRleHQudHJpbSgpO1xyXG5cclxuICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICAvLyBUYWdzXHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gZXh0cmFjdFRhZ3ModGV4dCk7XHJcbiAgICAgICAgICAgIC8vIEFkZCB0YWdzIHRvIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgIG9iai5hZGQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9iai5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGVsLmlubmVySFRNTCA9ICc8ZGl2Pjxicj48L2Rpdj4nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmVyaWZ5IGlmIGFsbCB0YWdzIGluIHRoZSBlbGVtZW50IGFyZSB2YWxpZFxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgb2JqLmlzVmFsaWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGVzdCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqdGFnc19lcnJvcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXN0Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlc3QgPT0gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBvbmUgZWxlbWVudCBmcm9tIHRoZSBzdWdnZXN0aW9ucyB0byB0aGUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBOb2RlIGVsZW1lbnQgaW4gdGhlIHN1Z2dlc3Rpb25zIGNvbnRhaW5lclxyXG4gICAgICovIFxyXG4gICAgb2JqLnNlbGVjdEluZGV4ID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIC8vIFJlc2V0IHRlcm1zXHJcbiAgICAgICAgc2VhcmNoVGVybXMgPSAnJztcclxuICAgICAgICB2YXIgbm9kZSA9IGdldFNlbGVjdGlvblN0YXJ0KCk7XHJcbiAgICAgICAgLy8gQXBwZW5kIHRleHQgdG8gdGhlIGNhcmV0XHJcbiAgICAgICAgbm9kZS5pbm5lclRleHQgPSBpdGVtLmNoaWxkcmVuWzFdLmlubmVyVGV4dDtcclxuICAgICAgICAvLyBTZXQgbm9kZSBpZFxyXG4gICAgICAgIGlmIChpdGVtLmNoaWxkcmVuWzFdLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKSB7XHJcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaXRlbS5jaGlsZHJlblsxXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENsb3NlIGNvbnRhaW5lclxyXG4gICAgICAgIGlmIChzZWFyY2hDb250YWluZXIpIHtcclxuICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgYW55IGVycm9yXHJcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdqdGFnc19lcnJvcicpO1xyXG4gICAgICAgIC8vIEFkZCBuZXcgaXRlbVxyXG4gICAgICAgIG9iai5hZGQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaCBmb3Igc3VnZ2VzdGlvbnNcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBub2RlIC0gVGFyZ2V0IG5vZGUgZm9yIGFueSBzdWdnZXN0aW9uc1xyXG4gICAgICovXHJcbiAgICBvYmouc2VhcmNoID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgYXBwZW5kIHNlYXJjaCBjb250YWluZXIgdG8gdGhlIERPTVxyXG4gICAgICAgIGlmICghIHNlYXJjaENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgZWwubmV4dFNpYmxpbmcpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzZWFyY2hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2p0YWdzX3NlYXJjaCcpO1xyXG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc2VhcmNoQ29udGFpbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNlYXJjaCBmb3JcclxuICAgICAgICB2YXIgdGVybXMgPSBub2RlLmFuY2hvck5vZGUubm9kZVZhbHVlO1xyXG5cclxuICAgICAgICAvLyBTZWFyY2hcclxuICAgICAgICBpZiAobm9kZS5hbmNob3JOb2RlLm5vZGVWYWx1ZSAmJiB0ZXJtcyAhPSBzZWFyY2hUZXJtcykge1xyXG4gICAgICAgICAgICAvLyBUZXJtc1xyXG4gICAgICAgICAgICBzZWFyY2hUZXJtcyA9IG5vZGUuYW5jaG9yTm9kZS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgIC8vIFJlc2V0IGluZGV4XHJcbiAgICAgICAgICAgIHNlYXJjaEluZGV4ID0gMDtcclxuICAgICAgICAgICAgLy8gR2V0IHJlbW92ZSByZXN1bHRzXHJcbiAgICAgICAgICAgIGpTdWl0ZXMuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IG9iai5vcHRpb25zLnNlYXJjaCArIHNlYXJjaFRlcm1zLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmludCByZXN1bHRzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGl0ZW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aCA8IDExID8gZGF0YS5sZW5ndGggOiAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbaV0uaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gZGF0YVtpXS5pbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW1nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBkYXRhW2ldLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gZGF0YVtpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2Lm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZWxlY3RJbmRleCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBpdGVtIHRvIHRoZSBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaENvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVzdHJveSB0YWdzIGVsZW1lbnRcclxuICAgIG9iai5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gQmluZCBldmVudHNcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGFnc01vdXNlVXApO1xyXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0YWdzS2V5RG93bik7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0YWdzS2V5VXApO1xyXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGFnc1Bhc3RlKTtcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRhZ3NGb2N1cyk7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRhZ3NCbHVyKTtcclxuICAgICAgICAvLyBSZW1vdmUgZWxlbWVudFxyXG4gICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBnZXRSYW5kb21Db2xvciA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIHJhbmQgPSBmdW5jdGlvbihtaW4sIG1heCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWluICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2hzbCgnICsgcmFuZCgxLCAzNjApICsgJywnICsgcmFuZCg0MCwgNzApICsgJyUsJyArIHJhbmQoNjUsIDcyKSArICclKSc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaWx0ZXIgdGFnc1xyXG4gICAgICovXHJcbiAgICB2YXIgZmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbGFiZWwgZGVzaWduXHJcbiAgICAgICAgICAgIGlmICghIG9iai5nZXRWYWx1ZShpKSkge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZSgnanRhZ3NfbGFiZWwnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoJ2p0YWdzX2xhYmVsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGlvbiBpbiBwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvYmoub3B0aW9ucy52YWxpZGF0aW9uKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5nZXRWYWx1ZShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy52YWxpZGF0aW9uKGVsLmNoaWxkcmVuW2ldLCBlbC5jaGlsZHJlbltpXS5pbm5lclRleHQsIGVsLmNoaWxkcmVuW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZCgnanRhZ3NfZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2p0YWdzX2Vycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKCdqdGFnc19lcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBsYWNlIGNhcmV0IGluIHRoZSBlbGVtZW50IG5vZGVcclxuICAgICAqL1xyXG4gICAgdmFyIGNhcmV0ID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICByYW5nZS5zZXRTdGFydChlLCBlLmlubmVyVGV4dC5sZW5ndGgpO1xyXG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHZhciBnZXRTZWxlY3Rpb25TdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuYW5jaG9yTm9kZTtcclxuICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUucGFyZW50Tm9kZSA6IG5vZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4dHJhY3QgdGFncyBmcm9tIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFJhdyBzdHJpbmdcclxuICAgICAqIEByZXR1cm4ge0FycmF5fSBkYXRhIC0gQXJyYXkgd2l0aCBleHRyYWN0ZWQgdGFnc1xyXG4gICAgICovXHJcbiAgICB2YXIgZXh0cmFjdFRhZ3MgPSBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cclxuICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG5cclxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cclxuICAgICAgICB2YXIgd29yZCA9ICcnO1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgd2hpdGVzcGFjZXNcclxuICAgICAgICB0ZXh0ID0gdGV4dC50cmltKCk7XHJcblxyXG4gICAgICAgIGlmICh0ZXh0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRbaV0gPT0gJywnIHx8IHRleHRbaV0gPT0gJzsnIHx8IHRleHRbaV0gPT0gJ1xcclxcbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2god29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmQgKz0gdGV4dFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaCh3b3JkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3NpbmcgZXZlbnQga2V5ZG93biBvbiB0aGUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIGUge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgdmFyIHRhZ3NLZXlEb3duID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vIEFuY2hvcm9mZnNldFxyXG4gICAgICAgIGFuY2hvck9mZnNldCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hbmNob3JPZmZzZXQ7XHJcblxyXG4gICAgICAgIC8vIFZlcmlmeSBjb250ZW50XHJcbiAgICAgICAgaWYgKCEgZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ29tbWFcclxuICAgICAgICBpZiAoZS53aGljaCA9PSA5IHx8IGUud2hpY2ggPT0gMTg2IHx8IGUud2hpY2ggPT0gMTg4KSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gd2luZG93LmdldFNlbGVjdGlvbigpLmFuY2hvck9mZnNldDtcclxuICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISBvYmoub3B0aW9ucy5saW1pdCB8fCBlbC5jaGlsZHJlbi5sZW5ndGggPCBvYmoub3B0aW9ucy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5hZGQoJycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMTMpIHtcclxuICAgICAgICAgICAgLy8gRW50ZXJcclxuICAgICAgICAgICAgaWYgKHNlYXJjaENvbnRhaW5lciAmJiBzZWFyY2hDb250YWluZXIuc3R5bGUuZGlzcGxheSAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgb2JqLnNlbGVjdEluZGV4KHNlYXJjaENvbnRhaW5lci5jaGlsZHJlbltzZWFyY2hJbmRleF0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuYW5jaG9yT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMubGltaXQgfHwgZWwuY2hpbGRyZW4ubGVuZ3RoIDwgb2JqLm9wdGlvbnMubGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmFkZCgnJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gMzgpIHtcclxuICAgICAgICAgICAgLy8gVXBcclxuICAgICAgICAgICAgaWYgKHNlYXJjaENvbnRhaW5lciAmJiBzZWFyY2hDb250YWluZXIuc3R5bGUuZGlzcGxheSAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLmNoaWxkcmVuW3NlYXJjaEluZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaEluZGV4LS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hDb250YWluZXIuY2hpbGRyZW5bc2VhcmNoSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT0gNDApIHtcclxuICAgICAgICAgICAgLy8gRG93blxyXG4gICAgICAgICAgICBpZiAoc2VhcmNoQ29udGFpbmVyICYmIHNlYXJjaENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ICE9ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hDb250YWluZXIuY2hpbGRyZW5bc2VhcmNoSW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoSW5kZXggPCA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoSW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlYXJjaENvbnRhaW5lci5jaGlsZHJlbltzZWFyY2hJbmRleF0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3NpbmcgZXZlbnQga2V5dXAgb24gdGhlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBlIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciB0YWdzS2V5VXAgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUud2hpY2ggPT0gMzkpIHtcclxuICAgICAgICAgICAgdmFyIG4gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuYW5jaG9yT2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAobiA+IDEgJiYgbiA9PSBhbmNob3JPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIG9iai5hZGQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PSAxMyB8fCBlLndoaWNoID09IDM4IHx8IGUud2hpY2ggPT0gNDApIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2hUaW1lcikge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNlYXJjaFRpbWVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VhcmNoVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudCBub2RlXHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIC8vIFNlYXJjaFxyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnNlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5zZWFyY2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUaW1lciA9IG51bGw7XHJcbiAgICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaWx0ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3NpbmcgZXZlbnQgcGFzdGUgb24gdGhlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBlIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciB0YWdzUGFzdGUgPSAgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmIChlLmNsaXBib2FyZERhdGEgfHwgZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSAoZS5vcmlnaW5hbEV2ZW50IHx8IGUpLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9odG1sJyk7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gKGUub3JpZ2luYWxFdmVudCB8fCBlKS5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnSHRtbCcpO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9iai5zZXRWYWx1ZSh0ZXh0KTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzaW5nIGV2ZW50IG1vdXNldXAgb24gdGhlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBlIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciB0YWdzTW91c2VVcCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50Tm9kZSAmJiBlLnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnanRhZ3MnKSkge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqdGFnc19sYWJlbCcpIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnanRhZ3NfZXJyb3InKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY3Qud2lkdGggLSAoZS5jbGllbnRYIC0gcmVjdC5sZWZ0KSA8IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZWFyY2hDb250YWluZXIpIHtcclxuICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzaW5nIGV2ZW50IGZvY3VzIG9uIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gZSB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgdGFnc0ZvY3VzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICghIGVsLmNoaWxkcmVuLmxlbmd0aCB8fCBvYmouZ2V0VmFsdWUoZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgaWYgKCEgb2JqLm9wdGlvbnMubGltaXQgfHwgZWwuY2hpbGRyZW4ubGVuZ3RoIDwgb2JqLm9wdGlvbnMubGltaXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uZm9jdXMpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnMub25mb2N1cyhlbCwgb2JqLCBvYmouZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2luZyBldmVudCBibHVyIG9uIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gZSB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgdGFnc0JsdXIgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKHNlYXJjaENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBsYWJlbCBkZXNpZ25cclxuICAgICAgICAgICAgaWYgKCEgb2JqLmdldFZhbHVlKGkpKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVDaGlsZChlbC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25ibHVyKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG9iai5vcHRpb25zLm9uYmx1cihlbCwgb2JqLCBvYmouZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEJpbmQgZXZlbnRzXHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGFnc01vdXNlVXApO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRhZ3NLZXlEb3duKTtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGFnc0tleVVwKTtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGFnc1Bhc3RlKTtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGFnc0ZvY3VzKTtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0YWdzQmx1cik7XHJcblxyXG4gICAgLy8gUHJlcGFyZSBjb250YWluZXJcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2p0YWdzJyk7XHJcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgZWwuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgZmFsc2UpO1xyXG5cclxuICAgIGlmIChvYmoub3B0aW9ucy5wbGFjZWhvbGRlcikge1xyXG4gICAgICAgIGVsLnBsYWNlaG9sZGVyID0gb2JqLm9wdGlvbnMucGxhY2Vob2xkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFrZSBzdXJlIGVsZW1lbnQgaXMgZW1wdHlcclxuICAgIGlmIChvYmoub3B0aW9ucy52YWx1ZSkge1xyXG4gICAgICAgIG9iai5zZXRWYWx1ZShvYmoub3B0aW9ucy52YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsLmlubmVySFRNTCA9ICc8ZGl2Pjxicj48L2Rpdj4nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25sb2FkKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgb2JqLm9wdGlvbnMub25sb2FkKGVsLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGVsLnRhZ3MgPSBvYmo7XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxufSk7XHJcblxyXG5qU3VpdGVzLnRyYWNrZXIgPSAoZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIG9iai5vcHRpb25zID0ge307XHJcblxyXG4gICAgLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uXHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgdXJsOiBudWxsLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdBcmUgeW91IHN1cmU/IFRoZXJlIGFyZSB1bnNhdmVkIGluZm9ybWF0aW9uIGluIHlvdXIgZm9ybScsXHJcbiAgICAgICAgaWdub3JlOiBmYWxzZSxcclxuICAgICAgICBjdXJyZW50SGFzaDogbnVsbCxcclxuICAgICAgICBzdWJtaXRCdXR0b246bnVsbCxcclxuICAgICAgICBvbmxvYWQ6IG51bGwsXHJcbiAgICAgICAgb25iZWZvcmVzYXZlOiBudWxsLFxyXG4gICAgICAgIG9uc2F2ZTogbnVsbCxcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIG91ciBvYmplY3RcclxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gb3B0aW9uc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLm9wdGlvbnNbcHJvcGVydHldID0gZGVmYXVsdHNbcHJvcGVydHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmouc2V0VXJsID0gZnVuY3Rpb24odXJsKSB7XHJcbiAgICAgICAgb2JqLm9wdGlvbnMudXJsID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgalN1aXRlcy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKTtcclxuIFxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKCduYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNbaV0udmFsdWUgPSBkYXRhW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9ubG9hZCkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRpb25zLm9ubG9hZChlbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvYmouc2F2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0ZXN0ID0gb2JqLnZhbGlkYXRlKCk7XHJcblxyXG4gICAgICAgIGlmICh0ZXN0KSB7XHJcbiAgICAgICAgICAgIGpTdWl0ZXMuYWxlcnQodGVzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBvYmouZ2V0RWxlbWVudHModHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mKG9iai5vcHRpb25zLm9uYmVmb3Jlc2F2ZSkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBvYmoub3B0aW9ucy5vbmJlZm9yZXNhdmUoZWwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPbmJlZm9yZXNhdmUgcmV0dXJuZWQgZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBqU3VpdGVzLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBvYmoub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgalN1aXRlcy5hbGVydChyZXN1bHQubWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqLm9wdGlvbnMub25zYXZlKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gb2JqLm9wdGlvbnMub25zYXZlKGVsLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmoudmFsaWRhdGVFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBlbWFpbENoZWNrZXIgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgvXihbXFx3LVxcLl0rQChbXFx3LV0rXFwuKStbXFx3LV17Miw0fSk/JC8pO1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KGRhdGEpID8gdHJ1ZSA6IGZhbHNlOyBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwYXNzd29yZENoZWNrZXIgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZGF0YS5sZW5ndGggPiA1KSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhZGRFcnJvciA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gQWRkIGVycm9yIGluIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgLy8gU3VibWl0IGJ1dHRvblxyXG4gICAgICAgICAgICBpZiAob2JqLm9wdGlvbnMuc3VibWl0QnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoub3B0aW9ucy5zdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJldHVybiBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1lcnJvcicpIHx8ICdUaGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgZm9ybSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZGVsRXJyb3IgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgY2xhc3MgZnJvbSB0aGlzIGVsZW1lbnRcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xyXG4gICAgICAgICAgICAvLyBHZXQgZWxlbWVudHMgaW4gdGhlIGZvcm1cclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWwucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhXCIpO1xyXG4gICAgICAgICAgICAvLyBSdW4gYWxsIGVsZW1lbnRzIFxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbGlkYXRpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50c1tpXS5jbGFzc0xpc3QuY29udGFpbnMoJ2Vycm9yJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9iai5vcHRpb25zLnN1Ym1pdEJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdGlvbnMuc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmxhbmtcclxuICAgICAgICB2YXIgdGVzdCA9ICcnO1xyXG4gICAgICAgIGlmICghIGVsZW1lbnQudmFsdWUpIHtcclxuICAgICAgICAgICAgdGVzdCA9IGFkZEVycm9yKGVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1haWwnKSAmJiAhIGVtYWlsQ2hlY2tlcihlbGVtZW50LnZhbHVlKSkge1xyXG4gICAgICAgICAgICB0ZXN0ID0gYWRkRXJyb3IoZWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzd29yZCcpICYmICEgZW1haWxDaGVja2VyKGVsZW1lbnQudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRlc3QgPSBhZGRFcnJvcihlbGVtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Vycm9yJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbEVycm9yKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGVzdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSdW4gZm9ybSB2YWxpZGF0aW9uXHJcbiAgICBvYmoudmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGVzdCA9ICcnO1xyXG4gICAgICAgIC8vIEdldCBlbGVtZW50cyBpbiB0aGUgZm9ybVxyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKTtcclxuICAgICAgICAvLyBSdW4gYWxsIGVsZW1lbnRzIFxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS12YWxpZGF0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdCArPSBcIjxicj5cXHJcXG5cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRlc3QgKz0gb2JqLnZhbGlkYXRlRWxlbWVudChlbGVtZW50c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgdGhlIGZvcm1cclxuICAgIG9iai5nZXRFcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFZhbGlkYXRpb25cclxuICAgICAgICByZXR1cm4gb2JqLnZhbGlkYXRpb24oKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGZvcm0gaGFzaFxyXG4gICAgb2JqLnNldEhhc2ggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gb2JqLmdldEhhc2gob2JqLmdldEVsZW1lbnRzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCB0aGUgZm9ybSBoYXNoXHJcbiAgICBvYmouZ2V0SGFzaCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyO1xyXG5cclxuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFzaDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xyXG4gICAgICAgICAgICAgIGhhc2ggfD0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhhc2g7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSXMgdGhlcmUgYW55IGNoYW5nZSBpbiB0aGUgZm9ybSBzaW5jZSBzdGFydCB0cmFja2luZz9cclxuICAgIG9iai5pc0NoYW5nZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGFzaCA9IG9iai5zZXRIYXNoKCk7XHJcbiAgICAgICAgcmV0dXJuIChvYmoub3B0aW9ucy5jdXJyZW50SGFzaCAhPSBoYXNoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXN0YXJ0IHRyYWNraW5nXHJcbiAgICBvYmoucmVzZXRUcmFja2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb2JqLm9wdGlvbnMuY3VycmVudEhhc2ggPSBvYmouc2V0SGFzaCgpO1xyXG4gICAgICAgIG9iai5vcHRpb25zLmlnbm9yZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG9iai5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG9iai5vcHRpb25zLmN1cnJlbnRIYXNoID0gb2JqLnNldEhhc2goKTtcclxuICAgICAgICBvYmoub3B0aW9ucy5pZ25vcmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZ25vcmUgZmxhZ1xyXG4gICAgb2JqLnNldElnbm9yZSA9IGZ1bmN0aW9uKGlnbm9yZUZsYWcpIHtcclxuICAgICAgICBvYmoub3B0aW9ucy5pZ25vcmUgPSBpZ25vcmVGbGFnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBmb3JtIGVsZW1lbnRzXHJcbiAgICBvYmouZ2V0RWxlbWVudHMgPSBmdW5jdGlvbihhc0FycmF5KSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWFcIik7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50Lm5hbWU7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXNBcnJheSA9PSB0cnVlID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXJ0IHRyYWNraW5nIGluIG9uZSBzZWNvbmRcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb2JqLm9wdGlvbnMuY3VycmVudEhhc2ggPSBvYmouc2V0SGFzaCgpO1xyXG4gICAgfSwgMTAwMCk7XHJcblxyXG4gICAgLy8gQWxlcnRcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKG9iai5pc0NoYW5nZWQoKSAmJiBvYmoub3B0aW9ucy5pZ25vcmUgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbk1lc3NhZ2UgPSAgb2JqLm9wdGlvbnMubWVzc2FnZT8gb2JqLm9wdGlvbnMubWVzc2FnZSA6IFwiXFxvL1wiO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbk1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZSA9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnJldHVyblZhbHVlID0gY29uZmlybWF0aW9uTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlybWF0aW9uTWVzc2FnZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkKDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVmFsaWRhdGlvbnNcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWxpZGF0aW9uJykpIHtcclxuICAgICAgICAgICAgb2JqLnZhbGlkYXRlRWxlbWVudChlLnRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZWwudHJhY2tlciA9IG9iajtcclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG59KTtcclxuXHJcblxyXG5cclxuICAgIHJldHVybiBqU3VpdGVzO1xyXG5cclxufSkpKTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=